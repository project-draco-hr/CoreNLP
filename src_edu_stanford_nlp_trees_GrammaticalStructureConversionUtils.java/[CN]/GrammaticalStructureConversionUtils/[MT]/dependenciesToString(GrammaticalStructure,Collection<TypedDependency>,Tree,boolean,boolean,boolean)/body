{
  StringBuilder bf=new StringBuilder();
  Map<Integer,Integer> indexToPos=Generics.newHashMap();
  indexToPos.put(0,0);
  List<Tree> gsLeaves=gs.root.getLeaves();
  for (int i=0; i < gsLeaves.size(); i++) {
    TreeGraphNode leaf=(TreeGraphNode)gsLeaves.get(i);
    indexToPos.put(leaf.label.index(),i + 1);
  }
  if (conllx) {
    List<Tree> leaves=tree.getLeaves();
    List<Label> uposLabels=null;
    if (convertToUPOS) {
      Tree uposTree=UniversalPOSMapper.mapTree(tree);
      uposLabels=uposTree.preTerminalYield();
    }
 else {
      uposLabels=tree.preTerminalYield();
    }
    int index=0;
    CoreMap sentence=new CoreLabel();
    List<CoreLabel> tokens=new ArrayList<>(leaves.size());
    for (    Tree leaf : leaves) {
      index++;
      if (!indexToPos.containsKey(index)) {
        continue;
      }
      CoreLabel token=new CoreLabel();
      token.setIndex(index);
      token.setValue(leaf.value());
      token.setWord(leaf.value());
      token.setTag(leaf.parent(tree).value());
      token.set(CoreAnnotations.CoarseTagAnnotation.class,uposLabels.get(index - 1).value());
      tokens.add(token);
    }
    sentence.set(CoreAnnotations.TokensAnnotation.class,tokens);
    bf.append(dependenciesToCoNLLXString(deps,sentence));
  }
 else {
    if (extraSep) {
      List<TypedDependency> extraDeps=new ArrayList<>();
      for (      TypedDependency dep : deps) {
        if (dep.extra()) {
          extraDeps.add(dep);
        }
 else {
          bf.append(toStringIndex(dep,indexToPos));
          bf.append("\n");
        }
      }
      if (!extraDeps.isEmpty()) {
        bf.append("======\n");
        for (        TypedDependency dep : extraDeps) {
          bf.append(toStringIndex(dep,indexToPos));
          bf.append("\n");
        }
      }
    }
 else {
      for (      TypedDependency dep : deps) {
        bf.append(toStringIndex(dep,indexToPos));
        bf.append("\n");
      }
    }
  }
  return bf.toString();
}
