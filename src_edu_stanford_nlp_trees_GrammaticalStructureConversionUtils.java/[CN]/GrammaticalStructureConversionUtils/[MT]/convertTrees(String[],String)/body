{
  Iterable<GrammaticalStructure> gsBank=null;
  Properties props=StringUtils.argsToProperties(args);
  String language=props.getProperty("language",defaultLang);
  ConverterOptions opts=ConverterOptions.getConverterOptions(language);
  MemoryTreebank tb=new MemoryTreebank(opts.treeNormalizer);
  Iterable<Tree> trees=tb;
  String encoding=props.getProperty("encoding","utf-8");
  try {
    System.setOut(new PrintStream(System.out,true,encoding));
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  String treeFileName=props.getProperty("treeFile");
  String sentFileName=props.getProperty("sentFile");
  String conllXFileName=props.getProperty("conllxFile");
  String altDepPrinterName=props.getProperty("altprinter");
  String altDepReaderName=props.getProperty("altreader");
  String altDepReaderFilename=props.getProperty("altreaderfile");
  String filter=props.getProperty("filter");
  boolean makeCopulaHead=props.getProperty("makeCopulaHead") != null;
  boolean generateOriginalDependencies=props.getProperty("originalDependencies") != null || opts.stanfordDependencies;
  String tLPP=props.getProperty("tLPP",opts.tlPPClassName);
  TreebankLangParserParams params=ReflectionLoading.loadByReflection(tLPP);
  params.setGenerateOriginalDependencies(generateOriginalDependencies);
  if (makeCopulaHead) {
    String[] options={"-makeCopulaHead"};
    params.setOptionFlag(options,0);
  }
  if (sentFileName == null && (altDepReaderName == null || altDepReaderFilename == null) && treeFileName == null && conllXFileName == null && filter == null) {
    try {
      System.err.printf("Usage: java %s%n",GrammaticalStructure.class.getCanonicalName());
      System.err.println("Options:");
      System.err.println("  Dependency representation:");
      System.err.println("    -basic:\t\tGenerate basic dependencies.");
      System.err.println("    -enhanced:\t\tGenerate enhanced dependencies, currently only implemented for English UD.");
      System.err.println("    -enhanced++:\tGenerate enhanced++ dependencies (default), currently only implemented for English UD.");
      System.err.println("    -collapsed:\t\tGenerate collapsed dependencies, deprecated.");
      System.err.println("    -CCprocessed:\tGenerate CC-processed dependencies, deprecated.");
      System.err.println("    -collapsedTree:\tGenerate collapsed-tree dependencies, deprecated.");
      System.err.println("");
      System.err.println("  Input:");
      System.err.println("    -treeFile <FILE>:\tConvert from constituency trees in <FILE>");
      System.err.println("    -sentFile <FILE>:\tParse and convert sentences from <FILE>. Only implemented for English.");
      System.err.println("");
      System.err.println("  Output:");
      System.err.println("    -conllx:\t\tOutput dependencies in CoNLL format.");
      System.err.println("");
      System.err.println("  Language:");
      System.err.println("    -language [en|zh|en-sd|zh-sd]:\t (Universal English Dependencies, Universal Chinese Dependencies, English Stanford Dependencies, Chinese Stanford Dependencies)");
      System.err.println("");
      System.err.println("");
      System.err.println("");
      System.err.println("Example:");
      TreeReader tr=new PennTreeReader(new StringReader("((S (NP (NNP Sam)) (VP (VBD died) (NP-TMP (NN today)))))"));
      tb.add(tr.readTree());
    }
 catch (    Exception e) {
      log.info("Horrible error: " + e);
      e.printStackTrace();
    }
  }
 else   if (altDepReaderName != null && altDepReaderFilename != null) {
    DependencyReader altDepReader=loadAlternateDependencyReader(altDepReaderName);
    try {
      gsBank=altDepReader.readDependencies(altDepReaderFilename);
    }
 catch (    IOException e) {
      log.info("Error reading " + altDepReaderFilename);
      return;
    }
  }
 else   if (treeFileName != null) {
    tb.loadPath(treeFileName);
  }
 else   if (filter != null) {
    tb.load(IOUtils.readerFromStdin());
  }
 else   if (conllXFileName != null) {
    try {
      gsBank=params.readGrammaticalStructureFromFile(conllXFileName);
    }
 catch (    RuntimeIOException e) {
      log.info("Error reading " + conllXFileName);
      return;
    }
  }
 else {
    String parserFile=props.getProperty("parserFile");
    String parserOpts=props.getProperty("parserOpts");
    boolean tokenized=props.getProperty("tokenized") != null;
    Function<List<? extends HasWord>,Tree> lp=loadParser(parserFile,parserOpts,makeCopulaHead);
    trees=new LazyLoadTreesByParsing(sentFileName,encoding,tokenized,lp);
    try {
      Method method=lp.getClass().getMethod("getTLPParams");
      params=(TreebankLangParserParams)method.invoke(lp);
      params.setGenerateOriginalDependencies(generateOriginalDependencies);
    }
 catch (    Exception cnfe) {
      throw new RuntimeException(cnfe);
    }
  }
  boolean basic=props.getProperty("basic") != null;
  boolean collapsed=props.getProperty("collapsed") != null;
  boolean CCprocessed=props.getProperty("CCprocessed") != null;
  boolean collapsedTree=props.getProperty("collapsedTree") != null;
  boolean nonCollapsed=props.getProperty("nonCollapsed") != null;
  boolean extraSep=props.getProperty("extraSep") != null;
  boolean parseTree=props.getProperty("parseTree") != null;
  boolean test=props.getProperty("test") != null;
  boolean keepPunct=true;
  boolean conllx=props.getProperty("conllx") != null;
  boolean checkConnected=props.getProperty("checkConnected") != null;
  boolean portray=props.getProperty("portray") != null;
  boolean enhanced=props.getProperty("enhanced") != null;
  boolean enhancedPlusPlus=props.getProperty("enhanced++") != null;
  DependencyPrinter altDepPrinter=null;
  if (altDepPrinterName != null) {
    altDepPrinter=loadAlternateDependencyPrinter(altDepPrinterName);
  }
  Method m=null;
  if (test) {
    try {
      Class sgf=Class.forName("edu.stanford.nlp.semgraph.SemanticGraphFactory");
      m=sgf.getDeclaredMethod("makeFromTree",GrammaticalStructure.class,boolean.class,boolean.class,boolean.class,boolean.class,boolean.class,boolean.class,Predicate.class,String.class,int.class);
    }
 catch (    Exception e) {
      log.info("Test cannot check for cycles in tree format (classes not available)");
    }
  }
  if (gsBank == null) {
    gsBank=new TreeBankGrammaticalStructureWrapper(trees,keepPunct,params);
  }
  for (  GrammaticalStructure gs : gsBank) {
    Tree tree;
    if (gsBank instanceof TreeBankGrammaticalStructureWrapper) {
      tree=((TreeBankGrammaticalStructureWrapper)gsBank).getOriginalTree(gs);
    }
 else {
      tree=gs.root();
    }
    if (test) {
      System.out.println("============= parse tree =======================");
      tree.pennPrint();
      System.out.println();
      System.out.println("------------- GrammaticalStructure -------------");
      System.out.println(gs);
      boolean allConnected=true;
      boolean connected;
      Collection<TypedDependency> bungRoots=null;
      System.out.println("------------- basic dependencies ---------------");
      List<TypedDependency> gsb=gs.typedDependencies(GrammaticalStructure.Extras.NONE);
      System.out.println(StringUtils.join(gsb,"\n"));
      connected=GrammaticalStructure.isConnected(gsb);
      if (!connected && bungRoots == null) {
        bungRoots=GrammaticalStructure.getRoots(gsb);
      }
      allConnected=connected && allConnected;
      System.out.println("------------- non-collapsed dependencies (basic + extra) ---------------");
      List<TypedDependency> gse=gs.typedDependencies(GrammaticalStructure.Extras.MAXIMAL);
      System.out.println(StringUtils.join(gse,"\n"));
      connected=GrammaticalStructure.isConnected(gse);
      if (!connected && bungRoots == null) {
        bungRoots=GrammaticalStructure.getRoots(gse);
      }
      allConnected=connected && allConnected;
      System.out.println("------------- collapsed dependencies -----------");
      System.out.println(StringUtils.join(gs.typedDependenciesCollapsed(GrammaticalStructure.Extras.MAXIMAL),"\n"));
      System.out.println("------------- collapsed dependencies tree -----------");
      System.out.println(StringUtils.join(gs.typedDependenciesCollapsedTree(),"\n"));
      System.out.println("------------- CCprocessed dependencies --------");
      List<TypedDependency> gscc=gs.typedDependenciesCollapsed(GrammaticalStructure.Extras.MAXIMAL);
      System.out.println(StringUtils.join(gscc,"\n"));
      System.out.println("-----------------------------------------------");
      connected=GrammaticalStructure.isConnected(gscc);
      if (!connected && bungRoots == null) {
        bungRoots=GrammaticalStructure.getRoots(gscc);
      }
      allConnected=connected && allConnected;
      if (allConnected) {
        System.out.println("dependencies form connected graphs.");
      }
 else {
        System.out.println("dependency graph NOT connected! possible offending nodes: " + bungRoots);
      }
      if (m != null) {
        try {
          Object semGraph=m.invoke(null,gs,false,true,false,false,false,false,null,null,0);
          Class sg=Class.forName("edu.stanford.nlp.semgraph.SemanticGraph");
          Method mDag=sg.getDeclaredMethod("isDag");
          boolean isDag=(Boolean)mDag.invoke(semGraph);
          System.out.println("tree dependencies form a DAG: " + isDag);
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
    }
 else {
      if (parseTree) {
        System.out.println("============= parse tree =======================");
        tree.pennPrint();
        System.out.println();
      }
      if (basic) {
        if (collapsed || CCprocessed || collapsedTree|| nonCollapsed|| enhanced|| enhancedPlusPlus) {
          System.out.println("------------- basic dependencies ---------------");
        }
        if (altDepPrinter == null) {
          printDependencies(gs,gs.typedDependencies(GrammaticalStructure.Extras.NONE),tree,conllx,false,opts.convertToUPOS);
        }
 else {
          System.out.println(altDepPrinter.dependenciesToString(gs,gs.typedDependencies(GrammaticalStructure.Extras.NONE),tree));
        }
      }
      if (nonCollapsed) {
        if (basic || CCprocessed || collapsed|| collapsedTree) {
          System.out.println("----------- non-collapsed dependencies (basic + extra) -----------");
        }
        printDependencies(gs,gs.allTypedDependencies(),tree,conllx,extraSep,opts.convertToUPOS);
      }
      if (collapsed) {
        if (basic || CCprocessed || collapsedTree|| nonCollapsed) {
          System.out.println("----------- collapsed dependencies -----------");
        }
        printDependencies(gs,gs.typedDependenciesCollapsed(GrammaticalStructure.Extras.MAXIMAL),tree,conllx,false,opts.convertToUPOS);
      }
      if (CCprocessed) {
        if (basic || collapsed || collapsedTree|| nonCollapsed) {
          System.out.println("---------- CCprocessed dependencies ----------");
        }
        List<TypedDependency> deps=gs.typedDependenciesCCprocessed(GrammaticalStructure.Extras.MAXIMAL);
        if (checkConnected) {
          if (!GrammaticalStructure.isConnected(deps)) {
            log.info("Graph is not connected for:");
            log.info(tree);
            log.info("possible offending nodes: " + GrammaticalStructure.getRoots(deps));
          }
        }
        printDependencies(gs,deps,tree,conllx,false,opts.convertToUPOS);
      }
      if (collapsedTree) {
        if (basic || CCprocessed || collapsed|| nonCollapsed) {
          System.out.println("----------- collapsed dependencies tree -----------");
        }
        printDependencies(gs,gs.typedDependenciesCollapsedTree(),tree,conllx,false,opts.convertToUPOS);
      }
      if (enhanced) {
        if (basic || enhancedPlusPlus) {
          System.out.println("----------- enhanced dependencies tree -----------");
        }
        printDependencies(gs,gs.typedDependenciesEnhanced(),tree,conllx,false,opts.convertToUPOS);
      }
      if (enhancedPlusPlus) {
        if (basic || enhanced) {
          System.out.println("----------- enhanced++ dependencies tree -----------");
        }
        printDependencies(gs,gs.typedDependenciesEnhancedPlusPlus(),tree,conllx,false,opts.convertToUPOS);
      }
      if (!basic && !collapsed && !CCprocessed&& !collapsedTree&& !nonCollapsed&& !enhanced&& !enhancedPlusPlus) {
        if (generateOriginalDependencies) {
          printDependencies(gs,gs.typedDependenciesCCprocessed(GrammaticalStructure.Extras.MAXIMAL),tree,conllx,false,opts.convertToUPOS);
        }
 else {
          printDependencies(gs,gs.typedDependenciesEnhancedPlusPlus(),tree,conllx,false,opts.convertToUPOS);
        }
      }
    }
    if (portray) {
      try {
        Class sgu=Class.forName("edu.stanford.nlp.semgraph.SemanticGraphUtils");
        Method mRender=sgu.getDeclaredMethod("render",GrammaticalStructure.class,String.class);
        mRender.invoke(null,gs,"Collapsed, CC processed deps");
      }
 catch (      Exception e) {
        throw new RuntimeException("Couldn't use swing to portray semantic graph",e);
      }
    }
  }
}
