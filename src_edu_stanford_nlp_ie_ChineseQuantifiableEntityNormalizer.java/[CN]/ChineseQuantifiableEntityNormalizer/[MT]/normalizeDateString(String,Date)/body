{
  Pattern p=Pattern.compile(BASIC_YYYYMMDD_PATTERN);
  Matcher m=p.matcher(s);
  if (m.find() && m.groupCount() == 3) {
    StringBuilder res=new StringBuilder();
    String year=m.group(1);
    for (int i=0; i < year.length(); i++) {
      String t="" + year.charAt(i);
      if (CHINESE_LITERAL_DECIMAL_PATTERN.matcher(t).matches()) {
        if (wordsToValues.containsKey(t))         res.append((int)wordsToValues.getCount(t));
 else         return null;
      }
 else       res.append(t);
    }
    res.append("-");
    res.append(normalizeMonthOrDay(m.group(2)));
    res.append("-");
    res.append(normalizeMonthOrDay(m.group(3)));
    return res.toString();
  }
  p=Pattern.compile(BASIC_MMDD_PATTERN);
  m=p.matcher(s);
  if (m.find() && m.groupCount() == 2) {
    StringBuilder res=new StringBuilder();
    String year=new SimpleDateFormat("yyyy").format(docdate);
    res.append(year);
    res.append("-");
    res.append(normalizeMonthOrDay(m.group(1)));
    res.append("-");
    res.append(normalizeMonthOrDay(m.group(2)));
    return res.toString();
  }
  p=Pattern.compile(BASIC_DD_PATTERN);
  m=p.matcher(s);
  if (m.find() && m.groupCount() == 1) {
    StringBuilder res=new StringBuilder();
    String year=new SimpleDateFormat("yyyy").format(docdate);
    String month=new SimpleDateFormat("MM").format(docdate);
    res.append(year);
    res.append("-");
    res.append(month);
    res.append("-");
    res.append(normalizeMonthOrDay(m.group(1)));
    return res.toString();
  }
  p=Pattern.compile(ENGLISH_MMDDYYYY_PATTERN);
  m=p.matcher(s);
  if (m.find() && m.groupCount() == 3) {
    StringBuilder res=new StringBuilder();
    String year=new SimpleDateFormat("yyyy").format(docdate);
    if (m.group(3) == null)     res.append(year);
 else     res.append(m.group(3));
    res.append("-");
    res.append(normalizeMonthOrDay(m.group(1)));
    res.append("-");
    res.append(normalizeMonthOrDay(m.group(2)));
    return res.toString();
  }
  return s;
}
