{
  SimpleNode jjtn000=new SimpleNode(JJTTREENODE);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  Token label;
  List<Tree> dtrs=null;
  try {
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case TREE_NODE_NONTERMINAL_LABEL:
{
        label=jj_consume_token(TREE_NODE_NONTERMINAL_LABEL);
        dtrs=TreeDtrs(new ArrayList<Tree>());
        jjtree.closeNodeScope(jjtn000,true);
        jjtc000=false;
{
          if ("" != null)           return treeFactory.newTreeNode(label.image.substring(1),dtrs);
        }
        break;
      }
case TREE_NODE_TERMINAL_LABEL:
{
      label=jj_consume_token(TREE_NODE_TERMINAL_LABEL);
      jjtree.closeNodeScope(jjtn000,true);
      jjtc000=false;
{
        if ("" != null)         return treeFactory.newTreeNode(label.image,new ArrayList<Tree>());
      }
      break;
    }
default :
  jj_la1[5]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
}
}
throw new Error("Missing return statement in function");
}
