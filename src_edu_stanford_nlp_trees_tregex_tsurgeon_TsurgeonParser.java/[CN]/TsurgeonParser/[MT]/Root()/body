{
  SimpleNode jjtn000=new SimpleNode(JJTROOT);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  TsurgeonPattern result;
  List<TsurgeonPattern> results=null;
  try {
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case DELETE:
case PRUNE:
case RELABEL:
case EXCISE:
case INSERT:
case MOVE:
case REPLACE:
case CREATE_SUBTREE:
case ADJOIN:
case ADJOIN_TO_HEAD:
case ADJOIN_TO_FOOT:
case COINDEX:
{
        result=Operation();
        jj_consume_token(26);
        jjtree.closeNodeScope(jjtn000,true);
        jjtc000=false;
{
          if ("" != null)           return new TsurgeonPattern[]{result};
        }
        break;
      }
case 27:
{
      label_1:       while (true) {
        jj_consume_token(27);
        result=Operation();
        jj_consume_token(28);
        if (results == null) {
          results=Generics.newArrayList();
        }
        results.add(result);
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case 27:
{
            ;
            break;
          }
default :
        jj_la1[0]=jj_gen;
      break label_1;
  }
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
TsurgeonPattern[] array=new TsurgeonPattern[results.size()];
{
  if ("" != null)   return results.toArray(array);
}
break;
}
default :
jj_la1[1]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
}
}
throw new Error("Missing return statement in function");
}
