{
  SimpleNode jjtn000=new SimpleNode(JJTTREELIST);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  List<AuxiliaryTree> trees=Generics.newArrayList();
  AuxiliaryTree tree;
  try {
    tree=TreeRoot(requiresFoot);
    trees.add(tree);
    label_3:     while (true) {
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case IDENTIFIER:
case TREE_NODE_TERMINAL_LABEL:
case TREE_NODE_NONTERMINAL_LABEL:
{
          ;
          break;
        }
default :
      jj_la1[8]=jj_gen;
    break label_3;
}
tree=TreeRoot(requiresFoot);
trees.add(tree);
}
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if ("" != null) return trees;
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
  if (true)   throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
  if (true)   throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
}
}
throw new Error("Missing return statement in function");
}
