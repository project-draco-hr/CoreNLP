{
  SimpleNode jjtn000=new SimpleNode(JJTOPERATION);
  boolean jjtc000=true;
  jjtree.openNodeScope(jjtn000);
  TsurgeonPattern child1;
  TsurgeonPattern child2=null;
  Token newLabel=null;
  TreeLocation loc=null;
  Token operator;
  AuxiliaryTree tree=null;
  List<AuxiliaryTree> treeList=null;
  List<TsurgeonPattern> nodeSelections=null;
  Token regex;
  Token hash_int;
  try {
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case DELETE:
{
        operator=jj_consume_token(DELETE);
        nodeSelections=NodeSelectionList(new ArrayList<TsurgeonPattern>());
        jjtree.closeNodeScope(jjtn000,true);
        jjtc000=false;
{
          if ("" != null)           return new DeleteNode(nodeSelections);
        }
        break;
      }
case PRUNE:
{
      operator=jj_consume_token(PRUNE);
      nodeSelections=NodeSelectionList(new ArrayList<TsurgeonPattern>());
      jjtree.closeNodeScope(jjtn000,true);
      jjtc000=false;
{
        if ("" != null)         return new PruneNode(nodeSelections);
      }
      break;
    }
case EXCISE:
{
    operator=jj_consume_token(EXCISE);
    child1=NodeSelection();
    child2=NodeSelection();
    jjtree.closeNodeScope(jjtn000,true);
    jjtc000=false;
{
      if ("" != null)       return new ExciseNode(child1,child2);
    }
    break;
  }
default :
jj_la1[2]=jj_gen;
if (jj_2_1(3)) {
operator=jj_consume_token(RELABEL);
child1=NodeSelection();
newLabel=jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
  if ("" != null)   return new RelabelNode(child1,newLabel.image);
}
}
 else if (jj_2_2(3)) {
operator=jj_consume_token(RELABEL);
child1=NodeSelection();
newLabel=jj_consume_token(QUOTEX);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
  if ("" != null)   return new RelabelNode(child1,newLabel.image);
}
}
 else if (jj_2_3(3)) {
operator=jj_consume_token(RELABEL);
child1=NodeSelection();
regex=jj_consume_token(REGEX);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
  if ("" != null)   return new RelabelNode(child1,regex.image);
}
}
 else if (jj_2_4(3)) {
operator=jj_consume_token(RELABEL);
child1=NodeSelection();
newLabel=jj_consume_token(GENERAL_RELABEL);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
  if ("" != null)   return new RelabelNode(child1,newLabel.image);
}
}
 else if (jj_2_5(3)) {
operator=jj_consume_token(REPLACE);
child1=NodeSelection();
child2=NodeSelection();
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
  if ("" != null)   return new ReplaceNode(child1,child2);
}
}
 else if (jj_2_6(3)) {
operator=jj_consume_token(REPLACE);
child1=NodeSelection();
treeList=TreeList(false);
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
  if ("" != null)   return new ReplaceNode(child1,treeList);
}
}
 else {
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case MOVE:
{
    operator=jj_consume_token(MOVE);
    child1=NodeSelection();
    loc=Location();
    jjtree.closeNodeScope(jjtn000,true);
    jjtc000=false;
{
      if ("" != null)       return new MoveNode(child1,loc);
    }
    break;
  }
default :
jj_la1[3]=jj_gen;
if (jj_2_7(3)) {
operator=jj_consume_token(INSERT);
child1=NodeSelection();
loc=Location();
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
  if ("" != null)   return new InsertNode(child1,loc);
}
}
 else if (jj_2_8(3)) {
operator=jj_consume_token(INSERT);
tree=TreeRoot(false);
loc=Location();
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
  if ("" != null)   return new InsertNode(tree,loc);
}
}
 else {
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case CREATE_SUBTREE:
{
    operator=jj_consume_token(CREATE_SUBTREE);
    newLabel=jj_consume_token(IDENTIFIER);
    nodeSelections=NodeSelectionList(new ArrayList<TsurgeonPattern>());
    jjtree.closeNodeScope(jjtn000,true);
    jjtc000=false;
    if (nodeSelections.size() == 1) {
{
        if ("" != null)         return new CreateSubtreeNode(nodeSelections.get(0),newLabel.image);
      }
    }
 else     if (nodeSelections.size() == 2) {
{
        if ("" != null)         return new CreateSubtreeNode(nodeSelections.get(0),nodeSelections.get(1),newLabel.image);
      }
    }
 else {
{
        if (true)         throw new ParseException("Illegal number of nodes given to createSubtree (" + nodeSelections.size() + ")");
      }
    }
    break;
  }
case ADJOIN:
{
  operator=jj_consume_token(ADJOIN);
  tree=TreeRoot(true);
  child1=NodeSelection();
  jjtree.closeNodeScope(jjtn000,true);
  jjtc000=false;
{
    if ("" != null)     return new AdjoinNode(tree,child1);
  }
  break;
}
case ADJOIN_TO_HEAD:
{
operator=jj_consume_token(ADJOIN_TO_HEAD);
tree=TreeRoot(true);
child1=NodeSelection();
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
  if ("" != null)   return new AdjoinToHeadNode(tree,child1);
}
break;
}
case ADJOIN_TO_FOOT:
{
operator=jj_consume_token(ADJOIN_TO_FOOT);
tree=TreeRoot(true);
child1=NodeSelection();
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if ("" != null) return new AdjoinToFootNode(tree,child1);
}
break;
}
case COINDEX:
{
operator=jj_consume_token(COINDEX);
nodeSelections=NodeSelectionList(new ArrayList<TsurgeonPattern>());
jjtree.closeNodeScope(jjtn000,true);
jjtc000=false;
{
if ("" != null) return new CoindexNodes(nodeSelections.toArray(new TsurgeonPattern[]{}));
}
break;
}
default :
jj_la1[4]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
}
}
}
}
}
 catch (Throwable jjte000) {
if (jjtc000) {
jjtree.clearNodeScope(jjtn000);
jjtc000=false;
}
 else {
jjtree.popNode();
}
if (jjte000 instanceof RuntimeException) {
{
if (true) throw (RuntimeException)jjte000;
}
}
if (jjte000 instanceof ParseException) {
{
if (true) throw (ParseException)jjte000;
}
}
{
if (true) throw (Error)jjte000;
}
}
 finally {
if (jjtc000) {
jjtree.closeNodeScope(jjtn000,true);
}
}
throw new Error("Missing return statement in function");
}
