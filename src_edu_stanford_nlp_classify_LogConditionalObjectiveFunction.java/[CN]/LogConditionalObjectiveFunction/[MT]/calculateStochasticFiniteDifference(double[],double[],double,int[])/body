{
  if (values != null) {
    rvfcalculate(x);
    return;
  }
  value=0.0;
  if (priorDerivative == null) {
    priorDerivative=new double[x.length];
  }
  double priorFactor=batch.length / (data.length * prior.getSigma() * prior.getSigma());
  derivative=ArrayMath.multiply(x,priorFactor);
  HdotV=ArrayMath.multiply(v,priorFactor);
  double[] sums=new double[numClasses];
  double[] sumsV=new double[numClasses];
  double[] probs=new double[numClasses];
  double[] probsV=new double[numClasses];
  for (  int m : batch) {
    int[] features=data[m];
    Arrays.fill(sums,0.0);
    Arrays.fill(sumsV,0.0);
    for (int c=0; c < numClasses; c++) {
      for (      int feature : features) {
        int i=indexOf(feature,c);
        sums[c]+=x[i];
        sumsV[c]+=x[i] + h * v[i];
      }
    }
    double total=ArrayMath.logSum(sums);
    double totalV=ArrayMath.logSum(sumsV);
    for (int c=0; c < numClasses; c++) {
      probs[c]=Math.exp(sums[c] - total);
      probsV[c]=Math.exp(sumsV[c] - totalV);
      if (dataWeights != null) {
        probs[c]*=dataWeights[m];
        probsV[c]*=dataWeights[m];
      }
      for (      int feature : features) {
        int i=indexOf(feature,c);
        derivative[i]+=probs[c];
        HdotV[i]+=(probsV[c] - probs[c]) / h;
        if (c == labels[m]) {
          derivative[i]-=1;
        }
      }
    }
    double dV=sums[labels[m]] - total;
    if (dataWeights != null) {
      dV*=dataWeights[m];
    }
    value-=dV;
  }
  value+=((double)batch.length) / ((double)data.length) * prior.compute(x,priorDerivative);
}
