{
  value=0.0;
  if (parallelGradientCalculation && Execution.threads > 1) {
    @SuppressWarnings("unchecked") HogWildStochasticUpdate[] runnables=(HogWildStochasticUpdate[])Array.newInstance(HogWildStochasticUpdate.class,threads);
    CountDownLatch latch=new CountDownLatch(threads);
    for (int i=0; i < threads; i++) {
      runnables[i]=new HogWildStochasticUpdate(threads,i,x,xscale,batch,gain,latch);
      executorService.execute(runnables[i]);
    }
    try {
      latch.await();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
    for (int i=0; i < threads; i++) {
      value+=runnables[i].localValue;
    }
  }
 else {
    double[] sums=new double[numClasses];
    double[] probs=new double[numClasses];
    for (    int m : batch) {
      int[] features=data[m];
      Arrays.fill(sums,0.0);
      for (int c=0; c < numClasses; c++) {
        for (int f=0; f < features.length; f++) {
          int i=indexOf(features[f],c);
          if (values != null) {
            sums[c]+=x[i] * xscale * values[m][f];
          }
 else {
            sums[c]+=x[i] * xscale;
          }
        }
      }
      for (int f=0; f < features.length; f++) {
        int i=indexOf(features[f],labels[m]);
        double v=(values != null) ? values[m][f] : 1;
        double delta=(dataWeights != null) ? dataWeights[m] * v : v;
        x[i]+=delta * gain;
      }
      double total=ArrayMath.logSum(sums);
      for (int c=0; c < numClasses; c++) {
        probs[c]=Math.exp(sums[c] - total);
        if (dataWeights != null) {
          probs[c]*=dataWeights[m];
        }
        for (int f=0; f < features.length; f++) {
          int i=indexOf(features[f],c);
          double v=(values != null) ? values[m][f] : 1;
          double delta=probs[c] * v;
          x[i]-=delta * gain;
        }
      }
      double dV=sums[labels[m]] - total;
      if (dataWeights != null) {
        dV*=dataWeights[m];
      }
      value-=dV;
    }
  }
  return value;
}
