{
  double[] sums=new double[numClasses];
  double[] probs=new double[numClasses];
  for (int d=threadIdx; d < data.length; d+=numThreads) {
    final int[] features=data[d];
    final double[] vals=values[d];
    Arrays.fill(sums,0.0);
    for (int c=0; c < numClasses; c++) {
      for (int f=0; f < features.length; f++) {
        final int feature=features[f];
        final double val=vals[f];
        int i=indexOf(feature,c);
        sums[c]+=x[i] * val;
      }
    }
    double total=ArrayMath.logSum(sums);
    for (int c=0; c < numClasses; c++) {
      probs[c]=Math.exp(sums[c] - total);
      if (dataWeights != null) {
        probs[c]*=dataWeights[d];
      }
    }
    for (int c=0; c < numClasses; c++) {
      for (int f=0; f < features.length; f++) {
        final int feature=features[f];
        final double val=vals[f];
        int i=indexOf(feature,c);
        localDerivative[i]+=probs[c] * val;
      }
    }
    double dV=sums[labels[d]] - total;
    if (dataWeights != null) {
      dV*=dataWeights[d];
    }
    localValue-=dV;
  }
  latch.countDown();
}
