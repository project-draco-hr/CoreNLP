{
  String testString=("(T (X (N (N Moe (PNT ,)))) (NP (X (N Curly)) " + "(NP (CONJ and) (X (N Larry)))))");
  Tree tree=treeFromString(testString);
  TregexPattern pattern=TregexPattern.compile("PNT=p >>- (__=l >, (__=t <- (__=r <, __=m <- (__ <, CONJ <- __=z))))");
  TregexMatcher matcher=pattern.matcher(tree);
  assertTrue(matcher.find());
  assertEquals("(PNT ,)",matcher.getMatch().toString());
  assertEquals("(PNT ,)",matcher.getNode("p").toString());
  assertEquals("(X (N (N Moe (PNT ,))))",matcher.getNode("l").toString());
  assertEquals(testString,matcher.getNode("t").toString());
  assertEquals("(NP (X (N Curly)) (NP (CONJ and) (X (N Larry))))",matcher.getNode("r").toString());
  assertEquals("(X (N Curly))",matcher.getNode("m").toString());
  assertEquals("(X (N Larry))",matcher.getNode("z").toString());
  assertFalse(matcher.find());
  pattern=TregexPattern.compile("PNT=p >>- (/(.+)/#1%var=l >, (__=t <- (__=r <, /(.+)/#1%var=m <- (__ <, CONJ <- /(.+)/#1%var=z))))");
  matcher=pattern.matcher(tree);
  assertTrue(matcher.find());
  assertEquals("(PNT ,)",matcher.getMatch().toString());
  assertEquals("(PNT ,)",matcher.getNode("p").toString());
  assertEquals("(X (N (N Moe (PNT ,))))",matcher.getNode("l").toString());
  assertEquals(testString,matcher.getNode("t").toString());
  assertEquals("(NP (X (N Curly)) (NP (CONJ and) (X (N Larry))))",matcher.getNode("r").toString());
  assertEquals("(X (N Curly))",matcher.getNode("m").toString());
  assertEquals("(X (N Larry))",matcher.getNode("z").toString());
  assertFalse(matcher.find());
  pattern=TregexPattern.compile("PNT=p >>- (__=l >, (__=t <- (__=r <, ~l <- (__ <, CONJ <- ~l))))");
  matcher=pattern.matcher(tree);
  assertTrue(matcher.find());
  assertEquals("(PNT ,)",matcher.getMatch().toString());
  assertEquals("(PNT ,)",matcher.getNode("p").toString());
  assertEquals("(X (N (N Moe (PNT ,))))",matcher.getNode("l").toString());
  assertEquals(testString,matcher.getNode("t").toString());
  assertEquals("(NP (X (N Curly)) (NP (CONJ and) (X (N Larry))))",matcher.getNode("r").toString());
  assertFalse(matcher.find());
  pattern=TregexPattern.compile("PNT=p >>- (__=l >, (__=t <- (__=r <, ~l=m <- (__ <, CONJ <- ~l=z))))");
  matcher=pattern.matcher(tree);
  assertTrue(matcher.find());
  assertEquals("(PNT ,)",matcher.getMatch().toString());
  assertEquals("(PNT ,)",matcher.getNode("p").toString());
  assertEquals("(X (N (N Moe (PNT ,))))",matcher.getNode("l").toString());
  assertEquals(testString,matcher.getNode("t").toString());
  assertEquals("(NP (X (N Curly)) (NP (CONJ and) (X (N Larry))))",matcher.getNode("r").toString());
  assertEquals("(X (N Curly))",matcher.getNode("m").toString());
  assertEquals("(X (N Larry))",matcher.getNode("z").toString());
  assertFalse(matcher.find());
}
