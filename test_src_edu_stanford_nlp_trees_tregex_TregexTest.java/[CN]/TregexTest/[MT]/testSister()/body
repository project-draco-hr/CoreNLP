{
  TregexPattern pattern=TregexPattern.compile("/.*/ $ foo");
  runTest(pattern,"(a (foo 1) (bar 2))","(bar 2)");
  runTest(pattern,"(a (bar 1) (foo 2))","(bar 1)");
  runTest(pattern,"(a (foo 1) (bar 2) (baz 3))","(bar 2)","(baz 3)");
  runTest(pattern,"(a (foo (bar 2)) (baz 3))","(baz 3)");
  runTest(pattern,"(a (foo (bar 2)) (baz (bif 3)))","(baz (bif 3))");
  runTest(pattern,"(a (foo (bar 2)))");
  runTest(pattern,"(a (foo 1))");
  pattern=TregexPattern.compile("bar|baz $ foo");
  runTest(pattern,"(a (foo 1) (bar 2))","(bar 2)");
  runTest(pattern,"(a (bar 1) (foo 2))","(bar 1)");
  runTest(pattern,"(a (foo 1) (bar 2) (baz 3))","(bar 2)","(baz 3)");
  runTest(pattern,"(a (foo (bar 2)) (baz 3))","(baz 3)");
  runTest(pattern,"(a (foo (bar 2)) (baz (bif 3)))","(baz (bif 3))");
  runTest(pattern,"(a (foo (bar 2)))");
  runTest(pattern,"(a (foo 1))");
  pattern=TregexPattern.compile("/.*/ $ foo");
  runTest(pattern,"(a (foo 1) (foo 2))","(foo 1)","(foo 2)");
  runTest(pattern,"(a (foo 1))");
  pattern=TregexPattern.compile("foo $ foo");
  runTest(pattern,"(a (foo 1) (foo 2))","(foo 1)","(foo 2)");
  runTest(pattern,"(a (foo 1))");
  pattern=TregexPattern.compile("foo $ foo=a");
  Tree tree=treeFromString("(a (foo 1) (foo 2) (foo 3))");
  TregexMatcher matcher=pattern.matcher(tree);
  assertTrue(matcher.find());
  assertEquals("(foo 1)",matcher.getMatch().toString());
  assertEquals("(foo 2)",matcher.getNode("a").toString());
  assertTrue(matcher.find());
  assertEquals("(foo 1)",matcher.getMatch().toString());
  assertEquals("(foo 3)",matcher.getNode("a").toString());
  assertTrue(matcher.find());
  assertEquals("(foo 2)",matcher.getMatch().toString());
  assertEquals("(foo 1)",matcher.getNode("a").toString());
  assertTrue(matcher.find());
  assertEquals("(foo 2)",matcher.getMatch().toString());
  assertEquals("(foo 3)",matcher.getNode("a").toString());
  assertTrue(matcher.find());
  assertEquals("(foo 3)",matcher.getMatch().toString());
  assertEquals("(foo 1)",matcher.getNode("a").toString());
  assertTrue(matcher.find());
  assertEquals("(foo 3)",matcher.getMatch().toString());
  assertEquals("(foo 2)",matcher.getNode("a").toString());
  assertFalse(matcher.find());
  runTest("foo $ foo","(a (foo 1))");
}
