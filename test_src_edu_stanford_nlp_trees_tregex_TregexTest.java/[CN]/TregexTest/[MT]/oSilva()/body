{
  final TregexPattern tregex1=TregexPattern.compile("PNT=p >>- (__=l >, (__=t <- (__=r <, __=m <- (__ <, CONJ <- __=z))))");
  final TregexPattern tregex2=TregexPattern.compile("PNT=p >>- (/(.+)/#1%var=l >, (__=t <- (__=r <, /(.+)/#1%var=m <- (__ <, CONJ <- /(.+)/#1%var=z))))");
  final TregexPattern tregex3=TregexPattern.compile("PNT=p >>- (__=l >, (__=t <- (__=r <, ~l <- (__ <, CONJ <- ~l))))");
  Tree tree=treeFromString("(T (X (N (N Moe (PNT ,)))) (NP (X (N Curly)) (NP (CONJ and) (X (N Larry)))))");
  TregexMatcher matcher1=tregex1.matcher(tree);
  assertTrue(matcher1.find());
  TregexMatcher matcher2=tregex2.matcher(tree);
  assertTrue(matcher2.find());
  TregexMatcher matcher3=tregex3.matcher(tree);
  assertTrue(matcher3.find());
}
