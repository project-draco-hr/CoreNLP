{
  String[] treeStrings={"( (S (S (PP (IN In) (NP (CD 1941) )) (, ,) (NP (NP (NNP Raeder) ) (CC and) (NP (DT the) (JJ German) (NN navy) )) (VP (VBD threatened) (S (VP (TO to) (VP (VB attack) (NP (DT the) (NNP Panama) (NNP Canal) )))))) (, ,) (RB so) (S (NP (PRP we) ) (VP (VBD created) (NP (NP (DT the) (NNP Southern) (NNP Command) ) (PP-LOC (IN in) (NP (NNP Panama) ))))) (. .) ))","(S (S (NP-SBJ (NNP Japan) ) (VP (MD can) (VP (VP (VB grow) ) (CC and) (VP (RB not) (VB cut) (PRT (RB back) ))))) (, ,) (CC and) (RB so) (S (ADVP (RB too) ) (, ,) (NP (NP (NNP New) (NNP Zealand) )) ))))","( (S (S (NP-SBJ (PRP You) ) (VP (VBP make) (NP (DT a) (NN forecast) ))) (, ,) (CC and) (RB then) (S (NP-SBJ (PRP you) ) (VP (VBP become) (NP-PRD (PRP$ its) (NN prisoner) ))) (. .)))"};
  Tree[] trees=treesFromString(treeStrings);
  TregexPattern pattern=TregexPattern.compile("/^S/ < (/^S/ $++ (/^[,]|CC|CONJP$/ $+ (RB=adv $+ /^S/)))");
  TregexMatcher matcher=pattern.matcher(trees[0]);
  assertTrue(matcher.find());
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[1]);
  assertTrue(matcher.find());
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[2]);
  assertTrue(matcher.find());
  assertFalse(matcher.find());
  pattern=TregexPattern.compile("/^S/ < (/^S/ $++ (/^[,]|CC|CONJP$/ (< and) $+ (RB=adv $+ /^S/)))");
  matcher=pattern.matcher(trees[0]);
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[1]);
  assertTrue(matcher.find());
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[2]);
  assertTrue(matcher.find());
  assertFalse(matcher.find());
  pattern=TregexPattern.compile("/^S/ < (/^S/ $++ (/^[,]|CC|CONJP$/ !(< and) $+ (RB=adv $+ /^S/)))");
  matcher=pattern.matcher(trees[0]);
  assertTrue(matcher.find());
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[1]);
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[2]);
  assertFalse(matcher.find());
  pattern=TregexPattern.compile("/^S/ < (/^S/ $++ (/^[,]|CC|CONJP$/ (< and $+ RB) $+ (RB=adv $+ /^S/)))");
  matcher=pattern.matcher(trees[0]);
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[1]);
  assertTrue(matcher.find());
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[2]);
  assertTrue(matcher.find());
  assertFalse(matcher.find());
  pattern=TregexPattern.compile("/^S/ < (/^S/ $++ (/^[,]|CC|CONJP$/ !(< and $+ RB) $+ (RB=adv $+ /^S/)))");
  matcher=pattern.matcher(trees[0]);
  assertTrue(matcher.find());
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[1]);
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[2]);
  assertFalse(matcher.find());
  pattern=TregexPattern.compile("/^S/ < (/^S/ $++ (/^[,]|CC|CONJP$/ !(< and $+ (RB < then)) $+ (RB=adv $+ /^S/)))");
  matcher=pattern.matcher(trees[0]);
  assertTrue(matcher.find());
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[1]);
  assertTrue(matcher.find());
  assertFalse(matcher.find());
  matcher=pattern.matcher(trees[2]);
  assertFalse(matcher.find());
}
