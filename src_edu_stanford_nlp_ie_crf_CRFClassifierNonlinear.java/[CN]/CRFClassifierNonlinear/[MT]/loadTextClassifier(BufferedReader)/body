{
  super.loadTextClassifier(br);
  String line=br.readLine();
  String[] toks=line.split("\\t");
  if (!toks[0].equals("nodeFeatureIndicesMap.size()=")) {
    throw new RuntimeException("format error in nodeFeatureIndicesMap");
  }
  int nodeFeatureIndicesMapSize=Integer.parseInt(toks[1]);
  nodeFeatureIndicesMap=new HashIndex<>();
  int count=0;
  while (count < nodeFeatureIndicesMapSize) {
    line=br.readLine();
    toks=line.split("\\t");
    int idx=Integer.parseInt(toks[0]);
    if (count != idx) {
      throw new RuntimeException("format error");
    }
    nodeFeatureIndicesMap.add(Integer.parseInt(toks[1]));
    count++;
  }
  line=br.readLine();
  toks=line.split("\\t");
  if (!toks[0].equals("edgeFeatureIndicesMap.size()=")) {
    throw new RuntimeException("format error");
  }
  int edgeFeatureIndicesMapSize=Integer.parseInt(toks[1]);
  edgeFeatureIndicesMap=new HashIndex<>();
  count=0;
  while (count < edgeFeatureIndicesMapSize) {
    line=br.readLine();
    toks=line.split("\\t");
    int idx=Integer.parseInt(toks[0]);
    if (count != idx) {
      throw new RuntimeException("format error");
    }
    edgeFeatureIndicesMap.add(Integer.parseInt(toks[1]));
    count++;
  }
  int weightsLength=-1;
  if (flags.secondOrderNonLinear) {
    line=br.readLine();
    toks=line.split("\\t");
    if (!toks[0].equals("inputLayerWeights4Edge.length=")) {
      throw new RuntimeException("format error");
    }
    weightsLength=Integer.parseInt(toks[1]);
    inputLayerWeights4Edge=new double[weightsLength][];
    count=0;
    while (count < weightsLength) {
      line=br.readLine();
      toks=line.split("\\t");
      int weights2Length=Integer.parseInt(toks[0]);
      inputLayerWeights4Edge[count]=new double[weights2Length];
      String[] weightsValue=toks[1].split(" ");
      if (weights2Length != weightsValue.length) {
        throw new RuntimeException("weights format error");
      }
      for (int i2=0; i2 < weights2Length; i2++) {
        inputLayerWeights4Edge[count][i2]=Double.parseDouble(weightsValue[i2]);
      }
      count++;
    }
    line=br.readLine();
    toks=line.split("\\t");
    if (!toks[0].equals("outputLayerWeights4Edge.length=")) {
      throw new RuntimeException("format error");
    }
    weightsLength=Integer.parseInt(toks[1]);
    outputLayerWeights4Edge=new double[weightsLength][];
    count=0;
    while (count < weightsLength) {
      line=br.readLine();
      toks=line.split("\\t");
      int weights2Length=Integer.parseInt(toks[0]);
      outputLayerWeights4Edge[count]=new double[weights2Length];
      String[] weightsValue=toks[1].split(" ");
      if (weights2Length != weightsValue.length) {
        throw new RuntimeException("weights format error");
      }
      for (int i2=0; i2 < weights2Length; i2++) {
        outputLayerWeights4Edge[count][i2]=Double.parseDouble(weightsValue[i2]);
      }
      count++;
    }
  }
 else {
    line=br.readLine();
    toks=line.split("\\t");
    if (!toks[0].equals("linearWeights.length=")) {
      throw new RuntimeException("format error");
    }
    weightsLength=Integer.parseInt(toks[1]);
    linearWeights=new double[weightsLength][];
    count=0;
    while (count < weightsLength) {
      line=br.readLine();
      toks=line.split("\\t");
      int weights2Length=Integer.parseInt(toks[0]);
      linearWeights[count]=new double[weights2Length];
      String[] weightsValue=toks[1].split(" ");
      if (weights2Length != weightsValue.length) {
        throw new RuntimeException("weights format error");
      }
      for (int i2=0; i2 < weights2Length; i2++) {
        linearWeights[count][i2]=Double.parseDouble(weightsValue[i2]);
      }
      count++;
    }
  }
  line=br.readLine();
  toks=line.split("\\t");
  if (!toks[0].equals("inputLayerWeights.length=")) {
    throw new RuntimeException("format error");
  }
  weightsLength=Integer.parseInt(toks[1]);
  inputLayerWeights=new double[weightsLength][];
  count=0;
  while (count < weightsLength) {
    line=br.readLine();
    toks=line.split("\\t");
    int weights2Length=Integer.parseInt(toks[0]);
    inputLayerWeights[count]=new double[weights2Length];
    String[] weightsValue=toks[1].split(" ");
    if (weights2Length != weightsValue.length) {
      throw new RuntimeException("weights format error");
    }
    for (int i2=0; i2 < weights2Length; i2++) {
      inputLayerWeights[count][i2]=Double.parseDouble(weightsValue[i2]);
    }
    count++;
  }
  line=br.readLine();
  toks=line.split("\\t");
  if (!toks[0].equals("outputLayerWeights.length=")) {
    throw new RuntimeException("format error");
  }
  weightsLength=Integer.parseInt(toks[1]);
  outputLayerWeights=new double[weightsLength][];
  count=0;
  while (count < weightsLength) {
    line=br.readLine();
    toks=line.split("\\t");
    int weights2Length=Integer.parseInt(toks[0]);
    outputLayerWeights[count]=new double[weights2Length];
    String[] weightsValue=toks[1].split(" ");
    if (weights2Length != weightsValue.length) {
      throw new RuntimeException("weights format error");
    }
    for (int i2=0; i2 < weights2Length; i2++) {
      outputLayerWeights[count][i2]=Double.parseDouble(weightsValue[i2]);
    }
    count++;
  }
}
