{
  if (flags.secondOrderNonLinear) {
    CRFNonLinearSecondOrderLogConditionalObjectiveFunction func=new CRFNonLinearSecondOrderLogConditionalObjectiveFunction(data,labels,windowSize,classIndex,labelIndices,map,flags,nodeFeatureIndicesMap.size(),edgeFeatureIndicesMap.size());
    cliquePotentialFunctionHelper=func;
    double[] allWeights=trainWeightsUsingNonLinearCRF(func,evaluators);
    Quadruple<double[][],double[][],double[][],double[][]> params=func.separateWeights(allWeights);
    this.inputLayerWeights4Edge=params.first();
    this.outputLayerWeights4Edge=params.second();
    this.inputLayerWeights=params.third();
    this.outputLayerWeights=params.fourth();
  }
 else {
    CRFNonLinearLogConditionalObjectiveFunction func=new CRFNonLinearLogConditionalObjectiveFunction(data,labels,windowSize,classIndex,labelIndices,map,flags,nodeFeatureIndicesMap.size(),edgeFeatureIndicesMap.size(),featureVals);
    if (flags.useAdaGradFOBOS) {
      func.gradientsOnly=true;
    }
    cliquePotentialFunctionHelper=func;
    double[] allWeights=trainWeightsUsingNonLinearCRF(func,evaluators);
    Triple<double[][],double[][],double[][]> params=func.separateWeights(allWeights);
    this.linearWeights=params.first();
    this.inputLayerWeights=params.second();
    this.outputLayerWeights=params.third();
  }
  return null;
}
