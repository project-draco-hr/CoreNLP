{
  super.serializeTextClassifier(pw);
  pw.printf("nodeFeatureIndicesMap.size()=\t%d%n",nodeFeatureIndicesMap.size());
  for (int i=0; i < nodeFeatureIndicesMap.size(); i++) {
    pw.printf("%d\t%d%n",i,nodeFeatureIndicesMap.get(i));
  }
  pw.printf("edgeFeatureIndicesMap.size()=\t%d%n",edgeFeatureIndicesMap.size());
  for (int i=0; i < edgeFeatureIndicesMap.size(); i++) {
    pw.printf("%d\t%d%n",i,edgeFeatureIndicesMap.get(i));
  }
  if (flags.secondOrderNonLinear) {
    pw.printf("inputLayerWeights4Edge.length=\t%d%n",inputLayerWeights4Edge.length);
    for (    double[] ws : inputLayerWeights4Edge) {
      ArrayList<Double> list=new ArrayList<Double>();
      for (      double w : ws) {
        list.add(w);
      }
      pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
    }
    pw.printf("outputLayerWeights4Edge.length=\t%d%n",outputLayerWeights4Edge.length);
    for (    double[] ws : outputLayerWeights4Edge) {
      ArrayList<Double> list=new ArrayList<Double>();
      for (      double w : ws) {
        list.add(w);
      }
      pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
    }
  }
 else {
    pw.printf("linearWeights.length=\t%d%n",linearWeights.length);
    for (    double[] ws : linearWeights) {
      ArrayList<Double> list=new ArrayList<Double>();
      for (      double w : ws) {
        list.add(w);
      }
      pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
    }
  }
  pw.printf("inputLayerWeights.length=\t%d%n",inputLayerWeights.length);
  for (  double[] ws : inputLayerWeights) {
    ArrayList<Double> list=new ArrayList<Double>();
    for (    double w : ws) {
      list.add(w);
    }
    pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
  }
  pw.printf("outputLayerWeights.length=\t%d%n",outputLayerWeights.length);
  for (  double[] ws : outputLayerWeights) {
    ArrayList<Double> list=new ArrayList<Double>();
    for (    double w : ws) {
      list.add(w);
    }
    pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
  }
}
