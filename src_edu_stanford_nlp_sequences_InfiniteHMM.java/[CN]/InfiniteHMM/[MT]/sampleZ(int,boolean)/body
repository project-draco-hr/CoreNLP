{
  if (verbose > 1)   System.err.println("sampling " + i);
  int parentK=z[i - 1];
  int childK=z[i + 1];
  E obs=observations.get(i);
  Counter<Integer> logDist=new ClassicCounter<Integer>();
  Counter<Integer> emissDist=new ClassicCounter<Integer>();
  Counter<Integer> transInDist=new ClassicCounter<Integer>();
  Counter<Integer> transOutDist=new ClassicCounter<Integer>();
  for (  int k : beta.keySet()) {
    if (k == UNSEEN || k == 0)     continue;
    double logEmissionProb=getLogEmissionProb(k,obs);
    emissDist.setCount(k,logEmissionProb);
    double transitionInProb=getTransitionProb(parentK,k);
    transInDist.setCount(k,transitionInProb);
    double transitionOutProb=1.0;
    if (!firstPass)     transitionOutProb=getTransitionProb(k,childK);
    transOutDist.setCount(k,transitionOutProb);
    if (verbose > 3)     System.err.println("k=" + k + " emiss="+ logEmissionProb+ " transIn="+ transitionInProb+ " transOut="+ transitionOutProb);
    logDist.setCount(k,logEmissionProb + Math.log(transitionInProb) + Math.log(transitionOutProb));
  }
  if (!logDist.keySet().contains(newK)) {
    double emissionProb=getLogEmissionProb(newK,obs);
    emissDist.setCount(newK,emissionProb);
    double transitionInProb=getTransitionProb(parentK,newK);
    transInDist.setCount(newK,transitionInProb);
    double transitionOutProb=1.0;
    if (!firstPass)     transitionOutProb=getTransitionProb(newK,childK);
    transOutDist.setCount(newK,transitionOutProb);
    if (verbose > 3)     System.err.println("k=" + newK + " emiss="+ emissionProb+ " transIn="+ transitionInProb+ " transOut="+ transitionOutProb);
    logDist.setCount(newK,emissionProb + Math.log(transitionInProb) + Math.log(transitionOutProb));
  }
  if (verbose > 2) {
    System.err.println("emission probs: " + emissDist);
    System.err.println("transition in probs: " + transInDist);
    System.err.println("transition out probs: " + transOutDist);
  }
  Counters.logNormalizeInPlace(logDist);
  logDist=Counters.exp(logDist);
  if (verbose > 2)   System.err.println("sampling dist: " + Counters.toBiggestValuesFirstString(logDist));
  int k=Counters.sample(logDist);
  z[i]=k;
  if (k == newK) {
    newK=k + 1;
  }
  if (verbose > 1)   System.err.println("sampled " + i + "="+ k);
  return k;
}
