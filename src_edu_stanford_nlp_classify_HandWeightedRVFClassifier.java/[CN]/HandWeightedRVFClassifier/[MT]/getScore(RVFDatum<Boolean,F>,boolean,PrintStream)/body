{
  double score=0.0;
  double scalingFactor=1;
  Counter<F> features=datum.asFeaturesCounter();
  if (print) {
    ps.printf("%-40s %8s %8s %8s%n","Feature","Count","Weight","Contrib");
    ps.printf("%-40s %8s %8s %8s%n","----------------------------------------","--------","--------","--------");
  }
  for (  F feature : datum.asFeatures()) {
    if (print && (weights.getCount(feature) != 0)) {
      ps.printf("%-40s %8.4f %8.4f %8.4f%n",feature.toString(),features.getCount(feature),weights.getCount(feature),features.getCount(feature) * weights.getCount(feature));
    }
    if (feature.toString().equals("SCALING_FACTOR")) {
      scalingFactor=features.getCount(feature);
    }
    score+=features.getCount(feature) * weights.getCount(feature);
  }
  score/=scalingFactor;
  if (print) {
    ps.printf("%-40s %8s %8s %8s%n","----------------------------------------","--------","--------","--------");
    if (scalingFactor != 1) {
      ps.printf("%-40s %8s %8s %8.4f%n","score (unscaled)","","",score * scalingFactor);
      ps.printf("%-40s %8s %8s %8.4f%n","scaling factor","","",scalingFactor);
      ps.printf("%-40s %8s %8s %8.4f%n","score (scaled)","","",score);
    }
 else {
      ps.printf("%-40s %8s %8s %8.4f%n","score","","",score);
    }
    ps.printf("%-40s %8s %8s %8.4f%n","threshold","","",threshold);
    ps.printf("%-40s %8s %8s %8s%n","positive?","","",Boolean.valueOf(score >= threshold));
  }
  return score;
}
