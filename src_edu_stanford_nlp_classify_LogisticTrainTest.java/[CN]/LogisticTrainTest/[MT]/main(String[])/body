{
  int start=0;
  double sigma=Double.NaN;
  String modelFile=null;
  String testFile=null;
  String testOutputFile=null;
  String trainFile=null;
  boolean trainModel=false;
  int folds=4;
  while (start < args.length) {
    if (args[start].equals("-train")) {
      trainFile=args[++start];
      start++;
      trainModel=true;
      modelFile=trainFile + ".model";
    }
 else     if (args[start].equals("-model")) {
      modelFile=args[++start];
      start++;
    }
 else     if (args[start].equals("-folds")) {
      folds=Integer.parseInt(args[++start]);
      start++;
    }
 else     if (args[start].equals("-test")) {
      testFile=args[++start];
      start++;
      testOutputFile=testFile + ".out";
    }
 else     if (args[start].equals("-sigma")) {
      sigma=Double.parseDouble(args[++start]);
      start++;
    }
  }
  LogisticTrainTest lTT=new LogisticTrainTest();
  LinearClassifier<String,Integer> lC;
  if (trainModel) {
    if (sigma > 0) {
      lC=LogisticTrainTest.trainClassifier(lTT.makeDataset(trainFile),sigma);
    }
 else {
      lC=LogisticTrainTest.trainClassifierSettingSigmaUsingFolds(lTT.makeDataset(trainFile),folds);
    }
    System.err.println("learned classifier " + lC.toAllWeightsString());
    LogisticTrainTest.saveClassifier(lC,modelFile);
  }
 else {
    lC=LogisticTrainTest.readClassifier(modelFile);
    System.err.println("read classifier " + lC.toAllWeightsString());
  }
  if (testFile != null) {
    lTT.testClassifier(lC,testFile,testOutputFile);
  }
}
