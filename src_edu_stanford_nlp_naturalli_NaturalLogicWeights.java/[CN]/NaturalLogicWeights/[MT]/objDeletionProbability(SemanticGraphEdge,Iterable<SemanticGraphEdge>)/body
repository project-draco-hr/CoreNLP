{
  Optional<String> subj=Optional.empty();
  Optional<String> pp=Optional.empty();
  for (  SemanticGraphEdge neighbor : neighbors) {
    if (neighbor != edge) {
      String neighborRel=neighbor.getRelation().toString();
      if (neighborRel.contains("subj")) {
        subj=Optional.of(neighbor.getDependent().originalText().toLowerCase());
      }
      if (neighborRel.contains("prep")) {
        pp=Optional.of(neighborRel);
      }
      if (neighborRel.contains("obj")) {
        return 1.0;
      }
    }
  }
  String obj=edge.getDependent().originalText().toLowerCase();
  String verb=edge.getGovernor().originalText().toLowerCase();
  Double rawScore=null;
  if (subj.isPresent()) {
    if (pp.isPresent()) {
      rawScore=verbSubjPPObjAffinity.get(Quadruple.makeQuadruple(verb,subj.get(),pp.get(),obj));
    }
  }
  if (rawScore == null) {
    rawScore=verbObjAffinity.get(verb);
  }
  if (rawScore == null) {
    return deletionProbability(edge.getRelation().toString());
  }
 else {
    return 1.0 - Math.min(1.0,rawScore / upperProbabilityCap);
  }
}
