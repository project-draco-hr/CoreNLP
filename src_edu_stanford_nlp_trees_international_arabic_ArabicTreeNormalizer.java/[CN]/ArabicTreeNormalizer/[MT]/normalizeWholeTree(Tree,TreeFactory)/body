{
  tree=tree.prune(emptyFilter,tf).spliceOut(aOverAFilter,tf);
  for (  Tree t : tree) {
    if (t.isLeaf()) {
      if (t.value().contains(MorphoFeatureSpecification.MORPHO_MARK)) {
        String[] toks=t.value().split(MorphoFeatureSpecification.MORPHO_MARK);
        if (toks.length != 2)         System.err.printf("%s: Word contains malformed morph annotation: %s%n",this.getClass().getName(),t.value());
 else         if (t.label() instanceof CoreLabel) {
          ((CoreLabel)t.label()).setValue(toks[0].trim().intern());
          ((CoreLabel)t.label()).setWord(toks[0].trim().intern());
          Pair<String,String> lemmaMorph=MorphoFeatureSpecification.splitMorphString(toks[0],toks[1]);
          String lemma=lemmaMorph.first();
          String morphAnalysis=lemmaMorph.second();
          if (lemma.equals(toks[0])) {
            ((CoreLabel)t.label()).setOriginalText(toks[1].trim().intern());
          }
 else {
            String newLemma=lexMapper.map(null,lemma);
            if (newLemma == null || newLemma.trim().length() == 0) {
              newLemma=lemma;
            }
            String newMorphAnalysis=newLemma + MorphoFeatureSpecification.LEMMA_MARK + morphAnalysis;
            ((CoreLabel)t.label()).setOriginalText(newMorphAnalysis.intern());
          }
        }
 else {
          System.err.printf("%s: Cannot store morph analysis in non-CoreLabel: %s%n",this.getClass().getName(),t.label().getClass().getName());
        }
      }
    }
 else     if (t.isPreTerminal()) {
      if (t.value() == null || t.value().equals("")) {
        System.err.printf("%s: missing tag for\n%s\n",this.getClass().getName(),t.pennString());
      }
 else       if (t.label() instanceof HasTag) {
        ((HasTag)t.label()).setTag(t.value());
      }
    }
 else {
      int nk=t.numChildren();
      List<Tree> newKids=new ArrayList<Tree>(nk);
      for (int j=0; j < nk; j++) {
        Tree child=t.getChild(j);
        if (child.isLeaf()) {
          System.err.printf("%s: Splicing in DUMMYTAG for%n%s%n",this.getClass().getName(),t.toString());
          newKids.add(tf.newTreeNode("DUMMYTAG",Collections.singletonList(child)));
        }
 else {
          newKids.add(child);
        }
      }
      t.setChildren(newKids);
    }
  }
  if (markPRDverb) {
    TregexMatcher m=prdVerbPattern.matcher(tree);
    Tree match=null;
    while (m.find()) {
      if (m.getMatch() != match) {
        match=m.getMatch();
        match.label().setValue(match.label().value() + "-PRDverb");
        Tree prd=m.getNode("prd");
        prd.label().setValue(super.normalizeNonterminal(prd.label().value()));
      }
    }
  }
  if (retainNPSbj) {
    TregexMatcher m=npSbjPattern.matcher(tree);
    while (m.find()) {
      Tree match=m.getMatch();
      match.label().setValue("NP");
    }
  }
  if (tree.isPreTerminal()) {
    String val=tree.label().value();
    if (val.equals("CC") || val.startsWith("PUNC") || val.equals("CONJ")) {
      System.err.printf("%s: Bare tagged word being wrapped in FRAG\n%s\n",this.getClass().getName(),tree.pennString());
      tree=tf.newTreeNode("FRAG",Collections.singletonList(tree));
    }
 else {
      System.err.printf("%s: Bare tagged word\n%s\n",this.getClass().getName(),tree.pennString());
    }
  }
  while (tree != null && (tree.value() == null || tree.value().equals("")) && tree.numChildren() <= 1)   tree=tree.firstChild();
  if (tree != null && !tree.value().equals(rootLabel))   tree=tf.newTreeNode(rootLabel,Collections.singletonList(tree));
  return tree;
}
