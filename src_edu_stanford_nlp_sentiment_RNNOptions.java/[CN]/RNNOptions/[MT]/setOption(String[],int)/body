{
  if (args[argIndex].equalsIgnoreCase("-randomSeed")) {
    randomSeed=Integer.parseInt(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-wordVectors")) {
    wordVectors=args[argIndex + 1];
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-unkWord")) {
    unkWord=args[argIndex + 1];
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-numHid")) {
    numHid=Integer.parseInt(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-numClasses")) {
    numClasses=Integer.parseInt(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-lowercaseWordVectors")) {
    lowercaseWordVectors=true;
    return argIndex + 1;
  }
 else   if (args[argIndex].equalsIgnoreCase("-nolowercaseWordVectors")) {
    lowercaseWordVectors=false;
    return argIndex + 1;
  }
 else   if (args[argIndex].equalsIgnoreCase("-randomWordVectors")) {
    randomWordVectors=true;
    return argIndex + 1;
  }
 else   if (args[argIndex].equalsIgnoreCase("-norandomWordVectors")) {
    randomWordVectors=false;
    return argIndex + 1;
  }
 else   if (args[argIndex].equalsIgnoreCase("-simplifiedModel")) {
    simplifiedModel=true;
    return argIndex + 1;
  }
 else   if (args[argIndex].equalsIgnoreCase("-nosimplifiedModel")) {
    simplifiedModel=false;
    combineClassification=false;
    return argIndex + 1;
  }
 else   if (args[argIndex].equalsIgnoreCase("-combineClassification")) {
    combineClassification=true;
    simplifiedModel=true;
    return argIndex + 1;
  }
 else   if (args[argIndex].equalsIgnoreCase("-nocombineClassification")) {
    combineClassification=false;
    return argIndex + 1;
  }
 else   if (args[argIndex].equalsIgnoreCase("-useTensors")) {
    useTensors=true;
    return argIndex + 1;
  }
 else   if (args[argIndex].equalsIgnoreCase("-nouseTensors")) {
    useTensors=false;
    return argIndex + 1;
  }
 else   if (args[argIndex].equalsIgnoreCase("-classNames")) {
    classNames=args[argIndex + 1].split(",");
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-equivalenceClasses")) {
    if (args[argIndex + 1].trim().length() == 0) {
      equivalenceClasses=null;
      return argIndex + 2;
    }
    String[] pieces=args[argIndex + 1].split(";");
    equivalenceClasses=new int[pieces.length][];
    for (int i=0; i < pieces.length; ++i) {
      String[] values=pieces[i].split(",");
      equivalenceClasses[i]=new int[values.length];
      for (int j=0; j < values.length; ++j) {
        equivalenceClasses[i][j]=Integer.valueOf(values[j]);
      }
    }
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-equivalenceClassNames")) {
    if (args[argIndex + 1].trim().length() > 0) {
      equivalenceClassNames=args[argIndex + 1].split(",");
    }
 else {
      equivalenceClassNames=null;
    }
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-binaryModel")) {
    numClasses=2;
    classNames=BINARY_DEFAULT_CLASS_NAMES;
    equivalenceClasses=BINARY_APPROXIMATE_EQUIVALENCE_CLASSES;
    trainOptions.setOption(args,argIndex);
    return argIndex + 1;
  }
 else {
    int newIndex=trainOptions.setOption(args,argIndex);
    if (newIndex == argIndex) {
      newIndex=testOptions.setOption(args,argIndex);
    }
    return newIndex;
  }
}
