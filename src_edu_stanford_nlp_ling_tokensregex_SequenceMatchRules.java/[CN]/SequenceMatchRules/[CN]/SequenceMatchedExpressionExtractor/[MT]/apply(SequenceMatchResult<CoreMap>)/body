{
  MatchedExpression te=extractor.createMatchedExpression(null,Interval.toInterval(matched.start(group),matched.end(group),Interval.INTERVAL_OPEN_END));
  if (Double.isNaN(te.priority)) {
    te.priority=matched.priority();
  }
  if (Double.isNaN(te.weight)) {
    te.weight=matched.score();
  }
  if (this.group != 0) {
    te.context=matched.toBasicSequenceMatchResult();
  }
  return te;
}
