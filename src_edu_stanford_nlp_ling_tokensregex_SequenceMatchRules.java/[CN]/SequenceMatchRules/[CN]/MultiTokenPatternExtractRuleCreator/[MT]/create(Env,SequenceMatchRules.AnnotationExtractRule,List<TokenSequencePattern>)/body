{
  AnnotationExtractRule r=new AnnotationExtractRule();
  r.stage=aerTemplate.stage;
  r.active=aerTemplate.active;
  r.priority=Double.NaN;
  r.weight=Double.NaN;
  r.annotationField=aerTemplate.annotationField;
  r.tokensAnnotationField=aerTemplate.tokensAnnotationField;
  r.tokensResultAnnotationField=aerTemplate.tokensResultAnnotationField;
  r.resultAnnotationField=aerTemplate.resultAnnotationField;
  r.resultNestedAnnotationField=aerTemplate.resultNestedAnnotationField;
  r.matchFindType=aerTemplate.matchFindType;
  r.matchedExpressionGroup=aerTemplate.matchedExpressionGroup;
  r.matchWithResults=aerTemplate.matchWithResults;
  r.ruleType=aerTemplate.ruleType;
  r.isComposite=aerTemplate.isComposite;
  r.includeNested=aerTemplate.includeNested;
  r.active=aerTemplate.active;
  r.result=aerTemplate.result;
  if (r.annotationField == null) {
    r.annotationField=r.tokensAnnotationField;
  }
  r.ruleType=TOKEN_PATTERN_RULE_TYPE;
  MultiPatternMatcher<CoreMap> multiPatternMatcher=TokenSequencePattern.getMultiPatternMatcher(patterns);
  multiPatternMatcher.setMatchWithResult(r.matchWithResults);
  updateExtractRule(r,env,multiPatternMatcher,null,r.result);
  return r;
}
