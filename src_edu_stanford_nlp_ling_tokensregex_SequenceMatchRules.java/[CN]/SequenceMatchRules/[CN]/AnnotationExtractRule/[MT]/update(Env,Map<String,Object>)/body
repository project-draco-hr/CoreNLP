{
  for (  String key : attributes.keySet()) {
    Object obj=attributes.get(key);
switch (key) {
case "name":
      name=(String)Expressions.asObject(env,obj);
    break;
case "priority":
  priority=((Number)Expressions.asObject(env,obj)).doubleValue();
break;
case "stage":
stage=((Number)Expressions.asObject(env,obj)).intValue();
break;
case "weight":
weight=((Number)Expressions.asObject(env,obj)).doubleValue();
break;
case "over":
Object annoKey=Expressions.asObject(env,obj);
if (annoKey instanceof Class) {
annotationField=(Class)annoKey;
}
 else if (annoKey instanceof String) {
annotationField=EnvLookup.lookupAnnotationKeyWithClassname(env,(String)annoKey);
}
 else if (annotationField == null) {
annotationField=CoreMap.class;
}
 else {
throw new IllegalArgumentException("Invalid annotation key " + annoKey);
}
break;
case "active":
active=(Boolean)Expressions.asObject(env,obj);
break;
case "ruleType":
ruleType=(String)Expressions.asObject(env,obj);
break;
case "matchFindType":
matchFindType=SequenceMatcher.FindType.valueOf((String)Expressions.asObject(env,obj));
break;
case "matchWithResults":
matchWithResults=((Boolean)Expressions.asObject(env,obj)).booleanValue();
break;
case "matchedExpressionGroup":
matchedExpressionGroup=((Number)Expressions.asObject(env,obj)).intValue();
break;
}
}
}
