{
  for (  String key : attributes.keySet()) {
    Object obj=attributes.get(key);
    if ("name".equals(key)) {
      name=(String)Expressions.asObject(env,obj);
    }
 else     if ("priority".equals(key)) {
      priority=((Number)Expressions.asObject(env,obj)).doubleValue();
    }
 else     if ("stage".equals(key)) {
      stage=((Number)Expressions.asObject(env,obj)).intValue();
    }
 else     if ("weight".equals(key)) {
      weight=((Number)Expressions.asObject(env,obj)).doubleValue();
    }
 else     if ("over".equals(key)) {
      Object annoKey=Expressions.asObject(env,obj);
      if (annoKey instanceof Class) {
        annotationField=(Class)annoKey;
      }
 else       if (annoKey instanceof String) {
        annotationField=EnvLookup.lookupAnnotationKey(env,(String)annoKey);
      }
 else       if (annotationField == null) {
        annotationField=CoreMap.class;
      }
 else {
        throw new IllegalArgumentException("Invalid annotation key " + annoKey);
      }
    }
 else     if ("active".equals(key)) {
      active=(Boolean)Expressions.asObject(env,obj);
    }
 else     if ("ruleType".equals(key)) {
      ruleType=(String)Expressions.asObject(env,obj);
    }
 else     if ("matchFindType".equals(key)) {
      matchFindType=SequenceMatcher.FindType.valueOf((String)Expressions.asObject(env,obj));
    }
 else     if ("matchWithResults".equals(key)) {
      matchWithResults=((Boolean)Expressions.asObject(env,obj)).booleanValue();
    }
 else     if ("matchedExpressionGroup".equals(key)) {
      matchedExpressionGroup=((Number)Expressions.asObject(env,obj)).intValue();
    }
  }
}
