{
  this.reln=r;
  this.negDesc=negDesc;
  attributes=Generics.newHashMap();
  descString="{";
  for (  Map.Entry<String,String> entry : attrs.entrySet()) {
    if (!descString.equals("{"))     descString+=";";
    String key=entry.getKey();
    String value=entry.getValue();
    if (value.equals("__")) {
      attributes.put(key,Pair.makePair(true,true));
    }
 else     if (value.matches("/.*/")) {
      boolean isRegexp=false;
      for (int i=1; i < value.length() - 1; ++i) {
        char chr=value.charAt(i);
        if (!((chr >= 'A' && chr <= 'Z') || (chr >= 'a' && chr <= 'z') || (chr >= '0' && chr <= '9'))) {
          isRegexp=true;
          break;
        }
      }
      String patternContent=value.substring(1,value.length() - 1);
      if (isRegexp) {
        attributes.put(key,Pair.makePair(Pattern.compile(patternContent),Pattern.compile(patternContent,Pattern.CASE_INSENSITIVE)));
      }
 else {
        attributes.put(key,Pair.makePair(patternContent,patternContent));
      }
    }
 else {
      attributes.put(key,Pair.makePair(value,value));
    }
    descString+=(key + ':' + value);
  }
  if (root)   descString+="$";
 else   if (empty)   descString+="#";
  descString+='}';
  this.name=name;
  this.child=null;
  this.isRoot=root;
  this.isEmpty=empty;
  this.variableGroups=variableGroups;
}
