{
  List<Transition> transitions=buildTransitionList(rightNP,shift,rightVP,finalize);
  assertTrue(ReorderingOracle.reorderIncorrectShiftTransition(transitions));
  assertEquals(buildTransitionList(tempRightVP,rightVP,finalize),transitions);
  transitions=buildTransitionList(rightNP,shift,shift,leftNP,rightVP,finalize);
  assertTrue(ReorderingOracle.reorderIncorrectShiftTransition(transitions));
  assertEquals(buildTransitionList(shift,leftNP,tempRightVP,rightVP,finalize),transitions);
  transitions=buildTransitionList(rightNP,shift,unaryADVP,shift,leftNP,rightVP,finalize);
  assertTrue(ReorderingOracle.reorderIncorrectShiftTransition(transitions));
  assertEquals(buildTransitionList(unaryADVP,shift,leftNP,tempRightVP,rightVP,finalize),transitions);
  transitions=buildTransitionList(rightNP,shift,shift,unaryADVP,leftNP,rightVP,finalize);
  assertTrue(ReorderingOracle.reorderIncorrectShiftTransition(transitions));
  assertEquals(buildTransitionList(shift,unaryADVP,leftNP,tempRightVP,rightVP,finalize),transitions);
  transitions=buildTransitionList(leftNP,shift,shift,unaryADVP,leftNP,rightVP,finalize);
  assertTrue(ReorderingOracle.reorderIncorrectShiftTransition(transitions));
  assertEquals(buildTransitionList(shift,unaryADVP,leftNP,tempRightVP,rightVP,finalize),transitions);
  transitions=buildTransitionList(leftNP,shift,shift,unaryADVP,leftNP,leftVP,finalize);
  assertTrue(ReorderingOracle.reorderIncorrectShiftTransition(transitions));
  assertEquals(buildTransitionList(shift,unaryADVP,leftNP,tempLeftVP,leftVP,finalize),transitions);
  transitions=buildTransitionList(rightNP,shift,shift,unaryADVP,leftNP,leftVP,finalize);
  assertTrue(ReorderingOracle.reorderIncorrectShiftTransition(transitions));
  assertEquals(buildTransitionList(shift,unaryADVP,leftNP,tempLeftVP,rightVP,finalize),transitions);
  transitions=buildTransitionList(leftNP,leftNP,shift,shift,unaryADVP,leftNP,rightVP,finalize);
  assertTrue(ReorderingOracle.reorderIncorrectShiftTransition(transitions));
  assertEquals(buildTransitionList(shift,unaryADVP,leftNP,tempRightVP,tempRightVP,rightVP,finalize),transitions);
  transitions=buildTransitionList(leftNP,rightNP,shift,shift,unaryADVP,leftNP,leftVP,finalize);
  assertTrue(ReorderingOracle.reorderIncorrectShiftTransition(transitions));
  assertEquals(buildTransitionList(shift,unaryADVP,leftNP,tempLeftVP,tempLeftVP,rightVP,finalize),transitions);
  transitions=buildTransitionList(leftNP,leftNP,shift,shift,unaryADVP,leftNP,leftVP,finalize);
  assertTrue(ReorderingOracle.reorderIncorrectShiftTransition(transitions));
  assertEquals(buildTransitionList(shift,unaryADVP,leftNP,tempLeftVP,tempLeftVP,leftVP,finalize),transitions);
}
