{
  List<Mention> mentionsList=CorefUtils.getSortedMentions(document);
  Map<Integer,List<Mention>> mentionsByHeadIndex=new HashMap<>();
  for (int i=0; i < mentionsList.size(); i++) {
    Mention m=mentionsList.get(i);
    List<Mention> withIndex=mentionsByHeadIndex.get(m.headIndex);
    if (withIndex == null) {
      withIndex=new ArrayList<>();
      mentionsByHeadIndex.put(m.headIndex,withIndex);
    }
    withIndex.add(m);
  }
  Map<Integer,Mention> mentions=document.predictedMentionsByID;
  List<Example> examples=new ArrayList<>();
  Set<Integer> mentionsToExtract=new HashSet<>();
  for (  Map.Entry<Pair<Integer,Integer>,Boolean> pair : labeledPairs.entrySet()) {
    Mention m1=mentions.get(pair.getKey().first);
    Mention m2=mentions.get(pair.getKey().second);
    mentionsToExtract.add(m1.mentionID);
    mentionsToExtract.add(m2.mentionID);
    CompressedFeatureVector features=compressor.compress(getFeatures(document,m1,m2));
    examples.add(new Example(id,m1,m2,pair.getValue() ? 1.0 : 0.0,features));
  }
  Map<Integer,CompressedFeatureVector> mentionFeatures=new HashMap<>();
  for (  int mentionID : mentionsToExtract) {
    mentionFeatures.put(mentionID,compressor.compress(getFeatures(document,document.predictedMentionsByID.get(mentionID),mentionsByHeadIndex)));
  }
  return new DocumentExamples(id,examples,mentionFeatures);
}
