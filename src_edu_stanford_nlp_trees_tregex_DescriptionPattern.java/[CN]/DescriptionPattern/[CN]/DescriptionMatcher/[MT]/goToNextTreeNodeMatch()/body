{
  decommitVariableGroups();
  removeNamedNodes();
  finished=true;
  Matcher m=null;
  String value=null;
  if (treeNodeMatchCandidateIterator == null) {
    treeNodeMatchCandidateIterator=myNode.rel.searchNodeIterator(tree,this);
  }
  while (treeNodeMatchCandidateIterator.hasNext()) {
    nextTreeNodeMatchCandidate=treeNodeMatchCandidateIterator.next();
    if (myNode.descriptionMode == null) {
      if (myNode.isLink) {
        Tree otherTree=namesToNodes.get(myNode.linkedName);
        if (otherTree != null) {
          String otherValue=myNode.basicCatFunction == null ? otherTree.value() : myNode.basicCatFunction.apply(otherTree.value());
          String myValue=myNode.basicCatFunction == null ? nextTreeNodeMatchCandidate.value() : myNode.basicCatFunction.apply(nextTreeNodeMatchCandidate.value());
          if (otherValue.equals(myValue)) {
            finished=false;
            break;
          }
        }
      }
 else       if (namesToNodes.get(myNode.name) == nextTreeNodeMatchCandidate) {
        finished=false;
        break;
      }
    }
 else {
      boolean found;
      value=nextTreeNodeMatchCandidate.value();
      if (value == null) {
        found=false;
      }
 else {
        if (myNode.basicCatFunction != null) {
          value=myNode.basicCatFunction.apply(value);
        }
switch (myNode.descriptionMode) {
case EXACT:
          found=value.equals(myNode.exactMatch);
        break;
case PATTERN:
      m=myNode.descPattern.matcher(value);
    found=m.find();
  break;
case ANYTHING:
found=true;
break;
case STRINGS:
found=myNode.stringFilter.accept(value);
break;
default :
throw new IllegalArgumentException("Unexpected match mode");
}
}
if (found) {
for (Pair<Integer,String> varGroup : myNode.variableGroups) {
String thisVariable=varGroup.second();
String thisVarString=variableStrings.getString(thisVariable);
if (m != null) {
if (thisVarString != null && !thisVarString.equals(m.group(varGroup.first()))) {
found=false;
break;
}
}
 else {
if (thisVarString != null && !thisVarString.equals(value)) {
found=false;
break;
}
}
}
}
if (found != myNode.negDesc) {
finished=false;
break;
}
}
}
if (!finished) {
resetChild();
if ((myNode.descriptionMode != null || myNode.isLink) && myNode.name != null) {
namesToNodes.put(myNode.name,nextTreeNodeMatchCandidate);
}
if (m != null) {
commitVariableGroups(m);
}
 else if (value != null) {
commitVariableGroups(value);
}
}
}
