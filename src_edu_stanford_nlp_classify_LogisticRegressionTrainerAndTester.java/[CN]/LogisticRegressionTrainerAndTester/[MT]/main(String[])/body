{
  boolean rvf=true;
  String trainFile=null;
  String testFile=null;
  String devFile=null;
  boolean devset=false;
  int start=0;
  while (start < args.length) {
    if (args[start].equals("-binary")) {
      rvf=false;
      start++;
      continue;
    }
    if (args[start].equals("-dev")) {
      devset=true;
      start++;
      continue;
    }
    trainFile=args[start];
    start++;
    break;
  }
  if (devset) {
    devFile=args[start++];
  }
  testFile=args[start];
  LogisticRegressionTrainerAndTester<String,String> lRTT=null;
  GeneralDataset<String,String> train=null;
  GeneralDataset<String,String> test=null;
  GeneralDataset<String,String> dev=null;
  if (rvf) {
    train=RVFDataset.readSVMLightFormat(trainFile);
    test=RVFDataset.readSVMLightFormat(testFile,train.featureIndex(),train.labelIndex());
    if (devset) {
      dev=RVFDataset.readSVMLightFormat(devFile,train.featureIndex(),train.labelIndex());
    }
  }
 else {
    train=Dataset.readSVMLightFormat(trainFile);
    test=Dataset.readSVMLightFormat(testFile,train.featureIndex(),train.labelIndex());
    if (devset) {
      dev=Dataset.readSVMLightFormat(devFile,train.featureIndex(),train.labelIndex());
    }
  }
  if (devset) {
    lRTT=new LogisticRegressionTrainerAndTester<String,String>(train,dev);
  }
 else {
    lRTT=new LogisticRegressionTrainerAndTester<String,String>(train);
  }
  AccuracyStatistics aS=lRTT.getStats(test);
  System.err.println("statistics " + aS);
}
