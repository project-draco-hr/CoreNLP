{
  if (VERBOSE) {
    log.info("Sentence splitting ...");
  }
  if (!annotation.containsKey(CoreAnnotations.TokensAnnotation.class)) {
    throw new IllegalArgumentException("WordsToSentencesAnnotator: unable to find words/tokens in: " + annotation);
  }
  String text=annotation.get(CoreAnnotations.TextAnnotation.class);
  List<CoreLabel> tokens=annotation.get(CoreAnnotations.TokensAnnotation.class);
  String docID=annotation.get(CoreAnnotations.DocIDAnnotation.class);
  int tokenOffset=0;
  int lineNumber=0;
  CoreMap sectionAnnotations=null;
  List<CoreMap> sentences=new ArrayList<>();
  for (  List<CoreLabel> sentenceTokens : wts.process(tokens)) {
    if (countLineNumbers) {
      ++lineNumber;
    }
    if (sentenceTokens.isEmpty()) {
      if (!countLineNumbers) {
        throw new IllegalStateException("unexpected empty sentence: " + sentenceTokens);
      }
 else {
        continue;
      }
    }
    int begin=sentenceTokens.get(0).get(CoreAnnotations.CharacterOffsetBeginAnnotation.class);
    int last=sentenceTokens.size() - 1;
    int end=sentenceTokens.get(last).get(CoreAnnotations.CharacterOffsetEndAnnotation.class);
    String sentenceText=text.substring(begin,end);
    Annotation sentence=new Annotation(sentenceText);
    sentence.set(CoreAnnotations.CharacterOffsetBeginAnnotation.class,begin);
    sentence.set(CoreAnnotations.CharacterOffsetEndAnnotation.class,end);
    sentence.set(CoreAnnotations.TokensAnnotation.class,sentenceTokens);
    sentence.set(CoreAnnotations.TokenBeginAnnotation.class,tokenOffset);
    tokenOffset+=sentenceTokens.size();
    sentence.set(CoreAnnotations.TokenEndAnnotation.class,tokenOffset);
    sentence.set(CoreAnnotations.SentenceIndexAnnotation.class,sentences.size());
    if (countLineNumbers) {
      sentence.set(CoreAnnotations.LineNumberAnnotation.class,lineNumber);
    }
    CoreLabel sentenceStartToken=sentenceTokens.get(0);
    CoreLabel sentenceEndToken=sentenceTokens.get(sentenceTokens.size() - 1);
    CoreMap sectionStart=sentenceStartToken.get(CoreAnnotations.SectionStartAnnotation.class);
    if (sectionStart != null) {
      sectionAnnotations=sectionStart;
    }
    if (sectionAnnotations != null) {
      ChunkAnnotationUtils.copyUnsetAnnotations(sectionAnnotations,sentence);
    }
    String sectionEnd=sentenceEndToken.get(CoreAnnotations.SectionEndAnnotation.class);
    if (sectionEnd != null) {
      sectionAnnotations=null;
    }
    if (docID != null) {
      sentence.set(CoreAnnotations.DocIDAnnotation.class,docID);
    }
    int index=1;
    for (    CoreLabel token : sentenceTokens) {
      token.setIndex(index++);
      token.setSentIndex(sentences.size());
      if (docID != null) {
        token.setDocID(docID);
      }
    }
    sentences.add(sentence);
  }
  annotation.set(CoreAnnotations.SentencesAnnotation.class,sentences);
}
