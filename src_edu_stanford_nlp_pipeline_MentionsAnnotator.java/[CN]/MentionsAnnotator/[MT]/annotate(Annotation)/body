{
  List<CoreLabel> tokens=annotation.get(CoreAnnotations.TokensAnnotation.class);
  Integer annoTokenBegin=annotation.get(CoreAnnotations.TokenBeginAnnotation.class);
  if (annoTokenBegin == null) {
    annoTokenBegin=0;
  }
  List<CoreMap> chunks=chunkIdentifier.getAnnotatedChunks(tokens,annoTokenBegin,CoreAnnotations.TextAnnotation.class,CoreAnnotations.NamedEntityTagAnnotation.class,IS_TOKENS_COMPATIBLE);
  annotation.set(CoreAnnotations.MentionsAnnotation.class,chunks);
  List<CoreMap> mentions=annotation.get(CoreAnnotations.MentionsAnnotation.class);
  if (mentions != null) {
    for (    CoreMap mention : mentions) {
      List<CoreLabel> mentionTokens=mention.get(CoreAnnotations.TokensAnnotation.class);
      String name=(String)CoreMapAttributeAggregator.FIRST_NON_NIL.aggregate(CoreAnnotations.NormalizedNamedEntityTagAnnotation.class,mentionTokens);
      if (name == null) {
        name=mention.get(CoreAnnotations.TextAnnotation.class);
      }
 else {
        mention.set(CoreAnnotations.NormalizedNamedEntityTagAnnotation.class,name);
      }
      String type=mention.get(CoreAnnotations.NamedEntityTagAnnotation.class);
      mention.set(CoreAnnotations.EntityTypeAnnotation.class,type);
      Timex timex=(Timex)CoreMapAttributeAggregator.FIRST_NON_NIL.aggregate(TimeAnnotations.TimexAnnotation.class,mentionTokens);
      if (timex != null) {
        mention.set(TimeAnnotations.TimexAnnotation.class,timex);
      }
    }
  }
}
