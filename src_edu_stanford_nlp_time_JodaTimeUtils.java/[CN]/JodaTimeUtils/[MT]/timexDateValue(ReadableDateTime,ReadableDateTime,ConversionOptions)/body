{
  if (begin.getYear() < -100000) {
    return "PAST_REF";
  }
 else   if (end.getYear() > 100000) {
    return "FUTURE_REF";
  }
 else   if (begin.equals(end)) {
    return timexTimeValue(begin);
  }
  StringBuilder value=new StringBuilder();
  boolean shouldBeDone=false;
  int monthDiff=(end.getMonthOfYear() - begin.getMonthOfYear()) + (end.getYear() - begin.getYear()) * 12;
  int weekDiff=end.getWeekOfWeekyear() - begin.getWeekOfWeekyear() + (end.getYear() - begin.getYear()) * maximumValue(weekOfWeekyear(),begin);
  int dayDiff=end.getDayOfMonth() - begin.getDayOfMonth() + monthDiff * maximumValue(dayOfMonth(),begin);
  int hrDiff=end.getHourOfDay() - begin.getHourOfDay() + dayDiff * 24;
  int minDiff=end.getMinuteOfHour() - begin.getMinuteOfHour() + hrDiff * 60;
  int secDiff=end.getSecondOfMinute() - begin.getSecondOfMinute() + minDiff * 60;
  if (noFurtherFields(year(),begin,end)) {
    int diff=end.getYear() - begin.getYear();
    if (diff == 100 && (opts.forceDate || begin.getYear() % 100 == 0)) {
      value.append((begin.getYear() / 100)).append("XX");
    }
 else     if (diff == 10 && (opts.forceDate || begin.getYear() % 10 == 0)) {
      value.append((begin.getYear() / 10));
    }
 else     if (diff == 1 || opts.forceDate) {
      value.append(begin.getYear());
    }
 else {
      return timexDurationValue(begin,end);
    }
    return value.toString();
  }
 else   if (monthDiff < 12 || opts.forceDate) {
    value.append(begin.getYear());
  }
 else {
    return timexDurationValue(begin,end);
  }
  value.append("-");
  if (noFurtherFields(monthOfYear(),begin,end) || noFurtherFields(weekOfWeekyear(),begin,end)) {
    boolean monthTerminal=noFurtherFields(monthOfYear(),begin,end);
    boolean weekTerminal=noFurtherFields(weekOfWeekyear(),begin,end);
    if (monthTerminal && monthDiff == 6 && (begin.getMonthOfYear() - 1) % 6 == 0) {
      value.append("H").append((begin.getMonthOfYear() - 1) / 6 + 1);
    }
 else     if (monthTerminal && monthDiff == 3 && (begin.getMonthOfYear() - 1) % 3 == 0) {
      value.append("Q").append((begin.getMonthOfYear() - 1) / 3 + 1);
    }
 else     if (monthTerminal && monthDiff == 3 && begin.getMonthOfYear() % 3 == 0) {
switch (begin.getMonthOfYear()) {
case 12:
        value.append("WI");
      break;
case 3:
    value.append("SP");
  break;
case 6:
value.append("SU");
break;
case 9:
value.append("FA");
break;
default :
throw new IllegalStateException("Season start month is unknown");
}
}
 else if (weekTerminal && weekDiff == 1) {
value.append("W").append(zeroPad(begin.getWeekOfWeekyear(),2));
}
 else if (monthTerminal && monthDiff == 1 && weekDiff != 1 || opts.forceDate) {
value.append(zeroPad(begin.getMonthOfYear(),2));
}
 else {
return timexDurationValue(begin,end);
}
return value.toString();
}
 else if (noFurtherFields(dayOfWeek(),begin,end) && dayDiff == 2 && begin.getDayOfWeek() == 6) {
value.append("W").append(zeroPad(begin.getWeekOfWeekyear(),2)).append("-WE");
return value.toString();
}
 else if (dayDiff < maximumValue(dayOfMonth(),begin) || opts.forceDate) {
value.append(zeroPad(begin.getMonthOfYear(),2));
}
 else {
return timexDurationValue(begin,end);
}
value.append("-");
if (noFurtherFields(dayOfMonth(),begin,end)) {
if (dayDiff == 1 || opts.forceDate) {
value.append(zeroPad(begin.getDayOfMonth(),2));
}
 else {
return timexDurationValue(begin,end);
}
return value.toString();
}
 else if (hrDiff < 24 || opts.forceDate) {
value.append(zeroPad(begin.getDayOfMonth(),2));
}
 else {
return timexDurationValue(begin,end);
}
value.append("T");
if (noFurtherFields(hourOfDay(),begin,end)) {
if (hrDiff == 12 && begin.getHourOfDay() == 0) {
value.append("H1");
}
 else if (hrDiff == 12 && begin.getHourOfDay() == 12) {
value.append("H2");
}
 else if (hrDiff == 4 && begin.getHourOfDay() == 8) {
value.append("MO");
}
 else if (hrDiff == 4 && begin.getHourOfDay() == 12) {
value.append("AF");
}
 else if (hrDiff == 4 && begin.getHourOfDay() == 16) {
value.append("EV");
}
 else if (hrDiff == 4 && begin.getHourOfDay() == 20) {
value.append("NI");
}
 else if (hrDiff == 1 || opts.forceDate) {
value.append(zeroPad(begin.getHourOfDay() + 1,2));
}
 else {
return timexDurationValue(begin,end);
}
return value.toString();
}
 else if (minDiff <= 60 || opts.forceDate) {
value.append(zeroPad(begin.getHourOfDay(),2));
}
 else {
return timexDurationValue(begin,end);
}
value.append(":");
value.append(zeroPad(begin.getMinuteOfHour(),2));
return value.toString();
}
