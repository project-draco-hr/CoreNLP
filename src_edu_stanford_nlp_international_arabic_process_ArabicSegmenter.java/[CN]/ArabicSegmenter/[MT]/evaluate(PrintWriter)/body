{
  System.err.println("Starting evaluation...");
  boolean hasSegmentationMarkers=true;
  boolean hasTags=true;
  DocumentReaderAndWriter<CoreLabel> docReader=new ArabicDocumentReaderAndWriter(hasSegmentationMarkers,hasTags,tf);
  ObjectBank<List<CoreLabel>> lines=classifier.makeObjectBankFromFile(flags.testFile,docReader);
  Counter<String> labelTotal=new ClassicCounter<String>();
  Counter<String> labelCorrect=new ClassicCounter<String>();
  int total=0;
  int correct=0;
  for (  List<CoreLabel> line : lines) {
    line=classifier.classify(line);
    for (    CoreLabel label : line) {
      String observation=label.get(CoreAnnotations.CharAnnotation.class);
      if (!observation.equals(IOBUtils.getBoundaryCharacter())) {
        total++;
        String hypothesis=label.get(CoreAnnotations.AnswerAnnotation.class);
        String reference=label.get(CoreAnnotations.GoldAnswerAnnotation.class);
        labelTotal.incrementCount(reference);
        if (hypothesis.equals(reference)) {
          correct++;
          labelCorrect.incrementCount(reference);
        }
      }
    }
  }
  double accuracy=((double)correct) / ((double)total);
  accuracy*=100.0;
  pwOut.println("EVALUATION RESULTS");
  pwOut.printf("#datums:\t%d%n",total);
  pwOut.printf("#correct:\t%d%n",correct);
  pwOut.printf("accuracy:\t%.2f%n",accuracy);
  pwOut.println("==================");
  pwOut.println("PER LABEL ACCURACIES");
  for (  String refLabel : labelTotal.keySet()) {
    double nTotal=labelTotal.getCount(refLabel);
    double nCorrect=labelCorrect.getCount(refLabel);
    double acc=(nCorrect / nTotal) * 100.0;
    pwOut.printf(" %s\t%.2f%n",refLabel,acc);
  }
}
