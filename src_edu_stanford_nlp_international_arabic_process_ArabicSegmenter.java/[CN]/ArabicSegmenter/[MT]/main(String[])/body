{
  Properties options=StringUtils.argsToProperties(args,optionArgDefs());
  if (options.containsKey("help") || args.length == 0) {
    System.err.println(usage());
    System.exit(-1);
  }
  int nThreads=PropertiesUtils.getInt(options,"nthreads",1);
  ArabicSegmenter segmenter=getSegmenter(options);
  try {
    PrintWriter pwOut;
    if (segmenter.flags.outputEncoding != null) {
      OutputStreamWriter out=new OutputStreamWriter(System.out,segmenter.flags.outputEncoding);
      pwOut=new PrintWriter(out,true);
    }
 else     if (segmenter.flags.inputEncoding != null) {
      OutputStreamWriter out=new OutputStreamWriter(System.out,segmenter.flags.inputEncoding);
      pwOut=new PrintWriter(out,true);
    }
 else {
      pwOut=new PrintWriter(System.out,true);
    }
    if (segmenter.flags.testFile != null) {
      if (segmenter.flags.answerFile == null) {
        segmenter.evaluate(pwOut);
      }
 else {
        segmenter.evaluateRawText(pwOut);
      }
    }
 else {
      BufferedReader br=(segmenter.flags.textFile == null) ? IOUtils.readerFromStdin() : IOUtils.readerFromString(segmenter.flags.textFile,segmenter.flags.inputEncoding);
      double charsPerSec=decode(segmenter,br,pwOut,nThreads);
      IOUtils.closeIgnoringExceptions(br);
      System.err.printf("Done! Processed input text at %.2f input characters/second%n",charsPerSec);
    }
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    System.err.printf("%s: Could not open %s%n",ArabicSegmenter.class.getName(),segmenter.flags.textFile);
  }
}
