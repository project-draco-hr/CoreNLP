{
  dvModel.vectorToParams(theta);
  double localValue=0.0;
  double[] localDerivative=new double[theta.length];
  TwoDimensionalMap<String,String,SimpleMatrix> binaryW_dfsG, binaryW_dfsB;
  binaryW_dfsG=TwoDimensionalMap.treeMap();
  binaryW_dfsB=TwoDimensionalMap.treeMap();
  TwoDimensionalMap<String,String,SimpleMatrix> binaryScoreDerivativesG, binaryScoreDerivativesB;
  binaryScoreDerivativesG=TwoDimensionalMap.treeMap();
  binaryScoreDerivativesB=TwoDimensionalMap.treeMap();
  Map<String,SimpleMatrix> unaryW_dfsG, unaryW_dfsB;
  unaryW_dfsG=new TreeMap<>();
  unaryW_dfsB=new TreeMap<>();
  Map<String,SimpleMatrix> unaryScoreDerivativesG, unaryScoreDerivativesB;
  unaryScoreDerivativesG=new TreeMap<>();
  unaryScoreDerivativesB=new TreeMap<>();
  Map<String,SimpleMatrix> wordVectorDerivativesG=new TreeMap<>();
  Map<String,SimpleMatrix> wordVectorDerivativesB=new TreeMap<>();
  for (  TwoDimensionalMap.Entry<String,String,SimpleMatrix> entry : dvModel.binaryTransform) {
    int numRows=entry.getValue().numRows();
    int numCols=entry.getValue().numCols();
    binaryW_dfsG.put(entry.getFirstKey(),entry.getSecondKey(),new SimpleMatrix(numRows,numCols));
    binaryW_dfsB.put(entry.getFirstKey(),entry.getSecondKey(),new SimpleMatrix(numRows,numCols));
    binaryScoreDerivativesG.put(entry.getFirstKey(),entry.getSecondKey(),new SimpleMatrix(1,numRows));
    binaryScoreDerivativesB.put(entry.getFirstKey(),entry.getSecondKey(),new SimpleMatrix(1,numRows));
  }
  for (  Map.Entry<String,SimpleMatrix> entry : dvModel.unaryTransform.entrySet()) {
    int numRows=entry.getValue().numRows();
    int numCols=entry.getValue().numCols();
    unaryW_dfsG.put(entry.getKey(),new SimpleMatrix(numRows,numCols));
    unaryW_dfsB.put(entry.getKey(),new SimpleMatrix(numRows,numCols));
    unaryScoreDerivativesG.put(entry.getKey(),new SimpleMatrix(1,numRows));
    unaryScoreDerivativesB.put(entry.getKey(),new SimpleMatrix(1,numRows));
  }
  if (op.trainOptions.trainWordVectors) {
    for (    Map.Entry<String,SimpleMatrix> entry : dvModel.wordVectors.entrySet()) {
      int numRows=entry.getValue().numRows();
      int numCols=entry.getValue().numCols();
      wordVectorDerivativesG.put(entry.getKey(),new SimpleMatrix(numRows,numCols));
      wordVectorDerivativesB.put(entry.getKey(),new SimpleMatrix(numRows,numCols));
    }
  }
  Timing scoreTiming=new Timing();
  scoreTiming.doing("Scoring trees");
  int treeNum=0;
  MulticoreWrapper<Tree,Pair<DeepTree,DeepTree>> wrapper=new MulticoreWrapper<>(op.trainOptions.trainingThreads,new ScoringProcessor());
  for (  Tree tree : trainingBatch) {
    wrapper.put(tree);
  }
  wrapper.join();
  scoreTiming.done();
  while (wrapper.peek()) {
    Pair<DeepTree,DeepTree> result=wrapper.poll();
    DeepTree goldTree=result.first;
    DeepTree bestTree=result.second;
    StringBuilder treeDebugLine=new StringBuilder();
    Formatter formatter=new Formatter(treeDebugLine);
    boolean isDone=(Math.abs(bestTree.getScore() - goldTree.getScore()) <= 0.00001 || goldTree.getScore() > bestTree.getScore());
    String done=isDone ? "done" : "";
    formatter.format("Tree %6d Highest tree: %12.4f Correct tree: %12.4f %s",treeNum,bestTree.getScore(),goldTree.getScore(),done);
    log.info(treeDebugLine.toString());
    if (!isDone) {
      double valueDelta=bestTree.getScore() - goldTree.getScore();
      localValue+=valueDelta;
      List<String> words=getContextWords(goldTree.getTree());
      backpropDerivative(goldTree.getTree(),words,goldTree.getVectors(),binaryW_dfsG,unaryW_dfsG,binaryScoreDerivativesG,unaryScoreDerivativesG,wordVectorDerivativesG);
      backpropDerivative(bestTree.getTree(),words,bestTree.getVectors(),binaryW_dfsB,unaryW_dfsB,binaryScoreDerivativesB,unaryScoreDerivativesB,wordVectorDerivativesB);
    }
    ++treeNum;
  }
  double[] localDerivativeGood;
  double[] localDerivativeB;
  if (op.trainOptions.trainWordVectors) {
    localDerivativeGood=NeuralUtils.paramsToVector(theta.length,binaryW_dfsG.valueIterator(),unaryW_dfsG.values().iterator(),binaryScoreDerivativesG.valueIterator(),unaryScoreDerivativesG.values().iterator(),wordVectorDerivativesG.values().iterator());
    localDerivativeB=NeuralUtils.paramsToVector(theta.length,binaryW_dfsB.valueIterator(),unaryW_dfsB.values().iterator(),binaryScoreDerivativesB.valueIterator(),unaryScoreDerivativesB.values().iterator(),wordVectorDerivativesB.values().iterator());
  }
 else {
    localDerivativeGood=NeuralUtils.paramsToVector(theta.length,binaryW_dfsG.valueIterator(),unaryW_dfsG.values().iterator(),binaryScoreDerivativesG.valueIterator(),unaryScoreDerivativesG.values().iterator());
    localDerivativeB=NeuralUtils.paramsToVector(theta.length,binaryW_dfsB.valueIterator(),unaryW_dfsB.values().iterator(),binaryScoreDerivativesB.valueIterator(),unaryScoreDerivativesB.values().iterator());
  }
  for (int i=0; i < localDerivativeGood.length; i++) {
    localDerivative[i]=localDerivativeB[i] - localDerivativeGood[i];
  }
  value=localValue;
  derivative=localDerivative;
  value=(1.0 / trainingBatch.size()) * value;
  ArrayMath.multiplyInPlace(derivative,(1.0 / trainingBatch.size()));
  double[] currentParams=dvModel.paramsToVector();
  double regCost=0;
  for (  double currentParam : currentParams) {
    regCost+=currentParam * currentParam;
  }
  regCost=op.trainOptions.regCost * 0.5 * regCost;
  value+=regCost;
  ArrayMath.multiplyInPlace(currentParams,op.trainOptions.regCost);
  ArrayMath.pairwiseAddInPlace(derivative,currentParams);
}
