{
  if (tree.isLeaf()) {
    return;
  }
  if (tree.isPreTerminal()) {
    if (DVModel.TRAIN_WORD_VECTORS) {
      String word=tree.children()[0].label().value();
      word=dvModel.getVocabWord(word);
      SimpleMatrix derivative=deltaUp;
      wordVectorDerivatives.put(word,wordVectorDerivatives.get(word).plus(derivative));
    }
    return;
  }
  SimpleMatrix currentVector=nodeVectors.get(tree);
  SimpleMatrix currentVectorDerivative=RNNUtils.elementwiseApplyTanhDerivative(currentVector);
  SimpleMatrix scoreW=dvModel.getScoreWForNode(tree);
  currentVectorDerivative=currentVectorDerivative.elementMult(scoreW.transpose());
  SimpleMatrix deltaCurrent=deltaUp.plus(currentVectorDerivative);
  SimpleMatrix W=dvModel.getWForNode(tree);
  SimpleMatrix WTdelta=W.transpose().mult(deltaCurrent);
  if (tree.children().length == 2) {
    String leftLabel=dvModel.basicCategory(tree.children()[0].label().value());
    String rightLabel=dvModel.basicCategory(tree.children()[1].label().value());
    binaryScoreDerivatives.put(leftLabel,rightLabel,binaryScoreDerivatives.get(leftLabel,rightLabel).plus(currentVector.transpose()));
    SimpleMatrix leftVector=nodeVectors.get(tree.children()[0]);
    SimpleMatrix rightVector=nodeVectors.get(tree.children()[1]);
    SimpleMatrix childrenVector=RNNUtils.concatenateWithBias(leftVector,rightVector);
    if (op.trainOptions.useContextWords) {
      childrenVector=concatenateContextWords(childrenVector,tree.getSpan(),words);
    }
    SimpleMatrix W_df=deltaCurrent.mult(childrenVector.transpose());
    binaryW_dfs.put(leftLabel,rightLabel,binaryW_dfs.get(leftLabel,rightLabel).plus(W_df));
    SimpleMatrix leftDerivative=RNNUtils.elementwiseApplyTanhDerivative(leftVector);
    SimpleMatrix rightDerivative=RNNUtils.elementwiseApplyTanhDerivative(rightVector);
    SimpleMatrix leftWTDelta=WTdelta.extractMatrix(0,deltaCurrent.numRows(),0,1);
    SimpleMatrix rightWTDelta=WTdelta.extractMatrix(deltaCurrent.numRows(),deltaCurrent.numRows() * 2,0,1);
    backpropDerivative(tree.children()[0],words,nodeVectors,binaryW_dfs,unaryW_dfs,binaryScoreDerivatives,unaryScoreDerivatives,wordVectorDerivatives,leftDerivative.elementMult(leftWTDelta));
    backpropDerivative(tree.children()[1],words,nodeVectors,binaryW_dfs,unaryW_dfs,binaryScoreDerivatives,unaryScoreDerivatives,wordVectorDerivatives,rightDerivative.elementMult(rightWTDelta));
  }
 else   if (tree.children().length == 1) {
    String childLabel=dvModel.basicCategory(tree.children()[0].label().value());
    unaryScoreDerivatives.put(childLabel,unaryScoreDerivatives.get(childLabel).plus(currentVector.transpose()));
    SimpleMatrix childVector=nodeVectors.get(tree.children()[0]);
    SimpleMatrix childVectorWithBias=RNNUtils.concatenateWithBias(childVector);
    if (op.trainOptions.useContextWords) {
      childVectorWithBias=concatenateContextWords(childVectorWithBias,tree.getSpan(),words);
    }
    SimpleMatrix W_df=deltaCurrent.mult(childVectorWithBias.transpose());
    unaryW_dfs.put(childLabel,unaryW_dfs.get(childLabel).plus(W_df));
    SimpleMatrix childDerivative=RNNUtils.elementwiseApplyTanhDerivative(childVector);
    SimpleMatrix childWTDelta=WTdelta.extractMatrix(0,deltaCurrent.numRows(),0,1);
    backpropDerivative(tree.children()[0],words,nodeVectors,binaryW_dfs,unaryW_dfs,binaryScoreDerivatives,unaryScoreDerivatives,wordVectorDerivatives,childDerivative.elementMult(childWTDelta));
  }
}
