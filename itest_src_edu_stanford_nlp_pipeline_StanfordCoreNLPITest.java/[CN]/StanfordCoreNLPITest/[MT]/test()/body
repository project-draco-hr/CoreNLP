{
  Properties props=new Properties();
  props.setProperty("annotators","tokenize,ssplit,pos,lemma,ner,parse");
  String text="Dan Ramage is working for\nMicrosoft. He's in Seattle! \n";
  Annotation document=new Annotation(text);
  StanfordCoreNLP pipeline=new StanfordCoreNLP(props);
  pipeline.annotate(document);
  List<CoreLabel> tokens=document.get(CoreAnnotations.TokensAnnotation.class);
  Assert.assertNotNull(tokens);
  Assert.assertEquals(12,tokens.size());
  List<CoreMap> sentences=document.get(CoreAnnotations.SentencesAnnotation.class);
  Assert.assertNotNull(sentences);
  Assert.assertEquals(2,sentences.size());
  for (  CoreMap sentence : sentences) {
    List<CoreLabel> sentenceTokens=sentence.get(CoreAnnotations.TokensAnnotation.class);
    Assert.assertNotNull(sentenceTokens);
    for (    CoreLabel token : sentenceTokens) {
      Assert.assertNotNull(token.get(CoreAnnotations.PartOfSpeechAnnotation.class));
      Assert.assertNotNull(token.get(CoreAnnotations.LemmaAnnotation.class));
      Assert.assertNotNull(token.get(CoreAnnotations.NamedEntityTagAnnotation.class));
    }
    Assert.assertNotNull(sentence.get(TreeCoreAnnotations.TreeAnnotation.class));
    SemanticGraph deps=sentence.get(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class);
    for (    IndexedWord vertex : deps.vertexSet()) {
      Assert.assertNotNull(vertex.word());
      Assert.assertEquals(vertex.word(),vertex.value());
    }
  }
  StringWriter stringWriter=new StringWriter();
  pipeline.prettyPrint(document,new PrintWriter(stringWriter));
  String result=stringWriter.getBuffer().toString();
  Assert.assertTrue("Tokens are wrong in " + result,StringUtils.find(result,"\\[Text=Dan .*PartOfSpeech=NNP Lemma=Dan NamedEntityTag=PERSON\\]"));
  Assert.assertTrue("Parses are wrong in " + result,result.contains("(NP (PRP He))"));
  Assert.assertTrue("Parses are wrong in " + result,result.contains("(VP (VBZ 's)"));
  Assert.assertTrue("Sentence header is wrong in " + result,result.contains("Sentence #1 (7 tokens)"));
  Assert.assertTrue("Dependencies are wrong in " + result,result.contains("nsubj(working-4, Ramage-2)"));
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  pipeline.xmlPrint(document,os);
  result=new String(os.toByteArray(),"UTF-8");
  Assert.assertTrue("XML header is wrong in " + result,result.startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?>"));
  Assert.assertTrue("XML root is wrong in " + result,result.contains("<?xml-stylesheet href=\"CoreNLP-to-HTML.xsl\" type=\"text/xsl\"?>"));
  Assert.assertTrue("XML word info is wrong in " + result,StringUtils.find(result,"<token id=\"2\">\\s*" + "<word>Ramage</word>\\s*" + "<lemma>Ramage</lemma>\\s*"+ "<CharacterOffsetBegin>4</CharacterOffsetBegin>\\s*"+ "<CharacterOffsetEnd>10</CharacterOffsetEnd>\\s*"+ "<POS>NNP</POS>\\s*"+ "<NER>PERSON</NER>"));
  Assert.assertTrue("XML dependencies are wrong in " + result,StringUtils.find(result,"<dep type=\"compound\">\\s*<governor idx=\"2\">" + "Ramage</governor>\\s*<dependent idx=\"1\">Dan</dependent>\\s*</dep>"));
}
