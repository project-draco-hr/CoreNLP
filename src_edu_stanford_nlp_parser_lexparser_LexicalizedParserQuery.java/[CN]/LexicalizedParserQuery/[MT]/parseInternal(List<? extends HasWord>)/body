{
  parseSucceeded=false;
  parseNoMemory=false;
  parseUnparsable=false;
  parseSkipped=false;
  parseFallback=false;
  whatFailed=null;
  addedPunct=false;
  originalSentence=sentence;
  int length=sentence.size();
  if (length == 0) {
    parseSkipped=true;
    throw new UnsupportedOperationException("Can't parse a zero-length sentence!");
  }
  List<HasWord> sentenceB;
  if (op.wordFunction != null) {
    sentenceB=Generics.newArrayList();
    for (    HasWord word : originalSentence) {
      if (word instanceof Label) {
        Label label=(Label)word;
        Label newLabel=label.labelFactory().newLabel(label);
        if (newLabel instanceof HasWord) {
          sentenceB.add((HasWord)newLabel);
        }
 else {
          throw new AssertionError("This should have been a HasWord");
        }
      }
 else       if (word instanceof HasTag) {
        TaggedWord tw=new TaggedWord(word.word(),((HasTag)word).tag());
        sentenceB.add(tw);
      }
 else {
        sentenceB.add(new Word(word.word()));
      }
    }
    for (    HasWord word : sentenceB) {
      word.setWord(op.wordFunction.apply(word.word()));
    }
  }
 else {
    sentenceB=new ArrayList<>(sentence);
  }
  if (op.testOptions.addMissingFinalPunctuation) {
    addedPunct=addSentenceFinalPunctIfNeeded(sentenceB,length);
  }
  if (length > op.testOptions.maxLength) {
    parseSkipped=true;
    throw new UnsupportedOperationException("Sentence too long: length " + length);
  }
  TreePrint treePrint=getTreePrint();
  PrintWriter pwOut=op.tlpParams.pw();
  if (sentence.get(0) instanceof CoreLabel) {
    CoreLabel boundary=new CoreLabel();
    boundary.setWord(Lexicon.BOUNDARY);
    boundary.setValue(Lexicon.BOUNDARY);
    boundary.setTag(Lexicon.BOUNDARY_TAG);
    boundary.setIndex(sentence.size() + 1);
    sentenceB.add(boundary);
  }
 else {
    sentenceB.add(new TaggedWord(Lexicon.BOUNDARY,Lexicon.BOUNDARY_TAG));
  }
  if (Thread.interrupted()) {
    throw new RuntimeInterruptedException();
  }
  if (op.doPCFG) {
    if (!pparser.parse(sentenceB)) {
      return parseSucceeded;
    }
    if (op.testOptions.verbose) {
      pwOut.println("PParser output");
      treePrint.printTree(getBestPCFGParse(false),pwOut);
    }
  }
  if (Thread.interrupted()) {
    throw new RuntimeInterruptedException();
  }
  if (op.doDep && !op.testOptions.useFastFactored) {
    if (!dparser.parse(sentenceB)) {
      return parseSucceeded;
    }
    if (op.testOptions.verbose) {
      pwOut.println("DParser output");
      treePrint.printTree(dparser.getBestParse(),pwOut);
    }
  }
  if (Thread.interrupted()) {
    throw new RuntimeInterruptedException();
  }
  if (op.doPCFG && op.doDep) {
    if (!bparser.parse(sentenceB)) {
      return parseSucceeded;
    }
 else {
      parseSucceeded=true;
    }
  }
  return true;
}
