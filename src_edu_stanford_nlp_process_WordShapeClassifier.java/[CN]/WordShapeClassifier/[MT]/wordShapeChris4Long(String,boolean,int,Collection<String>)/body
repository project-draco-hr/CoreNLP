{
  StringBuilder sb=new StringBuilder(s.length() + 1);
  StringBuilder endSB=new StringBuilder(BOUNDARY_SIZE);
  Set<Character> boundSet=new HashSet<Character>(BOUNDARY_SIZE * 2);
  Set<Character> seenSet=new TreeSet<Character>();
  boolean nonLetters=false;
  for (int i=0; i < len; i++) {
    char c=s.charAt(i);
    char m=chris4equivalenceClass(c);
    int iIncr=0;
    for (    String gr : greek) {
      if (s.startsWith(gr,i)) {
        m='g';
        iIncr=gr.length() - 1;
        break;
      }
    }
    if (m != 'x' && m != 'X') {
      nonLetters=true;
    }
    if (i < BOUNDARY_SIZE) {
      sb.append(m);
      boundSet.add(Character.valueOf(m));
    }
 else     if (i < len - BOUNDARY_SIZE) {
      seenSet.add(Character.valueOf(m));
    }
 else {
      boundSet.add(Character.valueOf(m));
      endSB.append(m);
    }
    i+=iIncr;
  }
  for (  Character chr : seenSet) {
    if (!omitIfInBoundary || !boundSet.contains(chr)) {
      char ch=chr.charValue();
      sb.append(ch);
    }
  }
  sb.append(endSB);
  if (knownLCWords != null) {
    if (!nonLetters && knownLCWords.contains(s.toLowerCase())) {
      sb.append('k');
    }
  }
  return sb.toString();
}
