{
  Annotation doc=new Annotation(text);
  pipe.annotate(doc);
  assertTrue(doc.get(SentencesAnnotation.class) != null);
  assertTrue(doc.get(SentencesAnnotation.class).size() > 0);
  CoreMap sent=doc.get(SentencesAnnotation.class).get(0);
  assertTrue(sent.get(TokensAnnotation.class) != null);
  List<CoreLabel> tokens=sent.get(TokensAnnotation.class);
  if (VERBOSE) {
    for (    CoreLabel token : tokens) {
      System.out.println("\t" + token.word() + " "+ token.tag()+ " "+ token.ner()+ " "+ (token.containsKey(NumericCompositeTypeAnnotation.class) ? token.get(NumericCompositeValueAnnotation.class) + " " : "")+ (token.containsKey(TimexAnnotation.class) ? token.get(TimexAnnotation.class) + " " : ""));
    }
  }
  assertTrue(tokens.size() == labels.length);
  for (int i=0; i < labels.length; i++) {
    if (labels[i] == null) {
      assertTrue(tokens.get(i).ner() == null);
    }
 else {
      Pattern p=Pattern.compile(labels[i]);
      System.err.println("COMPARING NER " + labels[i] + " with "+ tokens.get(i).ner());
      System.err.flush();
      assertTrue(tokens.get(i).ner() != null);
      assertTrue(p.matcher(tokens.get(i).ner()).matches());
    }
  }
  if (normed != null) {
    assertTrue(tokens.size() == normed.length);
    for (int i=0; i < normed.length; i++) {
      if (normed[i] == null) {
        assertTrue(tokens.get(i).get(NormalizedNamedEntityTagAnnotation.class) == null);
      }
 else {
        Pattern p=Pattern.compile(normed[i]);
        String n=tokens.get(i).get(NormalizedNamedEntityTagAnnotation.class);
        System.err.println("COMPARING NORMED \"" + normed[i] + "\" with \""+ n+ "\"");
        System.err.flush();
        assertTrue(n != null);
        assertTrue(p.matcher(n).matches());
      }
    }
  }
}
