{
  Map<String,String> rules=Generics.newHashMap();
  try {
    rules.put("[\\u0622\\u0623\\u0625]","\u0627");
    rules.put("[\\u0649]","\u064A");
    rules.put("[\\u064B\\u064C\\u064D\\u064E\\u064F\\u0650\\u0651\\u0652\\u0653\\u0670]","");
    rules.put("\\u0640(?=\\s*\\S)","");
    rules.put("(\\S)\\u0640","$1");
    rules.put("[\\ufeff\\u00a0]"," ");
    rules.put("\\u060c",",");
    rules.put("\\u061b",";");
    rules.put("\\u061f","?");
    rules.put("\\u066a","%");
    rules.put("\\u066b",".");
    rules.put("\\u066c",",");
    rules.put("\\u066d","*");
    rules.put("\\u06d4",".");
    rules.put("[\\u0660\\u06f0\\u0966]","0");
    rules.put("[\\u0661\\u06f1\\u0967]","1");
    rules.put("[\\u0662\\u06f2\\u0968]","2");
    rules.put("[\\u0663\\u06f3\\u0969]","3");
    rules.put("[\\u0664\\u06f4\\u096a]","4");
    rules.put("[\\u0665\\u06f5\\u096b]","5");
    rules.put("[\\u0666\\u06f6\\u096c]","6");
    rules.put("[\\u0667\\u06f7\\u096d]","7");
    rules.put("[\\u0668\\u06f8\\u096e]","8");
    rules.put("[\\u0669\\u06f9\\u096f]","9");
    rules.put("[\\u0654\\u0655\\u0670]","");
    rules.put("\\u064A\\u0621","\u0626");
    rules.put("\\u2013","-");
    rules.put("\\u2014","--");
    rules.put("[\\u0091\\u0092\\u2018\\u2019]","\'");
    rules.put("[\\u0093\\u0094\\u201C\\u201D]","\"");
  }
 catch (  Exception e) {
    log.info("Caught exception creating Arabic normalizer map: " + e.toString());
  }
  return rules;
}
