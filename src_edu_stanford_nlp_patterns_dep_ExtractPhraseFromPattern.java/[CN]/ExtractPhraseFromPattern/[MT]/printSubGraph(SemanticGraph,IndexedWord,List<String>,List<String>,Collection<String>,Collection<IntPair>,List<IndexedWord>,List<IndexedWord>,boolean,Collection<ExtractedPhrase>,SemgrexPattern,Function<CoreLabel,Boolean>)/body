{
  try {
    if (seenNodes.contains(w))     return;
    seenNodes.add(w);
    if (doNotAddThese.contains(w))     return;
    List<IndexedWord> andNodes=new ArrayList<IndexedWord>();
    descendantsWithReln(g,w,"conj_and",new ArrayList<IndexedWord>(),andNodes);
    for (    IndexedWord w1 : andNodes) {
      printSubGraph(g,w1,additionalCutOffRels,textTokens,listOfOutput,listOfOutputIndices,seenNodes,doNotAddThese,findSubTrees,extractedPhrases,pattern,acceptWord);
    }
    doNotAddThese.addAll(andNodes);
    List<String> allCutOffRels=new ArrayList<String>();
    if (additionalCutOffRels != null)     allCutOffRels.addAll(additionalCutOffRels);
    allCutOffRels.addAll(cutoffRelations);
    CollectionValuedMap<Integer,String> featPerToken=new CollectionValuedMap<>();
    Collection<String> feat=new ArrayList<>();
    GetPatternsFromDataMultiClass.getFeatures(g,w,true,feat,null);
    Set<IndexedWord> words=descendants(g,w,allCutOffRels,doNotAddThese,ignoreCommonTags,acceptWord,featPerToken);
    if (words.size() > 0) {
      int min=Integer.MAX_VALUE, max=-1;
      for (      IndexedWord word : words) {
        if (word.index() < min)         min=word.index();
        if (word.index() > max)         max=word.index();
      }
      IntPair indices;
      if ((max - min + 1) > maxPhraseLength) {
        max=min + maxPhraseLength - 1;
      }
      indices=new IntPair(min - 1,max - 1);
      String phrase=StringUtils.join(textTokens.subList(min - 1,max)," ");
      phrase=phrase.trim();
      feat.add("LENGTH-" + (max - min + 1));
      for (int i=min; i <= max; i++)       feat.addAll(featPerToken.get(i));
      ExtractedPhrase extractedPh=new ExtractedPhrase(min - 1,max - 1,pattern,phrase,Counters.asCounter(feat));
      if (!listOfOutput.contains(phrase) && !doNotAddThese.contains(phrase)) {
        listOfOutput.add(phrase);
        if (!listOfOutputIndices.contains(indices)) {
          listOfOutputIndices.add(indices);
          extractedPhrases.add(extractedPh);
        }
        if (findSubTrees == true) {
          for (          IndexedWord word : words)           if (!seenNodes.contains(word))           printSubGraph(g,word,additionalCutOffRels,textTokens,listOfOutput,listOfOutputIndices,seenNodes,doNotAddThese,findSubTrees,extractedPhrases,pattern,acceptWord);
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
