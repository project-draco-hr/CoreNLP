{
  value=0.0;
  if (derivative == null) {
    derivative=new double[w.length];
  }
 else {
    Arrays.fill(derivative,0.0);
  }
  value=regularizationCoeff * ArrayMath.innerProduct(w,w);
  double[] yMinusXw=new double[numData];
  for (int i=0; i < numData; i++) {
    yMinusXw[i]=y[i];
    for (int j=0; j < data[i].length; j++) {
      int fID=data[i][j];
      yMinusXw[i]-=values[i][j] * w[fID];
    }
  }
  value+=ArrayMath.innerProduct(yMinusXw,yMinusXw);
  for (  int i : xTx.firstKeySet()) {
    Counter<Integer> secondKeyCounter=xTx.getCounter(i);
    for (    int j : secondKeyCounter.keySet()) {
      derivative[i]+=2 * xTxGetValueAt(i,j) * w[j];
      if (i != j)       derivative[j]+=2 * xTxGetValueAt(i,j) * w[i];
    }
  }
  for (int i=0; i < numFeatures; i++)   derivative[i]+=2 * (regularizationCoeff * w[i] - xTy[i]);
}
