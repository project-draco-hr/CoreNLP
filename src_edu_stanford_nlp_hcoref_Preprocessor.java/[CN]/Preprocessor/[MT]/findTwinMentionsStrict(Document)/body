{
  for (int sentNum=0; sentNum < doc.goldMentions.size(); sentNum++) {
    List<Mention> golds=doc.goldMentions.get(sentNum);
    List<Mention> predicts=doc.predictedMentions.get(sentNum);
    CollectionValuedMap<IntPair,Mention> goldMentionPositions=new CollectionValuedMap<>();
    for (    Mention g : golds) {
      IntPair ip=new IntPair(g.startIndex,g.endIndex);
      if (goldMentionPositions.containsKey(ip)) {
        StringBuilder existingMentions=new StringBuilder();
        for (        Mention eg : goldMentionPositions.get(ip)) {
          if (existingMentions.length() > 0) {
            existingMentions.append(",");
          }
          existingMentions.append(eg.mentionID);
        }
        Redwood.log("debug-preprocessor","WARNING: gold mentions with the same offsets: " + ip + " mentions="+ g.mentionID+ ","+ existingMentions+ ", "+ g.spanToString());
      }
      goldMentionPositions.add(new IntPair(g.startIndex,g.endIndex),g);
    }
    for (    Mention p : predicts) {
      IntPair pos=new IntPair(p.startIndex,p.endIndex);
      if (goldMentionPositions.containsKey(pos)) {
        Collection<Mention> cm=goldMentionPositions.get(pos);
        int minId=Integer.MAX_VALUE;
        Mention g=null;
        for (        Mention m : cm) {
          if (m.mentionID < minId) {
            g=m;
            minId=m.mentionID;
          }
        }
        cm.remove(g);
        p.mentionID=g.mentionID;
        p.hasTwin=true;
        g.hasTwin=true;
      }
    }
  }
}
