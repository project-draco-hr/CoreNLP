{
  if (!(f instanceof AbstractStochasticCachingDiffUpdateFunction)) {
    throw new UnsupportedOperationException();
  }
  AbstractStochasticCachingDiffUpdateFunction function=(AbstractStochasticCachingDiffUpdateFunction)f;
  int totalSamples=function.dataDimension();
  int tuneSampleSize=Math.min(totalSamples,tuningSamples);
  if (tuneSampleSize < tuningSamples) {
    System.err.println("WARNING: Total number of samples=" + totalSamples + " is smaller than requested tuning sample size="+ tuningSamples+ "!!!");
  }
  lambda=1.0 / (sigma * totalSamples);
  sayln("Using sigma=" + sigma + " lambda="+ lambda+ " tuning sample size "+ tuneSampleSize);
  t0=(int)(1 / (0.1 * lambda));
  x=new double[initial.length];
  System.arraycopy(initial,0,x,0,x.length);
  xscale=1;
  xnorm=getNorm(x);
  int numBatches=totalSamples / bSize;
  init(function);
  boolean have_max=(maxIterations > 0 || numPasses > 0);
  if (!have_max) {
    throw new UnsupportedOperationException("No maximum number of iterations has been specified.");
  }
 else {
    maxIterations=Math.max(maxIterations,numPasses) * numBatches;
  }
  sayln("       Batch size of: " + bSize);
  sayln("       Data dimension of: " + totalSamples);
  sayln("       Batches per pass through data:  " + numBatches);
  sayln("       Number of passes is = " + numPasses);
  sayln("       Max iterations is = " + maxIterations);
  Timing total=new Timing();
  Timing current=new Timing();
  total.start();
  current.start();
  int t=t0;
  int iters=0;
  for (int pass=0; pass < numPasses; pass++) {
    boolean doEval=(pass > 0 && evaluateIters > 0 && pass % evaluateIters == 0);
    if (doEval) {
      rescale();
      doEvaluation(x);
    }
    double totalValue=0;
    double lastValue=0;
    say("Iter: " + iters + " pass "+ pass+ " batch 1 ... ");
    for (int batch=0; batch < numBatches; batch++) {
      iters++;
      double eta=1 / (lambda * t);
      double gain=eta / xscale;
      lastValue=function.calculateStochasticUpdate(x,xscale,bSize,gain);
      totalValue+=lastValue;
      xscale*=(1 - eta * lambda * bSize);
      t+=bSize;
    }
    if (xscale < 1e-6) {
      rescale();
    }
    try {
      ArrayMath.assertFinite(x,"x");
    }
 catch (    ArrayMath.InvalidElementException e) {
      System.err.println(e.toString());
      for (int i=0; i < x.length; i++) {
        x[i]=Double.NaN;
      }
      break;
    }
    xnorm=getNorm(x) * xscale * xscale;
    double loss=totalValue + 0.5 * xnorm * lambda* totalSamples;
    say(String.valueOf(numBatches));
    say("[" + (total.report()) / 1000.0 + " s ");
    say("{" + (current.restart() / 1000.0) + " s}] ");
    sayln(" " + lastValue + " "+ totalValue+ " "+ loss);
    if (iters >= maxIterations) {
      sayln("Stochastic Optimization complete.  Stopped after max iterations");
      break;
    }
    if (total.report() >= maxTime) {
      sayln("Stochastic Optimization complete.  Stopped after max time");
      break;
    }
  }
  rescale();
  if (evaluateIters > 0) {
    doEvaluation(x);
  }
  sayln("Completed in: " + Timing.toSecondsString(total.report()) + " s");
  return x;
}
