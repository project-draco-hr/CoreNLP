{
  Pattern tabPattern=Pattern.compile("\t");
  PrintWriter pw=IOUtils.getPrintWriter(outfile);
  List<Unit> units=Units.loadUnits(unitsFiles);
  pw.println("SI_UNIT_MAP = {");
  List<String> items=new ArrayList<>();
  for (  Unit unit : units) {
    if ("SI".equals(unit.prefixSystem)) {
      items.add("\"" + unit.name + "\": "+ (unit.getType() + "_" + unit.getName()).toUpperCase());
    }
  }
  pw.println(StringUtils.join(items,",\n"));
  pw.println("}");
  pw.println("$SiUnits = CreateRegex(Keys(SI_UNIT_MAP))");
  pw.println();
  pw.println("SI_SYM_UNIT_MAP = {");
  items.clear();
  for (  Unit unit : units) {
    if ("SI".equals(unit.prefixSystem)) {
      items.add("\"" + unit.symbol + "\": "+ (unit.getType() + "_" + unit.getName()).toUpperCase());
    }
  }
  pw.println(StringUtils.join(items,",\n"));
  pw.println("}");
  pw.println("$SiSymUnits = CreateRegex(Keys(SI_SYM_UNIT_MAP))");
  pw.println();
  pw.println("SYM_UNIT_MAP = {");
  items.clear();
  for (  Unit unit : units) {
    items.add("\"" + unit.symbol + "\": "+ (unit.getType() + "_" + unit.getName()).toUpperCase());
  }
  pw.println(StringUtils.join(items,",\n"));
  pw.println("}");
  pw.println("$SymUnits = CreateRegex(Keys(SYM_UNIT_MAP))");
  pw.println();
  BufferedReader br=IOUtils.getBufferedFileReader(infile);
  String line;
  pw.println("ENV.defaults[\"stage\"] = 0");
  while ((line=br.readLine()) != null) {
    String[] fields=tabPattern.split(line);
    pw.println(String.format("{ pattern: ( %s ), action: Tag($0, \"Unit\", %s) }",fields[0],fields[1]));
  }
  br.close();
  pw.close();
}
