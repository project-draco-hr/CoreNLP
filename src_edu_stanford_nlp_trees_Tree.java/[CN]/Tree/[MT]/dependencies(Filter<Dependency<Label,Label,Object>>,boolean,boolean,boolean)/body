{
  Set<Dependency<Label,Label,Object>> deps=new HashSet<Dependency<Label,Label,Object>>();
  for (  Tree node : this) {
    if (node.isLeaf() || node.children().length < 2) {
      continue;
    }
    Label headLabel=makeDependencyLabel(node.label(),copyLabel,isConcrete,copyPosTag);
    String headWord=((HasWord)headLabel).word();
    if (headWord == null) {
      headWord=headLabel.value();
    }
    int headIndex=(isConcrete && (headLabel instanceof HasIndex)) ? ((HasIndex)headLabel).index() : -1;
    boolean seenHead=false;
    for (    Tree child : node.children()) {
      Label depLabel=makeDependencyLabel(child.label(),copyLabel,isConcrete,copyPosTag);
      String depWord=((HasWord)depLabel).word();
      if (depWord == null) {
        depWord=depLabel.value();
      }
      int depIndex=(isConcrete && (depLabel instanceof HasIndex)) ? ((HasIndex)depLabel).index() : -1;
      if (!seenHead && headIndex == depIndex && headWord.equals(depWord)) {
        seenHead=true;
      }
 else {
        Dependency<Label,Label,Object> dependency=(isConcrete && depIndex != headIndex) ? new UnnamedConcreteDependency(headLabel,depLabel) : new UnnamedDependency(headLabel,depLabel);
        if (f.accept(dependency)) {
          deps.add(dependency);
        }
      }
    }
  }
  return deps;
}
