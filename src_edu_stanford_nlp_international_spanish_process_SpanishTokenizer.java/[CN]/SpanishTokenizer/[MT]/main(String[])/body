{
  final Properties options=StringUtils.argsToProperties(args,argOptionDefs());
  if (options.containsKey("help")) {
    log.info(usage());
    return;
  }
  final TokenizerFactory<CoreLabel> tf=SpanishTokenizer.coreLabelFactory();
  String orthoOptions=options.containsKey("ancora") ? ANCORA_OPTIONS : "";
  if (options.containsKey("options")) {
    orthoOptions=orthoOptions.isEmpty() ? options.getProperty("options") : orthoOptions + ',' + options;
  }
  final boolean tokens=PropertiesUtils.getBool(options,"tokens",false);
  if (!tokens) {
    orthoOptions=orthoOptions.isEmpty() ? "tokenizeNLs" : orthoOptions + ",tokenizeNLs";
  }
  tf.setOptions(orthoOptions);
  final String encoding=options.getProperty("encoding","UTF-8");
  final boolean toLower=PropertiesUtils.getBool(options,"lowerCase",false);
  final Locale es=new Locale("es");
  boolean onePerLine=PropertiesUtils.getBool(options,"onePerLine",false);
  int nLines=0;
  int nTokens=0;
  final long startTime=System.nanoTime();
  try {
    Tokenizer<CoreLabel> tokenizer=tf.getTokenizer(new InputStreamReader(System.in,encoding));
    boolean printSpace=false;
    while (tokenizer.hasNext()) {
      ++nTokens;
      String word=tokenizer.next().word();
      if (word.equals(SpanishLexer.NEWLINE_TOKEN)) {
        ++nLines;
        System.out.println();
        if (!onePerLine) {
          printSpace=false;
        }
      }
 else {
        String outputToken=toLower ? word.toLowerCase(es) : word;
        if (onePerLine) {
          System.out.println(outputToken);
        }
 else {
          if (printSpace) {
            System.out.print(" ");
          }
          System.out.print(outputToken);
          printSpace=true;
        }
      }
    }
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeIOException("Bad character encoding",e);
  }
  long elapsedTime=System.nanoTime() - startTime;
  double linesPerSec=(double)nLines / (elapsedTime / 1e9);
  System.err.printf("Done! Tokenized %d lines (%d tokens) at %.2f lines/sec%n",nLines,nTokens,linesPerSec);
}
