{
  numOptions=datum.classes().size();
  Index<L> classIndex=new HashIndex<L>();
  classIndex.add(datum.trueClass());
  correctOption=classIndex.indexOf(datum.trueClass());
  CollectionValuedMap<Pair<F,Double>,Pair<L,Integer>> cVM=new CollectionValuedMap<Pair<F,Double>,Pair<L,Integer>>();
  TwoDimensionalCounter<L,Pair<L,F>> classFeatures=datum.classFeatureCounts;
  for (  L thisClass : classFeatures.firstKeySet()) {
    classIndex.add(thisClass);
    Counter<Pair<L,F>> thisClassFeatures=classFeatures.getCounter(thisClass);
    int thisIntClass=classIndex.indexOf(thisClass);
    for (    Pair<L,F> thisFeature : thisClassFeatures.keySet()) {
      double thisFeatureValue=thisClassFeatures.getCount(thisFeature);
      if (thisFeatureValue == 0) {
        continue;
      }
      Pair<F,Double> fValue=new Pair<F,Double>(thisFeature.second(),new Double(thisFeatureValue));
      Pair<L,Integer> fLocation=new Pair<L,Integer>(thisFeature.first(),Integer.valueOf(thisIntClass));
      cVM.add(fValue,fLocation);
    }
  }
  HashMap<Collection<Pair<L,Integer>>,ClassicCounter<F>> valuesMap=new HashMap<Collection<Pair<L,Integer>>,ClassicCounter<F>>();
  for (  Pair<F,Double> fVal : cVM.keySet()) {
    F feature=fVal.first();
    double value=fVal.second();
    Collection<Pair<L,Integer>> locations=cVM.get(fVal);
    ClassicCounter<F> c=valuesMap.get(locations);
    if (c != null) {
      c.incrementCount(feature,value);
    }
 else {
      c=new ClassicCounter<F>();
      c.incrementCount(feature,value);
      valuesMap.put(locations,c);
    }
  }
  System.err.println("number of blocks " + valuesMap.size());
  blocks=new ArrayList<FeatureBlock<L,F>>();
  for (  Map.Entry<Collection<Pair<L,Integer>>,ClassicCounter<F>> e : valuesMap.entrySet()) {
    Collection<Pair<L,Integer>> locations=e.getKey();
    ClassicCounter<F> features=e.getValue();
    blocks.add(new FeatureBlock<L,F>(features,locations));
  }
}
