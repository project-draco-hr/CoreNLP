{
  System.err.println("starting size of d " + d.toShortString());
  TwoDimensionalCounter<L,F> classFeatures=d.classFeatureCounts;
  HashSet<F> features=new HashSet<F>();
  for (  L thisClass : classFeatures.firstKeySet()) {
    Counter<F> thisClassFeatures=classFeatures.getCounter(thisClass);
    for (    F thisFeature : thisClassFeatures.keySet()) {
      features.add(thisFeature);
    }
  }
  Collection<L> classes=d.classes();
  for (  F feature : features) {
    double min=Double.POSITIVE_INFINITY;
    double max=Double.NEGATIVE_INFINITY;
    for (    L cls : classes) {
      double value=d.featureValue(cls,feature);
      if (value < min) {
        min=value;
      }
      if (value > max) {
        max=value;
      }
    }
    if (min > 0) {
      System.err.println("found savings for feature " + feature);
      for (      L cls : classes) {
        d.classFeatureCounts.incrementCount(cls,feature,-min);
      }
    }
  }
  System.err.println("resulting size of d " + d.toShortString());
  return d;
}
