{
  if (tokens.size() != posTags.size()) {
    throw new RuntimeException(String.format("tokens.size(): %d != pos.size(): %d%n",tokens.size(),posTags.size()));
  }
  List<TreeGraphNode> tgWordNodes=new ArrayList<>(tokens.size());
  List<TreeGraphNode> tgPOSNodes=new ArrayList<>(tokens.size());
  CoreLabel rootLabel=new CoreLabel();
  rootLabel.setValue("ROOT");
  List<IndexedWord> nodeWords=new ArrayList<>(tgPOSNodes.size() + 1);
  nodeWords.add(new IndexedWord(rootLabel));
  UniversalSemanticHeadFinder headFinder=new UniversalSemanticHeadFinder();
  Iterator<String> posIter=posTags.iterator();
  for (  String wordString : tokens) {
    String posString=posIter.next();
    CoreLabel wordLabel=new CoreLabel();
    wordLabel.setWord(wordString);
    wordLabel.setValue(wordString);
    wordLabel.setTag(posString);
    TreeGraphNode word=new TreeGraphNode(wordLabel);
    CoreLabel tagLabel=new CoreLabel();
    tagLabel.setValue(posString);
    tagLabel.setWord(posString);
    TreeGraphNode pos=new TreeGraphNode(tagLabel);
    tgWordNodes.add(word);
    tgPOSNodes.add(pos);
    TreeGraphNode[] childArr={word};
    pos.setChildren(childArr);
    word.setParent(pos);
    pos.percolateHeads(headFinder);
    nodeWords.add(new IndexedWord(wordLabel));
  }
  TreeGraphNode root=new TreeGraphNode(rootLabel);
  root.setChildren(tgPOSNodes.toArray(new TreeGraphNode[tgPOSNodes.size()]));
  root.setIndex(0);
  List<TypedDependency> tdeps=new ArrayList<>(deps.size());
  for (  String depString : deps) {
    int firstBracket=depString.indexOf('(');
    if (firstBracket == -1)     throwDepFormatException(depString);
    String type=depString.substring(0,firstBracket);
    if (depString.charAt(depString.length() - 1) != ')')     throwDepFormatException(depString);
    String args=depString.substring(firstBracket + 1,depString.length() - 1);
    int argSep=args.indexOf(", ");
    if (argSep == -1)     throwDepFormatException(depString);
    String parentArg=args.substring(0,argSep);
    String childArg=args.substring(argSep + 2);
    int parentDash=parentArg.lastIndexOf('-');
    if (parentDash == -1)     throwDepFormatException(depString);
    int childDash=childArg.lastIndexOf('-');
    if (childDash == -1)     throwDepFormatException(depString);
    int parentIdx=Integer.parseInt(parentArg.substring(parentDash + 1).replace("'",""));
    int childIdx=Integer.parseInt(childArg.substring(childDash + 1).replace("'",""));
    GrammaticalRelation grel=new GrammaticalRelation(Language.Any,type,null,DEPENDENT);
    TypedDependency tdep=new TypedDependency(grel,nodeWords.get(parentIdx),nodeWords.get(childIdx));
    tdeps.add(tdep);
  }
  return new GrammaticalStructure(tdeps,root){
    private static final long serialVersionUID=1L;
  }
;
}
