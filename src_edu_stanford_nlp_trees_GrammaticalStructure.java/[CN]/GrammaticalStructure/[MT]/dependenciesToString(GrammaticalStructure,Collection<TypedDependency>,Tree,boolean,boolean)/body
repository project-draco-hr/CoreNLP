{
  StringBuilder bf=new StringBuilder();
  Map<Integer,Integer> indexToPos=Generics.newHashMap();
  indexToPos.put(0,0);
  List<Tree> gsLeaves=gs.root.getLeaves();
  for (int i=0; i < gsLeaves.size(); i++) {
    TreeGraphNode leaf=(TreeGraphNode)gsLeaves.get(i);
    indexToPos.put(leaf.label.index(),i + 1);
  }
  if (conllx) {
    List<Tree> leaves=tree.getLeaves();
    List<String> words=new ArrayList<String>(leaves.size());
    List<String> pos=new ArrayList<String>(leaves.size());
    String[] relns=new String[leaves.size()];
    int[] govs=new int[leaves.size()];
    for (    Tree leaf : leaves) {
      words.add(leaf.value());
      pos.add(leaf.parent(tree).value());
    }
    for (    TypedDependency dep : deps) {
      int depPos=indexToPos.get(dep.dep().index()) - 1;
      govs[depPos]=indexToPos.get(dep.gov().index());
      relns[depPos]=dep.reln().toString();
    }
    for (int i=0; i < relns.length; i++) {
      String out=String.format("%d\t%s\t_\t%s\t%s\t_\t%d\t%s\t_\t_\n",i + 1,words.get(i),pos.get(i),pos.get(i),govs[i],(relns[i] != null ? relns[i] : "erased"));
      bf.append(out);
    }
  }
 else {
    if (extraSep) {
      List<TypedDependency> extraDeps=new ArrayList<TypedDependency>();
      for (      TypedDependency dep : deps) {
        if (dep.extra()) {
          extraDeps.add(dep);
        }
 else {
          bf.append(toStringIndex(dep,indexToPos));
          bf.append("\n");
        }
      }
      if (!extraDeps.isEmpty()) {
        bf.append("======\n");
        for (        TypedDependency dep : extraDeps) {
          bf.append(toStringIndex(dep,indexToPos));
          bf.append("\n");
        }
      }
    }
 else {
      for (      TypedDependency dep : deps) {
        bf.append(toStringIndex(dep,indexToPos));
        bf.append("\n");
      }
    }
  }
  return bf.toString();
}
