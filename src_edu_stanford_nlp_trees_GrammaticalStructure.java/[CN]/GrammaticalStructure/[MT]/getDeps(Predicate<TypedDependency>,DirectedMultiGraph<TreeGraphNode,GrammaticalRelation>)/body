{
  List<TypedDependency> basicDep=Generics.newArrayList();
  for (  TreeGraphNode gov : basicGraph.getAllVertices()) {
    for (    TreeGraphNode dep : basicGraph.getChildren(gov)) {
      GrammaticalRelation reln=getGrammaticalRelationCommonAncestor(gov.headWordNode().label(),gov.label(),dep.headWordNode().label(),dep.label(),basicGraph.getEdges(gov,dep));
      basicDep.add(new TypedDependency(reln,new IndexedWord(gov.headWordNode().label()),new IndexedWord(dep.headWordNode().label())));
    }
  }
  TreeGraphNode dependencyRoot=new TreeGraphNode(new Word("ROOT"));
  dependencyRoot.setIndex(0);
  TreeGraphNode rootDep=root().headWordNode();
  if (rootDep == null) {
    List<Tree> leaves=Trees.leaves(root());
    if (leaves.size() > 0) {
      Tree leaf=leaves.get(0);
      if (!(leaf instanceof TreeGraphNode)) {
        throw new AssertionError("Leaves should be TreeGraphNodes");
      }
      rootDep=(TreeGraphNode)leaf;
      if (rootDep.headWordNode() != null) {
        rootDep=rootDep.headWordNode();
      }
    }
  }
  if (rootDep != null) {
    TypedDependency rootTypedDep=new TypedDependency(ROOT,new IndexedWord(dependencyRoot.label()),new IndexedWord(rootDep.label()));
    if (puncTypedDepFilter.test(rootTypedDep)) {
      basicDep.add(rootTypedDep);
    }
 else {
      IndexedWord root=rootTypedDep.dep();
      IndexedWord newRoot=null;
      Collections.sort(basicDep);
      for (      TypedDependency td : basicDep) {
        if (td.gov().equals(root)) {
          if (newRoot != null) {
            td.setGov(newRoot);
          }
 else {
            td.setGov(td.gov());
            td.setReln(ROOT);
            newRoot=td.dep();
          }
        }
      }
    }
  }
  postProcessDependencies(basicDep);
  Collections.sort(basicDep);
  return basicDep;
}
