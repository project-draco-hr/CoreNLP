{
  SemanticGraph tree=new SemanticGraph();
  if (conll == null || conll.isEmpty()) {
    return tree;
  }
  String[] treeLines=newline.split(conll);
  IndexedWord[] vertices=new IndexedWord[tokens.size() + 2];
  for (  String line : treeLines) {
    String[] fields=tab.split(line);
    int dependentIndex=Integer.parseInt(fields[0]);
    if (vertices[dependentIndex] == null) {
      if (dependentIndex > tokens.size()) {
        return new SemanticGraph();
      }
      vertices[dependentIndex]=new IndexedWord(tokens.get(dependentIndex - 1));
    }
    IndexedWord dependent=vertices[dependentIndex];
    int governorIndex=Integer.parseInt(fields[1]);
    if (governorIndex > tokens.size()) {
      return new SemanticGraph();
    }
    if (vertices[governorIndex] == null && governorIndex > 0) {
      vertices[governorIndex]=new IndexedWord(tokens.get(governorIndex - 1));
    }
    IndexedWord governor=vertices[governorIndex];
    String relation=fields[2];
    if (governorIndex == 0) {
      tree.addRoot(dependent);
    }
 else {
      tree.addVertex(dependent);
      if (!tree.containsVertex(governor)) {
        tree.addVertex(governor);
      }
      if (!"ref".equals(relation)) {
        tree.addEdge(governor,dependent,GrammaticalRelation.valueOf(Language.English,relation),Double.NEGATIVE_INFINITY,false);
      }
    }
  }
  return tree;
}
