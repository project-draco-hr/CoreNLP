{
  history=new LinkedList<String>();
  historyIndex=-1;
  listeners=new ArrayList<SlotEventListener>();
  HttpURLConnection.setFollowRedirects(false);
  setLayout(new BorderLayout());
  Container addressPanel=Box.createVerticalBox();
  JPanel buttonPanel=new JPanel(new FlowLayout(FlowLayout.LEFT));
  JToolBar navBar=new JToolBar();
  navBar.setFloatable(false);
  backButton=new JButton("Back");
  backButton.setEnabled(false);
  backButton.setToolTipText("Back to previous page");
  backButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setPage(historyIndex - 1);
    }
  }
);
  navBar.add(backButton);
  forwardButton=new JButton("Forward");
  forwardButton.setEnabled(false);
  forwardButton.setToolTipText("Forward to next page");
  forwardButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setPage(historyIndex + 1);
    }
  }
);
  navBar.add(forwardButton);
  buttonPanel.add(navBar);
  reloadButton=new JButton("Reload");
  reloadButton.setToolTipText("Reload current page");
  reloadButton.setEnabled(false);
  reloadButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setPage(historyIndex);
    }
  }
);
  navBar.add(reloadButton);
  ButtonRolloverBorderAdapter.manageToolBar(navBar);
  buttonPanel.add(navBar);
  SwingUtils.loadButtonIcon(backButton,"toolbarButtonGraphics/navigation/Back24.gif",null);
  SwingUtils.loadButtonIcon(forwardButton,"toolbarButtonGraphics/navigation/Forward24.gif",null);
  SwingUtils.loadButtonIcon(reloadButton,"toolbarButtonGraphics/general/Refresh24.gif",null);
  JToolBar extractorBar=new JToolBar();
  extractorBar.setFloatable(false);
  extractButton=new JButton("Extract");
  extractButton.setToolTipText("Extract slots for selected instance or class from current page");
  extractButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      doExtract();
    }
  }
);
  extractorBar.add(extractButton);
  clearButton=new JButton("Clear Highlight");
  clearButton.setToolTipText("Clears highlighting");
  clearButton.setEnabled(false);
  clearButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      clearHighlight();
    }
  }
);
  extractorBar.add(clearButton);
  emPanel=new EMPanel();
  emFrame=new JFrame("Extractor Mediator");
  emFrame.getContentPane().add("Center",emPanel);
  emFrame.pack();
  emButton=new JButton("Extractor Mediator...");
  emButton.setToolTipText("Shows UI for creating IE components and mapping them into the ontology");
  emButton.addActionListener(new ActionListener(){
    private boolean neverShownBefore=true;
    public void actionPerformed(    ActionEvent e){
      if (neverShownBefore) {
        emFrame.setLocation(getLocationOnScreen().x + (getWidth() - emFrame.getWidth()) / 2,getLocationOnScreen().y + (getHeight() - emFrame.getHeight()) / 2);
        neverShownBefore=false;
      }
      emFrame.setVisible(true);
    }
  }
);
  extractorBar.add(emButton);
  ButtonRolloverBorderAdapter.manageToolBar(extractorBar);
  buttonPanel.add(extractorBar);
  addressPanel.add(buttonPanel);
  JPanel addressBarPanel=new JPanel(new BorderLayout());
  addressBarPanel.setBorder(BorderFactory.createEmptyBorder(4,4,4,4));
  addressBarPanel.add("West",new JLabel("Address: "));
  urlField=new JTextField();
  urlField.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      setNewPage(urlField.getText());
    }
  }
);
  addressBarPanel.add("Center",urlField);
  addressPanel.add(addressBarPanel);
  add("North",addressPanel);
  viewSourceItem=new JMenuItem("View extraction text");
  viewSourceItem.setToolTipText("Shows the text actually seen by the information extraction system");
  viewSourceItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      showSource();
    }
  }
);
  popup=new JPopupMenu();
  editorPane=new JTextPane();
  editorPane.setEditable(false);
  editorPane.setDragEnabled(true);
  editorPane.setContentType("text/html");
  editorPane.setPreferredSize(new Dimension(400,400));
  editorPane.setText("Type in a URL or open a file and the contents will be displayed here.");
  editorPane.addHyperlinkListener(new BrowserHyperlinkListener());
  editorPane.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.isPopupTrigger() || e.getButton() == MouseEvent.BUTTON3) {
        popup.removeAll();
        if (editorPane.getSelectedText() != null && slotNames != null) {
          Iterator<String> iter=slotNames.iterator();
          while (iter.hasNext()) {
            popup.add(new PopupMenuItem(iter.next()));
          }
        }
        if (historyIndex >= 0) {
          if (popup.getComponentCount() > 0) {
            popup.addSeparator();
          }
          popup.add(viewSourceItem);
        }
        popup.show(e.getComponent(),e.getX(),e.getY());
      }
    }
  }
);
  add("Center",new JScrollPane(editorPane));
  JPanel statusPanel=new JPanel(new FlowLayout(FlowLayout.LEFT,2,1));
  statusPanel.add(statusLabel);
  setStatus("");
  add("South",statusPanel);
  createHighlighters();
}
