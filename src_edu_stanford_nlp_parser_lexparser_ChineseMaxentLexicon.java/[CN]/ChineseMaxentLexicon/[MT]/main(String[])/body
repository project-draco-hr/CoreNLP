{
  TreebankLangParserParams tlpParams=new ChineseTreebankParserParams();
  TreebankLanguagePack ctlp=tlpParams.treebankLanguagePack();
  Options op=new Options(tlpParams);
  TreeAnnotator ta=new TreeAnnotator(tlpParams.headFinder(),tlpParams,op);
  log.info("Reading Trees...");
  FileFilter trainFilter=new NumberRangesFileFilter(args[1],true);
  Treebank trainTreebank=tlpParams.memoryTreebank();
  trainTreebank.loadPath(args[0],trainFilter);
  log.info("Annotating trees...");
  Collection<Tree> trainTrees=new ArrayList<>();
  for (  Tree tree : trainTreebank) {
    trainTrees.add(ta.transformTree(tree));
  }
  trainTreebank=null;
  log.info("Training lexicon...");
  Index<String> wordIndex=new HashIndex<>();
  Index<String> tagIndex=new HashIndex<>();
  int featureLevel=DEFAULT_FEATURE_LEVEL;
  if (args.length > 3) {
    featureLevel=Integer.parseInt(args[3]);
  }
  ChineseMaxentLexicon lex=new ChineseMaxentLexicon(op,wordIndex,tagIndex,featureLevel);
  lex.initializeTraining(trainTrees.size());
  lex.train(trainTrees);
  lex.finishTraining();
  log.info("Testing");
  FileFilter testFilter=new NumberRangesFileFilter(args[2],true);
  Treebank testTreebank=tlpParams.memoryTreebank();
  testTreebank.loadPath(args[0],testFilter);
  List<TaggedWord> testWords=new ArrayList<>();
  for (  Tree t : testTreebank) {
    for (    TaggedWord tw : t.taggedYield()) {
      testWords.add(tw);
    }
  }
  int[] totalAndCorrect=lex.testOnTreebank(testWords);
  log.info("done.");
  System.out.println(totalAndCorrect[1] + " correct out of " + totalAndCorrect[0]+ " -- ACC: "+ ((double)totalAndCorrect[1]) / totalAndCorrect[0]);
}
