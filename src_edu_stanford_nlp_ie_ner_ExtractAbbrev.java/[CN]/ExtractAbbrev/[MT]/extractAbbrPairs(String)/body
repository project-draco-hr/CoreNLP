{
  String str, tmpStr, longForm="", shortForm="";
  String currSentence="";
  int openParenIndex, closeParenIndex=-1, sentenceEnd, newCloseParenIndex, tmpIndex=-1;
  boolean newParagraph=true;
  StringTokenizer shortTokenizer;
  Vector candidates=new Vector();
  try {
    BufferedReader fin=new BufferedReader(new FileReader(inFile));
    while ((str=fin.readLine()) != null) {
      if (str.length() == 0) {
        continue;
      }
      int index=str.indexOf(" ");
      String id=str.substring(0,index);
      currSentence=str.substring(index + 1);
      openParenIndex=currSentence.indexOf(" " + open);
      do {
        if (openParenIndex > -1) {
          openParenIndex++;
        }
 else {
          break;
        }
        sentenceEnd=currSentence.length() - 1;
        closeParenIndex=currSentence.indexOf(close,openParenIndex);
        if (closeParenIndex < 0) {
          break;
        }
 else {
          longForm=currSentence.substring(0,openParenIndex).trim();
          shortForm=currSentence.substring(openParenIndex + 1,closeParenIndex).trim();
        }
        if (shortForm.length() > 0 || longForm.length() > 0) {
          if (shortForm.length() > 1 && longForm.length() > 1) {
            if ((shortForm.indexOf(open) > -1) && ((newCloseParenIndex=currSentence.indexOf(close,closeParenIndex + 1)) > -1)) {
              shortForm=currSentence.substring(openParenIndex + 1,newCloseParenIndex);
              closeParenIndex=newCloseParenIndex;
            }
            if ((tmpIndex=shortForm.indexOf(", ")) > -1) {
              shortForm=shortForm.substring(0,tmpIndex);
            }
            if ((tmpIndex=shortForm.indexOf("; ")) > -1) {
              shortForm=shortForm.substring(0,tmpIndex);
            }
            shortTokenizer=new StringTokenizer(shortForm);
            if (shortTokenizer.countTokens() > 2 || shortForm.length() > longForm.length()) {
              tmpIndex=currSentence.lastIndexOf(" ",openParenIndex - 2);
              tmpStr=currSentence.substring(tmpIndex + 1,openParenIndex - 1);
              longForm=shortForm;
              shortForm=tmpStr;
              if (!hasCapital(shortForm)) {
                shortForm="";
              }
            }
            if (isValidShortForm(shortForm)) {
              String[] pair=extractAbbrPair(shortForm.trim(),longForm.trim());
              if (pair != null) {
                System.out.println("SHORT " + pair[0] + "\nLONG "+ pair[1]);
              }
            }
          }
          currSentence=currSentence.substring(closeParenIndex + 1);
        }
 else         if (openParenIndex > -1) {
          if ((currSentence.length() - openParenIndex) > 200) {
            currSentence=currSentence.substring(openParenIndex + 1);
          }
          break;
        }
        shortForm="";
        longForm="";
      }
 while ((openParenIndex=currSentence.indexOf(" " + open)) > -1);
    }
    fin.close();
  }
 catch (  Exception ioe) {
    ioe.printStackTrace();
    System.out.println(currSentence);
    System.out.println(tmpIndex);
  }
  return candidates;
}
