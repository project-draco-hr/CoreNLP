{
  Properties props=StringUtils.argsToProperties(args);
  String treeFileName=props.getProperty("treeFile");
  String conlluFileName=props.getProperty("conlluFile");
  String outputRepresentation=props.getProperty("outputRepresentation","basic");
  Iterator<SemanticGraph> sgIterator=null;
  if (treeFileName != null) {
    MemoryTreebank tb=new MemoryTreebank(new NPTmpRetainingTreeNormalizer(0,false,1,false));
    tb.loadPath(treeFileName);
    Iterator<Tree> treeIterator=tb.iterator();
    sgIterator=new TreeToSemanticGraphIterator(treeIterator);
  }
 else   if (conlluFileName != null) {
    CoNLLUDocumentReader reader=new CoNLLUDocumentReader();
    try {
      sgIterator=reader.getIterator(IOUtils.readerFromString(conlluFileName));
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
 else {
    System.err.println("No input file specified!");
    System.err.println("");
    System.err.printf("Usage: java %s [-treeFile trees.tree | -conlluFile deptrees.conllu]" + " [-outputRepresentation basic|enhanced|enhanced++ (default: basic)]%n",UniversalDependenciesConverter.class.getCanonicalName());
    return;
  }
  CoNLLUDocumentWriter writer=new CoNLLUDocumentWriter();
  while (sgIterator.hasNext()) {
    SemanticGraph sg=sgIterator.next();
    if (treeFileName != null) {
      Tree tree=((TreeToSemanticGraphIterator)sgIterator).getCurrentTree();
      Tree uposTree=UniversalPOSMapper.mapTree(tree);
      List<Label> uposLabels=uposTree.preTerminalYield();
      for (      IndexedWord token : sg.vertexListSorted()) {
        int idx=token.index() - 1;
        String uposTag=uposLabels.get(idx).value();
        token.set(CoreAnnotations.CoarseTagAnnotation.class,uposTag);
      }
    }
    if (outputRepresentation.equalsIgnoreCase("enhanced")) {
      sg=convertBasicToEnhanced(sg);
    }
 else     if (outputRepresentation.equalsIgnoreCase("enhanced++")) {
      sg=convertBasicToEnhancedPlusPlus(sg);
    }
    System.out.println(writer.printSemanticGraph(sg));
  }
}
