{
  pw.printf("Examining file %s%n",filename);
  Counter<String> weirdCounts=new ClassicCounter<String>();
  Counter<String> nonBmpCounts=new ClassicCounter<String>();
  int lineNo=0;
  for (  String line : ObjectBank.getLineIterator(filename)) {
    lineNo++;
    int numCodePoints=line.codePointCount(0,line.length());
    int numLatin=0;
    int numChinese=0;
    int numOkay=0;
    int numFunny=0;
    int numNonBmp=0;
    for (int i=0; i < numCodePoints; i++) {
      int index=line.offsetByCodePoints(0,i);
      int ch=line.codePointAt(index);
      int ty=Character.getType(ch);
      Character.UnicodeBlock block=Character.UnicodeBlock.of(ch);
      if (!Character.isValidCodePoint(ch)) {
        pw.printf("Invalid codepoint %d %s in line: %s%n",ch,Integer.toString(ch,16),line);
        numFunny++;
      }
 else       if (Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS.equals(block) || Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION.equals(block) || Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A.equals(block)) {
        numChinese++;
      }
 else       if (Character.UnicodeBlock.BASIC_LATIN.equals(block) || Character.UnicodeBlock.LATIN_1_SUPPLEMENT.equals(block)) {
        numLatin++;
      }
 else       if (Character.UnicodeBlock.NUMBER_FORMS.equals(block) || Character.UnicodeBlock.GENERAL_PUNCTUATION.equals(block) || Character.UnicodeBlock.ENCLOSED_ALPHANUMERICS.equals(block)|| Character.UnicodeBlock.GEOMETRIC_SHAPES.equals(block)|| Character.UnicodeBlock.BOX_DRAWING.equals(block)|| Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS.equals(block)|| ch == '\u30FB' || ch == '\u2103' || ch == '\uFE6A' || ch == '\uFE63' || ch == '\uFE52' || ch == '\u2236') {
        numOkay++;
      }
 else {
        String nonBmpStr="";
        if (ch >= (1 << 16)) {
          numNonBmp++;
          nonBmpStr=", non-BMP!";
          char[] chArrBmp=Character.toChars(ch);
          nonBmpCounts.incrementCount(new String(chArrBmp) + "[U+" + Integer.toHexString(ch).toUpperCase()+ "]");
        }
        String tyStr="";
switch (ty) {
case 1:
          tyStr=" uppercase";
        break;
case 2:
      tyStr=" lowercase";
    break;
case 5:
  tyStr=" otherLetter";
break;
case 12:
tyStr=" spaceSeparator";
break;
case 20:
tyStr=" dashPunct";
break;
case 21:
tyStr=" startPunct";
break;
case 22:
tyStr=" endPunct";
break;
case 24:
tyStr=" otherPunct";
break;
default :
}
char[] chArr=Character.toChars(ch);
String chstr=new String(chArr);
pw.println(filename + ", line: " + lineNo+ ": Character "+ ch+ " ["+ chstr+ ", U+"+ Integer.toHexString(ch).toUpperCase()+ ", valid="+ Character.isValidCodePoint(ch)+ ", suppl="+ Character.isSupplementaryCodePoint(ch)+ ", mirror="+ Character.isMirrored(ch)+ ", type="+ Character.getType(ch)+ tyStr+ ", uBlock="+ block+ nonBmpStr+ "]");
}
}
int sane=numLatin + numChinese + numOkay;
if (sane < (numCodePoints - 5)) {
pw.println(filename + ", line: " + lineNo+ ": Content is funny: "+ line);
}
}
}
