{
  Counter<String> lowResults=new ClassicCounter<String>();
  Counter<String> highResults=new ClassicCounter<String>();
  Counter<String> expectedResults=new ClassicCounter<String>();
  setAll(lowResults,highResults,expectedResults,MENTION_TP,12370);
  setAll(lowResults,highResults,expectedResults,MENTION_F1,55.6);
  setAll(lowResults,highResults,expectedResults,MUC_TP,5965);
  setAll(lowResults,highResults,expectedResults,MUC_F1,57.93);
  setAll(lowResults,highResults,expectedResults,BCUBED_TP,6868.81);
  setAll(lowResults,highResults,expectedResults,BCUBED_F1,51.3);
  setAll(lowResults,highResults,expectedResults,CEAFM_TP,8064);
  setAll(lowResults,highResults,expectedResults,CEAFM_F1,54.79);
  setAll(lowResults,highResults,expectedResults,CEAFE_TP,2231.44);
  setLowHighExpected(lowResults,highResults,expectedResults,CEAFE_F1,50.45,50.47,50.47);
  setAll(lowResults,highResults,expectedResults,BLANC_F1,45.87);
  setAll(lowResults,highResults,expectedResults,CONLL_SCORE,53.23);
  Counter<String> results=new ClassicCounter<String>();
  BufferedReader r=new BufferedReader(new StringReader(runCorefTest(true)));
  for (String line; (line=r.readLine()) != null; ) {
    Matcher m1=MENTION_PATTERN.matcher(line);
    if (m1.matches()) {
      results.setCount(MENTION_TP,Double.parseDouble(m1.group(1)));
      results.setCount(MENTION_F1,Double.parseDouble(m1.group(2)));
    }
    Matcher m2=MUC_PATTERN.matcher(line);
    if (m2.matches()) {
      results.setCount(MUC_TP,Double.parseDouble(m2.group(1)));
      results.setCount(MUC_F1,Double.parseDouble(m2.group(2)));
    }
    Matcher m3=BCUBED_PATTERN.matcher(line);
    if (m3.matches()) {
      results.setCount(BCUBED_TP,Double.parseDouble(m3.group(1)));
      results.setCount(BCUBED_F1,Double.parseDouble(m3.group(2)));
    }
    Matcher m4=CEAFM_PATTERN.matcher(line);
    if (m4.matches()) {
      results.setCount(CEAFM_TP,Double.parseDouble(m4.group(1)));
      results.setCount(CEAFM_F1,Double.parseDouble(m4.group(2)));
    }
    Matcher m5=CEAFE_PATTERN.matcher(line);
    if (m5.matches()) {
      results.setCount(CEAFE_TP,Double.parseDouble(m5.group(1)));
      results.setCount(CEAFE_F1,Double.parseDouble(m5.group(2)));
    }
    Matcher m6=BLANC_PATTERN.matcher(line);
    if (m6.matches()) {
      results.setCount(BLANC_F1,Double.parseDouble(m6.group(1)));
    }
    Matcher m7=CONLL_PATTERN.matcher(line);
    if (m7.matches()) {
      results.setCount(CONLL_SCORE,Double.parseDouble(m7.group(1)));
    }
  }
  for (  String key : results.keySet()) {
    double val=results.getCount(key);
    double high=highResults.getCount(key);
    double low=lowResults.getCount(key);
    double expected=expectedResults.getCount(key);
    assertTrue("Value for " + key + " = "+ val+ " is lower than expected minimum "+ low,val >= low);
    assertTrue("Value for " + key + " = "+ val+ " is higher than expected maximum "+ high+ " [not a bug, but a breakthrough!]",val <= high);
    if (val < (expected - 1e-4)) {
      System.err.println("Value for " + key + " = "+ val+ " is fractionally lower than expected "+ expected);
    }
 else     if (val > (expected + 1e-4)) {
      System.err.println("Value for " + key + " = "+ val+ " is fractionally higher than expected "+ expected);
    }
 else {
      System.err.println("Value for " + key + " = "+ val+ " is as expected");
    }
  }
}
