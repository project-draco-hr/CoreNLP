{
  int i;
  Class<? super BasicDataCollection<L,F>> klass=ErasureUtils.<Class<BasicDataCollection<L,F>>>uncheckedCast(getClass());
  DataCollection<L,F>[] dcs=ErasureUtils.<BasicDataCollection<L,F>>mkTArray(klass,fractions.length);
  for (i=0; i < fractions.length; i++) {
    dcs[i]=blankDataCollection();
  }
  double[] normalized=normalize(fractions);
  int[] corpSizes=new int[normalized.length];
  int numDocs=size();
  int docsRemaining=numDocs;
  for (i=0; i < normalized.length - 1; i++) {
    corpSizes[i]=(int)(normalized[i] * numDocs);
    docsRemaining-=corpSizes[i];
  }
  corpSizes[i]=docsRemaining;
  Random randGen=new Random(seed);
  int lastDefault=0;
  for (i=0; i < numDocs; i++) {
    boolean docPlaced=false;
    int rand=randGen.nextInt() % numDocs;
    int j;
    for (j=0; j < corpSizes.length; j++) {
      if (rand < corpSizes[j] && dcs[j].size() < corpSizes[j]) {
        dcs[j].add(get(i));
        docPlaced=true;
        break;
      }
      rand-=corpSizes[j];
    }
    if (!docPlaced) {
      for (j=lastDefault + 1; ; ) {
        if (dcs[j].size() < corpSizes[j]) {
          dcs[j].add(get(i));
          lastDefault=j;
          break;
        }
        j=(j + 1) % normalized.length;
      }
    }
  }
  return dcs;
}
