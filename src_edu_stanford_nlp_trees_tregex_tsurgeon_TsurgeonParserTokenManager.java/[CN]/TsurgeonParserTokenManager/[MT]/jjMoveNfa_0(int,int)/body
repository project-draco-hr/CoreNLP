{
  int startsAt=0;
  jjnewStateCnt=55;
  int i=1;
  jjstateSet[0]=startState;
  int kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      do {
switch (jjstateSet[--i]) {
case 0:
          if ((0xf3fffcfa00000000L & l) != 0L) {
            if (kind > 23)             kind=23;
{
              jjCheckNAdd(14);
            }
          }
 else           if (curChar == 40) {
            if (kind > 24)             kind=24;
{
              jjCheckNAdd(16);
            }
          }
        if ((0x240000000000L & l) != 0L) {
          if (kind > 17)           kind=17;
{
            jjCheckNAdd(1);
          }
        }
 else         if (curChar == 47) {
          jjCheckNAddStates(0,5);
        }
 else         if (curChar == 35) {
          jjAddStates(6,7);
        }
 else         if (curChar == 36) {
          jjAddStates(8,9);
        }
 else         if (curChar == 62) {
          jjCheckNAddTwoStates(5,6);
        }
      if (curChar == 35) {
        jjCheckNAdd(13);
      }
    break;
case 55:
  if ((0xf3fffcfa00000000L & l) != 0L) {
    if (kind > 23)     kind=23;
{
      jjCheckNAdd(14);
    }
  }
if ((0x23ff240000000000L & l) != 0L) {
  if (kind > 17)   kind=17;
{
    jjCheckNAdd(1);
  }
}
break;
case 1:
if ((0x23ff240000000000L & l) == 0L) break;
if (kind > 17) kind=17;
{
jjCheckNAdd(1);
}
break;
case 3:
if ((0x3ff200000000000L & l) == 0L) break;
if (kind > 18) kind=18;
jjstateSet[jjnewStateCnt++]=3;
break;
case 4:
if (curChar == 62) {
jjCheckNAddTwoStates(5,6);
}
break;
case 5:
if (curChar == 45) {
jjCheckNAdd(6);
}
break;
case 6:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 19) kind=19;
{
jjCheckNAdd(6);
}
break;
case 10:
if ((0xffffffffffffdbffL & l) != 0L) {
jjAddStates(10,12);
}
break;
case 12:
if (curChar == 35) {
jjCheckNAdd(13);
}
break;
case 13:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 22) kind=22;
{
jjCheckNAdd(13);
}
break;
case 14:
if ((0xf3fffcfa00000000L & l) == 0L) break;
if (kind > 23) kind=23;
{
jjCheckNAdd(14);
}
break;
case 15:
if (curChar != 40) break;
if (kind > 24) kind=24;
{
jjCheckNAdd(16);
}
break;
case 16:
if ((0xf3fffcfa00000000L & l) == 0L) break;
if (kind > 24) kind=24;
{
jjCheckNAdd(16);
}
break;
case 17:
if (curChar == 36) {
jjAddStates(8,9);
}
break;
case 18:
if (curChar == 45 && kind > 19) kind=19;
break;
case 19:
if (curChar == 43 && kind > 19) kind=19;
break;
case 20:
if (curChar == 35) {
jjAddStates(6,7);
}
break;
case 37:
if (curChar == 47) {
jjCheckNAddStates(0,5);
}
break;
case 38:
if (curChar == 47) {
jjCheckNAddStates(13,15);
}
break;
case 40:
if ((0xffffffffffffdbffL & l) != 0L) {
jjCheckNAddStates(13,15);
}
break;
case 41:
if (curChar == 47) {
jjCheckNAddStates(16,18);
}
break;
case 42:
if (curChar == 61) {
jjCheckNAdd(43);
}
break;
case 43:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 16) kind=16;
{
jjCheckNAddStates(19,22);
}
break;
case 44:
if (curChar == 37) {
jjCheckNAdd(45);
}
break;
case 45:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 16) kind=16;
{
jjCheckNAddStates(23,26);
}
break;
case 46:
case 47:
if (curChar == 47) {
jjCheckNAddStates(27,29);
}
break;
case 49:
if ((0xffffffffffffdbffL & l) != 0L) {
jjCheckNAddStates(27,29);
}
break;
case 50:
if (curChar != 47) break;
if (kind > 16) kind=16;
{
jjCheckNAddStates(16,18);
}
break;
case 51:
if (curChar == 47) {
jjCheckNAddStates(30,32);
}
break;
case 53:
if ((0xffffffffffffdbffL & l) != 0L) {
jjCheckNAddStates(30,32);
}
break;
case 54:
if (curChar == 47 && kind > 20) kind=20;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 0:
if ((0x7fffffffffffffffL & l) != 0L) {
if (kind > 23) kind=23;
{
jjCheckNAdd(14);
}
}
if ((0x7fffffe07fffffeL & l) != 0L) {
if (kind > 17) kind=17;
{
jjCheckNAdd(1);
}
}
 else if (curChar == 124) {
jjCheckNAddStates(10,12);
}
if ((0x7fffffeL & l) != 0L) {
if (kind > 18) kind=18;
{
jjCheckNAdd(3);
}
}
break;
case 55:
if ((0x7fffffffffffffffL & l) != 0L) {
if (kind > 23) kind=23;
{
jjCheckNAdd(14);
}
}
if ((0x17fffffe87ffffffL & l) != 0L) {
if (kind > 17) kind=17;
{
jjCheckNAdd(1);
}
}
break;
case 1:
if ((0x17fffffe87ffffffL & l) == 0L) break;
if (kind > 17) kind=17;
{
jjCheckNAdd(1);
}
break;
case 2:
if ((0x7fffffeL & l) == 0L) break;
if (kind > 18) kind=18;
{
jjCheckNAdd(3);
}
break;
case 3:
if ((0x87fffffeL & l) == 0L) break;
if (kind > 18) kind=18;
{
jjCheckNAdd(3);
}
break;
case 7:
case 8:
if (curChar == 124) {
jjCheckNAddStates(10,12);
}
break;
case 9:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=8;
break;
case 10:
if ((0xefffffffffffffffL & l) != 0L) {
jjCheckNAddStates(10,12);
}
break;
case 11:
if (curChar == 124 && kind > 21) kind=21;
break;
case 14:
if ((0x7fffffffffffffffL & l) == 0L) break;
if (kind > 23) kind=23;
{
jjCheckNAdd(14);
}
break;
case 16:
if ((0x7fffffffffffffffL & l) == 0L) break;
if (kind > 24) kind=24;
jjstateSet[jjnewStateCnt++]=16;
break;
case 21:
if (curChar == 116 && kind > 15) kind=15;
break;
case 22:
case 30:
if (curChar == 115) {
jjCheckNAdd(21);
}
break;
case 23:
if (curChar == 111) jjstateSet[jjnewStateCnt++]=22;
break;
case 24:
if (curChar == 109) jjstateSet[jjnewStateCnt++]=23;
break;
case 25:
if (curChar == 116) jjstateSet[jjnewStateCnt++]=24;
break;
case 26:
if (curChar == 104) jjstateSet[jjnewStateCnt++]=25;
break;
case 27:
if (curChar == 103) jjstateSet[jjnewStateCnt++]=26;
break;
case 28:
if (curChar == 105) jjstateSet[jjnewStateCnt++]=27;
break;
case 29:
if (curChar == 114) jjstateSet[jjnewStateCnt++]=28;
break;
case 31:
if (curChar == 111) jjstateSet[jjnewStateCnt++]=30;
break;
case 32:
if (curChar == 109) jjstateSet[jjnewStateCnt++]=31;
break;
case 33:
if (curChar == 116) jjstateSet[jjnewStateCnt++]=32;
break;
case 34:
if (curChar == 102) jjstateSet[jjnewStateCnt++]=33;
break;
case 35:
if (curChar == 101) jjstateSet[jjnewStateCnt++]=34;
break;
case 36:
if (curChar == 108) jjstateSet[jjnewStateCnt++]=35;
break;
case 39:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=38;
break;
case 40:
{
jjAddStates(13,15);
}
break;
case 43:
if ((0x7fffffe87fffffeL & l) == 0L) break;
if (kind > 16) kind=16;
{
jjCheckNAddStates(19,22);
}
break;
case 45:
if ((0x7fffffe87fffffeL & l) == 0L) break;
if (kind > 16) kind=16;
{
jjCheckNAddStates(23,26);
}
break;
case 48:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=47;
break;
case 49:
{
jjAddStates(27,29);
}
break;
case 52:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=51;
break;
case 53:
{
jjAddStates(30,32);
}
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 10:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) {
jjAddStates(10,12);
}
break;
case 40:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) {
jjAddStates(13,15);
}
break;
case 49:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) {
jjAddStates(27,29);
}
break;
case 53:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) {
jjAddStates(30,32);
}
break;
default :
if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
 else break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=55 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
