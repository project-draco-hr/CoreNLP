{
  if (!validateCommandLine(args)) {
    log.info(usage());
    System.exit(-1);
  }
  Date startTime=new Date();
  System.out.println("##################################");
  System.out.println("# Stanford Treebank Preprocessor #");
  System.out.println("##################################");
  System.out.printf("Start time: %s%n",startTime);
  System.out.printf("Configuration: %s%n%n",configFile);
  final ConfigParser cp=new ConfigParser(configFile);
  cp.parse();
  final DistributionPackage distrib=new DistributionPackage();
  for (  Properties dsParams : cp) {
    String nameOfDataset=PropertiesUtils.hasProperty(dsParams,ConfigParser.paramName) ? dsParams.getProperty(ConfigParser.paramName) : "UN-NAMED";
    if (outputPath != null) {
      dsParams.setProperty(ConfigParser.paramOutputPath,outputPath);
    }
    Dataset ds=getDatasetClass(dsParams);
    if (ds == null) {
      System.out.printf("Unable to instantiate TYPE for dataset %s. Check the javadocs%n",nameOfDataset);
      continue;
    }
    boolean shouldDistribute=dsParams.contains(ConfigParser.paramDistrib) && Boolean.parseBoolean(dsParams.getProperty(ConfigParser.paramDistrib));
    dsParams.remove(ConfigParser.paramDistrib);
    boolean lacksRequiredOptions=!(ds.setOptions(dsParams));
    if (lacksRequiredOptions) {
      System.out.printf("Skipping dataset %s as it lacks required parameters. Check the javadocs%n",nameOfDataset);
      continue;
    }
    ds.build();
    if (shouldDistribute)     distrib.addFiles(ds.getFilenames());
    if (VERBOSE)     System.out.printf("%s%n",ds.toString());
  }
  if (MAKE_DISTRIB)   distrib.make(distribName);
  if (VERBOSE) {
    System.out.println("-->configuration details");
    System.out.println(cp.toString());
    if (MAKE_DISTRIB) {
      System.out.println("-->distribution package details");
      System.out.println(distrib.toString());
    }
  }
  Date stopTime=new Date();
  long elapsedTime=stopTime.getTime() - startTime.getTime();
  System.out.printf("Completed processing at %s%n",stopTime);
  System.out.printf("Elapsed time: %d seconds%n",(int)(elapsedTime / 1000F));
}
