{
  format=getServletConfig().getInitParameter("outputFormat");
  if (format == null || format.trim().equals(""))   throw new ServletException("Invalid outputFormat setting.");
  String spacingStr=getServletConfig().getInitParameter("preserveSpacing");
  if (spacingStr == null || spacingStr.trim().equals(""))   throw new ServletException("Invalid preserveSpacing setting.");
  spacingStr=spacingStr.trim().toLowerCase();
  spacing="true".equals(spacingStr);
  String path=getServletContext().getRealPath("/WEB-INF/data/models");
  for (  String classifier : new File(path).list()) {
    classifiers.add(classifier);
  }
  defaultClassifier=classifiers.get(0);
  for (  String classifier : classifiers) {
    log(classifier);
  }
  ners=new HashMap<String,CRFClassifier>();
  for (  String classifier : classifiers) {
    CRFClassifier model=null;
    String filename="/WEB-INF/data/models/" + classifier;
    InputStream is=getServletConfig().getServletContext().getResourceAsStream(filename);
    if (is == null)     throw new ServletException("File not found. Filename = " + filename);
    try {
      if (filename.endsWith(".gz")) {
        is=new BufferedInputStream(new GZIPInputStream(is));
      }
 else {
        is=new BufferedInputStream(is);
      }
      model=CRFClassifier.getClassifier(is);
    }
 catch (    IOException e) {
      throw new ServletException("IO problem reading classifier.");
    }
catch (    ClassCastException e) {
      throw new ServletException("Classifier class casting problem.");
    }
catch (    ClassNotFoundException e) {
      throw new ServletException("Classifier class not found problem.");
    }
 finally {
      try {
        is.close();
      }
 catch (      IOException e) {
      }
    }
    ners.put(classifier,model);
  }
}
