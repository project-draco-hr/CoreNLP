{
  if (t == null) {
    return 0.0;
  }
  String nodeStr=nodeToString(t);
  double nodeWidth=fM.stringWidth(nodeStr);
  double nodeHeight=fM.getHeight();
  double nodeAscent=fM.getAscent();
  WidthResult wr=widthResult(t,fM);
  double treeWidth=wr.width;
  double nodeTab=wr.nodeTab;
  double childTab=wr.childTab;
  double nodeCenter=wr.nodeCenter;
  Color curColor=g2.getColor();
  g2.setColor(paintColor);
  g2.drawString(nodeStr,(float)(nodeTab + start.getX()),(float)(start.getY() + nodeAscent));
  g2.setColor(curColor);
  double layerMultiplier=(1.0 + belowLineSkip + aboveLineSkip+ parentSkip);
  double layerHeight=nodeHeight * layerMultiplier;
  if (t.isLeaf()) {
    yieldOffsets[leafCtr++]=(float)(nodeTab + start.getX());
    return nodeWidth;
  }
  double childStartX=start.getX() + childTab;
  double childStartY=start.getY() + layerHeight;
  double lineStartX=start.getX() + nodeCenter;
  double lineStartY=start.getY() + nodeHeight * (1.0 + belowLineSkip);
  double lineEndY=lineStartY + nodeHeight * parentSkip;
  for (int i=0; i < t.children().length; i++) {
    Tree child=t.children()[i];
    double cWidth;
    if (matchedParts != null && matchedParts.contains(child)) {
      Point2D.Double coord=new Point2D.Double(childStartX,childStartY);
      matchedPartCoordinates.add(coord);
      cWidth=paintTree(child,coord,g2,fM,matchedColor);
    }
 else {
      Color col=defaultColor;
      if (((CoreLabel)child.label()).has(CoreAnnotations.DoAnnotation.class))       col=(((CoreLabel)child.label()).get(CoreAnnotations.DoAnnotation.class)) ? tdiffColor : defaultColor;
      cWidth=paintTree(child,new Point2D.Double(childStartX,childStartY),g2,fM,col);
    }
    wr=widthResult(child,fM);
    double lineEndX=childStartX + wr.nodeCenter;
    g2.draw(new Line2D.Double(lineStartX,lineStartY,lineEndX,lineEndY));
    childStartX+=cWidth;
    if (i < t.children().length - 1) {
      childStartX+=sisterSkip * fM.stringWidth(" ");
    }
  }
  return treeWidth;
}
