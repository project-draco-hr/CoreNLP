{
  double nodeHeight=fM.getHeight();
  double layerMultiplier=(1.0 + belowLineSkip + aboveLineSkip+ parentSkip);
  double layerHeight=nodeHeight * layerMultiplier;
  List<HasWord> sentence=tree.yieldHasWord();
  for (int i=0; i < sentence.size(); i++) {
    g2.drawString(sentence.get(i).word(),yieldOffsets[i],(float)(yieldHeight + layerHeight));
  }
  final float rowOrigin=(float)(yieldHeight + 2.0 * layerHeight);
  List<List<IntPair>> rows=new ArrayList<>();
  for (  Constituent c : diffConstituents) {
    for (int rowIdx=0; rowIdx < diffConstituents.size(); rowIdx++) {
      float rowHeight=rowOrigin + (float)(rowIdx * layerHeight);
      int ext=(c.end() == (yieldOffsets.length - 1)) ? 0 : 1;
      if (rowIdx >= rows.size()) {
        rows.add(new ArrayList<>());
        rows.get(rowIdx).add(new IntPair(c.start(),c.end()));
        double nodeWidth=fM.stringWidth(c.value());
        g2.drawString(c.value(),yieldOffsets[c.start()],rowHeight);
        try {
          g2.drawLine((int)(yieldOffsets[c.start()] + nodeWidth) + 10,(int)rowHeight,(int)(yieldOffsets[c.end() + ext]) - 15,(int)rowHeight);
        }
 catch (        ArrayIndexOutOfBoundsException e) {
        }
        break;
      }
 else {
        boolean foundOverlap=false;
        for (        IntPair span : rows.get(rowIdx)) {
          if (doesOverlap(c,span)) {
            foundOverlap=true;
            break;
          }
        }
        if (!foundOverlap) {
          rows.get(rowIdx).add(new IntPair(c.start(),c.end()));
          double nodeWidth=fM.stringWidth(c.value());
          g2.drawString(c.value(),yieldOffsets[c.start()],rowHeight);
          g2.drawLine((int)(yieldOffsets[c.start()] + nodeWidth) + 10,(int)rowHeight,(int)(yieldOffsets[c.end() + ext]) - 15,(int)rowHeight);
          break;
        }
      }
    }
  }
}
