{
  double tol=this.tol;
  double low=this.low;
  double high=this.high;
  double flow=function.apply(low);
  double fhigh=function.apply(high);
  if (VERBOSE) {
    System.err.println("Finding min between " + low + " (value: "+ flow+ ") and "+ high+ " (value: "+ fhigh+ ")");
  }
  double mid;
  double oldY;
  boolean searchRight;
  if (false) {
    mid=goldenMean(low,high);
    oldY=function.apply(mid);
    if (VERBOSE)     System.err.println("Initially probed at " + mid + ", value is "+ oldY);
    if (oldY < flow || oldY < fhigh) {
      searchRight=false;
    }
 else {
      mid=goldenMean(high,low);
      oldY=function.apply(mid);
      if (VERBOSE)       System.err.println("Probed at " + mid + ", value is "+ oldY);
      searchRight=true;
      if (!(oldY < flow || oldY < fhigh)) {
        System.err.println("Warning: GoldenSectionLineSearch init didn't find slope!!");
      }
    }
  }
 else {
    if (VERBOSE)     System.err.println("20 point gridsearch for good mid point....");
    double bestPoint=low;
    double bestVal=flow;
    double incr=(high - low) / 22.0;
    for (mid=low + incr; mid < high; mid+=incr) {
      oldY=function.apply(mid);
      if (VERBOSE)       System.err.print("Probed at " + mid + ", value is "+ oldY);
      if (oldY < bestVal) {
        bestPoint=mid;
        bestVal=oldY;
        if (VERBOSE)         System.err.print(" [best so far!]");
      }
      if (VERBOSE)       System.err.println();
    }
    mid=bestPoint;
    oldY=bestVal;
    searchRight=mid < low + (high - low) / 2.0;
    if (oldY < flow && oldY < fhigh) {
      if (VERBOSE)       System.err.println("Found a good mid point at (" + mid + ", "+ oldY+ ")");
    }
 else {
      System.err.println("Warning: GoldenSectionLineSearch grid search couldn't find slope!!");
      mid=goldenMean(low,high);
      oldY=function.apply(mid);
      searchRight=false;
    }
  }
  memory.put(mid,oldY);
  while (geometric ? (high / low > 1 + tol) : high - low > tol) {
    if (VERBOSE)     System.err.println("Current low, mid, high: " + nf.format(low) + " "+ nf.format(mid)+ " "+ nf.format(high));
    double newX=goldenMean(searchRight ? high : low,mid);
    double newY=function.apply(newX);
    memory.put(newX,newY);
    if (VERBOSE)     System.err.println("Probed " + (searchRight ? "right" : "left") + " at "+ newX+ ", value is "+ newY);
    if (newY < oldY) {
      if (searchRight)       low=mid;
 else       high=mid;
      mid=newX;
      oldY=newY;
    }
 else {
      if (searchRight)       high=newX;
 else       low=newX;
      searchRight=!searchRight;
    }
  }
  return mid;
}
