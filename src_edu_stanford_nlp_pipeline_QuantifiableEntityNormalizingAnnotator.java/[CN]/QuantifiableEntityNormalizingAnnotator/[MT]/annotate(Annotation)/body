{
  if (VERBOSE) {
    timer.start();
    System.err.print("Normalizing quantifiable entities...");
  }
  if (annotation.containsKey(CoreAnnotations.SentencesAnnotation.class)) {
    List<CoreMap> sentences=annotation.get(CoreAnnotations.SentencesAnnotation.class);
    for (    CoreMap sentence : annotation.get(CoreAnnotations.SentencesAnnotation.class)) {
      List<CoreLabel> tokens=sentence.get(CoreAnnotations.TokensAnnotation.class);
      List<CoreLabel> words=new ArrayList<CoreLabel>();
      for (      CoreLabel token : tokens) {
        CoreLabel word=new CoreLabel();
        word.setWord(token.word());
        word.setNER(token.ner());
        word.setTag(token.tag());
        NumberSequenceClassifier.transferAnnotations(token,word);
        words.add(word);
      }
      doOneSentence(words);
      for (int i=0; i < words.size(); i++) {
        String ner=words.get(i).ner();
        tokens.get(i).setNER(ner);
        tokens.get(i).set(NormalizedNamedEntityTagAnnotation.class,words.get(i).get(NormalizedNamedEntityTagAnnotation.class));
      }
    }
    if (VERBOSE) {
      timer.stop("done.");
      System.err.println("output: " + sentences + '\n');
    }
  }
 else   if (annotation.containsKey(CoreAnnotations.TokensAnnotation.class)) {
    List<CoreLabel> tokens=annotation.get(CoreAnnotations.TokensAnnotation.class);
    List<CoreLabel> words=new ArrayList<CoreLabel>();
    for (    CoreLabel token : tokens) {
      CoreLabel word=new CoreLabel();
      word.setWord(token.word());
      word.setNER(token.ner());
      word.setTag(token.tag());
      NumberSequenceClassifier.transferAnnotations(token,word);
      words.add(word);
    }
    doOneSentence(words);
    for (int i=0; i < words.size(); i++) {
      String ner=words.get(i).ner();
      tokens.get(i).setNER(ner);
      tokens.get(i).set(NormalizedNamedEntityTagAnnotation.class,words.get(i).get(NormalizedNamedEntityTagAnnotation.class));
    }
  }
 else {
    throw new RuntimeException("unable to find sentences in: " + annotation);
  }
}
