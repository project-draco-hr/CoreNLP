{
  if (parserQuery.parseSkipped()) {
    List<? extends HasWord> sentence=parserQuery.originalSentence();
    if (sentence != null) {
      numWords-=sentence.size();
    }
    numSkipped++;
  }
  if (parserQuery.parseNoMemory())   numNoMemory++;
  if (parserQuery.parseUnparsable())   numUnparsable++;
  if (parserQuery.parseFallback())   numFallback++;
  saidMemMessage=saidMemMessage || parserQuery.saidMemMessage();
  Tree ansTree=parserQuery.getBestParse();
  if (ansTree == null) {
    pwo.println("(())");
    return;
  }
  if (pcfgLL != null && parserQuery.getPCFGParser() != null) {
    pcfgLL.recordScore(parserQuery.getPCFGParser(),pwErr);
  }
  if (depLL != null && parserQuery.getDependencyParser() != null) {
    depLL.recordScore(parserQuery.getDependencyParser(),pwErr);
  }
  if (factLL != null && parserQuery.getFactoredParser() != null) {
    factLL.recordScore(parserQuery.getFactoredParser(),pwErr);
  }
  try {
    treePrint.printTree(ansTree,Integer.toString(num),pwo);
  }
 catch (  RuntimeException re) {
    pwErr.println("TreePrint.printTree skipped: out of memory (or other error)");
    re.printStackTrace(pwErr);
    numNoMemory++;
    try {
      treePrint.printTree(null,Integer.toString(num),pwo);
    }
 catch (    Exception e) {
      pwErr.println("Sentence skipped: out of memory or error calling TreePrint.");
      pwo.println("(())");
      e.printStackTrace(pwErr);
    }
  }
  if (op.testOptions.printPCFGkBest > 0 && parserQuery.getPCFGParser() != null && parserQuery.getPCFGParser().hasParse()) {
    List<ScoredObject<Tree>> trees=parserQuery.getKBestPCFGParses(op.testOptions.printPCFGkBest);
    treePrint.printTrees(trees,Integer.toString(num),pwo);
  }
 else   if (op.testOptions.printFactoredKGood > 0 && parserQuery.getFactoredParser() != null && parserQuery.getFactoredParser().hasParse()) {
    List<ScoredObject<Tree>> trees=parserQuery.getKGoodFactoredParses(op.testOptions.printFactoredKGood);
    treePrint.printTrees(trees,Integer.toString(num),pwo);
  }
}
