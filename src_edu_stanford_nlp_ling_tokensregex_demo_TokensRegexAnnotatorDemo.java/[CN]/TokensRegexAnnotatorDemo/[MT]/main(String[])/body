{
  PrintWriter out;
  String rules;
  if (args.length > 0) {
    rules=args[0];
  }
 else {
    rules="edu/stanford/nlp/ling/tokensregex/demo/rules/colors.rules.txt";
  }
  if (args.length > 2) {
    out=new PrintWriter(args[2]);
  }
 else {
    out=new PrintWriter(System.out);
  }
  Properties properties=new Properties();
  properties.setProperty("annotators","tokenize,ssplit,pos,lemma,ner,tokensregexdemo");
  properties.setProperty("customAnnotatorClass.tokensregexdemo","edu.stanford.nlp.pipeline.TokensRegexAnnotator");
  properties.setProperty("tokensregexdemo.rules",rules);
  StanfordCoreNLP pipeline=new StanfordCoreNLP(properties);
  Annotation annotation;
  if (args.length > 1) {
    annotation=new Annotation(IOUtils.slurpFileNoExceptions(args[1]));
  }
 else {
    annotation=new Annotation("Both blue and light blue are nice colors.");
  }
  pipeline.annotate(annotation);
  out.println();
  out.println("The top level annotation");
  out.println(annotation.toShorterString());
  List<CoreMap> sentences=annotation.get(CoreAnnotations.SentencesAnnotation.class);
  for (  CoreMap sentence : sentences) {
    for (    CoreLabel token : sentence.get(CoreAnnotations.TokensAnnotation.class)) {
      String word=token.get(CoreAnnotations.TextAnnotation.class);
      String lemma=token.get(CoreAnnotations.LemmaAnnotation.class);
      String pos=token.get(CoreAnnotations.PartOfSpeechAnnotation.class);
      String ne=token.get(CoreAnnotations.NamedEntityTagAnnotation.class);
      String normalized=token.get(CoreAnnotations.NormalizedNamedEntityTagAnnotation.class);
      out.println("token: " + "word=" + word + ", lemma="+ lemma+ ", pos="+ pos+ ", ne="+ ne+ ", normalized="+ normalized);
    }
  }
  out.flush();
}
