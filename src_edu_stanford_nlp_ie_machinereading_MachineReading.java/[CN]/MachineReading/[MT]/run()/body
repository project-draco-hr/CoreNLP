{
  this.forceRetraining=!MachineReadingProperties.loadModel;
  if (MachineReadingProperties.trainOnly) {
    this.forceRetraining=true;
  }
  List<String> retMsg=new ArrayList<>();
  boolean haveSerializedEntityExtractor=serializedModelExists(MachineReadingProperties.serializedEntityExtractorPath);
  boolean haveSerializedRelationExtractor=serializedModelExists(MachineReadingProperties.serializedRelationExtractorPath);
  boolean haveSerializedEventExtractor=serializedModelExists(MachineReadingProperties.serializedEventExtractorPath);
  Annotation training=null;
  Annotation aux=null;
  if ((MachineReadingProperties.extractEntities && !haveSerializedEntityExtractor) || (MachineReadingProperties.extractRelations && !haveSerializedRelationExtractor) || (MachineReadingProperties.extractEvents && !haveSerializedEventExtractor)|| this.forceRetraining|| MachineReadingProperties.crossValidate) {
    training=loadOrMakeSerializedSentences(MachineReadingProperties.trainPath,reader,new File(MachineReadingProperties.serializedTrainingSentencesPath));
    if (auxReader != null) {
      MachineReadingProperties.logger.severe("Reading auxiliary dataset from " + MachineReadingProperties.auxDataPath + "...");
      aux=loadOrMakeSerializedSentences(MachineReadingProperties.auxDataPath,auxReader,new File(MachineReadingProperties.serializedAuxTrainingSentencesPath));
      MachineReadingProperties.logger.severe("Done reading auxiliary dataset.");
    }
  }
  Annotation testing=null;
  if (!MachineReadingProperties.trainOnly && !MachineReadingProperties.crossValidate) {
    File serializedTestSentences=new File(MachineReadingProperties.serializedTestSentencesPath);
    testing=loadOrMakeSerializedSentences(MachineReadingProperties.testPath,reader,serializedTestSentences);
  }
  makeDataSets(training,testing,aux);
  for (int partition=0; partition < datasets.length; partition++) {
    assert(datasets.length > partition);
    assert(datasets[partition] != null);
    assert(MachineReadingProperties.trainOnly || datasets[partition].second() != null);
    train(datasets[partition].first(),(MachineReadingProperties.crossValidate ? partition : -1));
    if (!MachineReadingProperties.trainOnly) {
      MachineReadingProperties.logger.info("annotating partition " + partition);
      annotate(datasets[partition].second(),(MachineReadingProperties.crossValidate ? partition : -1));
    }
  }
  if (!MachineReadingProperties.trainOnly) {
    Annotation gold=new Annotation("");
    for (    Pair<Annotation,Annotation> dataset : datasets)     AnnotationUtils.addSentences(gold,dataset.second().get(SentencesAnnotation.class));
    Annotation[] mergedPredictions=new Annotation[3];
    assert(predictions != null);
    for (int taskLevel=0; taskLevel < mergedPredictions.length; taskLevel++) {
      mergedPredictions[taskLevel]=new Annotation("");
      for (int fold=0; fold < predictions[taskLevel].length; fold++) {
        if (predictions[taskLevel][fold] == null)         continue;
        AnnotationUtils.addSentences(mergedPredictions[taskLevel],predictions[taskLevel][fold].get(CoreAnnotations.SentencesAnnotation.class));
      }
    }
    if (MachineReadingProperties.extractEntities && !entityResultsPrinterSet.isEmpty()) {
      retMsg.addAll(printTask("entity extraction",entityResultsPrinterSet,gold,mergedPredictions[ENTITY_LEVEL]));
    }
    if (MachineReadingProperties.extractRelations && !getRelationResultsPrinterSet().isEmpty()) {
      retMsg.addAll(printTask("relation extraction",getRelationResultsPrinterSet(),gold,mergedPredictions[RELATION_LEVEL]));
    }
    if (MachineReadingProperties.extractEntities && MachineReadingProperties.serializedEntityExtractionResults != null)     IOUtils.writeObjectToFile(mergedPredictions[ENTITY_LEVEL],MachineReadingProperties.serializedEntityExtractionResults);
    if (MachineReadingProperties.extractRelations && MachineReadingProperties.serializedRelationExtractionResults != null)     IOUtils.writeObjectToFile(mergedPredictions[RELATION_LEVEL],MachineReadingProperties.serializedRelationExtractionResults);
    if (MachineReadingProperties.extractEvents && MachineReadingProperties.serializedEventExtractionResults != null)     IOUtils.writeObjectToFile(mergedPredictions[EVENT_LEVEL],MachineReadingProperties.serializedEventExtractionResults);
  }
  return retMsg;
}
