{
  forceRetraining=!loadModel;
  if (trainOnly) {
    forceRetraining=true;
  }
  List<String> retMsg=new ArrayList<String>();
  boolean haveSerializedEntityExtractor=serializedModelExists(serializedEntityExtractorPath);
  boolean haveSerializedRelationExtractor=serializedModelExists(serializedRelationExtractorPath);
  boolean haveSerializedEventExtractor=serializedModelExists(serializedEventExtractorPath);
  Annotation training=null;
  Annotation aux=null;
  if ((extractEntities && !haveSerializedEntityExtractor) || (extractRelations && !haveSerializedRelationExtractor) || (extractEvents && !haveSerializedEventExtractor)|| forceRetraining|| crossValidate) {
    training=loadOrMakeSerializedSentences(trainPath,reader,new File(serializedTrainingSentencesPath));
    if (auxReader != null) {
      logger.severe("Reading auxiliary dataset from " + auxDataPath + "...");
      aux=loadOrMakeSerializedSentences(auxDataPath,auxReader,new File(serializedAuxTrainingSentencesPath));
      logger.severe("Done reading auxiliary dataset.");
    }
  }
  Annotation testing=null;
  if (!trainOnly && !crossValidate) {
    File serializedTestSentences=new File(serializedTestSentencesPath);
    testing=loadOrMakeSerializedSentences(testPath,reader,serializedTestSentences);
  }
  makeDataSets(training,testing,aux);
  for (int partition=0; partition < datasets.length; partition++) {
    assert(datasets.length > partition);
    assert(datasets[partition] != null);
    assert(trainOnly || datasets[partition].second() != null);
    train(datasets[partition].first(),(crossValidate ? partition : -1));
    if (!trainOnly) {
      annotate(datasets[partition].second(),(crossValidate ? partition : -1));
    }
  }
  if (!trainOnly) {
    Annotation gold=new Annotation("");
    for (int i=0; i < datasets.length; i++)     AnnotationUtils.addSentences(gold,datasets[i].second().get(CoreAnnotations.SentencesAnnotation.class));
    Annotation[] mergedPredictions=new Annotation[3];
    assert(predictions != null);
    for (int taskLevel=0; taskLevel < mergedPredictions.length; taskLevel++) {
      mergedPredictions[taskLevel]=new Annotation("");
      for (int fold=0; fold < predictions[taskLevel].length; fold++) {
        if (predictions[taskLevel][fold] == null)         continue;
        AnnotationUtils.addSentences(mergedPredictions[taskLevel],predictions[taskLevel][fold].get(CoreAnnotations.SentencesAnnotation.class));
      }
    }
    if (extractEntities && !entityResultsPrinterSet.isEmpty()) {
      retMsg.addAll(printTask("entity extraction",entityResultsPrinterSet,gold,mergedPredictions[ENTITY_LEVEL]));
    }
    if (extractRelations && !getRelationResultsPrinterSet().isEmpty()) {
      retMsg.addAll(printTask("relation extraction",getRelationResultsPrinterSet(),gold,mergedPredictions[RELATION_LEVEL]));
    }
    if (extractEntities && serializedEntityExtractionResults != null)     IOUtils.writeObjectToFile(mergedPredictions[ENTITY_LEVEL],serializedEntityExtractionResults);
    if (extractRelations && serializedRelationExtractionResults != null)     IOUtils.writeObjectToFile(mergedPredictions[RELATION_LEVEL],serializedRelationExtractionResults);
    if (extractEvents && serializedEventExtractionResults != null)     IOUtils.writeObjectToFile(mergedPredictions[EVENT_LEVEL],serializedEventExtractionResults);
  }
  return retMsg;
}
