{
  String testText="two dozen\n" + "six hundred,\n" + "four hundred, and twelve.\n"+ "4 million six hundred fifty thousand, two hundred and eleven.\n"+ "6 hundred billion, five million six hundred fifty thousand, three hundred and seventy six\n"+ "5,786,345\n"+ "twenty-five.\n"+ "1.3 million.\n"+ "one thousand two hundred and twenty four\n"+ "10 thousand million.\n"+ "3.625\n"+ "zero\n"+ "-15\n"+ "one two three four.\n"+ "one hundred and fifty five\n"+ "a hundred\n";
  Iterator<? extends Number> expectedNumbers=Arrays.asList(24.0,600.0,412.0,4650211.0,600005650376.0,5786345,25.0,1300000.0,1224.0,10000000000.0,3.625,0,-15.0,1,2,3,4,155.0,100).iterator();
  Iterator<String> expectedTexts=Arrays.asList("two dozen","six hundred","four hundred, and twelve","4 million six hundred fifty thousand, two hundred and eleven","6 hundred billion, five million six hundred fifty thousand, three hundred and seventy six","5,786,345","twenty-five","1.3 million","one thousand two hundred and twenty four","10 thousand million","3.625","zero","-15","one","two","three","four","one hundred and fifty five","hundred").iterator();
  Annotation document=createDocument(testText);
  NumberNormalizer.findAndAnnotateNumericExpressions(document);
  for (  CoreMap num : document.get(CoreAnnotations.NumerizedTokensAnnotation.class)) {
    if (num.containsKey(CoreAnnotations.NumericCompositeTypeAnnotation.class)) {
      Number expectedNumber=expectedNumbers.next();
      String expectedType="NUMBER";
      String expectedText=expectedTexts.next();
      String text=document.get(CoreAnnotations.TextAnnotation.class).substring(num.get(CoreAnnotations.CharacterOffsetBeginAnnotation.class),num.get(CoreAnnotations.CharacterOffsetEndAnnotation.class));
      assertEquals(expectedText,text);
      assertEquals(expectedType,num.get(CoreAnnotations.NumericCompositeTypeAnnotation.class));
      assertEquals(expectedNumber.toString(),num.get(CoreAnnotations.NumericCompositeValueAnnotation.class).toString());
    }
  }
  assertFalse(expectedNumbers.hasNext());
}
