{
  if (scaleOpt == eScaling.DIAGONAL && d == null) {
    d=new double[newS.length];
    for (int i=0; i < d.length; i++) {
      d[i]=1.0;
    }
  }
  try {
    if (sy < 0) {
      throw new NegativeCurvature();
    }
    if (yy == 0.0) {
      throw new ZeroGradient();
    }
switch (scaleOpt) {
case SCALAR:
      gamma=sy / yy;
    break;
case DIAGONAL:
  double sDs;
gamma=sy / (step * (sy - sg));
sDs=0.0;
for (int i=0; i < d.length; i++) {
d[i]=gamma * d[i];
sDs+=newS[i] * d[i] * newS[i];
}
for (int i=0; i < d.length; i++) {
d[i]=(1 - d[i] * newS[i] * newS[i] / sDs) * d[i] + newY[i] * newY[i] / sy;
}
double minD=ArrayMath.min(d);
double maxD=ArrayMath.max(d);
if (minD <= 0 || Double.isInfinite(maxD) || maxD / minD > 1e12) {
System.err.println("QNInfo:update() : PROBLEM WITH DIAGONAL UPDATE");
double fill=yy / sy;
for (int i=0; i < d.length; i++) {
d[i]=fill;
}
}
}
if (mem > 0 && s.size() == mem || s.size() == maxMem) {
s.remove(0);
y.remove(0);
rho.remove(0);
}
s.add(newS);
y.add(newY);
rho.add(1 / sy);
}
 catch (NegativeCurvature nc) {
say(" Negative curvature detected, update skipped ");
}
catch (ZeroGradient zg) {
say(" Either convergence, or floating point errors combined with extremely linear region ");
}
return s.size();
}
