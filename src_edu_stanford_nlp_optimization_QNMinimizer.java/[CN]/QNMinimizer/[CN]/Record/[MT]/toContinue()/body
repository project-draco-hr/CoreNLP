{
  double relNorm=gNormLast / gNormInit;
  int size=values.size();
  double newestVal=values.get(size - 1);
  double previousVal=(size >= 10 ? values.get(size - 10) : values.get(0));
  double averageImprovement=(previousVal - newestVal) / (size >= 10 ? 10 : size);
  int evalsSize=evals.size();
  if (useMaxItr && its >= maxItr)   return eState.TERMINATE_MAXITR;
  if (useEvalImprovement) {
    int bestInd=-1;
    double bestScore=Double.NEGATIVE_INFINITY;
    for (int i=0; i < evalsSize; i++) {
      if (evals.get(i) >= bestScore) {
        bestScore=evals.get(i);
        bestInd=i;
      }
    }
    if (bestInd == evalsSize - 1) {
      if (xBest == null)       xBest=Arrays.copyOf(xLast,xLast.length);
 else       System.arraycopy(xLast,0,xBest,0,xLast.length);
    }
    if ((evalsSize - bestInd) >= terminateOnEvalImprovementNumOfEpoch)     return eState.TERMINATE_EVALIMPROVE;
  }
  if (useAveImprovement && (size > 5 && Math.abs(averageImprovement / newestVal) < TOL)) {
    return eState.TERMINATE_AVERAGEIMPROVE;
  }
  if (useRelativeNorm && relNorm <= relativeTOL) {
    return eState.TERMINATE_RELATIVENORM;
  }
  if (useNumericalZero) {
    if (gNormLast < EPS * Math.max(1.0,ArrayMath.norm_1(xLast))) {
      if (gNormLast < EPS * Math.max(1.0,ArrayMath.norm(xLast))) {
        System.err.println("Gradient is numerically zero, stopped on machine epsilon.");
        return eState.TERMINATE_GRADNORM;
      }
    }
  }
  say(" |" + nf.format(gNormLast) + "| {"+ nf.format(relNorm)+ "} "+ nf.format(Math.abs(averageImprovement / newestVal))+ " "+ (evalsSize > 0 ? evals.get(evalsSize - 1).toString() : "-")+ " ");
  return eState.CONTINUE;
}
