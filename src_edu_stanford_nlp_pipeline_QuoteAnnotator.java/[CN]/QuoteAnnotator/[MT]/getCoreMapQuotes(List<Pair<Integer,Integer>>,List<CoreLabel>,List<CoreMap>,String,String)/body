{
  List<CoreMap> cmQuotes=Generics.newArrayList();
  for (  Pair<Integer,Integer> p : quotes) {
    int begin=p.first();
    int end=p.second();
    List<CoreLabel> quoteTokens=new ArrayList<>();
    int tokenOffset=-1;
    int currTok=0;
    if (tokens != null) {
      while (currTok < tokens.size() && tokens.get(currTok).beginPosition() < begin) {
        currTok++;
      }
      int i=currTok;
      tokenOffset=i;
      while (i < tokens.size() && tokens.get(i).endPosition() <= end) {
        quoteTokens.add(tokens.get(i));
        i++;
      }
    }
    int beginSentence=-1;
    int endSentence=-1;
    if (sentences != null) {
      for (      CoreMap sentence : sentences) {
        int sentBegin=sentence.get(CoreAnnotations.CharacterOffsetBeginAnnotation.class);
        int sentEnd=sentence.get(CoreAnnotations.CharacterOffsetEndAnnotation.class);
        int sentIndex=sentence.get(CoreAnnotations.SentenceIndexAnnotation.class);
        if (sentBegin <= begin) {
          beginSentence=sentIndex;
        }
        if (sentEnd >= end && endSentence < 0) {
          endSentence=sentIndex;
        }
      }
    }
    Annotation quote=makeQuote(text.substring(begin,end),begin,end,quoteTokens,tokenOffset,beginSentence,endSentence,docID);
    cmQuotes.add(quote);
  }
  Comparator<CoreMap> quoteComparator=getQuoteComparator();
  Collections.sort(cmQuotes,quoteComparator);
  List<CoreMap> toRemove=new ArrayList<>();
  for (  CoreMap cmQuote : cmQuotes) {
    int start=cmQuote.get(CoreAnnotations.CharacterOffsetBeginAnnotation.class);
    int end=cmQuote.get(CoreAnnotations.CharacterOffsetEndAnnotation.class);
    List<CoreMap> embeddedQuotes=new ArrayList<>();
    for (    CoreMap cmQuoteComp : cmQuotes) {
      int startComp=cmQuoteComp.get(CoreAnnotations.CharacterOffsetBeginAnnotation.class);
      int endComp=cmQuoteComp.get(CoreAnnotations.CharacterOffsetEndAnnotation.class);
      if (start < startComp && end >= endComp) {
        embeddedQuotes.add(cmQuoteComp);
        toRemove.add(cmQuoteComp);
      }
    }
    cmQuote.set(CoreAnnotations.QuotationsAnnotation.class,embeddedQuotes);
  }
  for (  CoreMap r : toRemove) {
    cmQuotes.remove(r);
  }
  setQuoteIndices(cmQuotes);
  return cmQuotes;
}
