{
  Map<String,List<Pair<Integer,Integer>>> quotesMap=new HashMap<>();
  int start=-1;
  int end=-1;
  String quote=null;
  for (int i=0; i < text.length(); i++) {
    String c=text.substring(i,i + 1);
    if ((start < 0) && !matchesPrevQuote(c,prevQuote) && ((c.equals("'") && isSingleQuoteStart(text,i)) || (c.equals("\"")))) {
      start=i;
      quote=text.substring(start,start + 1);
    }
 else     if (start >= 0 && end < 0 && c.equals(quote) && ((c.equals("'") && isSingleQuoteEnd(text,i)) || (c.equals("\"") && isDoubleQuoteEnd(text,i)))) {
      end=i + 1;
    }
    if (start >= 0 && end > 0) {
      if (!quotesMap.containsKey(quote)) {
        quotesMap.put(quote,new ArrayList<>());
      }
      quotesMap.get(quote).add(new Pair(start,end));
      start=-1;
      end=-1;
      quote=null;
    }
  }
  if (start >= 0 && start < text.length() - 2) {
    if (!quotesMap.containsKey(quote)) {
      quotesMap.put(quote,new ArrayList<>());
    }
    quotesMap.get(quote).add(new Pair(start,text.length()));
  }
 else   if (start >= 0) {
    System.err.println("WARNING: unmatched single quote at end of file!");
  }
  List<Pair<Integer,Integer>> embedded=new ArrayList<>();
  List<Pair<Integer,Integer>> quotes=new ArrayList<>();
  for (  String qKind : quotesMap.keySet()) {
    for (    Pair<Integer,Integer> q : quotesMap.get(qKind)) {
      if (q.first() < q.second() - 2) {
        embedded=recursiveQuotes(text.substring(q.first() + 1,q.second() - 1),q.first() + 1 + offset,qKind);
      }
      quotes.add(new Pair(q.first() + offset,q.second() + offset));
    }
  }
  for (  Pair<Integer,Integer> e : embedded) {
    quotes.add(new Pair(e.first() + offset,e.second() + offset));
  }
  return quotes;
}
