{
  Map<String,List<Pair<Integer,Integer>>> quotesMap=new HashMap<>();
  int start=-1;
  int end=-1;
  String quote=null;
  for (int i=0; i < text.length(); i++) {
    String c=text.substring(i,i + 1);
    if (c.equals("`") && i < text.length() - 1 && text.charAt(i + 1) == '`') {
      c+=text.charAt(i + 1);
    }
 else     if (c.equals("'") && (quote != null && quote.equals("``")) && i < text.length() - 1 && text.charAt(i + 1) == '\'') {
      c+=text.charAt(i + 1);
    }
    if ((start < 0) && !matchesPrevQuote(c,prevQuote) && ((c.equals("'") && isSingleQuoteStart(text,i)) || (c.equals("\"") || DIRECTED_QUOTES.containsKey(c)))) {
      start=i;
      quote=c;
    }
 else     if ((start >= 0 && end < 0) && ((c.equals(quote) && ((c.equals("'") && isSingleQuoteEnd(text,i)) || (c.equals("\"") && isDoubleQuoteEnd(text,i)))) || (DIRECTED_QUOTES.containsKey(quote) && DIRECTED_QUOTES.get(quote).equals(c)))) {
      end=i + c.length();
    }
    if (start >= 0 && end > 0) {
      if (!quotesMap.containsKey(quote)) {
        quotesMap.put(quote,new ArrayList<>());
      }
      quotesMap.get(quote).add(new Pair(start,end));
      start=-1;
      end=-1;
      quote=null;
    }
    if (c.length() > 1) {
      i+=c.length() - 1;
    }
  }
  if (start >= 0) {
    String warning=text;
    if (text.length() > 150) {
      warning=text.substring(0,150) + "...";
    }
    System.err.println("WARNING: unmatched quote of type " + quote + " found at index "+ start+ " in text segment: "+ warning);
  }
  List<Pair<Integer,Integer>> quotes=new ArrayList<>();
  if (quotesMap.isEmpty() && start >= 0) {
    String toPass=text.substring(start + quote.length(),text.length() - (quote.length() - 1));
    List<Pair<Integer,Integer>> embedded=recursiveQuotes(toPass,offset,null);
    for (    Pair<Integer,Integer> e : embedded) {
      quotes.add(new Pair(e.first() + offset + start+ quote.length(),e.second() + offset + start+ 1));
    }
  }
 else {
    for (    String qKind : quotesMap.keySet()) {
      for (      Pair<Integer,Integer> q : quotesMap.get(qKind)) {
        if (q.first() < q.second() - qKind.length() * 2) {
          String toPass=text.substring(q.first() + qKind.length(),q.second() - qKind.length());
          List<Pair<Integer,Integer>> embedded=recursiveQuotes(toPass,q.first() + qKind.length() + offset,qKind);
          for (          Pair<Integer,Integer> e : embedded) {
            quotes.add(new Pair(e.first() + offset,e.second() + offset));
          }
        }
        quotes.add(new Pair(q.first() + offset,q.second() + offset));
      }
    }
  }
  return quotes;
}
