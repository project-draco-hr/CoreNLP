{
  if (t == null) {
    return null;
  }
  if (t.isLeaf()) {
    return t;
  }
  String cat=t.label().value();
  Tree parent;
  String parentStr;
  String grandParentStr;
  if (root == null || t.equals(root)) {
    parent=null;
    parentStr="";
  }
 else {
    parent=t.parent(root);
    parentStr=parent.label().value();
  }
  if (parent == null || parent.equals(root)) {
    grandParentStr="";
  }
 else {
    grandParentStr=parent.parent(root).label().value();
  }
  String baseParentStr=tlpParams.treebankLanguagePack().basicCategory(parentStr);
  String baseGrandParentStr=tlpParams.treebankLanguagePack().basicCategory(grandParentStr);
  if (t.isPreTerminal()) {
    Tree childResult=transformTreeHelper(t.children()[0],null);
    String word=childResult.value();
    if (!trainOptions.noTagSplit) {
      if (trainOptions.tagPA) {
        String test=cat + "^" + baseParentStr;
        if (!trainOptions.tagSelectiveSplit || trainOptions.splitters.contains(test)) {
          cat=test;
        }
      }
      if (trainOptions.markUnaryTags && parent.numChildren() == 1) {
        cat=cat + "^U";
      }
    }
    Label label=t.label().labelFactory().newLabel(t.label());
    label.setValue(cat);
    if (label instanceof HasCategory)     ((HasCategory)label).setCategory(cat);
    if (label instanceof HasWord)     ((HasWord)label).setWord(word);
    if (label instanceof HasTag)     ((HasTag)label).setTag(cat);
    t.setLabel(label);
    t.setChild(0,childResult);
    if (trainOptions.noTagSplit) {
      return t;
    }
 else {
      return tlpParams.transformTree(t,root);
    }
  }
  Tree[] kids=t.children();
  for (int childNum=0; childNum < kids.length; childNum++) {
    Tree child=kids[childNum];
    Tree childResult=transformTreeHelper(child,root);
    t.setChild(childNum,childResult);
  }
  Tree headChild=hf.determineHead(t);
  if (headChild == null || headChild.label() == null) {
    throw new RuntimeException("TreeAnnotator: null head found for tree [suggesting incomplete/wrong HeadFinder]:\n" + t);
  }
  Label headLabel=headChild.label();
  if (!(headLabel instanceof HasWord))   throw new RuntimeException("TreeAnnotator: Head label lacks a Word annotation!");
  if (!(headLabel instanceof HasTag))   throw new RuntimeException("TreeAnnotator: Head label lacks a Tag annotation!");
  String word=((HasWord)headLabel).word();
  String tag=((HasTag)headLabel).tag();
  String baseCat=tlpParams.treebankLanguagePack().basicCategory(cat);
  if (trainOptions.sisterAnnotate && !trainOptions.smoothing && baseParentStr.length() > 0) {
    List<String> leftSis=listBasicCategories(SisterAnnotationStats.leftSisterLabels(t,parent));
    List<String> rightSis=listBasicCategories(SisterAnnotationStats.rightSisterLabels(t,parent));
    List<String> leftAnn=new ArrayList<String>();
    List<String> rightAnn=new ArrayList<String>();
    for (    String s : leftSis) {
      leftAnn.add(baseCat + "=l=" + tlpParams.treebankLanguagePack().basicCategory(s));
    }
    for (    String s : rightSis) {
      rightAnn.add(baseCat + "=r=" + tlpParams.treebankLanguagePack().basicCategory(s));
    }
    for (Iterator<String> j=rightAnn.iterator(); j.hasNext(); ) {
    }
    for (    String annCat : trainOptions.sisterSplitters) {
      if (leftAnn.contains(annCat) || rightAnn.contains(annCat)) {
        cat=cat + annCat.replaceAll("^" + baseCat,"");
        break;
      }
    }
  }
  if (trainOptions.PA && !trainOptions.smoothing && baseParentStr.length() > 0) {
    String cat2=baseCat + "^" + baseParentStr;
    if (!trainOptions.selectiveSplit || trainOptions.splitters.contains(cat2)) {
      cat=cat + "^" + baseParentStr;
    }
  }
  if (trainOptions.gPA && !trainOptions.smoothing && grandParentStr.length() > 0) {
    if (trainOptions.selectiveSplit) {
      String cat2=baseCat + "^" + baseParentStr+ "~"+ baseGrandParentStr;
      if (cat.contains("^") && trainOptions.splitters.contains(cat2)) {
        cat=cat + "~" + baseGrandParentStr;
      }
    }
 else {
      cat=cat + "~" + baseGrandParentStr;
    }
  }
  if (trainOptions.markUnary > 0) {
    if (trainOptions.markUnary == 1 && kids.length == 1 && kids[0].depth() >= 2) {
      cat=cat + "-U";
    }
 else     if (trainOptions.markUnary == 2 && parent != null && parent.numChildren() == 1 && t.depth() >= 2) {
      cat=cat + "-u";
    }
  }
  if (trainOptions.rightRec && rightRec(t,baseCat)) {
    cat=cat + "-R";
  }
  if (trainOptions.leftRec && leftRec(t,baseCat)) {
    cat=cat + "-L";
  }
  if (trainOptions.splitPrePreT && t.isPrePreTerminal()) {
    cat=cat + "-PPT";
  }
  Label label=t.label().labelFactory().newLabel(t.label());
  label.setValue(cat);
  if (label instanceof HasCategory)   ((HasCategory)label).setCategory(cat);
  if (label instanceof HasWord)   ((HasWord)label).setWord(word);
  if (label instanceof HasTag)   ((HasTag)label).setTag(tag);
  t.setLabel(label);
  return tlpParams.transformTree(t,root);
}
