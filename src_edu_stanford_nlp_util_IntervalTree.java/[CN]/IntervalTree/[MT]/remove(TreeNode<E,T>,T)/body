{
  if (target == null)   return false;
  if (node.value == null)   return false;
  if (target.equals(node.value)) {
    int leftSize=(node.left != null) ? node.left.size : 0;
    int rightSize=(node.right != null) ? node.right.size : 0;
    if (leftSize == 0) {
      if (rightSize == 0) {
        node.clear();
      }
 else {
        node.value=node.right.value;
        node.size=node.right.size;
        node.maxEnd=node.right.maxEnd;
        node.left=node.right.left;
        node.right=node.right.right;
        if (node.left != null)         node.left.parent=node;
        if (node.right != null)         node.right.parent=node;
      }
    }
 else     if (rightSize == 0) {
      node.value=node.left.value;
      node.size=node.left.size;
      node.maxEnd=node.left.maxEnd;
      node.left=node.left.left;
      node.right=node.left.right;
      if (node.left != null)       node.left.parent=node;
      if (node.right != null)       node.right.parent=node;
    }
 else {
      node.value=node.left.value;
      node.size--;
      node.maxEnd=Interval.max(node.left.maxEnd,node.right.maxEnd);
      TreeNode<E,T> origRight=node.right;
      node.right=node.left.right;
      node.left=node.left.left;
      if (node.left != null)       node.left.parent=node;
      if (node.right != null)       node.right.parent=node;
      TreeNode<E,T> rightmost=getRightmostNode(node);
      rightmost.right=origRight;
      if (rightmost.right != null) {
        rightmost.right.parent=rightmost;
        adjustUpwards(rightmost.right,node);
      }
    }
    return true;
  }
 else {
    if (target.getInterval().compareTo(node.value.getInterval()) <= 0) {
      if (node.left == null) {
        return false;
      }
      boolean res=remove(node.left,target);
      if (res) {
        node.maxEnd=Interval.max(node.maxEnd,node.left.maxEnd);
        node.size--;
      }
      return res;
    }
 else {
      if (node.right == null) {
        return false;
      }
      boolean res=remove(node.right,target);
      if (res) {
        node.maxEnd=Interval.max(node.maxEnd,node.right.maxEnd);
        node.size--;
      }
      return res;
    }
  }
}
