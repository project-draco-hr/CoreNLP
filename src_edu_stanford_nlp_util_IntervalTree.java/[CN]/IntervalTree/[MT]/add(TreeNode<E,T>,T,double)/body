{
  if (target == null)   return false;
  TreeNode<E,T> n=node;
  int depth=0;
  int thresholdDepth=(node.size > 10) ? ((int)(-Math.log(node.size) / Math.log(alpha) + 1)) : 10;
  while (n != null) {
    if (n.value == null) {
      n.value=target;
      n.maxEnd=target.getInterval().getEnd();
      n.size=1;
      if (depth > thresholdDepth) {
        TreeNode<E,T> p=n.parent;
        while (p != null) {
          if (p.size > 10 && !isAlphaBalanced(p,alpha)) {
            TreeNode<E,T> newParent=balance(p);
            if (p == root)             root=newParent;
            if (debug)             this.check();
            break;
          }
          p=p.parent;
        }
      }
      return true;
    }
 else {
      depth++;
      n.maxEnd=Interval.max(n.maxEnd,target.getInterval().getEnd());
      n.size++;
      if (target.getInterval().compareTo(n.value.getInterval()) <= 0) {
        if (n.left == null) {
          n.left=new TreeNode<>();
          n.left.parent=n;
        }
        n=n.left;
      }
 else {
        if (n.right == null) {
          n.right=new TreeNode<>();
          n.right.parent=n;
        }
        n=n.right;
      }
    }
  }
  return false;
}
