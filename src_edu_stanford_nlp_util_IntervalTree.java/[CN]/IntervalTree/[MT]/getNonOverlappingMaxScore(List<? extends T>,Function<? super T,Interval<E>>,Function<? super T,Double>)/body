{
  if (items.size() > 1) {
    Map<E,PartialScoredList<T,E>> bestNonOverlapping=new TreeMap<E,PartialScoredList<T,E>>();
    for (    T item : items) {
      Interval<E> itemInterval=toIntervalFunc.apply(item);
      E mBegin=itemInterval.getBegin();
      E mEnd=itemInterval.getEnd();
      PartialScoredList<T,E> bestk=bestNonOverlapping.get(mEnd);
      double itemScore=scoreFunc.apply(item);
      if (bestk == null) {
        bestk=new PartialScoredList<T,E>();
        bestk.size=1;
        bestk.score=itemScore;
        bestk.object=item;
        bestNonOverlapping.put(mEnd,bestk);
      }
      for (      E j : bestNonOverlapping.keySet()) {
        if (j.compareTo(mBegin) > 0)         break;
        PartialScoredList<T,E> bestj=bestNonOverlapping.get(j);
        double withMatchScore=bestj.score + itemScore;
        boolean better=false;
        if (withMatchScore > bestk.score) {
          better=true;
        }
 else         if (withMatchScore == bestk.score) {
          if (bestj.size + 1 < bestk.size) {
            better=true;
          }
        }
        if (better) {
          bestk.size=bestj.size + 1;
          bestk.score=withMatchScore;
          bestk.object=item;
          bestk.lastMatchKey=j;
        }
      }
    }
    PartialScoredList<T,E> best=null;
    for (    PartialScoredList<T,E> v : bestNonOverlapping.values()) {
      if (best == null || v.score > best.score) {
        best=v;
      }
    }
    List<T> nonOverlapping=new ArrayList<T>(best.size);
    PartialScoredList<T,E> prev=best;
    while (prev != null) {
      if (prev.object != null) {
        nonOverlapping.add(prev.object);
      }
      if (prev.lastMatchKey != null) {
        prev=bestNonOverlapping.get(prev.lastMatchKey);
      }
 else {
        prev=null;
      }
    }
    Collections.reverse(nonOverlapping);
    return nonOverlapping;
  }
 else {
    List<T> nonOverlapping=new ArrayList<T>(items);
    return nonOverlapping;
  }
}
