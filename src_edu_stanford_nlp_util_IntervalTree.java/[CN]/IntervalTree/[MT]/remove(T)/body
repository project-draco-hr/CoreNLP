{
  if (target == null)   return false;
  if (value == null)   return false;
  if (target.equals(value)) {
    int leftSize=(left != null) ? left.size() : 0;
    int rightSize=(right != null) ? right.size() : 0;
    if (leftSize == 0) {
      if (rightSize == 0) {
        value=null;
        size=0;
      }
 else {
        value=right.value;
        size=right.size;
        maxEnd=right.maxEnd;
        left=right.left;
        right=right.right;
      }
    }
 else     if (rightSize == 0) {
      value=left.value;
      size=left.size;
      maxEnd=left.maxEnd;
      left=left.left;
      right=left.right;
    }
 else {
      value=left.value;
      size--;
      maxEnd=Interval.max(left.maxEnd,right.maxEnd);
      IntervalTree<E,T> origRight=right;
      right=left.right;
      left=left.left;
      IntervalTree<E,T> rightmost=getRightmostNode();
      rightmost.right=origRight;
    }
    return true;
  }
 else {
    if (target.getInterval().getBegin().compareTo(value.getInterval().getBegin()) <= 0) {
      if (left == null) {
        return false;
      }
      boolean res=left.remove(target);
      if (res) {
        this.maxEnd=Interval.max(maxEnd,left.maxEnd);
        this.size--;
      }
      return res;
    }
 else {
      if (right == null) {
        return false;
      }
      boolean res=right.remove(target);
      if (res) {
        this.maxEnd=Interval.max(maxEnd,right.maxEnd);
        this.size--;
      }
      return res;
    }
  }
}
