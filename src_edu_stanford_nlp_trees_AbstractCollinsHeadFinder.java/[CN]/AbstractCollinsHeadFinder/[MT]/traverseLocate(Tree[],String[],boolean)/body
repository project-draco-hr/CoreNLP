{
  int headIdx;
switch (how[0]) {
case "left":
    headIdx=findLeftHead(daughterTrees,how);
  break;
case "leftdis":
headIdx=findLeftDisHead(daughterTrees,how);
break;
case "leftexcept":
headIdx=findLeftExceptHead(daughterTrees,how);
break;
case "right":
headIdx=findRightHead(daughterTrees,how);
break;
case "rightdis":
headIdx=findRightDisHead(daughterTrees,how);
break;
case "rightexcept":
headIdx=findRightExceptHead(daughterTrees,how);
break;
default :
throw new IllegalStateException("ERROR: invalid direction type " + how[0] + " to nonTerminalInfo map in AbstractCollinsHeadFinder.");
}
if (headIdx < 0) {
if (lastResort) {
String[] rule;
if (how[0].startsWith("left")) {
headIdx=0;
rule=defaultLeftRule;
}
 else {
headIdx=daughterTrees.length - 1;
rule=defaultRightRule;
}
Tree child=traverseLocate(daughterTrees,rule,false);
if (child != null) {
return child;
}
 else {
return daughterTrees[headIdx];
}
}
 else {
return null;
}
}
headIdx=postOperationFix(headIdx,daughterTrees);
return daughterTrees[headIdx];
}
