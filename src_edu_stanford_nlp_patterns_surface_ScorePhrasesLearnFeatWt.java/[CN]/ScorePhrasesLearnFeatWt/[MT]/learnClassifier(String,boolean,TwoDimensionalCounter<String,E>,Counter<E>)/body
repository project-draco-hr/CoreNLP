{
  phraseScoresRaw.clear();
  learnedScores.clear();
  if (Data.domainNGramsFile != null)   Data.loadDomainNGrams();
  RVFDataset<String,ScorePhraseMeasures> dataset=new RVFDataset<String,ScorePhraseMeasures>();
  boolean computeRawFreq=false;
  if (Data.rawFreq == null) {
    Data.rawFreq=new ClassicCounter<String>();
    computeRawFreq=true;
  }
  ConstantsAndVariables.DataSentsIterator sentsIter=new ConstantsAndVariables.DataSentsIterator(constVars.batchProcessSents);
  while (sentsIter.hasNext()) {
    Pair<Map<String,List<CoreLabel>>,File> sentsf=sentsIter.next();
    Redwood.log(Redwood.DBG,"Sampling sentences from " + sentsf.second());
    if (computeRawFreq)     Data.computeRawFreqIfNull(sentsf.first(),PatternFactory.numWordsCompound);
    dataset.addAll(choosedatums(label,forLearningPatterns,sentsf.first(),constVars.getAnswerClass().get(label),label,constVars.getOtherSemanticClassesWords(),constVars.getIgnoreWordswithClassesDuringSelection().get(label),constVars.perSelectRand,constVars.perSelectNeg,wordsPatExtracted,allSelectedPatterns));
  }
  edu.stanford.nlp.classify.Classifier classifier;
  if (scoreClassifierType.equals(ClassifierType.LR)) {
    LogisticClassifierFactory<String,ScorePhraseMeasures> logfactory=new LogisticClassifierFactory<String,ScorePhraseMeasures>();
    LogPrior lprior=new LogPrior();
    lprior.setSigma(constVars.LRSigma);
    classifier=logfactory.trainClassifier(dataset,lprior,false);
    LogisticClassifier logcl=((LogisticClassifier)classifier);
    String l=(String)logcl.getLabelForInternalPositiveClass();
    Counter<String> weights=logcl.weightsAsGenericCounter();
    if (l.equals(Boolean.FALSE.toString())) {
      Counters.multiplyInPlace(weights,-1);
    }
    List<Pair<String,Double>> wtd=Counters.toDescendingMagnitudeSortedListWithCounts(weights);
    Redwood.log(ConstantsAndVariables.minimaldebug,"The weights are " + StringUtils.join(wtd.subList(0,Math.min(wtd.size(),200)),"\n"));
  }
 else   throw new RuntimeException("cannot identify classifier " + scoreClassifierType);
  BufferedWriter w=new BufferedWriter(new FileWriter("tempscorestrainer.txt"));
  System.out.println("size of learned scores is " + phraseScoresRaw.size());
  for (  String s : phraseScoresRaw.firstKeySet()) {
    w.write(s + "\t" + phraseScoresRaw.getCounter(s)+ "\n");
  }
  w.close();
  return classifier;
}
