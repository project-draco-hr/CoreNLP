{
  List<SemanticGraphEdge> govEdges=sg.outgoingEdgeList(oldNode);
  List<SemanticGraphEdge> depEdges=sg.incomingEdgeList(oldNode);
  boolean oldNodeRemoved=sg.removeVertex(oldNode);
  if (oldNodeRemoved) {
    if (!sg.containsVertex(newNode))     sg.addVertex(newNode);
    for (    SemanticGraphEdge govEdge : govEdges) {
      sg.removeEdge(govEdge);
      sg.addEdge(newNode,govEdge.getDependent(),govEdge.getRelation(),govEdge.getWeight());
    }
    for (    SemanticGraphEdge depEdge : depEdges) {
      sg.removeEdge(depEdge);
      sg.addEdge(depEdge.getGovernor(),newNode,depEdge.getRelation(),depEdge.getWeight());
    }
  }
 else {
    System.err.println("SemanticGraphUtils.replaceNode: previous node does not exist");
  }
}
