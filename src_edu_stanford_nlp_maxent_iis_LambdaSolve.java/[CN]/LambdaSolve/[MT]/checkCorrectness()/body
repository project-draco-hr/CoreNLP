{
  boolean flag=true;
  for (int f=0; f < lambda.length; f++) {
    if (Math.abs(lambda[f]) > 100) {
      log.info("lambda " + f + " too big "+ lambda[f]);
      log.info("empirical " + ftildeArr[f] + " expected "+ fExpected(p.functions.get(f)));
    }
  }
  log.info(" x size" + p.data.xSize + " "+ " ysize "+ p.data.ySize);
  double summAllExp=0;
  for (int i=0; i < ftildeArr.length; i++) {
    double exp=Math.abs(ftildeArr[i] - fExpected(p.functions.get(i)));
    summAllExp+=ftildeArr[i];
    if (exp > 0.001) {
      flag=false;
      log.info("Constraint not satisfied  " + i + " "+ fExpected(p.functions.get(i))+ " "+ ftildeArr[i]+ " lambda "+ lambda[i]);
    }
  }
  log.info(" The sum of all empirical expectations is " + summAllExp);
  for (int x=0; x < p.data.xSize; x++) {
    double s=0.0;
    for (int y=0; y < probConds[x].length; y++) {
      s=s + probConds[x][y];
    }
    if (Math.abs(s - 1) > 0.0001) {
      for (int y=0; y < probConds[x].length; y++) {
        log.info("probabilities do not sum to one " + x + " "+ (float)s);
      }
    }
  }
  return flag;
}
