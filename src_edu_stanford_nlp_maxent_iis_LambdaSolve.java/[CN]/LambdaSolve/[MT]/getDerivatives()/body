{
  double[] drvs=new double[lambda.length];
  Experiments exp=p.data;
  for (int fNo=0; fNo < drvs.length; fNo++) {
    Feature f=p.functions.get(fNo);
    double sum=ftildeArr[fNo] * exp.getNumber();
    drvs[fNo]=-sum;
    for (int index=0, length=f.len(); index < length; index++) {
      int x=f.getX(index);
      int y=f.getY(index);
      if (ASSUME_BINARY) {
        drvs[fNo]+=probConds[x][y] * exp.ptildeX(x) * exp.getNumber();
      }
 else {
        double val=f.getVal(index);
        drvs[fNo]+=probConds[x][y] * val * exp.ptildeX(x)* exp.getNumber();
      }
    }
  }
  return drvs;
}
