{
  DefaultListModel model=new DefaultListModel();
  list=new TooltipJList(model);
  list.setCellRenderer(new MatchCellRenderer());
  list.setTransferHandler(new TreeTransferHandler());
  matchedParts=new HashMap<TreeFromFile,List<Tree>>();
  list.addListSelectionListener(this);
  MouseInputAdapter mouseListener=new MouseInputAdapter(){
    private boolean dragNDrop=false;
    @Override public void mousePressed(    MouseEvent e){
      if (MatchesPanel.getInstance().isEmpty())       return;
      if (firstMouseEvent == null) {
        firstMouseEvent=e;
      }
      e.consume();
      TreeFromFile selectedValue=(TreeFromFile)list.getSelectedValue();
      if (selectedValue == null)       return;
      JTextField label=selectedValue.getLabel();
      if (((e.getModifiersEx()) & InputEvent.SHIFT_DOWN_MASK) == InputEvent.SHIFT_DOWN_MASK) {
        addHighlight(label,firstMouseEvent,e);
      }
 else       if (!HighlightUtils.isInHighlight(e,label,label.getHighlighter())) {
        label.getHighlighter().removeAllHighlights();
        firstMouseEvent=e;
        dragNDrop=false;
        list.repaint();
      }
 else {
        dragNDrop=true;
      }
    }
    private boolean addHighlight(    JTextField label,    MouseEvent mouseEvent1,    MouseEvent mouseEvent2){
      boolean highlightSuccessful=HighlightUtils.addHighlight(label,mouseEvent1,mouseEvent2);
      FontMetrics fm=label.getFontMetrics(label.getFont());
      int firstXpos=mouseEvent1.getX();
      int lastXpos=mouseEvent2.getX();
      int firstOffset=getCharOffset(fm,label.getText(),firstXpos);
      int lastOffset=getCharOffset(fm,label.getText(),lastXpos);
      if (lastOffset != firstOffset) {
        if (firstOffset > lastOffset) {
          int tmp=firstOffset;
          firstOffset=lastOffset;
          lastOffset=tmp;
        }
        Rectangle curVisible=list.getVisibleRect();
        if (lastXpos > curVisible.x + curVisible.width) {
          list.scrollRectToVisible(new Rectangle(new Point(lastXpos - curVisible.width,curVisible.y),curVisible.getSize()));
        }
 else         if (lastXpos < curVisible.x) {
          list.scrollRectToVisible(new Rectangle(new Point(lastXpos,curVisible.y),curVisible.getSize()));
        }
        list.repaint();
        return highlightSuccessful;
      }
 else       return false;
    }
    @Override public void mouseDragged(    MouseEvent e){
      if (MatchesPanel.getInstance().isEmpty())       return;
      if (firstMouseEvent != null) {
        e.consume();
        JTextField label=((TreeFromFile)list.getSelectedValue()).getLabel();
        if (dragNDrop) {
          if (label == null)           return;
          if (Point2D.distanceSq(e.getX(),e.getY(),firstMouseEvent.getX(),firstMouseEvent.getY()) > 25) {
            list.getTransferHandler().exportAsDrag((JComponent)e.getSource(),firstMouseEvent,TransferHandler.COPY);
          }
        }
 else {
          addHighlight(label,firstMouseEvent,e);
        }
      }
    }
    private int getCharOffset(    FontMetrics fm,    String characters,    int xPos){
      StringBuilder s=new StringBuilder();
      char[] sArray=characters.toCharArray();
      int i;
      for (i=0; i < characters.length() && fm.stringWidth(s.toString()) < xPos; i++) {
        s.append(sArray[i]);
      }
      return i;
    }
  }
;
  list.addMouseMotionListener(mouseListener);
  list.addMouseListener(mouseListener);
  listeners=new ArrayList<MatchesPanelListener>();
  this.setLayout(new BorderLayout());
  this.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(),"Matches: "));
  JScrollPane scroller=new JScrollPane(list);
  this.add(scroller,BorderLayout.CENTER);
}
