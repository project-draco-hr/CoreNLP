{
  if (args[i].equalsIgnoreCase("-nodeCleanup")) {
    nodeCleanup=Integer.parseInt(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-markKonjParent")) {
    markKonjParent=Boolean.parseBoolean(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-markContainsV")) {
    markContainsV=Boolean.parseBoolean(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-markZu")) {
    markZu=Boolean.parseBoolean(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-markColons")) {
    markColons=Boolean.parseBoolean(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-leftPhrasal")) {
    leftPhrasal=Boolean.parseBoolean(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-markHDParent")) {
    markHDParent=Boolean.parseBoolean(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-leaveGF")) {
    leaveGF=Boolean.parseBoolean(args[i + 1]);
    ((TueBaDZLanguagePack)treebankLanguagePack()).setLeaveGF(leaveGF);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-evalGF")) {
    this.setEvalGF(Boolean.parseBoolean(args[i + 1]));
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-limitedGF")) {
    ((TueBaDZLanguagePack)treebankLanguagePack()).setLimitedGF(Boolean.parseBoolean(args[i + 1]));
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-gfCharacter")) {
    String gfChar=args[i + 1];
    if (gfChar.length() > 1) {
      System.out.println("Warning! gfCharacter argument ignored; must specify a character, not a String");
    }
    treebankLanguagePack().setGfCharacter(gfChar.charAt(0));
    i+=2;
  }
  return i;
}
