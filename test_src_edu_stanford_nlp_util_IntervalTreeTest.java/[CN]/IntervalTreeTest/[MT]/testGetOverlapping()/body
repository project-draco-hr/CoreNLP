{
  Interval<Integer> a=Interval.toInterval(249210699,249212659);
  Interval<Integer> before=Interval.toInterval(249210000,249210600);
  Interval<Integer> included=Interval.toInterval(249210800,249212000);
  Interval<Integer> after=Interval.toInterval(249213000,249214000);
  IntervalTree<Integer,Interval<Integer>> tree=new IntervalTree<>();
  tree.add(a);
  List<Interval<Integer>> overlapping1=tree.getOverlapping(before);
  assertTrue(overlapping1.isEmpty());
  List<Interval<Integer>> overlapping2=tree.getOverlapping(included);
  assertTrue(overlapping2.size() == 1);
  List<Interval<Integer>> overlapping3=tree.getOverlapping(after);
  assertTrue(overlapping3.isEmpty());
  tree.remove(a);
  assertTrue(tree.size() == 0);
  int n=20000;
  for (int i=0; i < n; i++) {
    int x=i;
    int y=i + 1;
    Interval<Integer> interval=Interval.toInterval(x,y);
    tree.add(interval);
  }
  tree.add(a);
  overlapping1=tree.getOverlapping(before);
  assertTrue(overlapping1.isEmpty());
  overlapping2=tree.getOverlapping(included);
  assertTrue(overlapping2.size() == 1);
  overlapping3=tree.getOverlapping(after);
  assertTrue(overlapping3.isEmpty());
  tree.check();
  tree.balance();
  int height=tree.height();
  assertTrue(height < 20);
  tree.check();
  overlapping1=tree.getOverlapping(before);
  assertTrue(overlapping1.isEmpty());
  overlapping2=tree.getOverlapping(included);
  assertTrue(overlapping2.size() == 1);
  overlapping3=tree.getOverlapping(after);
  assertTrue(overlapping3.isEmpty());
  tree.clear();
  assertTrue(tree.size() == 0);
  Random rand=new Random();
  List<Interval<Integer>> list=new ArrayList<Interval<Integer>>(n + 1);
  for (int i=0; i < n; i++) {
    int x=rand.nextInt();
    int y=rand.nextInt();
    Interval<Integer> interval=Interval.toValidInterval(x,y);
    tree.add(interval);
    list.add(interval);
  }
  tree.add(a);
  list.add(a);
  overlapping1=tree.getOverlapping(before);
  checkOverlapping(list,overlapping1,before);
  overlapping2=tree.getOverlapping(included);
  assertTrue(overlapping2.size() > overlapping1.size());
  checkOverlapping(list,overlapping2,included);
  overlapping3=tree.getOverlapping(after);
  assertTrue(overlapping2.size() > overlapping3.size());
  checkOverlapping(list,overlapping3,after);
}
