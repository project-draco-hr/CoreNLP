{
  Map<String,CollectionValuedMap<SurfacePattern,Triple<String,Integer,Integer>>> matchedTokensByPatAllLabels=new HashMap<String,CollectionValuedMap<SurfacePattern,Triple<String,Integer,Integer>>>();
  Map<String,Set<String>> ignoreWordsAll=new HashMap<String,Set<String>>();
  for (  String label : constVars.getLabelDictionary().keySet()) {
    matchedTokensByPatAllLabels.put(label,new CollectionValuedMap<SurfacePattern,Triple<String,Integer,Integer>>());
    if (this.useOtherLabelsWordsasNegative) {
      Set<String> w=new HashSet<String>();
      for (      Entry<String,Set<String>> en : constVars.getLabelDictionary().entrySet()) {
        if (en.getKey().equals(label))         continue;
        w.addAll(en.getValue());
      }
      ignoreWordsAll.put(label,w);
    }
  }
  Redwood.log(Redwood.FORCE,"Iterating " + numIterationsForPatterns + " times.");
  Map<String,BufferedWriter> wordsOutput=new HashMap<String,BufferedWriter>();
  Map<String,BufferedWriter> patternsOutput=new HashMap<String,BufferedWriter>();
  for (  String label : constVars.getLabelDictionary().keySet()) {
    IOUtils.ensureDir(new File(outDir + "/" + identifier+ "/"+ label));
    String wordsOutputFileLabel=wordsOutputFile + "_" + label;
    if (wordsOutputFile == null)     wordsOutputFileLabel=outDir + "/" + identifier+ "/"+ label+ "/learnedwords.txt";
    wordsOutput.put(label,new BufferedWriter(new FileWriter(wordsOutputFileLabel)));
    System.out.println("Saving the learned words for label " + label + " in "+ wordsOutputFileLabel);
    String patternsOutputFileLabel=patternsOutFile + "_" + label;
    if (patternsOutFile == null)     patternsOutputFileLabel=outDir + "/" + identifier+ "/"+ label+ "/learnedpatterns.txt";
    patternsOutput.put(label,new BufferedWriter(new FileWriter(patternsOutputFileLabel)));
    System.out.println("Saving the learned patterns for label " + label + " in "+ patternsOutputFileLabel);
  }
  for (int i=0; i < numIterationsForPatterns; i++) {
    Redwood.log(Redwood.FORCE,"\n\n################################ Iteration " + (i + 1) + " ##############################");
    boolean keepRunning=false;
    Map<String,Counter<String>> learnedWordsThisIter=new HashMap<String,Counter<String>>();
    for (    String label : constVars.getLabelDictionary().keySet()) {
      Redwood.log(Redwood.FORCE,"\n###Learning for label " + label + " ######");
      String sentout=sentsOutFile == null ? null : sentsOutFile + "_" + label;
      Pair<Counter<SurfacePattern>,Counter<String>> learnedPatWords4label=iterateExtractApply4Label(label,p0 != null ? p0.get(label) : null,p0Set != null ? p0Set.get(label) : null,wordsOutput.get(label),sentout,patternsOutput.get(label),ignorePatterns != null ? ignorePatterns.get(label) : null,1,ignoreWordsAll.get(label),matchedTokensByPatAllLabels.get(label));
      learnedWordsThisIter.put(label,learnedPatWords4label.second());
      if (learnedPatWords4label.first().size() > 0) {
        keepRunning=true;
      }
    }
    if (this.useOtherLabelsWordsasNegative) {
      for (      String label : constVars.getLabelDictionary().keySet()) {
        for (        Entry<String,Counter<String>> en : learnedWordsThisIter.entrySet()) {
          if (en.getKey().equals(label))           continue;
          ignoreWordsAll.get(label).addAll(en.getValue().keySet());
        }
      }
    }
    if (!keepRunning && !this.tuneThresholdKeepRunning) {
      Redwood.log(Redwood.FORCE,"No patterns learned for all labels. Ending iterations.");
      break;
    }
  }
  if (outDir != null && !outDir.isEmpty()) {
    Redwood.log(Redwood.FORCE,"Writing justification files");
    Set<String> allMatchedSents=new HashSet<String>();
    for (    String label : constVars.getLabelDictionary().keySet()) {
      CollectionValuedMap<SurfacePattern,Triple<String,Integer,Integer>> tokensMatchedPat=matchedTokensByPatAllLabels.get(label);
      IOUtils.ensureDir(new File(outDir + "/" + identifier+ "/"+ label));
      String matchedtokensfilename=this.outDir + "/" + identifier+ "/"+ label+ "/tokensmatchedpatterns"+ ".json";
      JsonObjectBuilder pats=Json.createObjectBuilder();
      for (      Entry<SurfacePattern,Collection<Triple<String,Integer,Integer>>> en : tokensMatchedPat.entrySet()) {
        CollectionValuedMap<String,Pair<Integer,Integer>> matchedStrs=new CollectionValuedMap<String,Pair<Integer,Integer>>();
        for (        Triple<String,Integer,Integer> en2 : en.getValue()) {
          allMatchedSents.add(en2.first());
          matchedStrs.add(en2.first(),new Pair<Integer,Integer>(en2.second(),en2.third()));
        }
        JsonObjectBuilder senttokens=Json.createObjectBuilder();
        for (        Entry<String,Collection<Pair<Integer,Integer>>> sen : matchedStrs.entrySet()) {
          JsonArrayBuilder obj=Json.createArrayBuilder();
          for (          Pair<Integer,Integer> sen2 : sen.getValue()) {
            JsonArrayBuilder startend=Json.createArrayBuilder();
            startend.add(sen2.first());
            startend.add(sen2.second());
            obj.add(startend);
          }
          senttokens.add(sen.getKey(),obj);
        }
        pats.add(en.getKey().toStringSimple(),senttokens);
      }
      IOUtils.writeStringToFile(pats.build().toString(),matchedtokensfilename,"utf8");
      JsonObjectBuilder senttokens=Json.createObjectBuilder();
      for (      String sentId : allMatchedSents) {
        JsonArrayBuilder sent=Json.createArrayBuilder();
        for (        CoreLabel l : Data.sents.get(sentId)) {
          sent.add(l.word());
        }
        senttokens.add(sentId,sent);
      }
      String sentfilename=this.outDir + "/" + identifier+ "/sentences"+ ".json";
      IOUtils.writeStringToFile(senttokens.build().toString(),sentfilename,"utf8");
    }
  }
  System.out.println("\n\nAll patterns learned:");
  for (  Entry<String,Counter<SurfacePattern>> en : this.learnedPatterns.entrySet()) {
    System.out.println(en.getKey() + ":\t\t" + StringUtils.join(en.getValue().keySet(),"\n")+ "\n\n");
  }
  System.out.println("\n\nAll words learned:");
  for (  Entry<String,Counter<String>> en : this.learnedWords.entrySet()) {
    System.out.println(en.getKey() + ":\t\t" + en.getValue().keySet()+ "\n\n");
  }
  if (markedOutputTextFile != null) {
    this.writeLabeledData(markedOutputTextFile);
  }
  for (  String label : constVars.getLabelDictionary().keySet()) {
    wordsOutput.get(label).close();
    patternsOutput.get(label).close();
  }
}
