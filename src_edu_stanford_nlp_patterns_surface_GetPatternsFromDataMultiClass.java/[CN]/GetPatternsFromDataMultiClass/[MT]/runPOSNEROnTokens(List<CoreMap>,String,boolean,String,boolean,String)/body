{
  Annotation doc=new Annotation(sentsCM);
  Properties props=new Properties();
  List<String> anns=new ArrayList<String>();
  anns.add("pos");
  anns.add("lemma");
  if (useTargetParserParentRestriction) {
    anns.add("parse");
  }
  if (useTargetNERRestriction) {
    anns.add("ner");
  }
  props.setProperty("annotators",StringUtils.join(anns,","));
  props.setProperty("parse.maxlen","80");
  props.setProperty("nthreads",numThreads);
  props.setProperty("threads",numThreads);
  if (posModelPath != null) {
    props.setProperty("pos.model",posModelPath);
  }
  StanfordCoreNLP pipeline=new StanfordCoreNLP(props,false);
  Redwood.log(Redwood.DBG,"Annotating text with NER and POS");
  pipeline.annotate(doc);
  Redwood.log(Redwood.DBG,"Done annotating text with NER and POS");
  Map<String,List<CoreLabel>> sents=new HashMap<String,List<CoreLabel>>();
  for (  CoreMap s : doc.get(CoreAnnotations.SentencesAnnotation.class)) {
    if (useTargetParserParentRestriction)     inferParentParseTag(s.get(TreeAnnotation.class));
    sents.put(prefix + s.get(CoreAnnotations.DocIDAnnotation.class),s.get(CoreAnnotations.TokensAnnotation.class));
  }
  return sents;
}
