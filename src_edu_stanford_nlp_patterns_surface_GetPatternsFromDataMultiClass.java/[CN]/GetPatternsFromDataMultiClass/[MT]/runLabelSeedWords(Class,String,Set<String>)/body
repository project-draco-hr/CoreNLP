{
  List<String> keyset=new ArrayList<String>(Data.sents.keySet());
  int num=0;
  if (constVars.numThreads == 1)   num=keyset.size();
 else   num=keyset.size() / (constVars.numThreads - 1);
  ExecutorService executor=Executors.newFixedThreadPool(constVars.numThreads);
  Redwood.log(Redwood.DBG,"keyset size is " + keyset.size());
  List<Future<Map<String,List<CoreLabel>>>> list=new ArrayList<Future<Map<String,List<CoreLabel>>>>();
  for (int i=0; i < constVars.numThreads; i++) {
    List<String> keys=keyset.subList(i * num,Math.min(keyset.size(),(i + 1) * num));
    Redwood.log(Redwood.DBG,"assigning from " + i * num + " till " + Math.min(keyset.size(),(i + 1) * num));
    Callable<Map<String,List<CoreLabel>>> task=new LabelWithSeedWords(seedWords,Data.sents,keys,answerclass,label);
    Future<Map<String,List<CoreLabel>>> submit=executor.submit(task);
    list.add(submit);
  }
  for (  Future<Map<String,List<CoreLabel>>> future : list) {
    Data.sents.putAll(future.get());
  }
  executor.shutdown();
}
