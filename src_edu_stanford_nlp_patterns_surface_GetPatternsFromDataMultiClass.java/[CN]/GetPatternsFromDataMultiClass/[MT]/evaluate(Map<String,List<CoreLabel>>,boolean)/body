{
  Counter<String> entityTP=new ClassicCounter<String>();
  Counter<String> entityFP=new ClassicCounter<String>();
  Counter<String> entityFN=new ClassicCounter<String>();
  Counter<String> wordTP=new ClassicCounter<String>();
  Counter<String> wordTN=new ClassicCounter<String>();
  Counter<String> wordFP=new ClassicCounter<String>();
  Counter<String> wordFN=new ClassicCounter<String>();
  for (  Entry<String,List<CoreLabel>> docEn : testSentences.entrySet()) {
    List<CoreLabel> doc=docEn.getValue();
    for (    CoreLabel l : doc) {
      for (      Entry<String,Class<? extends Key<String>>> anscl : constVars.answerClass.entrySet()) {
        l.set(CoreAnnotations.AnswerAnnotation.class,constVars.backgroundSymbol);
        if (l.get(anscl.getValue()).equals(anscl.getKey())) {
          l.set(CoreAnnotations.AnswerAnnotation.class,anscl.getKey());
        }
      }
    }
    countResults(doc,entityTP,entityFP,entityFN,constVars.backgroundSymbol,wordTP,wordTN,wordFP,wordFN,CoreAnnotations.AnswerAnnotation.class,evalPerEntity);
  }
  System.out.println("False Positives: " + Counters.toSortedString(wordFP,wordFP.size(),"%s:%.2f",";"));
  System.out.println("False Negatives: " + Counters.toSortedString(wordFN,wordFN.size(),"%s:%.2f",";"));
  System.out.println("\n\n True Positives: " + entityTP);
  System.out.println("\n\n False Positives: " + entityFP);
  System.out.println("\n\n False Negatives: " + entityFN);
  Counter<String> precision=Counters.division(entityTP,Counters.add(entityTP,entityFP));
  Counter<String> recall=Counters.division(entityTP,Counters.add(entityTP,entityFN));
  System.out.println("\n Precision: " + precision);
  System.out.println("\n Recall: " + recall);
  System.out.println("\n F1 score:  " + FScore(precision,recall,1));
  System.out.println("Total: " + Counters.add(entityFP,entityTP));
}
