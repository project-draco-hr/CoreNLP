{
  Map<String,List<CoreLabel>> newsent=new HashMap<String,List<CoreLabel>>();
  for (  String k : keyset) {
    List<CoreLabel> sent=sents.get(k);
    String[] tokens=new String[sent.size()];
    String[] tokenslemma=new String[sent.size()];
    int num=0;
    for (    CoreLabel l : sent) {
      tokens[num]=l.word();
      if (l.lemma() == null)       throw new RuntimeException("how come lemma is null");
      tokenslemma[num]=l.lemma();
      num++;
    }
    boolean[] labels=new boolean[tokens.length];
    CollectionValuedMap<Integer,String> matchedPhrases=new CollectionValuedMap<Integer,String>();
    for (    String[] s : seedwordsTokens) {
      List<Integer> indices=getSubListIndex(s,tokens,tokenslemma,dictWords,seenFuzzyMatches,minLen4FuzzyForPattern);
      if (indices != null && !indices.isEmpty())       for (      int index : indices)       for (int i=0; i < s.length; i++) {
        matchedPhrases.add(index + i,StringUtils.join(s," "));
        labels[index + i]=true;
      }
    }
    int i=-1;
    for (    CoreLabel l : sent) {
      i++;
      if (labels[i]) {
        l.set(labelClass,label);
        Redwood.log(ConstantsAndVariables.extremedebug,"labeling " + l.word() + " or its lemma "+ l.lemma()+ " as "+ label+ " because of the dict phrases "+ (Set<String>)matchedPhrases.get(i));
      }
 else       l.set(labelClass,backgroundSymbol);
      if (!l.containsKey(PatternsAnnotations.MatchedPhrases.class))       l.set(PatternsAnnotations.MatchedPhrases.class,new HashSet<String>());
      l.get(PatternsAnnotations.MatchedPhrases.class).addAll(matchedPhrases.get(i));
    }
    newsent.put(k,sent);
  }
  return newsent;
}
