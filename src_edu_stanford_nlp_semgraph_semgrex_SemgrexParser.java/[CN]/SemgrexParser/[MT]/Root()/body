{
  SemgrexPattern node;
  Token reverse=null;
  List<SemgrexPattern> children=new ArrayList<SemgrexPattern>();
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case ALIGNRELN:
{
      reverse=jj_consume_token(ALIGNRELN);
      node=SubNode(GraphRelation.ALIGNED_ROOT);
      jj_consume_token(11);
      break;
    }
case 13:
case 17:
case 19:
case 23:
{
    node=SubNode(GraphRelation.ROOT);
    children.add(node);
    label_1:     while (true) {
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case 12:
{
          ;
          break;
        }
default :
      jj_la1[0]=jj_gen;
    break label_1;
}
jj_consume_token(12);
node=SubNode(GraphRelation.ITERATOR);
children.add(node);
}
jj_consume_token(11);
break;
}
default :
jj_la1[1]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
if (children.size() <= 1) {
if ("" != null) return node;
}
{
if ("" != null) return new CoordinationPattern(true,children,true);
}
throw new Error("Missing return statement in function");
}
