{
  assert(getDimensions().length > 1);
  List<Integer> resultDomain=new ArrayList<>();
  for (  int n : neighborIndices) {
    if (n != variable) {
      resultDomain.add(n);
    }
  }
  int[] resultNeighborIndices=new int[resultDomain.size()];
  int[] resultDimensions=new int[resultNeighborIndices.length];
  for (int i=0; i < resultDomain.size(); i++) {
    int var=resultDomain.get(i);
    resultNeighborIndices[i]=var;
    resultDimensions[i]=getVariableSize(var);
  }
  TableFactor result=new TableFactor(resultNeighborIndices,resultDimensions);
  int[] mapping=new int[neighborIndices.length];
  for (int i=0; i < neighborIndices.length; i++) {
    mapping[i]=resultDomain.indexOf(neighborIndices[i]);
  }
  for (  int[] assignment : result) {
    result.setAssignmentLogValue(assignment,startingValue);
  }
  int[] resultAssignment=new int[result.neighborIndices.length];
  int marginalizedVariableValue=0;
  Iterator<int[]> fastPassByReferenceIterator=fastPassByReferenceIterator();
  int[] assignment=fastPassByReferenceIterator.next();
  while (true) {
    for (int i=0; i < assignment.length; i++) {
      if (mapping[i] != -1)       resultAssignment[mapping[i]]=assignment[i];
 else       marginalizedVariableValue=assignment[i];
    }
    result.setAssignmentLogValue(resultAssignment,curriedFoldr.apply(marginalizedVariableValue,resultAssignment).apply(result.getAssignmentLogValue(resultAssignment),getAssignmentLogValue(assignment)));
    if (fastPassByReferenceIterator.hasNext())     fastPassByReferenceIterator.next();
 else     break;
  }
  return result;
}
