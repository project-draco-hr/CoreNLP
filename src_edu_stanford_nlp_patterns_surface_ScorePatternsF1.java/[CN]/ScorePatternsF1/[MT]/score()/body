{
  Counter<Integer> specificity=new ClassicCounter<Integer>();
  Counter<Integer> sensitivity=new ClassicCounter<Integer>();
  if (p0Set.keySet().size() == 0)   throw new RuntimeException("how come p0set size is empty for " + p0 + "?");
  for (  Entry<Integer,ClassicCounter<String>> en : patternsandWords4Label.entrySet()) {
    int common=CollectionUtils.intersection(en.getValue().keySet(),p0Set.keySet()).size();
    if (common == 0)     continue;
    if (en.getValue().keySet().size() == 0)     throw new RuntimeException("how come counter for " + en.getKey() + " is empty?");
    specificity.setCount(en.getKey(),common / (double)en.getValue().keySet().size());
    sensitivity.setCount(en.getKey(),common / (double)p0Set.size());
  }
  Counters.retainNonZeros(specificity);
  Counters.retainNonZeros(sensitivity);
  Counter<Integer> add=Counters.add(sensitivity,specificity);
  Counter<Integer> product=Counters.product(sensitivity,specificity);
  Counters.retainNonZeros(product);
  Counters.retainKeys(product,add.keySet());
  Counter<Integer> finalPat=Counters.scale(Counters.division(product,add),2);
  return finalPat;
}
