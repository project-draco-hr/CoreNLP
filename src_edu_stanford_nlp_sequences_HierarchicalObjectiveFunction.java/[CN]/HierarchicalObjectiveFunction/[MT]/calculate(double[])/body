{
  value=0.0;
  if (derivative == null) {
    derivative=new double[domainDimension()];
  }
 else {
    Arrays.fill(derivative,0.0);
  }
  Map<String,double[]> weightMap=convertWeights(x);
  double[] phi=weightMap.get(null);
  double[] der=new double[numFeatures];
  value+=prior.compute(phi,der);
  LogPrior adaptPrior;
  for (int i=0; i < objFuncs.size(); i++) {
    String domainName=domainIndex.get(i);
    double[] weights=weightMap.get(domainName);
    ObjectiveFunctionInterface objFunc=objFuncs.get(domainName);
    LogPrior basePrior=basePriors.get(domainName);
    adaptPrior=LogPrior.getAdaptationPrior(phi,basePrior);
    objFunc.setPrior(adaptPrior);
    double v=objFunc.valueAt(weights);
    value+=v;
    System.arraycopy(objFunc.derivativeAt(weights),0,derivative,i * numFeatures,numFeatures);
    adaptPrior=LogPrior.getAdaptationPrior(weights,basePrior);
    adaptPrior.compute(phi,der);
  }
  System.arraycopy(der,0,derivative,objFuncs.size() * numFeatures,numFeatures);
}
