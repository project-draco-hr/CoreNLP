{
  Set<L> labelSet=Generics.newHashSet();
  NBWeights nbWeights=trainWeights(data,labels,numFeatures,numClasses);
  Counter<L> priors=new ClassicCounter<>();
  double[] pr=nbWeights.priors;
  for (int i=0; i < pr.length; i++) {
    priors.incrementCount(labelIndex.get(i),pr[i]);
    labelSet.add(labelIndex.get(i));
  }
  Counter<Pair<Pair<L,F>,Number>> weightsCounter=new ClassicCounter<>();
  double[][][] wts=nbWeights.weights;
  for (int c=0; c < numClasses; c++) {
    L label=labelIndex.get(c);
    for (int f=0; f < numFeatures; f++) {
      F feature=featureIndex.get(f);
      Pair<L,F> p=new Pair<>(label,feature);
      for (int val=0; val < wts[c][f].length; val++) {
        Pair<Pair<L,F>,Number> key=new Pair<>(p,Integer.valueOf(val));
        weightsCounter.incrementCount(key,wts[c][f][val]);
      }
    }
  }
  return new NaiveBayesClassifier<>(weightsCounter,priors,labelSet);
}
