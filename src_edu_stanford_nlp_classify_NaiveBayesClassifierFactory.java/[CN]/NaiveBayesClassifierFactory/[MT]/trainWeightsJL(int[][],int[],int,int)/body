{
  int[] numValues=numberValues(data,numFeatures);
  double[] priors=new double[numClasses];
  double[][][] weights=new double[numClasses][numFeatures][];
  for (int cl=0; cl < numClasses; cl++) {
    for (int fno=0; fno < numFeatures; fno++) {
      weights[cl][fno]=new double[numValues[fno]];
    }
  }
  for (int i=0; i < data.length; i++) {
    priors[labels[i]]++;
    for (int fno=0; fno < numFeatures; fno++) {
      weights[labels[i]][fno][data[i][fno]]++;
    }
  }
  for (int cl=0; cl < numClasses; cl++) {
    for (int fno=0; fno < numFeatures; fno++) {
      for (int val=0; val < numValues[fno]; val++) {
        weights[cl][fno][val]=Math.log((weights[cl][fno][val] + alphaFeature) / (priors[cl] + alphaFeature * numValues[fno]));
      }
    }
    priors[cl]=Math.log((priors[cl] + alphaClass) / (data.length + alphaClass * numClasses));
  }
  return new NBWeights(priors,weights);
}
