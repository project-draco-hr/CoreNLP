{
  int[] numValues=numberValues(data,numFeatures);
  int[] sumValues=new int[numFeatures];
  for (int j=1; j < numFeatures; j++) {
    sumValues[j]=sumValues[j - 1] + numValues[j - 1];
  }
  int[][] newdata=new int[data.length][numFeatures + 1];
  for (int i=0; i < data.length; i++) {
    newdata[i][0]=0;
    for (int j=0; j < numFeatures; j++) {
      newdata[i][j + 1]=sumValues[j] + data[i][j] + 1;
    }
  }
  int totalFeatures=sumValues[numFeatures - 1] + numValues[numFeatures - 1] + 1;
  logger.info("total feats " + totalFeatures);
  LogConditionalObjectiveFunction<L,F> objective=new LogConditionalObjectiveFunction<L,F>(totalFeatures,numClasses,newdata,labels,prior,sigma,0.0);
  Minimizer<DiffFunction> min=new QNMinimizer();
  double[] argmin=min.minimize(objective,1e-4,objective.initial());
  double[][] wts=objective.to2D(argmin);
  System.out.println("weights have dimension " + wts.length);
  return new NBWeights(wts,numValues);
}
