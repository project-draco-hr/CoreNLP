{
  Token strgeneric=new Token(PatternType.SURFACE);
  String strOriginal="";
  boolean isLabeledO=true;
  for (  Map.Entry<String,Class> e : ConstantsAndVariables.getGeneralizeClasses().entrySet()) {
    if (!tokenj.containsKey(e.getValue()) || tokenj.get(e.getValue()) == null)     throw new RuntimeException(" Why does the token not have the class " + e.getValue() + " set? Existing classes "+ tokenj.toString(CoreLabel.OutputFormat.ALL));
    if (!tokenj.get(e.getValue()).equals(ConstantsAndVariables.backgroundSymbol)) {
      isLabeledO=false;
      if (strOriginal.isEmpty()) {
        strOriginal=e.getKey();
      }
 else {
        strOriginal+="|" + e.getKey();
      }
      strgeneric.addORRestriction(e.getValue(),e.getKey());
    }
  }
  if (useContextNERRestriction) {
    String nerTag=tokenj.get(CoreAnnotations.NamedEntityTagAnnotation.class);
    if (nerTag != null && !nerTag.equals(SeqClassifierFlags.DEFAULT_BACKGROUND_SYMBOL)) {
      isLabeledO=false;
      if (strOriginal.isEmpty()) {
        strOriginal=nerTag;
      }
 else {
        strOriginal+="|" + nerTag;
      }
      strgeneric.addORRestriction(CoreAnnotations.NamedEntityTagAnnotation.class,nerTag);
    }
  }
  return new Triple<Boolean,Token,String>(isLabeledO,strgeneric,strOriginal);
}
