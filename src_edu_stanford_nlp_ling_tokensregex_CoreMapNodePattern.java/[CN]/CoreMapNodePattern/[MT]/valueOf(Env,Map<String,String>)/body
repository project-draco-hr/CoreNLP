{
  CoreMapNodePattern p=new CoreMapNodePattern(new ArrayList<Pair<Class,NodePattern>>(attributes.size()));
  for (  String attr : attributes.keySet()) {
    String value=attributes.get(attr);
    Class c=EnvLookup.lookupAnnotationKey(env,attr);
    if (c != null) {
      if (value.startsWith("\"") && value.endsWith("\"")) {
        value=value.substring(1,value.length() - 1);
        value=value.replaceAll("\\\\\"","\"");
        p.add(c,new StringAnnotationPattern(value,env.defaultStringMatchFlags));
      }
 else       if (value.startsWith("/") && value.endsWith("/")) {
        value=value.substring(1,value.length() - 1);
        value=value.replaceAll("\\\\/","/");
        String regex=(env != null) ? env.expandStringRegex(value) : value;
        int flags=(env != null) ? env.defaultStringPatternFlags : 0;
        p.add(c,newStringRegexPattern(regex,flags));
      }
 else       if (value.startsWith("::")) {
switch (value) {
case "::IS_NIL":
case "::NOT_EXISTS":
          p.add(c,new NilAnnotationPattern());
        break;
case "::EXISTS":
case "::NOT_NIL":
      p.add(c,new NotNilAnnotationPattern());
    break;
case "::IS_NUM":
  p.add(c,new NumericAnnotationPattern(0,NumericAnnotationPattern.CmpType.IS_NUM));
break;
default :
boolean ok=false;
if (env != null) {
Object custom=env.get(value);
if (custom != null) {
p.add(c,(NodePattern)custom);
ok=true;
}
}
if (!ok) {
throw new IllegalArgumentException("Invalid value " + value + " for key: "+ attr);
}
break;
}
}
 else if (value.startsWith("<=")) {
Double v=Double.parseDouble(value.substring(2));
p.add(c,new NumericAnnotationPattern(v,NumericAnnotationPattern.CmpType.LE));
}
 else if (value.startsWith(">=")) {
Double v=Double.parseDouble(value.substring(2));
p.add(c,new NumericAnnotationPattern(v,NumericAnnotationPattern.CmpType.GE));
}
 else if (value.startsWith("==")) {
Double v=Double.parseDouble(value.substring(2));
p.add(c,new NumericAnnotationPattern(v,NumericAnnotationPattern.CmpType.EQ));
}
 else if (value.startsWith("!=")) {
Double v=Double.parseDouble(value.substring(2));
p.add(c,new NumericAnnotationPattern(v,NumericAnnotationPattern.CmpType.NE));
}
 else if (value.startsWith(">")) {
Double v=Double.parseDouble(value.substring(1));
p.add(c,new NumericAnnotationPattern(v,NumericAnnotationPattern.CmpType.GT));
}
 else if (value.startsWith("<")) {
Double v=Double.parseDouble(value.substring(1));
p.add(c,new NumericAnnotationPattern(v,NumericAnnotationPattern.CmpType.LT));
}
 else if (value.matches("[A-Za-z0-9_+-.]+")) {
p.add(c,new StringAnnotationPattern(value,env.defaultStringMatchFlags));
}
 else {
throw new IllegalArgumentException("Invalid value " + value + " for key: "+ attr);
}
}
 else {
throw new IllegalArgumentException("Unknown annotation key: " + attr);
}
}
return p;
}
