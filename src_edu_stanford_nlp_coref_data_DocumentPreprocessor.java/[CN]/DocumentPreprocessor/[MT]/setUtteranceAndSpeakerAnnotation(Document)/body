{
  doc.speakerInfoGiven=false;
  int utterance=0;
  int outsideQuoteUtterance=0;
  boolean insideQuotation=false;
  List<CoreLabel> tokens=doc.annotation.get(CoreAnnotations.TokensAnnotation.class);
  String preSpeaker=(tokens.size() > 0) ? tokens.get(0).get(CoreAnnotations.SpeakerAnnotation.class) : null;
  for (  CoreLabel l : tokens) {
    String curSpeaker=l.get(CoreAnnotations.SpeakerAnnotation.class);
    String w=l.get(CoreAnnotations.TextAnnotation.class);
    if (curSpeaker != null && !curSpeaker.equals("-"))     doc.speakerInfoGiven=true;
    boolean speakerChange=doc.speakerInfoGiven && curSpeaker != null && !curSpeaker.equals(preSpeaker);
    boolean quoteStart=w.equals("``") || (!insideQuotation && w.equals("\""));
    boolean quoteEnd=w.equals("''") || (insideQuotation && w.equals("\""));
    if (speakerChange) {
      if (quoteStart) {
        utterance=doc.maxUtter + 1;
        outsideQuoteUtterance=utterance + 1;
      }
 else {
        utterance=doc.maxUtter + 1;
        outsideQuoteUtterance=utterance;
      }
      preSpeaker=curSpeaker;
    }
 else {
      if (quoteStart) {
        utterance=doc.maxUtter + 1;
      }
    }
    if (quoteEnd) {
      utterance=outsideQuoteUtterance;
      insideQuotation=false;
    }
    if (doc.maxUtter < utterance)     doc.maxUtter=utterance;
    l.set(CoreAnnotations.UtteranceAnnotation.class,utterance);
    if (quoteStart)     l.set(CoreAnnotations.UtteranceAnnotation.class,outsideQuoteUtterance);
    boolean noSpeakerInfo=!l.containsKey(CoreAnnotations.SpeakerAnnotation.class) || l.get(CoreAnnotations.SpeakerAnnotation.class).isEmpty() || l.get(CoreAnnotations.SpeakerAnnotation.class).startsWith("PER");
    if (noSpeakerInfo || insideQuotation) {
      l.set(CoreAnnotations.SpeakerAnnotation.class,"PER" + utterance);
    }
    if (quoteStart)     insideQuotation=true;
  }
}
