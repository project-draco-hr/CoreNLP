{
  if (input.objectType.equals(KBPRelationExtractor.NERTag.NUMBER)) {
    try {
      Number number=NumberNormalizer.wordToNumber(input.getObjectText());
      if (number != null) {
        indicator(feats,"obj_parsed_as_num","t");
        if (number.equals(number.intValue())) {
          indicator(feats,"obj_isint","t");
          int numAsInt=number.intValue();
          String bucket="<0";
          if (numAsInt == 0) {
            bucket="0";
          }
 else           if (numAsInt == 1) {
            bucket="1";
          }
 else           if (numAsInt < 5) {
            bucket="<5";
          }
 else           if (numAsInt < 18) {
            bucket="<18";
          }
 else           if (numAsInt < 25) {
            bucket="<25";
          }
 else           if (numAsInt < 50) {
            bucket="<50";
          }
 else           if (numAsInt < 80) {
            bucket="<80";
          }
 else           if (numAsInt < 125) {
            bucket="<125";
          }
 else           if (numAsInt >= 100) {
            bucket=">125";
          }
          indicator(feats,"obj_number_bucket",bucket);
        }
 else {
          indicator(feats,"obj_isint","f");
        }
        if (input.getObjectText().replace(",","").equalsIgnoreCase(number.toString())) {
          indicator(feats,"obj_spelledout_num","f");
        }
 else {
          indicator(feats,"obj_spelledout_num","t");
        }
      }
 else {
        indicator(feats,"obj_parsed_as_num","f");
      }
    }
 catch (    NumberFormatException e) {
      indicator(feats,"obj_parsed_as_num","f");
    }
    if (input.getObjectText().contains("-")) {
      indicator(feats,"obj_num_has_dash","t");
    }
 else {
      indicator(feats,"obj_num_has_dash","f");
    }
    if (input.getObjectText().equalsIgnoreCase("one")) {
      indicator(feats,"obj_num_is_one","t");
    }
 else {
      indicator(feats,"obj_num_is_one","f");
    }
  }
  if ((input.subjectType == KBPRelationExtractor.NERTag.PERSON && input.objectType.equals(KBPRelationExtractor.NERTag.ORGANIZATION)) || (input.subjectType == KBPRelationExtractor.NERTag.ORGANIZATION && input.objectType.equals(KBPRelationExtractor.NERTag.PERSON))) {
    Span relationSpan=Span.union(input.subjectSpan,input.objectSpan);
    for (int i=Math.max(0,relationSpan.start() - 5); i < relationSpan.start(); ++i) {
      if ("TITLE".equals(sentence.nerTag(i))) {
        indicator(feats,"title_before","t");
      }
      if (TOP_EMPLOYEE_TRIGGERS.contains(sentence.word(i).toLowerCase())) {
        indicator(feats,"top_employee_trigger_before","t");
      }
    }
    for (int i=relationSpan.end(); i < Math.min(sentence.length(),relationSpan.end()); ++i) {
      if ("TITLE".equals(sentence.nerTag(i))) {
        indicator(feats,"title_after","t");
      }
      if (TOP_EMPLOYEE_TRIGGERS.contains(sentence.word(i).toLowerCase())) {
        indicator(feats,"top_employee_trigger_after","t");
      }
    }
    for (    int i : relationSpan) {
      if ("TITLE".equals(sentence.nerTag(i))) {
        indicator(feats,"title_inside","t");
      }
      if (TOP_EMPLOYEE_TRIGGERS.contains(sentence.word(i).toLowerCase())) {
        indicator(feats,"top_employee_trigger_inside","t");
      }
    }
  }
}
