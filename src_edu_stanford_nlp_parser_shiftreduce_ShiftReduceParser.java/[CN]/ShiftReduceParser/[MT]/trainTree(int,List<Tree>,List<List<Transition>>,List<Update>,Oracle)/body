{
  int numCorrect=0;
  int numWrong=0;
  Tree tree=binarizedTrees.get(index);
  ReorderingOracle reorderer=null;
  if (op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.REORDER_ORACLE || op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.REORDER_BEAM) {
    reorderer=new ReorderingOracle(op);
  }
  if (op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.ORACLE) {
    State state=ShiftReduceParser.initialStateFromGoldTagTree(tree);
    while (!state.isFinished()) {
      List<String> features=featureFactory.featurize(state);
      ScoredObject<Integer> prediction=findHighestScoringTransition(state,features,true);
      if (prediction == null) {
        throw new AssertionError("Did not find a legal transition");
      }
      int predictedNum=prediction.object();
      Transition predicted=transitionIndex.get(predictedNum);
      OracleTransition gold=oracle.goldTransition(index,state);
      if (gold.isCorrect(predicted)) {
        numCorrect++;
        if (gold.transition != null && !gold.transition.equals(predicted)) {
          int transitionNum=transitionIndex.indexOf(gold.transition);
          if (transitionNum < 0) {
            continue;
          }
          updates.add(new Update(features,transitionNum,-1,1.0f));
        }
      }
 else {
        numWrong++;
        int transitionNum=-1;
        if (gold.transition != null) {
          transitionNum=transitionIndex.indexOf(gold.transition);
        }
        updates.add(new Update(features,transitionNum,predictedNum,1.0f));
      }
      state=predicted.apply(state);
    }
  }
 else   if (op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.BEAM || op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.REORDER_BEAM) {
    if (op.trainOptions().beamSize <= 0) {
      throw new IllegalArgumentException("Illegal beam size " + op.trainOptions().beamSize);
    }
    List<Transition> transitions=Generics.newLinkedList(transitionLists.get(index));
    PriorityQueue<State> agenda=new PriorityQueue<State>(op.trainOptions().beamSize + 1,ScoredComparator.ASCENDING_COMPARATOR);
    State goldState=ShiftReduceParser.initialStateFromGoldTagTree(tree);
    agenda.add(goldState);
    int transitionCount=0;
    while (transitions.size() > 0) {
      Transition goldTransition=transitions.get(0);
      Transition highestScoringTransitionFromGoldState=null;
      double highestScoreFromGoldState=0.0;
      PriorityQueue<State> newAgenda=new PriorityQueue<State>(op.trainOptions().beamSize + 1,ScoredComparator.ASCENDING_COMPARATOR);
      State highestScoringState=null;
      State highestCurrentState=null;
      for (      State currentState : agenda) {
        boolean isGoldState=(op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.REORDER_BEAM && goldState.areTransitionsEqual(currentState));
        List<String> features=featureFactory.featurize(currentState);
        Collection<ScoredObject<Integer>> stateTransitions=findHighestScoringTransitions(currentState,features,true,op.trainOptions().beamSize,null);
        for (        ScoredObject<Integer> transition : stateTransitions) {
          State newState=transitionIndex.get(transition.object()).apply(currentState,transition.score());
          newAgenda.add(newState);
          if (newAgenda.size() > op.trainOptions().beamSize) {
            newAgenda.poll();
          }
          if (highestScoringState == null || highestScoringState.score() < newState.score()) {
            highestScoringState=newState;
            highestCurrentState=currentState;
          }
          if (isGoldState && (highestScoringTransitionFromGoldState == null || transition.score() > highestScoreFromGoldState)) {
            highestScoringTransitionFromGoldState=transitionIndex.get(transition.object());
            highestScoreFromGoldState=transition.score();
          }
        }
      }
      if (op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.REORDER_BEAM && highestScoringTransitionFromGoldState == null) {
        break;
      }
      State newGoldState=goldTransition.apply(goldState,0.0);
      if (!newGoldState.areTransitionsEqual(highestScoringState)) {
        ++numWrong;
        List<String> goldFeatures=featureFactory.featurize(goldState);
        int lastTransition=transitionIndex.indexOf(highestScoringState.transitions.peek());
        updates.add(new Update(featureFactory.featurize(highestCurrentState),-1,lastTransition,1.0f));
        updates.add(new Update(goldFeatures,transitionIndex.indexOf(goldTransition),-1,1.0f));
        if (op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.BEAM) {
          if (!findStateOnAgenda(newAgenda,newGoldState)) {
            break;
          }
 else {
            transitions.remove(0);
          }
        }
 else         if (op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.REORDER_BEAM) {
          if (!findStateOnAgenda(newAgenda,newGoldState)) {
            if (!reorderer.reorder(goldState,highestScoringTransitionFromGoldState,transitions)) {
              break;
            }
            newGoldState=highestScoringTransitionFromGoldState.apply(goldState);
            if (!findStateOnAgenda(newAgenda,newGoldState)) {
              break;
            }
          }
 else {
            transitions.remove(0);
          }
        }
      }
 else {
        ++numCorrect;
        transitions.remove(0);
      }
      goldState=newGoldState;
      agenda=newAgenda;
    }
  }
 else   if (op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.REORDER_ORACLE || op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.EARLY_TERMINATION || op.trainOptions().trainingMethod == ShiftReduceTrainOptions.TrainingMethod.GOLD) {
    State state=ShiftReduceParser.initialStateFromGoldTagTree(tree);
    List<Transition> transitions=transitionLists.get(index);
    transitions=Generics.newLinkedList(transitions);
    boolean keepGoing=true;
    while (transitions.size() > 0 && keepGoing) {
      Transition transition=transitions.get(0);
      int transitionNum=transitionIndex.indexOf(transition);
      List<String> features=featureFactory.featurize(state);
      int predictedNum=findHighestScoringTransition(state,features,false).object();
      Transition predicted=transitionIndex.get(predictedNum);
      if (transitionNum == predictedNum) {
        transitions.remove(0);
        state=transition.apply(state);
        numCorrect++;
      }
 else {
        numWrong++;
        updates.add(new Update(features,transitionNum,predictedNum,1.0f));
switch (op.trainOptions().trainingMethod) {
case EARLY_TERMINATION:
          keepGoing=false;
        break;
case GOLD:
      transitions.remove(0);
    state=transition.apply(state);
  break;
case REORDER_ORACLE:
keepGoing=reorderer.reorder(state,predicted,transitions);
if (keepGoing) {
state=predicted.apply(state);
}
break;
default :
throw new IllegalArgumentException("Unexpected method " + op.trainOptions().trainingMethod);
}
}
}
}
return Pair.makePair(numCorrect,numWrong);
}
