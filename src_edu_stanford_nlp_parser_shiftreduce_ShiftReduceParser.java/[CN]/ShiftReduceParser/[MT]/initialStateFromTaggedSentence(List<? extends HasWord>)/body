{
  List<Tree> preterminals=Generics.newArrayList();
  for (int index=0; index < words.size(); ++index) {
    HasWord hw=words.get(index);
    CoreLabel wordLabel;
    String tag;
    if (hw instanceof CoreLabel) {
      wordLabel=(CoreLabel)hw;
      tag=wordLabel.tag();
      CoreLabel cl=(CoreLabel)hw;
      System.err.println("Reuse! " + cl.word() + " "+ cl.value()+ " "+ cl.tag());
    }
 else {
      wordLabel=new CoreLabel();
      wordLabel.setValue(hw.word());
      wordLabel.setWord(hw.word());
      if (!(hw instanceof HasTag)) {
        throw new IllegalArgumentException("Expected tagged words");
      }
      tag=((HasTag)hw).tag();
      wordLabel.setTag(tag);
    }
    if (tag == null) {
      throw new IllegalArgumentException("Input word not tagged");
    }
    CoreLabel tagLabel=new CoreLabel();
    tagLabel.setValue(tag);
    wordLabel.setIndex(index + 1);
    tagLabel.setIndex(index + 1);
    LabeledScoredTreeNode wordNode=new LabeledScoredTreeNode(wordLabel);
    LabeledScoredTreeNode tagNode=new LabeledScoredTreeNode(tagLabel);
    tagNode.addChild(wordNode);
    wordLabel.set(TreeCoreAnnotations.HeadWordAnnotation.class,wordNode);
    wordLabel.set(TreeCoreAnnotations.HeadTagAnnotation.class,tagNode);
    tagLabel.set(TreeCoreAnnotations.HeadWordAnnotation.class,wordNode);
    tagLabel.set(TreeCoreAnnotations.HeadTagAnnotation.class,tagNode);
    preterminals.add(tagNode);
  }
  return new State(preterminals);
}
