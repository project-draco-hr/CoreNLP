{
  List<String> remainingArgs=Generics.newArrayList();
  String trainTreebankPath=null;
  FileFilter trainTreebankFilter=null;
  String testTreebankPath=null;
  FileFilter testTreebankFilter=null;
  String devTreebankPath=null;
  FileFilter devTreebankFilter=null;
  String serializedPath=null;
  String tlppClass=null;
  String continueTraining=null;
  for (int argIndex=0; argIndex < args.length; ) {
    if (args[argIndex].equalsIgnoreCase("-trainTreebank")) {
      Pair<String,FileFilter> treebankDescription=ArgUtils.getTreebankDescription(args,argIndex,"-trainTreebank");
      argIndex=argIndex + ArgUtils.numSubArgs(args,argIndex) + 1;
      trainTreebankPath=treebankDescription.first();
      trainTreebankFilter=treebankDescription.second();
    }
 else     if (args[argIndex].equalsIgnoreCase("-testTreebank")) {
      Pair<String,FileFilter> treebankDescription=ArgUtils.getTreebankDescription(args,argIndex,"-testTreebank");
      argIndex=argIndex + ArgUtils.numSubArgs(args,argIndex) + 1;
      testTreebankPath=treebankDescription.first();
      testTreebankFilter=treebankDescription.second();
    }
 else     if (args[argIndex].equalsIgnoreCase("-devTreebank")) {
      Pair<String,FileFilter> treebankDescription=ArgUtils.getTreebankDescription(args,argIndex,"-devTreebank");
      argIndex=argIndex + ArgUtils.numSubArgs(args,argIndex) + 1;
      devTreebankPath=treebankDescription.first();
      devTreebankFilter=treebankDescription.second();
    }
 else     if (args[argIndex].equalsIgnoreCase("-serializedPath")) {
      serializedPath=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-tlpp")) {
      tlppClass=args[argIndex] + 1;
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-continueTraining")) {
      continueTraining=args[argIndex + 1];
      argIndex+=2;
    }
 else {
      remainingArgs.add(args[argIndex]);
      ++argIndex;
    }
  }
  String[] newArgs=new String[remainingArgs.size()];
  newArgs=remainingArgs.toArray(newArgs);
  if (trainTreebankPath == null && serializedPath == null) {
    throw new IllegalArgumentException("Must specify a treebank to train from with -trainTreebank or a parser to load with -serializedPath");
  }
  ShiftReduceParser parser=null;
  if (trainTreebankPath != null) {
    if (continueTraining != null) {
      parser=ShiftReduceParser.loadModel(continueTraining,ArrayUtils.concatenate(FORCE_TAGS,newArgs));
    }
 else {
      ShiftReduceOptions op=buildTrainingOptions(tlppClass,newArgs);
      parser=new ShiftReduceParser(op);
    }
    parser.trainAndSave(trainTreebankPath,trainTreebankFilter,devTreebankPath,devTreebankFilter,serializedPath);
  }
  if (serializedPath != null && parser == null) {
    parser=ShiftReduceParser.loadModel(serializedPath,ArrayUtils.concatenate(FORCE_TAGS,newArgs));
  }
  if (testTreebankPath != null) {
    System.err.println("Loading test trees from " + testTreebankPath);
    Treebank testTreebank=parser.op.tlpParams.memoryTreebank();
    testTreebank.loadPath(testTreebankPath,testTreebankFilter);
    System.err.println("Loaded " + testTreebank.size() + " trees");
    EvaluateTreebank evaluator=new EvaluateTreebank(parser.op,null,parser);
    evaluator.testOnTreebank(testTreebank);
  }
}
