{
  int numCorrect=0;
  int numWrong=0;
  if (op.trainOptions.trainingThreads == 1) {
    for (    Integer index : indices) {
      Pair<Integer,Integer> count=trainTree(index,binarizedTrees,transitionLists,updates);
      numCorrect+=count.first;
      numWrong+=count.second;
    }
  }
 else {
    for (    Integer index : indices) {
      wrapper.put(index);
    }
    int count=0;
    while (count < indices.size()) {
      wrapper.blockingGetResult();
      while (wrapper.peek()) {
        Pair<Integer,Integer> result=wrapper.poll();
        numCorrect+=result.first;
        numWrong+=result.second;
        count++;
      }
    }
  }
  return new Triple<List<Update>,Integer,Integer>(updates,numCorrect,numWrong);
}
