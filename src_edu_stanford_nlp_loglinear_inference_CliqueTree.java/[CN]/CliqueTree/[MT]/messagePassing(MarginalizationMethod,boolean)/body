{
  boolean impossibleObservationMade=false;
  double partitionFunction=1.0;
  if (includeJointMarginalsAndPartition) {
    outer:     for (    GraphicalModel.Factor f : model.factors) {
      for (      int n : f.neigborIndices) {
        if (!model.getVariableMetaDataByReference(n).containsKey(VARIABLE_OBSERVED_VALUE))         continue outer;
      }
      int[] assignment=new int[f.neigborIndices.length];
      for (int i=0; i < f.neigborIndices.length; i++) {
        assignment[i]=Integer.parseInt(model.getVariableMetaDataByReference(f.neigborIndices[i]).get(VARIABLE_OBSERVED_VALUE));
      }
      double assignmentValue=f.featuresTable.getAssignmentValue(assignment).get().dotProduct(weights);
      if (Double.isInfinite(assignmentValue)) {
        impossibleObservationMade=true;
      }
 else {
        partitionFunction*=Math.exp(assignmentValue);
      }
    }
  }
  List<TableFactor> cliquesList=new ArrayList<>();
  Map<Integer,GraphicalModel.Factor> cliqueToFactor=new HashMap<>();
  int numFactorsCached=0;
  for (  GraphicalModel.Factor f : model.factors) {
    boolean allObserved=true;
    int maxVar=0;
    for (    int n : f.neigborIndices) {
      if (!model.getVariableMetaDataByReference(n).containsKey(VARIABLE_OBSERVED_VALUE))       allObserved=false;
      if (n > maxVar)       maxVar=n;
    }
    if (allObserved)     continue;
    TableFactor clique=null;
    if (cachedFactors.containsKey(f)) {
      CachedFactorWithObservations obs=cachedFactors.get(f);
      boolean allConsistent=true;
      for (int i=0; i < f.neigborIndices.length; i++) {
        int n=f.neigborIndices[i];
        if (model.getVariableMetaDataByReference(n).containsKey(VARIABLE_OBSERVED_VALUE) && (obs.observations[i] == -1 || Integer.parseInt(model.getVariableMetaDataByReference(n).get(VARIABLE_OBSERVED_VALUE)) != obs.observations[i])) {
          allConsistent=false;
          break;
        }
        if (!model.getVariableMetaDataByReference(n).containsKey(VARIABLE_OBSERVED_VALUE) && (obs.observations[i] != -1)) {
          allConsistent=false;
          break;
        }
      }
      if (allConsistent) {
        clique=obs.cachedFactor;
        numFactorsCached++;
        if (obs.impossibleObservation) {
          impossibleObservationMade=true;
        }
      }
    }
    if (clique == null) {
      int[] observations=new int[f.neigborIndices.length];
      for (int i=0; i < observations.length; i++) {
        Map<String,String> metadata=model.getVariableMetaDataByReference(f.neigborIndices[i]);
        if (metadata.containsKey(VARIABLE_OBSERVED_VALUE)) {
          int value=Integer.parseInt(metadata.get(VARIABLE_OBSERVED_VALUE));
          observations[i]=value;
        }
 else {
          observations[i]=-1;
        }
      }
      clique=new TableFactor(weights,f,observations);
      CachedFactorWithObservations cache=new CachedFactorWithObservations();
      cache.cachedFactor=clique;
      cache.observations=observations;
      boolean nonZeroValue=false;
      for (      int[] assignment : clique) {
        if (clique.getAssignmentValue(assignment) > 0) {
          nonZeroValue=true;
          break;
        }
      }
      if (!nonZeroValue) {
        impossibleObservationMade=true;
        cache.impossibleObservation=true;
      }
      cachedFactors.put(f,cache);
    }
    cliqueToFactor.put(cliquesList.size(),f);
    cliquesList.add(clique);
  }
  TableFactor[] cliques=cliquesList.toArray(new TableFactor[cliquesList.size()]);
  if (impossibleObservationMade) {
    int maxVar=0;
    for (    TableFactor c : cliques) {
      for (      int i : c.neighborIndices)       if (i > maxVar)       maxVar=i;
    }
    double[][] result=new double[maxVar + 1][];
    for (    TableFactor c : cliques) {
      for (int i=0; i < c.neighborIndices.length; i++) {
        result[c.neighborIndices[i]]=new double[c.getDimensions()[i]];
        for (int j=0; j < result[c.neighborIndices[i]].length; j++) {
          result[c.neighborIndices[i]][j]=1.0 / result[c.neighborIndices[i]].length;
        }
      }
    }
    Map<GraphicalModel.Factor,TableFactor> jointMarginals=new IdentityHashMap<>();
    if (includeJointMarginalsAndPartition) {
      for (      GraphicalModel.Factor f : model.factors) {
        TableFactor uniformZero=new TableFactor(f.neigborIndices,f.featuresTable.getDimensions());
        for (        int[] assignment : uniformZero) {
          uniformZero.setAssignmentValue(assignment,0.0);
        }
        jointMarginals.put(f,uniformZero);
      }
    }
    return new MarginalResult(result,1.0,jointMarginals);
  }
  int maxVar=0;
  for (  GraphicalModel.Factor fac : model.factors) {
    for (    int i : fac.neigborIndices)     if (i > maxVar)     maxVar=i;
  }
  TableFactor[][] messages=new TableFactor[cliques.length][cliques.length];
  boolean[][] backwardPassedMessages=new boolean[cliques.length][cliques.length];
  int forceRootForCachedMessagePassing=-1;
  int[] cachedCliquesBackPointers=null;
  if (CACHE_MESSAGES && (numFactorsCached == cliques.length - 1) && (numFactorsCached > 0)) {
    cachedCliquesBackPointers=new int[cliques.length];
    boolean backPointersConsistent=true;
    for (int i=0; i < cliques.length; i++) {
      cachedCliquesBackPointers[i]=-1;
      for (int j=0; j < cachedCliqueList.length; j++) {
        if (cliques[i] == cachedCliqueList[j]) {
          cachedCliquesBackPointers[i]=j;
          break;
        }
      }
      if (cachedCliquesBackPointers[i] == -1) {
        if (forceRootForCachedMessagePassing != -1) {
          backPointersConsistent=false;
          break;
        }
        forceRootForCachedMessagePassing=i;
      }
    }
    if (!backPointersConsistent)     forceRootForCachedMessagePassing=-1;
  }
  boolean[] visited=new boolean[cliques.length];
  int numVisited=0;
  int[] visitedOrder=new int[cliques.length];
  int[] parent=new int[cliques.length];
  for (int i=0; i < parent.length; i++)   parent[i]=-1;
  int[] trees=new int[cliques.length];
  int treeIndex=-1;
  boolean[] seenVariable=new boolean[maxVar + 1];
  while (numVisited < cliques.length) {
    treeIndex++;
    int root=-1;
    if (CACHE_MESSAGES && forceRootForCachedMessagePassing != -1 && !visited[forceRootForCachedMessagePassing]) {
      root=forceRootForCachedMessagePassing;
    }
 else {
      for (int i=0; i < cliques.length; i++) {
        if (!visited[i] && (root == -1 || cliques[i].neighborIndices.length > cliques[root].neighborIndices.length)) {
          root=i;
        }
      }
    }
    assert(root != -1);
    Queue<Integer> toVisit=new ArrayDeque<>();
    toVisit.add(root);
    boolean[] toVisitArray=new boolean[cliques.length];
    toVisitArray[root]=true;
    while (toVisit.size() > 0) {
      int cursor=toVisit.poll();
      trees[cursor]=treeIndex;
      if (visited[cursor]) {
        log.info("Visited contains: " + cursor);
        log.info("Visited: " + Arrays.toString(visited));
        log.info("To visit: " + toVisit);
      }
      assert(!visited[cursor]);
      visited[cursor]=true;
      visitedOrder[numVisited]=cursor;
      for (      int i : cliques[cursor].neighborIndices)       seenVariable[i]=true;
      numVisited++;
      childLoop:       for (int i=0; i < cliques.length; i++) {
        if (i == cursor)         continue;
        if (i == parent[cursor])         continue;
        if (domainsOverlap(cliques[cursor],cliques[i])) {
          childNeighborLoop:           for (          int child : cliques[i].neighborIndices) {
            if (seenVariable[child]) {
              for (              int j : cliques[cursor].neighborIndices) {
                if (j == child) {
                  continue childNeighborLoop;
                }
              }
              continue childLoop;
            }
          }
          if (parent[i] == -1 && !visited[i]) {
            if (!toVisitArray[i]) {
              toVisit.add(i);
              toVisitArray[i]=true;
              for (              int j : cliques[i].neighborIndices)               seenVariable[j]=true;
            }
            parent[i]=cursor;
          }
        }
      }
    }
    assert(parent[root] == -1);
  }
  assert(numVisited == cliques.length);
  for (int i=numVisited - 1; i >= 0; i--) {
    int cursor=visitedOrder[i];
    if (parent[cursor] == -1)     continue;
    backwardPassedMessages[cursor][parent[cursor]]=true;
    if (CACHE_MESSAGES && forceRootForCachedMessagePassing != -1 && cachedCliquesBackPointers[cursor] != -1 && cachedCliquesBackPointers[parent[cursor]] != -1 && cachedMessages[cachedCliquesBackPointers[cursor]][cachedCliquesBackPointers[parent[cursor]]] != null && cachedBackwardPassedMessages[cachedCliquesBackPointers[cursor]][cachedCliquesBackPointers[parent[cursor]]]) {
      messages[cursor][parent[cursor]]=cachedMessages[cachedCliquesBackPointers[cursor]][cachedCliquesBackPointers[parent[cursor]]];
    }
 else {
      TableFactor message=cliques[cursor];
      for (int k=0; k < cliques.length; k++) {
        if (k == parent[cursor])         continue;
        if (messages[k][cursor] != null) {
          message=message.multiply(messages[k][cursor]);
        }
      }
      messages[cursor][parent[cursor]]=marginalizeMessage(message,cliques[parent[cursor]].neighborIndices,marginalize);
      if (CACHE_MESSAGES && forceRootForCachedMessagePassing != -1 && cachedCliquesBackPointers[parent[cursor]] != -1) {
        for (int k=0; k < cachedCliqueList.length; k++) {
          cachedMessages[cachedCliquesBackPointers[parent[cursor]]][k]=null;
        }
      }
    }
  }
  for (int i=0; i < numVisited; i++) {
    int cursor=visitedOrder[i];
    for (int j=0; j < cliques.length; j++) {
      if (parent[j] != cursor)       continue;
      TableFactor message=cliques[cursor];
      for (int k=0; k < cliques.length; k++) {
        if (k == j)         continue;
        if (messages[k][cursor] != null) {
          message=message.multiply(messages[k][cursor]);
        }
      }
      messages[cursor][j]=marginalizeMessage(message,cliques[j].neighborIndices,marginalize);
    }
  }
  if (CACHE_MESSAGES) {
    cachedCliqueList=cliques;
    cachedMessages=messages;
    cachedBackwardPassedMessages=backwardPassedMessages;
  }
  double[][] marginals=new double[maxVar + 1][];
  for (  GraphicalModel.Factor fac : model.factors) {
    for (int i=0; i < fac.neigborIndices.length; i++) {
      int n=fac.neigborIndices[i];
      if (model.getVariableMetaDataByReference(n).containsKey(VARIABLE_OBSERVED_VALUE)) {
        double[] deterministic=new double[fac.featuresTable.getDimensions()[i]];
        int assignment=Integer.parseInt(model.getVariableMetaDataByReference(n).get(VARIABLE_OBSERVED_VALUE));
        if (assignment > deterministic.length) {
          throw new IllegalStateException("Variable " + n + ": Can't have as assignment ("+ assignment+ ") that is out of bounds for dimension size ("+ deterministic.length+ ")");
        }
        deterministic[assignment]=1.0;
        marginals[n]=deterministic;
      }
    }
  }
  Map<GraphicalModel.Factor,TableFactor> jointMarginals=new IdentityHashMap<>();
  if (marginalize == MarginalizationMethod.SUM && includeJointMarginalsAndPartition) {
    boolean[] partitionIncludesTrees=new boolean[treeIndex + 1];
    double[] treePartitionFunctions=new double[treeIndex + 1];
    for (int i=0; i < cliques.length; i++) {
      TableFactor convergedClique=cliques[i];
      for (int j=0; j < cliques.length; j++) {
        if (i == j)         continue;
        if (messages[j][i] == null)         continue;
        convergedClique=convergedClique.multiply(messages[j][i]);
      }
      if (!partitionIncludesTrees[trees[i]]) {
        partitionIncludesTrees[trees[i]]=true;
        treePartitionFunctions[trees[i]]=convergedClique.valueSum();
        partitionFunction*=treePartitionFunctions[trees[i]];
      }
 else {
        if (assertsEnabled() && !TableFactor.USE_EXP_APPROX) {
          double valueSum=convergedClique.valueSum();
          if (Double.isFinite(valueSum) && Double.isFinite(treePartitionFunctions[trees[i]])) {
            if (Math.abs(treePartitionFunctions[trees[i]] - valueSum) >= 1.0e-3 * treePartitionFunctions[trees[i]]) {
              log.info("Different partition functions for tree " + trees[i] + ": ");
              log.info("Pre-existing for tree: " + treePartitionFunctions[trees[i]]);
              log.info("This clique for tree: " + valueSum);
            }
            assert(Math.abs(treePartitionFunctions[trees[i]] - valueSum) < 1.0e-3 * treePartitionFunctions[trees[i]]);
          }
        }
      }
      GraphicalModel.Factor f=cliqueToFactor.get(i);
      assert(f != null);
      if (!jointMarginals.containsKey(f)) {
        int[] observedAssignments=getObservedAssignments(f);
        int[] backPointers=new int[observedAssignments.length];
        int cursor=0;
        for (int j=0; j < observedAssignments.length; j++) {
          if (observedAssignments[j] == -1) {
            backPointers[j]=cursor;
            cursor++;
          }
 else           backPointers[j]=-1;
        }
        double sum=convergedClique.valueSum();
        TableFactor jointMarginal=new TableFactor(f.neigborIndices,f.featuresTable.getDimensions());
        Iterator<int[]> fastPassByReferenceIterator=convergedClique.fastPassByReferenceIterator();
        int[] assignment=fastPassByReferenceIterator.next();
        while (true) {
          if (backPointers.length == assignment.length) {
            jointMarginal.setAssignmentValue(assignment,convergedClique.getAssignmentValue(assignment) / sum);
          }
 else {
            int[] jointAssignment=new int[backPointers.length];
            for (int j=0; j < jointAssignment.length; j++) {
              if (observedAssignments[j] != -1)               jointAssignment[j]=observedAssignments[j];
 else               jointAssignment[j]=assignment[backPointers[j]];
            }
            jointMarginal.setAssignmentValue(jointAssignment,convergedClique.getAssignmentValue(assignment) / sum);
          }
          if (fastPassByReferenceIterator.hasNext())           fastPassByReferenceIterator.next();
 else           break;
        }
        jointMarginals.put(f,jointMarginal);
      }
      boolean anyNull=false;
      for (int j=0; j < convergedClique.neighborIndices.length; j++) {
        int k=convergedClique.neighborIndices[j];
        if (marginals[k] == null) {
          anyNull=true;
        }
      }
      if (anyNull) {
        double[][] cliqueMarginals=null;
switch (marginalize) {
case SUM:
          cliqueMarginals=convergedClique.getSummedMarginals();
        break;
case MAX:
      cliqueMarginals=convergedClique.getMaxedMarginals();
    break;
}
for (int j=0; j < convergedClique.neighborIndices.length; j++) {
  int k=convergedClique.neighborIndices[j];
  if (marginals[k] == null) {
    marginals[k]=cliqueMarginals[j];
  }
}
}
}
}
 else {
for (int i=0; i < cliques.length; i++) {
boolean allNull=true;
for (int k : cliques[i].neighborIndices) {
if (marginals[k] != null) allNull=false;
}
if (allNull) {
TableFactor convergedClique=cliques[i];
for (int j=0; j < cliques.length; j++) {
  if (i == j)   continue;
  if (messages[j][i] == null)   continue;
  convergedClique=convergedClique.multiply(messages[j][i]);
}
double[][] cliqueMarginals=null;
switch (marginalize) {
case SUM:
  cliqueMarginals=convergedClique.getSummedMarginals();
break;
case MAX:
cliqueMarginals=convergedClique.getMaxedMarginals();
break;
}
for (int j=0; j < convergedClique.neighborIndices.length; j++) {
int k=convergedClique.neighborIndices[j];
if (marginals[k] == null) {
marginals[k]=cliqueMarginals[j];
}
}
}
}
for (int i=0; i < cliques.length; i++) {
boolean anyNull=false;
for (int j=0; j < cliques[i].neighborIndices.length; j++) {
int k=cliques[i].neighborIndices[j];
if (marginals[k] == null) {
anyNull=true;
}
}
if (anyNull) {
TableFactor convergedClique=cliques[i];
for (int j=0; j < cliques.length; j++) {
if (i == j) continue;
if (messages[j][i] == null) continue;
convergedClique=convergedClique.multiply(messages[j][i]);
}
double[][] cliqueMarginals=null;
switch (marginalize) {
case SUM:
cliqueMarginals=convergedClique.getSummedMarginals();
break;
case MAX:
cliqueMarginals=convergedClique.getMaxedMarginals();
break;
}
for (int j=0; j < convergedClique.neighborIndices.length; j++) {
int k=convergedClique.neighborIndices[j];
if (marginals[k] == null) {
marginals[k]=cliqueMarginals[j];
}
}
}
}
}
if (marginalize == MarginalizationMethod.SUM && includeJointMarginalsAndPartition) {
for (GraphicalModel.Factor f : model.factors) {
if (!jointMarginals.containsKey(f)) {
TableFactor deterministicJointMarginal=new TableFactor(f.neigborIndices,f.featuresTable.getDimensions());
int[] observedAssignment=getObservedAssignments(f);
for (int i : observedAssignment) assert(i != -1);
deterministicJointMarginal.setAssignmentValue(observedAssignment,1.0);
jointMarginals.put(f,deterministicJointMarginal);
}
}
}
return new MarginalResult(marginals,partitionFunction,jointMarginals);
}
