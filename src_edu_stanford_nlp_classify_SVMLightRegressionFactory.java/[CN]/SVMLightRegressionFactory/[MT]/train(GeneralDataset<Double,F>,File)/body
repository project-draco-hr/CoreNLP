{
  File trainFile;
  try {
    trainFile=File.createTempFile("svm-light-learn",".input");
    SVMLightRegression.writeSVMLightFormat(data,trainFile);
  }
 catch (  IOException e) {
    throw new RuntimeIOException(e);
  }
  try {
    List<String> command=new ArrayList<String>();
    command.add(this.learnCommand);
    command.addAll(Arrays.asList("-z","r"));
    command.addAll(Arrays.asList("-v","0"));
    if (this.cost != null) {
      command.addAll(Arrays.asList("-c",String.valueOf(this.cost)));
    }
    if (this.kernelType != null) {
      int value=this.kernelType.getValue();
      command.addAll(Arrays.asList("-t",String.valueOf(value)));
    }
    if (this.degree != null) {
      command.addAll(Arrays.asList("-d",String.valueOf(this.degree)));
    }
    if (this.gamma != null) {
      command.addAll(Arrays.asList("-g",String.valueOf(this.gamma)));
    }
    command.add(trainFile.getPath());
    command.add(modelFile.getPath());
    SystemUtils.run(new ProcessBuilder(command));
  }
  finally {
    trainFile.delete();
  }
  return new SVMLightRegression<F>(modelFile,data.featureIndex(),this.classifyCommand);
}
