{
  if (data instanceof RVFDataset)   ((RVFDataset<L,F>)data).ensureRealValues();
  if (data.labelIndex.size() != 2) {
    throw new RuntimeException("LogisticClassifier is only for binary classification!");
  }
  Minimizer<DiffFunction> minim;
  if (!biased) {
    LogisticObjectiveFunction lof=null;
    if (data instanceof Dataset<?,?>)     lof=new LogisticObjectiveFunction(data.numFeatureTypes(),data.getDataArray(),data.getLabelsArray(),prior);
 else     if (data instanceof RVFDataset<?,?>)     lof=new LogisticObjectiveFunction(data.numFeatureTypes(),data.getDataArray(),data.getValuesArray(),data.getLabelsArray(),prior);
    if (l1reg > 0.0) {
      minim=ReflectionLoading.loadByReflection("edu.stanford.nlp.optimization.OWLQNMinimizer",l1reg);
    }
 else {
      minim=new QNMinimizer(lof);
    }
    weights=minim.minimize(lof,tol,new double[data.numFeatureTypes()]);
  }
 else {
    BiasedLogisticObjectiveFunction lof=new BiasedLogisticObjectiveFunction(data.numFeatureTypes(),data.getDataArray(),data.getLabelsArray(),prior);
    if (l1reg > 0.0) {
      minim=ReflectionLoading.loadByReflection("edu.stanford.nlp.optimization.OWLQNMinimizer",l1reg);
    }
 else {
      minim=new QNMinimizer(lof);
    }
    weights=minim.minimize(lof,tol,new double[data.numFeatureTypes()]);
  }
  featureIndex=data.featureIndex;
  classes[0]=data.labelIndex.get(0);
  classes[1]=data.labelIndex.get(1);
  return new LogisticClassifier<L,F>(weights,featureIndex,classes);
}
