{
  Map<String,Double> result=new HashMap<String,Double>();
  Set<String> punctuationTags=CollectionUtils.asSet(tlp.punctuationTags());
  if (trees.size() != goldTrees.size()) {
    System.out.println("[Error] Incorrect number of trees.");
    return null;
  }
  int correctArcs=0;
  int correctArcsWoPunc=0;
  int correctHeads=0;
  int correctHeadsWoPunc=0;
  int correctTrees=0;
  int correctTreesWoPunc=0;
  int correctRoot=0;
  int sumArcs=0;
  int sumArcsWoPunc=0;
  for (int i=0; i < trees.size(); ++i) {
    List<CoreLabel> tokens=sentences.get(i).get(CoreAnnotations.TokensAnnotation.class);
    if (trees.get(i).n != goldTrees.get(i).n) {
      System.out.println("[Error] Tree " + (i + 1) + ": incorrect number of nodes.");
      return null;
    }
    if (!trees.get(i).isTree()) {
      System.out.println("[Error] Tree " + (i + 1) + ": illegal.");
      return null;
    }
    int nCorrectHead=0;
    int nCorrectHeadwoPunc=0;
    int nonPunc=0;
    for (int j=1; j <= trees.get(i).n; ++j) {
      if (trees.get(i).getHead(j) == goldTrees.get(i).getHead(j)) {
        ++correctHeads;
        ++nCorrectHead;
        if (trees.get(i).getLabel(j).equals(goldTrees.get(i).getLabel(j)))         ++correctArcs;
      }
      ++sumArcs;
      String tag=tokens.get(j - 1).tag();
      if (!punctuationTags.contains(tag)) {
        ++sumArcsWoPunc;
        ++nonPunc;
        if (trees.get(i).getHead(j) == goldTrees.get(i).getHead(j)) {
          ++correctHeadsWoPunc;
          ++nCorrectHeadwoPunc;
          if (trees.get(i).getLabel(j).equals(goldTrees.get(i).getLabel(j)))           ++correctArcsWoPunc;
        }
      }
    }
    if (nCorrectHead == trees.get(i).n)     ++correctTrees;
    if (nCorrectHeadwoPunc == nonPunc)     ++correctTreesWoPunc;
    if (trees.get(i).getRoot() == goldTrees.get(i).getRoot())     ++correctRoot;
  }
  result.put("UAS",correctHeads * 100.0 / sumArcs);
  result.put("UASwoPunc",correctHeadsWoPunc * 100.0 / sumArcsWoPunc);
  result.put("LAS",correctArcs * 100.0 / sumArcs);
  result.put("LASwoPunc",correctArcsWoPunc * 100.0 / sumArcsWoPunc);
  ;
  result.put("UEM",correctTrees * 100.0 / trees.size());
  result.put("UEMwoPunc",correctTreesWoPunc * 100.0 / trees.size());
  result.put("ROOT",correctRoot * 100.0 / trees.size());
  ;
  return result;
}
