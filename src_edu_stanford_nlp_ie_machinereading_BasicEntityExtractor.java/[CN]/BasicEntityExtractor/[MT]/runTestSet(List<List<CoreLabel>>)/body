{
  Counter<String> tp=new ClassicCounter<>();
  Counter<String> fp=new ClassicCounter<>();
  Counter<String> fn=new ClassicCounter<>();
  Counter<String> actual=new ClassicCounter<>();
  for (  List<CoreLabel> labels : testSet) {
    List<CoreLabel> unannotatedLabels=new ArrayList<>();
    for (    CoreLabel label : labels) {
      CoreLabel newLabel=new CoreLabel();
      newLabel.set(annotationForWord,label.get(annotationForWord));
      newLabel.set(PartOfSpeechAnnotation.class,label.get(PartOfSpeechAnnotation.class));
      unannotatedLabels.add(newLabel);
    }
    List<CoreLabel> annotatedLabels=this.classifier.classify(unannotatedLabels);
    int ind=0;
    for (    CoreLabel expectedLabel : labels) {
      CoreLabel annotatedLabel=annotatedLabels.get(ind);
      String answer=annotatedLabel.get(AnswerAnnotation.class);
      String expectedAnswer=expectedLabel.get(AnswerAnnotation.class);
      actual.incrementCount(expectedAnswer);
      if (!SeqClassifierFlags.DEFAULT_BACKGROUND_SYMBOL.equals(expectedAnswer) && expectedAnswer.equals(answer)) {
        tp.incrementCount(answer);
        System.out.println("True Positive:" + annotatedLabel);
      }
 else       if (!SeqClassifierFlags.DEFAULT_BACKGROUND_SYMBOL.equals(answer)) {
        fp.incrementCount(answer);
        System.out.println("False Positive:" + annotatedLabel);
      }
 else       if (!SeqClassifierFlags.DEFAULT_BACKGROUND_SYMBOL.equals(expectedAnswer)) {
        fn.incrementCount(expectedAnswer);
        System.out.println("False Negative:" + expectedLabel);
      }
      ind++;
    }
  }
  actual.remove(SeqClassifierFlags.DEFAULT_BACKGROUND_SYMBOL);
}
