{
  double rank=0;
  StringTokenizer st=new StringTokenizer(s," \t,:");
  int totalcnt=0;
  while (st.hasMoreTokens()) {
    String token=st.nextToken();
    int fNo=Integer.parseInt(token);
    if (st.hasMoreTokens()) {
      String token1=st.nextToken();
      if (token1.equals("%")) {
        if (fNo == 1) {
          if (collectCountsOnly) {
            classesInstances.add(Integer.valueOf(numCurrentSentence));
          }
        }
        rank=Double.parseDouble(st.nextToken());
        break;
      }
      double val=Double.parseDouble(token1);
      if (fNo == 0) {
        int sNoC=(int)val;
        if (sNoC != this.sNoLast) {
          if ((currentSentence >= 0) && (collectCountsOnly)) {
            maxYsList.add(Integer.valueOf(numCurrentSentence));
          }
          currentSentence++;
          numCurrentSentence=0;
          sNoLast=sNoC;
        }
      }
      if (collectCountsOnly) {
        counts[fNo]++;
      }
 else {
        if ((counts[fNo] > cutoff)) {
          int index=indexOf(this.currentSentence,this.numCurrentSentence);
          (feats.get(fNo)).setValue(indices[fNo]++,index,val);
          objcount++;
          totalcnt+=val;
        }
      }
    }
 else {
      if (fNo == 1) {
        if (collectCountsOnly) {
          classesInstances.add(Integer.valueOf(numCurrentSentence));
        }
      }
    }
  }
  if (!collectCountsOnly) {
    if (rank != 0) {
      IntDoubleTriple pair1=new IntDoubleTriple(this.currentSentence,this.numCurrentSentence,rank);
      valuesList.add(pair1);
    }
 else {
      if (numCurrentSentence == 0) {
        IntDoubleTriple pair2=new IntDoubleTriple(this.currentSentence,this.numCurrentSentence,1);
        valuesList.add(pair2);
      }
    }
  }
  if (numCurrentSentence == 0) {
    classinstances[0].add(Integer.valueOf(currentSentence));
  }
  if (maxY <= numCurrentSentence) {
    maxY=numCurrentSentence + 1;
  }
  numCurrentSentence++;
}
