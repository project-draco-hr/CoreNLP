{
  SimpleDateModel dateModel=(SimpleDateModel)relationalModels.get(0);
  AcronymModel acronymModel=(AcronymModel)relationalModels.get(1);
  Counter dateCliqueProbs=(Distribution.getDistribution(ct.dateCliqueCounter)).getCounter();
  Iterator tempIter=ct.dateCliqueCounter.keySet().iterator();
  while (tempIter.hasNext()) {
    DateTemplate dt=(DateTemplate)tempIter.next();
    double oldProb=dateCliqueProbs.getCount(dt);
    double newProb=dateModel.computeProb(dt);
    dateCliqueProbs.setCount(dt,oldProb * newProb);
    if (DEBUG) {
      System.err.println("Testing date template : " + dt);
      System.err.print("Old prob: " + oldProb);
      System.err.print(" DateModelProb: " + newProb + " NewProb: "+ oldProb * newProb + "\n");
    }
  }
  Counter workshopInfoProbs=Distribution.getDistribution(ct.workshopInfoCliqueCounter).getCounter();
  tempIter=ct.workshopInfoCliqueCounter.keySet().iterator();
  while (tempIter.hasNext()) {
    InfoTemplate it=(InfoTemplate)tempIter.next();
    double oldProb=workshopInfoProbs.getCount(it);
    double newProb=acronymModel.computeProb(it);
    workshopInfoProbs.setCount(it,oldProb * newProb);
    if (DEBUG) {
      System.err.println("Testing info template : " + it.toString());
      System.err.print("Old prob: " + oldProb);
      System.err.println(" AcroModelProb: " + newProb + " NewProb: "+ oldProb * newProb + "\n");
    }
  }
  return PascalTemplate.mergeCliqueTemplates((DateTemplate)Counters.argmax(dateCliqueProbs),(String)Counters.argmax(ct.locationCliqueCounter),(InfoTemplate)Counters.argmax(workshopInfoProbs));
}
