{
  return new Iterator<Annotation>(){
    private Iterator<BufferedReader> readers=Iterables.transform(files,new Function<File,BufferedReader>(){
      public BufferedReader apply(      File file){
        return new BufferedReader(new InputStreamReader(IOUtils.openFile(file)));
      }
    }
).iterator();
    private BufferedReader reader=findReader();
    private Annotation annotation=findAnnotation();
    public boolean hasNext(){
      return this.annotation != null;
    }
    public Annotation next(){
      Annotation annotation=this.annotation;
      this.annotation=this.findAnnotation();
      return annotation;
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
    private BufferedReader findReader(){
      return this.readers.hasNext() ? this.readers.next() : null;
    }
    private Annotation findAnnotation(){
      if (this.reader == null) {
        return null;
      }
      try {
        String line;
        StringBuilder doc=new StringBuilder();
        while ((line=this.reader.readLine()) != null) {
          doc.append(line);
          doc.append('\n');
          if (line.equals("</DOC>")) {
            break;
          }
          if (line.contains("</DOC>")) {
            throw new RuntimeException(String.format("invalid line '%s'",line));
          }
        }
        if (line == null) {
          this.reader.close();
          this.reader=findReader();
        }
        String xml=doc.toString().replaceAll("&","&amp;");
        if (xml.equals(null) || xml.equals("")) {
          return findAnnotation();
        }
        xml=xml.replaceAll("num=([0-9]+) (.*)","num=\"$1\" $2");
        xml=xml.replaceAll("sid=(.*)>","sid=\"$1\">");
        xml=xml.replaceAll("</SENT>\n</DOC>","</SENT>\n</TEXT>\n</DOC>");
        xml=new String(xml.getBytes(),"UTF8");
        return toAnnotation(xml);
      }
 catch (      IOException e) {
        throw new RuntimeIOException(e);
      }
    }
  }
;
}
