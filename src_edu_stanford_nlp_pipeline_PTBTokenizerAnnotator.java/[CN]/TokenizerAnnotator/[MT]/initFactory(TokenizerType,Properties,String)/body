{
  TokenizerFactory<CoreLabel> factory=null;
  String options=props.getProperty("tokenize.options",null);
  if (options == null) {
    options=extraOptions;
  }
 else   if (extraOptions != null) {
    options=extraOptions + options;
  }
  if (options == null) {
    options=type.getDefaultOptions();
  }
  try {
switch (type) {
case Spanish:
      factory=SpanishTokenizer.factory(new CoreLabelTokenFactory(),options);
    break;
case French:
  factory=FrenchTokenizer.factory(new CoreLabelTokenFactory(),options);
break;
case Whitespace:
boolean eolIsSignificant=Boolean.valueOf(props.getProperty(EOL_PROPERTY,"false"));
eolIsSignificant=eolIsSignificant || Boolean.valueOf(props.getProperty(StanfordCoreNLP.NEWLINE_SPLITTER_PROPERTY,"false"));
factory=new WhitespaceTokenizer.WhitespaceTokenizerFactory<CoreLabel>(new CoreLabelTokenFactory(),eolIsSignificant);
break;
case English:
case German:
factory=PTBTokenizer.factory(new CoreLabelTokenFactory(),options);
break;
default :
throw new IllegalArgumentException("No valid tokenizer type provided.");
}
}
 catch (IllegalArgumentException e) {
System.err.println("Illegal Argument Exception: " + e.getMessage());
System.err.println("Use -tokenize.language, -tokenize.class, or -tokenizer.whitespace \n" + "to specify a tokenizer type.");
System.err.println("Using PTBTokenizer as default tokenizer.");
}
if (factory == null) {
factory=PTBTokenizer.factory(new CoreLabelTokenFactory(),options);
}
return factory;
}
