{
  try {
    String line;
    Section section=Section.TERMINALS;
    while ((line=bin.readLine()) != null) {
      line=line.trim();
      if (line.equals("")) {
        continue;
      }
      if (line.length() > 0 && line.charAt(0) == '#') {
        continue;
      }
      try {
        Section newSection=Section.valueOf(line.toUpperCase());
        section=newSection;
        if (section == Section.TSURGEON) {
          Pair<TregexPattern,TsurgeonPattern> operation=Tsurgeon.getOperationFromReader(bin,compiler);
          tsurgeons.add(operation);
        }
        continue;
      }
 catch (      IllegalArgumentException e) {
      }
      String[] pieces=line.split(" +");
switch (section) {
case TSURGEON:
{
          throw new RuntimeException("Found a non-empty line in a tsurgeon section after reading the operation");
        }
case TERMINALS:
{
        Counter<String> productions=terminals.get(pieces[0]);
        if (productions == null) {
          productions=new ClassicCounter<>();
          terminals.put(pieces[0],productions);
        }
        for (int i=1; i < pieces.length; ++i) {
          productions.incrementCount(pieces[i]);
        }
        break;
      }
case NONTERMINALS:
{
      Counter<List<String>> productions=nonTerminals.get(pieces[0]);
      if (productions == null) {
        productions=new ClassicCounter<>();
        nonTerminals.put(pieces[0],productions);
      }
      String[] sublist=Arrays.copyOfRange(pieces,1,pieces.length);
      productions.incrementCount(Arrays.asList(sublist));
    }
}
}
}
 catch (IOException e) {
throw new RuntimeIOException(e);
}
}
