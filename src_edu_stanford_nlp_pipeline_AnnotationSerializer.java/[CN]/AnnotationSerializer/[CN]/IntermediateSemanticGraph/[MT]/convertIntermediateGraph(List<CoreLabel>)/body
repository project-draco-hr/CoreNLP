{
  SemanticGraph graph=new SemanticGraph();
  TwoDimensionalMap<Integer,Integer,IndexedWord> nodeMap=TwoDimensionalMap.hashMap();
  for (  IntermediateNode in : nodes) {
    CoreLabel token=sentence.get(in.index - 1);
    IndexedWord word;
    if (in.copyAnnotation > 0) {
      word=new IndexedWord(new CoreLabel(token));
      word.setCopyCount(in.copyAnnotation);
    }
 else {
      word=new IndexedWord(token);
    }
    if (word.docID() == null && in.docId != null) {
      word.setDocID(in.docId);
    }
    if (word.sentIndex() < 0 && in.sentIndex >= 0) {
      word.setSentIndex(in.sentIndex);
    }
    if (word.index() < 0 && in.index >= 0) {
      word.setIndex(in.index);
    }
    nodeMap.put(word.index(),word.copyCount(),word);
    graph.addVertex(word);
    if (in.isRoot) {
      graph.addRoot(word);
    }
  }
  for (  IntermediateEdge ie : edges) {
    IndexedWord source=nodeMap.get(ie.source,ie.sourceCopy);
    if (source == null) {
      throw new RuntimeIOException("Failed to find node " + ie.source + "-"+ ie.sourceCopy);
    }
    IndexedWord target=nodeMap.get(ie.target,ie.targetCopy);
    if (target == null) {
      throw new RuntimeIOException("Failed to find node " + ie.target + "-"+ ie.targetCopy);
    }
    assert(target != null);
synchronized (LOCK) {
      GrammaticalRelation rel=GrammaticalRelation.valueOf(ie.dep);
      graph.addEdge(source,target,rel,1.0,ie.isExtra);
    }
  }
  if (!graph.isEmpty() && graph.getRoots().size() == 0) {
    graph.resetRoots();
  }
  return graph;
}
