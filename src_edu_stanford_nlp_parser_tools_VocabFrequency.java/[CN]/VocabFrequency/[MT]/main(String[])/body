{
  if (args.length < minArgs) {
    System.out.println(usage.toString());
    System.exit(-1);
  }
  TreebankLangParserParams tlpp=new EnglishTreebankParserParams();
  DiskTreebank tb=null;
  String encoding="UTF-8";
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith("-")) {
switch (args[i]) {
case "-l":
        Language lang=Language.valueOf(args[++i].trim());
      tlpp=lang.params;
    break;
case "-e":
  encoding=args[++i];
break;
default :
System.out.println(usage.toString());
System.exit(-1);
}
}
 else {
if (tb == null) {
if (tlpp == null) {
System.out.println(usage.toString());
System.exit(-1);
}
 else {
tlpp.setInputEncoding(encoding);
tlpp.setOutputEncoding(encoding);
tb=tlpp.diskTreebank();
}
}
tb.loadPath(args[i]);
}
}
Counter<String> vocab=new ClassicCounter<>();
for (Tree t : tb) {
List<Label> yield=t.yield();
for (Label word : yield) vocab.incrementCount(word.value());
}
List<String> biggestKeys=new ArrayList<>(vocab.keySet());
Collections.sort(biggestKeys,Counters.toComparatorDescending(vocab));
PrintWriter pw=tlpp.pw();
for (String wordType : biggestKeys) pw.printf("%s\t%d%n",wordType,(int)vocab.getCount(wordType));
pw.close();
}
