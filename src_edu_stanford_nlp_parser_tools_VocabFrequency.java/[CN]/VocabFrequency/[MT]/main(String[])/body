{
  if (args.length < minArgs) {
    System.out.println(usage.toString());
    System.exit(-1);
  }
  TreebankLangParserParams tlpp=new EnglishTreebankParserParams();
  DiskTreebank tb=null;
  String encoding="UTF-8";
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith("-")) {
      if (args[i].equals("-l")) {
        Language lang=Language.valueOf(args[++i].trim());
        tlpp=Languages.getLanguageParams(lang);
      }
 else       if (args[i].equals("-e")) {
        encoding=args[++i];
      }
 else {
        System.out.println(usage.toString());
        System.exit(-1);
      }
    }
 else {
      if (tb == null) {
        if (tlpp == null) {
          System.out.println(usage.toString());
          System.exit(-1);
        }
 else {
          tlpp.setInputEncoding(encoding);
          tlpp.setOutputEncoding(encoding);
          tb=tlpp.diskTreebank();
        }
      }
      tb.loadPath(args[i]);
    }
  }
  Counter<String> vocab=new ClassicCounter<String>();
  for (  Tree t : tb) {
    List<Label> yield=t.yield();
    for (    Label word : yield)     vocab.incrementCount(word.value());
  }
  List<String> biggestKeys=new ArrayList<String>(vocab.keySet());
  Collections.sort(biggestKeys,Counters.toComparatorDescending(vocab));
  PrintWriter pw=tlpp.pw();
  for (  String wordType : biggestKeys)   pw.printf("%s\t%d%n",wordType,(int)vocab.getCount(wordType));
  pw.close();
}
