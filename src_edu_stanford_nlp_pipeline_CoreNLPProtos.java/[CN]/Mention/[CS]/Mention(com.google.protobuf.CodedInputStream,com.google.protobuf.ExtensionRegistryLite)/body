{
  initFields();
  int mutable_bitField0_=0;
  int mutable_bitField1_=0;
  com.google.protobuf.UnknownFieldSet.Builder unknownFields=com.google.protobuf.UnknownFieldSet.newBuilder();
  try {
    boolean done=false;
    while (!done) {
      int tag=input.readTag();
switch (tag) {
case 0:
        done=true;
      break;
default :
{
      if (!parseUnknownField(input,unknownFields,extensionRegistry,tag)) {
        done=true;
      }
      break;
    }
case 8:
{
    bitField0_|=0x00000001;
    mentionID_=input.readInt32();
    break;
  }
case 18:
{
  com.google.protobuf.ByteString bs=input.readBytes();
  bitField0_|=0x00000002;
  mentionType_=bs;
  break;
}
case 26:
{
com.google.protobuf.ByteString bs=input.readBytes();
bitField0_|=0x00000004;
number_=bs;
break;
}
case 34:
{
com.google.protobuf.ByteString bs=input.readBytes();
bitField0_|=0x00000008;
gender_=bs;
break;
}
case 42:
{
com.google.protobuf.ByteString bs=input.readBytes();
bitField0_|=0x00000010;
animacy_=bs;
break;
}
case 50:
{
com.google.protobuf.ByteString bs=input.readBytes();
bitField0_|=0x00000020;
person_=bs;
break;
}
case 56:
{
bitField0_|=0x00000040;
startIndex_=input.readUInt32();
break;
}
case 72:
{
bitField0_|=0x00000080;
endIndex_=input.readUInt32();
break;
}
case 80:
{
bitField0_|=0x00000100;
headIndex_=input.readUInt32();
break;
}
case 90:
{
com.google.protobuf.ByteString bs=input.readBytes();
bitField0_|=0x00000200;
headString_=bs;
break;
}
case 98:
{
com.google.protobuf.ByteString bs=input.readBytes();
bitField0_|=0x00000400;
nerString_=bs;
break;
}
case 104:
{
bitField0_|=0x00000800;
originalRef_=input.readUInt32();
break;
}
case 112:
{
bitField0_|=0x00001000;
goldCorefClusterID_=input.readInt32();
break;
}
case 120:
{
bitField0_|=0x00002000;
corefClusterID_=input.readInt32();
break;
}
case 128:
{
bitField0_|=0x00004000;
mentionNum_=input.readUInt32();
break;
}
case 136:
{
bitField0_|=0x00008000;
sentNum_=input.readUInt32();
break;
}
case 144:
{
bitField0_|=0x00010000;
utter_=input.readUInt32();
break;
}
case 152:
{
bitField0_|=0x00020000;
paragraph_=input.readUInt32();
break;
}
case 160:
{
bitField0_|=0x00040000;
isSubject_=input.readBool();
break;
}
case 168:
{
bitField0_|=0x00080000;
isDirectObject_=input.readBool();
break;
}
case 176:
{
bitField0_|=0x00100000;
isIndirectObject_=input.readBool();
break;
}
case 184:
{
bitField0_|=0x00200000;
isPrepositionObject_=input.readBool();
break;
}
case 192:
{
bitField0_|=0x00400000;
hasTwin_=input.readBool();
break;
}
case 200:
{
bitField0_|=0x00800000;
generic_=input.readBool();
break;
}
case 208:
{
bitField0_|=0x01000000;
isSingleton_=input.readBool();
break;
}
case 216:
{
bitField0_|=0x02000000;
hasBasicDependency_=input.readBool();
break;
}
case 224:
{
bitField0_|=0x04000000;
hasCollapsedDependency_=input.readBool();
break;
}
case 232:
{
bitField0_|=0x08000000;
hasContextParseTree_=input.readBool();
break;
}
case 242:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord.Builder subBuilder=null;
if (((bitField0_ & 0x10000000) == 0x10000000)) {
subBuilder=headIndexedWord_.toBuilder();
}
headIndexedWord_=input.readMessage(edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord.PARSER,extensionRegistry);
if (subBuilder != null) {
subBuilder.mergeFrom(headIndexedWord_);
headIndexedWord_=subBuilder.buildPartial();
}
bitField0_|=0x10000000;
break;
}
case 250:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord.Builder subBuilder=null;
if (((bitField0_ & 0x20000000) == 0x20000000)) {
subBuilder=dependingVerb_.toBuilder();
}
dependingVerb_=input.readMessage(edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord.PARSER,extensionRegistry);
if (subBuilder != null) {
subBuilder.mergeFrom(dependingVerb_);
dependingVerb_=subBuilder.buildPartial();
}
bitField0_|=0x20000000;
break;
}
case 258:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord.Builder subBuilder=null;
if (((bitField0_ & 0x40000000) == 0x40000000)) {
subBuilder=headWord_.toBuilder();
}
headWord_=input.readMessage(edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord.PARSER,extensionRegistry);
if (subBuilder != null) {
subBuilder.mergeFrom(headWord_);
headWord_=subBuilder.buildPartial();
}
bitField0_|=0x40000000;
break;
}
case 266:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.SpeakerInfo.Builder subBuilder=null;
if (((bitField0_ & 0x80000000) == 0x80000000)) {
subBuilder=speakerInfo_.toBuilder();
}
speakerInfo_=input.readMessage(edu.stanford.nlp.pipeline.CoreNLPProtos.SpeakerInfo.PARSER,extensionRegistry);
if (subBuilder != null) {
subBuilder.mergeFrom(speakerInfo_);
speakerInfo_=subBuilder.buildPartial();
}
bitField0_|=0x80000000;
break;
}
case 402:
{
if (!((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
sentenceWords_=new java.util.ArrayList<edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord>();
mutable_bitField1_|=0x00000001;
}
sentenceWords_.add(input.readMessage(edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord.PARSER,extensionRegistry));
break;
}
case 410:
{
if (!((mutable_bitField1_ & 0x00000002) == 0x00000002)) {
originalSpan_=new java.util.ArrayList<edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord>();
mutable_bitField1_|=0x00000002;
}
originalSpan_.add(input.readMessage(edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord.PARSER,extensionRegistry));
break;
}
case 418:
{
com.google.protobuf.ByteString bs=input.readBytes();
if (!((mutable_bitField1_ & 0x00000004) == 0x00000004)) {
dependents_=new com.google.protobuf.LazyStringArrayList();
mutable_bitField1_|=0x00000004;
}
dependents_.add(bs);
break;
}
case 426:
{
com.google.protobuf.ByteString bs=input.readBytes();
if (!((mutable_bitField1_ & 0x00000008) == 0x00000008)) {
preprocessedTerms_=new com.google.protobuf.LazyStringArrayList();
mutable_bitField1_|=0x00000008;
}
preprocessedTerms_.add(bs);
break;
}
case 432:
{
if (!((mutable_bitField1_ & 0x00000010) == 0x00000010)) {
appositions_=new java.util.ArrayList<java.lang.Integer>();
mutable_bitField1_|=0x00000010;
}
appositions_.add(input.readInt32());
break;
}
case 434:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
if (!((mutable_bitField1_ & 0x00000010) == 0x00000010) && input.getBytesUntilLimit() > 0) {
appositions_=new java.util.ArrayList<java.lang.Integer>();
mutable_bitField1_|=0x00000010;
}
while (input.getBytesUntilLimit() > 0) {
appositions_.add(input.readInt32());
}
input.popLimit(limit);
break;
}
case 440:
{
if (!((mutable_bitField1_ & 0x00000020) == 0x00000020)) {
predicateNominatives_=new java.util.ArrayList<java.lang.Integer>();
mutable_bitField1_|=0x00000020;
}
predicateNominatives_.add(input.readInt32());
break;
}
case 442:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
if (!((mutable_bitField1_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
predicateNominatives_=new java.util.ArrayList<java.lang.Integer>();
mutable_bitField1_|=0x00000020;
}
while (input.getBytesUntilLimit() > 0) {
predicateNominatives_.add(input.readInt32());
}
input.popLimit(limit);
break;
}
case 448:
{
if (!((mutable_bitField1_ & 0x00000040) == 0x00000040)) {
relativePronouns_=new java.util.ArrayList<java.lang.Integer>();
mutable_bitField1_|=0x00000040;
}
relativePronouns_.add(input.readInt32());
break;
}
case 450:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
if (!((mutable_bitField1_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
relativePronouns_=new java.util.ArrayList<java.lang.Integer>();
mutable_bitField1_|=0x00000040;
}
while (input.getBytesUntilLimit() > 0) {
relativePronouns_.add(input.readInt32());
}
input.popLimit(limit);
break;
}
case 456:
{
if (!((mutable_bitField1_ & 0x00000080) == 0x00000080)) {
listMembers_=new java.util.ArrayList<java.lang.Integer>();
mutable_bitField1_|=0x00000080;
}
listMembers_.add(input.readInt32());
break;
}
case 458:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
if (!((mutable_bitField1_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
listMembers_=new java.util.ArrayList<java.lang.Integer>();
mutable_bitField1_|=0x00000080;
}
while (input.getBytesUntilLimit() > 0) {
listMembers_.add(input.readInt32());
}
input.popLimit(limit);
break;
}
case 464:
{
if (!((mutable_bitField1_ & 0x00000100) == 0x00000100)) {
belongToLists_=new java.util.ArrayList<java.lang.Integer>();
mutable_bitField1_|=0x00000100;
}
belongToLists_.add(input.readInt32());
break;
}
case 466:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
if (!((mutable_bitField1_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
belongToLists_=new java.util.ArrayList<java.lang.Integer>();
mutable_bitField1_|=0x00000100;
}
while (input.getBytesUntilLimit() > 0) {
belongToLists_.add(input.readInt32());
}
input.popLimit(limit);
break;
}
}
}
}
 catch (com.google.protobuf.InvalidProtocolBufferException e) {
throw e.setUnfinishedMessage(this);
}
catch (java.io.IOException e) {
throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
}
 finally {
if (((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
sentenceWords_=java.util.Collections.unmodifiableList(sentenceWords_);
}
if (((mutable_bitField1_ & 0x00000002) == 0x00000002)) {
originalSpan_=java.util.Collections.unmodifiableList(originalSpan_);
}
if (((mutable_bitField1_ & 0x00000004) == 0x00000004)) {
dependents_=dependents_.getUnmodifiableView();
}
if (((mutable_bitField1_ & 0x00000008) == 0x00000008)) {
preprocessedTerms_=preprocessedTerms_.getUnmodifiableView();
}
if (((mutable_bitField1_ & 0x00000010) == 0x00000010)) {
appositions_=java.util.Collections.unmodifiableList(appositions_);
}
if (((mutable_bitField1_ & 0x00000020) == 0x00000020)) {
predicateNominatives_=java.util.Collections.unmodifiableList(predicateNominatives_);
}
if (((mutable_bitField1_ & 0x00000040) == 0x00000040)) {
relativePronouns_=java.util.Collections.unmodifiableList(relativePronouns_);
}
if (((mutable_bitField1_ & 0x00000080) == 0x00000080)) {
listMembers_=java.util.Collections.unmodifiableList(listMembers_);
}
if (((mutable_bitField1_ & 0x00000100) == 0x00000100)) {
belongToLists_=java.util.Collections.unmodifiableList(belongToLists_);
}
this.unknownFields=unknownFields.build();
makeExtensionsImmutable();
}
}
