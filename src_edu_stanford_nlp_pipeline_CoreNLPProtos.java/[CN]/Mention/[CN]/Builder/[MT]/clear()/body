{
  super.clear();
  mentionID_=0;
  bitField0_=(bitField0_ & ~0x00000001);
  mentionType_="";
  bitField0_=(bitField0_ & ~0x00000002);
  number_="";
  bitField0_=(bitField0_ & ~0x00000004);
  gender_="";
  bitField0_=(bitField0_ & ~0x00000008);
  animacy_="";
  bitField0_=(bitField0_ & ~0x00000010);
  person_="";
  bitField0_=(bitField0_ & ~0x00000020);
  startIndex_=0;
  bitField0_=(bitField0_ & ~0x00000040);
  endIndex_=0;
  bitField0_=(bitField0_ & ~0x00000080);
  headIndex_=0;
  bitField0_=(bitField0_ & ~0x00000100);
  headString_="";
  bitField0_=(bitField0_ & ~0x00000200);
  nerString_="";
  bitField0_=(bitField0_ & ~0x00000400);
  originalRef_=0;
  bitField0_=(bitField0_ & ~0x00000800);
  goldCorefClusterID_=0;
  bitField0_=(bitField0_ & ~0x00001000);
  corefClusterID_=0;
  bitField0_=(bitField0_ & ~0x00002000);
  mentionNum_=0;
  bitField0_=(bitField0_ & ~0x00004000);
  sentNum_=0;
  bitField0_=(bitField0_ & ~0x00008000);
  utter_=0;
  bitField0_=(bitField0_ & ~0x00010000);
  paragraph_=0;
  bitField0_=(bitField0_ & ~0x00020000);
  isSubject_=false;
  bitField0_=(bitField0_ & ~0x00040000);
  isDirectObject_=false;
  bitField0_=(bitField0_ & ~0x00080000);
  isIndirectObject_=false;
  bitField0_=(bitField0_ & ~0x00100000);
  isPrepositionObject_=false;
  bitField0_=(bitField0_ & ~0x00200000);
  hasTwin_=false;
  bitField0_=(bitField0_ & ~0x00400000);
  generic_=false;
  bitField0_=(bitField0_ & ~0x00800000);
  isSingleton_=false;
  bitField0_=(bitField0_ & ~0x01000000);
  hasBasicDependency_=false;
  bitField0_=(bitField0_ & ~0x02000000);
  hasCollapsedDependency_=false;
  bitField0_=(bitField0_ & ~0x04000000);
  hasContextParseTree_=false;
  bitField0_=(bitField0_ & ~0x08000000);
  if (headIndexedWordBuilder_ == null) {
    headIndexedWord_=edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord.getDefaultInstance();
  }
 else {
    headIndexedWordBuilder_.clear();
  }
  bitField0_=(bitField0_ & ~0x10000000);
  if (dependingVerbBuilder_ == null) {
    dependingVerb_=edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord.getDefaultInstance();
  }
 else {
    dependingVerbBuilder_.clear();
  }
  bitField0_=(bitField0_ & ~0x20000000);
  if (headWordBuilder_ == null) {
    headWord_=edu.stanford.nlp.pipeline.CoreNLPProtos.IndexedWord.getDefaultInstance();
  }
 else {
    headWordBuilder_.clear();
  }
  bitField0_=(bitField0_ & ~0x40000000);
  if (sentenceWordsBuilder_ == null) {
    sentenceWords_=java.util.Collections.emptyList();
    bitField0_=(bitField0_ & ~0x80000000);
  }
 else {
    sentenceWordsBuilder_.clear();
  }
  if (originalSpanBuilder_ == null) {
    originalSpan_=java.util.Collections.emptyList();
    bitField1_=(bitField1_ & ~0x00000001);
  }
 else {
    originalSpanBuilder_.clear();
  }
  dependents_=com.google.protobuf.LazyStringArrayList.EMPTY;
  bitField1_=(bitField1_ & ~0x00000002);
  preprocessedTerms_=com.google.protobuf.LazyStringArrayList.EMPTY;
  bitField1_=(bitField1_ & ~0x00000004);
  appositions_=java.util.Collections.emptyList();
  bitField1_=(bitField1_ & ~0x00000008);
  predicateNominatives_=java.util.Collections.emptyList();
  bitField1_=(bitField1_ & ~0x00000010);
  relativePronouns_=java.util.Collections.emptyList();
  bitField1_=(bitField1_ & ~0x00000020);
  listMembers_=java.util.Collections.emptyList();
  bitField1_=(bitField1_ & ~0x00000040);
  belongToLists_=java.util.Collections.emptyList();
  bitField1_=(bitField1_ & ~0x00000080);
  return this;
}
