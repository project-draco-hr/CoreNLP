{
  edu.stanford.nlp.pipeline.CoreNLPProtos.Mention result=new edu.stanford.nlp.pipeline.CoreNLPProtos.Mention(this);
  int from_bitField0_=bitField0_;
  int from_bitField1_=bitField1_;
  int to_bitField0_=0;
  if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
    to_bitField0_|=0x00000001;
  }
  result.mentionID_=mentionID_;
  if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
    to_bitField0_|=0x00000002;
  }
  result.mentionType_=mentionType_;
  if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
    to_bitField0_|=0x00000004;
  }
  result.number_=number_;
  if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
    to_bitField0_|=0x00000008;
  }
  result.gender_=gender_;
  if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
    to_bitField0_|=0x00000010;
  }
  result.animacy_=animacy_;
  if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
    to_bitField0_|=0x00000020;
  }
  result.person_=person_;
  if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
    to_bitField0_|=0x00000040;
  }
  result.startIndex_=startIndex_;
  if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
    to_bitField0_|=0x00000080;
  }
  result.endIndex_=endIndex_;
  if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
    to_bitField0_|=0x00000100;
  }
  result.headIndex_=headIndex_;
  if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
    to_bitField0_|=0x00000200;
  }
  result.headString_=headString_;
  if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
    to_bitField0_|=0x00000400;
  }
  result.nerString_=nerString_;
  if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
    to_bitField0_|=0x00000800;
  }
  result.originalRef_=originalRef_;
  if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
    to_bitField0_|=0x00001000;
  }
  result.goldCorefClusterID_=goldCorefClusterID_;
  if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
    to_bitField0_|=0x00002000;
  }
  result.corefClusterID_=corefClusterID_;
  if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
    to_bitField0_|=0x00004000;
  }
  result.mentionNum_=mentionNum_;
  if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
    to_bitField0_|=0x00008000;
  }
  result.sentNum_=sentNum_;
  if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
    to_bitField0_|=0x00010000;
  }
  result.utter_=utter_;
  if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
    to_bitField0_|=0x00020000;
  }
  result.paragraph_=paragraph_;
  if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
    to_bitField0_|=0x00040000;
  }
  result.isSubject_=isSubject_;
  if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
    to_bitField0_|=0x00080000;
  }
  result.isDirectObject_=isDirectObject_;
  if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
    to_bitField0_|=0x00100000;
  }
  result.isIndirectObject_=isIndirectObject_;
  if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
    to_bitField0_|=0x00200000;
  }
  result.isPrepositionObject_=isPrepositionObject_;
  if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
    to_bitField0_|=0x00400000;
  }
  result.hasTwin_=hasTwin_;
  if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
    to_bitField0_|=0x00800000;
  }
  result.generic_=generic_;
  if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
    to_bitField0_|=0x01000000;
  }
  result.isSingleton_=isSingleton_;
  if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
    to_bitField0_|=0x02000000;
  }
  result.hasBasicDependency_=hasBasicDependency_;
  if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
    to_bitField0_|=0x04000000;
  }
  result.hasCollapsedDependency_=hasCollapsedDependency_;
  if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
    to_bitField0_|=0x08000000;
  }
  result.hasContextParseTree_=hasContextParseTree_;
  if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
    to_bitField0_|=0x10000000;
  }
  if (headIndexedWordBuilder_ == null) {
    result.headIndexedWord_=headIndexedWord_;
  }
 else {
    result.headIndexedWord_=headIndexedWordBuilder_.build();
  }
  if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
    to_bitField0_|=0x20000000;
  }
  if (dependingVerbBuilder_ == null) {
    result.dependingVerb_=dependingVerb_;
  }
 else {
    result.dependingVerb_=dependingVerbBuilder_.build();
  }
  if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
    to_bitField0_|=0x40000000;
  }
  if (headWordBuilder_ == null) {
    result.headWord_=headWord_;
  }
 else {
    result.headWord_=headWordBuilder_.build();
  }
  if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
    to_bitField0_|=0x80000000;
  }
  if (speakerInfoBuilder_ == null) {
    result.speakerInfo_=speakerInfo_;
  }
 else {
    result.speakerInfo_=speakerInfoBuilder_.build();
  }
  if (sentenceWordsBuilder_ == null) {
    if (((bitField1_ & 0x00000001) == 0x00000001)) {
      sentenceWords_=java.util.Collections.unmodifiableList(sentenceWords_);
      bitField1_=(bitField1_ & ~0x00000001);
    }
    result.sentenceWords_=sentenceWords_;
  }
 else {
    result.sentenceWords_=sentenceWordsBuilder_.build();
  }
  if (originalSpanBuilder_ == null) {
    if (((bitField1_ & 0x00000002) == 0x00000002)) {
      originalSpan_=java.util.Collections.unmodifiableList(originalSpan_);
      bitField1_=(bitField1_ & ~0x00000002);
    }
    result.originalSpan_=originalSpan_;
  }
 else {
    result.originalSpan_=originalSpanBuilder_.build();
  }
  if (((bitField1_ & 0x00000004) == 0x00000004)) {
    dependents_=dependents_.getUnmodifiableView();
    bitField1_=(bitField1_ & ~0x00000004);
  }
  result.dependents_=dependents_;
  if (((bitField1_ & 0x00000008) == 0x00000008)) {
    preprocessedTerms_=preprocessedTerms_.getUnmodifiableView();
    bitField1_=(bitField1_ & ~0x00000008);
  }
  result.preprocessedTerms_=preprocessedTerms_;
  if (((bitField1_ & 0x00000010) == 0x00000010)) {
    appositions_=java.util.Collections.unmodifiableList(appositions_);
    bitField1_=(bitField1_ & ~0x00000010);
  }
  result.appositions_=appositions_;
  if (((bitField1_ & 0x00000020) == 0x00000020)) {
    predicateNominatives_=java.util.Collections.unmodifiableList(predicateNominatives_);
    bitField1_=(bitField1_ & ~0x00000020);
  }
  result.predicateNominatives_=predicateNominatives_;
  if (((bitField1_ & 0x00000040) == 0x00000040)) {
    relativePronouns_=java.util.Collections.unmodifiableList(relativePronouns_);
    bitField1_=(bitField1_ & ~0x00000040);
  }
  result.relativePronouns_=relativePronouns_;
  if (((bitField1_ & 0x00000080) == 0x00000080)) {
    listMembers_=java.util.Collections.unmodifiableList(listMembers_);
    bitField1_=(bitField1_ & ~0x00000080);
  }
  result.listMembers_=listMembers_;
  if (((bitField1_ & 0x00000100) == 0x00000100)) {
    belongToLists_=java.util.Collections.unmodifiableList(belongToLists_);
    bitField1_=(bitField1_ & ~0x00000100);
  }
  result.belongToLists_=belongToLists_;
  result.bitField0_=to_bitField0_;
  onBuilt();
  return result;
}
