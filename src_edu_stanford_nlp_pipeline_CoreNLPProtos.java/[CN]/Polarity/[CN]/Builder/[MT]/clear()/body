{
  super.clear();
  projectEquivalence_=edu.stanford.nlp.pipeline.CoreNLPProtos.NaturalLogicRelation.EQUIVALENCE;
  bitField0_=(bitField0_ & ~0x00000001);
  projectForwardEntailment_=edu.stanford.nlp.pipeline.CoreNLPProtos.NaturalLogicRelation.EQUIVALENCE;
  bitField0_=(bitField0_ & ~0x00000002);
  projectReverseEntailment_=edu.stanford.nlp.pipeline.CoreNLPProtos.NaturalLogicRelation.EQUIVALENCE;
  bitField0_=(bitField0_ & ~0x00000004);
  projectNegation_=edu.stanford.nlp.pipeline.CoreNLPProtos.NaturalLogicRelation.EQUIVALENCE;
  bitField0_=(bitField0_ & ~0x00000008);
  projectAlternation_=edu.stanford.nlp.pipeline.CoreNLPProtos.NaturalLogicRelation.EQUIVALENCE;
  bitField0_=(bitField0_ & ~0x00000010);
  projectCover_=edu.stanford.nlp.pipeline.CoreNLPProtos.NaturalLogicRelation.EQUIVALENCE;
  bitField0_=(bitField0_ & ~0x00000020);
  projectIndependence_=edu.stanford.nlp.pipeline.CoreNLPProtos.NaturalLogicRelation.EQUIVALENCE;
  bitField0_=(bitField0_ & ~0x00000040);
  return this;
}
