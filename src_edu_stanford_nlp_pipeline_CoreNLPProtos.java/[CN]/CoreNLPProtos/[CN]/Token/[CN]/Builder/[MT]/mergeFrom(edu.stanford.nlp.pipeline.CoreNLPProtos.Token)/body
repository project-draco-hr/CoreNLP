{
  if (other == edu.stanford.nlp.pipeline.CoreNLPProtos.Token.getDefaultInstance())   return this;
  if (other.hasWord()) {
    setWord(other.getWord());
  }
  if (other.hasPos()) {
    setPos(other.getPos());
  }
  if (other.hasValue()) {
    setValue(other.getValue());
  }
  if (other.hasCategory()) {
    setCategory(other.getCategory());
  }
  if (other.hasBefore()) {
    setBefore(other.getBefore());
  }
  if (other.hasAfter()) {
    setAfter(other.getAfter());
  }
  if (other.hasOriginalText()) {
    setOriginalText(other.getOriginalText());
  }
  if (other.hasNer()) {
    setNer(other.getNer());
  }
  if (other.hasNormalizedNER()) {
    setNormalizedNER(other.getNormalizedNER());
  }
  if (other.hasLemma()) {
    setLemma(other.getLemma());
  }
  if (other.hasBeginChar()) {
    setBeginChar(other.getBeginChar());
  }
  if (other.hasEndChar()) {
    setEndChar(other.getEndChar());
  }
  if (other.hasUtterance()) {
    setUtterance(other.getUtterance());
  }
  if (other.hasSpeaker()) {
    setSpeaker(other.getSpeaker());
  }
  if (other.hasBeginIndex()) {
    setBeginIndex(other.getBeginIndex());
  }
  if (other.hasEndIndex()) {
    setEndIndex(other.getEndIndex());
  }
  if (other.hasTokenBeginIndex()) {
    setTokenBeginIndex(other.getTokenBeginIndex());
  }
  if (other.hasTokenEndIndex()) {
    setTokenEndIndex(other.getTokenEndIndex());
  }
  if (other.hasTimexValue()) {
    mergeTimexValue(other.getTimexValue());
  }
  if (other.hasHasXmlContext()) {
    setHasXmlContext(other.getHasXmlContext());
  }
  if (!other.xmlContext_.isEmpty()) {
    if (xmlContext_.isEmpty()) {
      xmlContext_=other.xmlContext_;
      bitField0_=(bitField0_ & ~0x00100000);
    }
 else {
      ensureXmlContextIsMutable();
      xmlContext_.addAll(other.xmlContext_);
    }
    onChanged();
  }
  if (other.hasCorefClusterID()) {
    setCorefClusterID(other.getCorefClusterID());
  }
  if (other.hasAnswer()) {
    setAnswer(other.getAnswer());
  }
  if (other.hasGender()) {
    setGender(other.getGender());
  }
  if (other.hasTrueCase()) {
    setTrueCase(other.getTrueCase());
  }
  if (other.hasTrueCaseText()) {
    setTrueCaseText(other.getTrueCaseText());
  }
  this.mergeExtensionFields(other);
  this.mergeUnknownFields(other.getUnknownFields());
  return this;
}
