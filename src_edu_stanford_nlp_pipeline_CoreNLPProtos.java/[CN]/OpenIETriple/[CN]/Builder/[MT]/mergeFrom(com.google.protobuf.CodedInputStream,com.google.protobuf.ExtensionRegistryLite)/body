{
  com.google.protobuf.UnknownFieldSet.Builder unknownFields=com.google.protobuf.UnknownFieldSet.newBuilder(this.getUnknownFields());
  while (true) {
    int tag=input.readTag();
switch (tag) {
case 0:
      this.setUnknownFields(unknownFields.build());
    onChanged();
  return this;
default :
{
  if (!parseUnknownField(input,unknownFields,extensionRegistry,tag)) {
    this.setUnknownFields(unknownFields.build());
    onChanged();
    return this;
  }
  break;
}
case 10:
{
bitField0_|=0x00000001;
subject_=input.readBytes();
break;
}
case 18:
{
bitField0_|=0x00000002;
relation_=input.readBytes();
break;
}
case 26:
{
bitField0_|=0x00000004;
object_=input.readBytes();
break;
}
case 33:
{
bitField0_|=0x00000008;
confidence_=input.readDouble();
break;
}
case 40:
{
ensureSubjectTokensIsMutable();
subjectTokens_.add(input.readUInt32());
break;
}
case 42:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addSubjectTokens(input.readUInt32());
}
input.popLimit(limit);
break;
}
case 48:
{
ensureRelationTokensIsMutable();
relationTokens_.add(input.readUInt32());
break;
}
case 50:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addRelationTokens(input.readUInt32());
}
input.popLimit(limit);
break;
}
case 56:
{
ensureObjectTokensIsMutable();
objectTokens_.add(input.readUInt32());
break;
}
case 58:
{
int length=input.readRawVarint32();
int limit=input.pushLimit(length);
while (input.getBytesUntilLimit() > 0) {
addObjectTokens(input.readUInt32());
}
input.popLimit(limit);
break;
}
case 66:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.DependencyGraph.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.DependencyGraph.newBuilder();
if (hasTree()) {
subBuilder.mergeFrom(getTree());
}
input.readMessage(subBuilder,extensionRegistry);
setTree(subBuilder.buildPartial());
break;
}
case 72:
{
bitField0_|=0x00000100;
istmod_=input.readBool();
break;
}
case 80:
{
bitField0_|=0x00000200;
prefixBe_=input.readBool();
break;
}
case 88:
{
bitField0_|=0x00000400;
suffixBe_=input.readBool();
break;
}
case 96:
{
bitField0_|=0x00000800;
suffixOf_=input.readBool();
break;
}
}
}
}
