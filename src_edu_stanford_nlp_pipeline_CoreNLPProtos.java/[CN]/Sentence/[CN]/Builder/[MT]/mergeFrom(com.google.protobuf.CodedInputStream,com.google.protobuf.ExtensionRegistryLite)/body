{
  com.google.protobuf.UnknownFieldSet.Builder unknownFields=com.google.protobuf.UnknownFieldSet.newBuilder(this.getUnknownFields());
  while (true) {
    int tag=input.readTag();
switch (tag) {
case 0:
      this.setUnknownFields(unknownFields.build());
    onChanged();
  return this;
default :
{
  if (!parseUnknownField(input,unknownFields,extensionRegistry,tag)) {
    this.setUnknownFields(unknownFields.build());
    onChanged();
    return this;
  }
  break;
}
case 10:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.Token.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.Token.newBuilder();
input.readMessage(subBuilder,extensionRegistry);
addToken(subBuilder.buildPartial());
break;
}
case 16:
{
bitField0_|=0x00000002;
tokenOffsetBegin_=input.readUInt32();
break;
}
case 24:
{
bitField0_|=0x00000004;
tokenOffsetEnd_=input.readUInt32();
break;
}
case 32:
{
bitField0_|=0x00000008;
sentenceIndex_=input.readUInt32();
break;
}
case 40:
{
bitField0_|=0x00000010;
characterOffsetBegin_=input.readUInt32();
break;
}
case 48:
{
bitField0_|=0x00000020;
characterOffsetEnd_=input.readUInt32();
break;
}
case 58:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.ParseTree.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.ParseTree.newBuilder();
if (hasParseTree()) {
subBuilder.mergeFrom(getParseTree());
}
input.readMessage(subBuilder,extensionRegistry);
setParseTree(subBuilder.buildPartial());
break;
}
case 66:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.DependencyGraph.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.DependencyGraph.newBuilder();
if (hasBasicDependencies()) {
subBuilder.mergeFrom(getBasicDependencies());
}
input.readMessage(subBuilder,extensionRegistry);
setBasicDependencies(subBuilder.buildPartial());
break;
}
case 74:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.DependencyGraph.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.DependencyGraph.newBuilder();
if (hasCollapsedDependencies()) {
subBuilder.mergeFrom(getCollapsedDependencies());
}
input.readMessage(subBuilder,extensionRegistry);
setCollapsedDependencies(subBuilder.buildPartial());
break;
}
case 82:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.DependencyGraph.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.DependencyGraph.newBuilder();
if (hasCollapsedCCProcessedDependencies()) {
subBuilder.mergeFrom(getCollapsedCCProcessedDependencies());
}
input.readMessage(subBuilder,extensionRegistry);
setCollapsedCCProcessedDependencies(subBuilder.buildPartial());
break;
}
case 88:
{
bitField0_|=0x00002000;
paragraph_=input.readUInt32();
break;
}
case 98:
{
bitField0_|=0x00004000;
text_=input.readBytes();
break;
}
case 250:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.ParseTree.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.ParseTree.newBuilder();
if (hasBinarizedParseTree()) {
subBuilder.mergeFrom(getBinarizedParseTree());
}
input.readMessage(subBuilder,extensionRegistry);
setBinarizedParseTree(subBuilder.buildPartial());
break;
}
case 258:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.ParseTree.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.ParseTree.newBuilder();
if (hasAnnotatedParseTree()) {
subBuilder.mergeFrom(getAnnotatedParseTree());
}
input.readMessage(subBuilder,extensionRegistry);
setAnnotatedParseTree(subBuilder.buildPartial());
break;
}
case 266:
{
bitField0_|=0x00000200;
sentiment_=input.readBytes();
break;
}
case 408:
{
bitField0_|=0x00008000;
hasRelationAnnotations_=input.readBool();
break;
}
case 418:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.Entity.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.Entity.newBuilder();
input.readMessage(subBuilder,extensionRegistry);
addEntity(subBuilder.buildPartial());
break;
}
case 426:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.Relation.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.Relation.newBuilder();
input.readMessage(subBuilder,extensionRegistry);
addRelation(subBuilder.buildPartial());
break;
}
case 432:
{
bitField0_|=0x00040000;
hasNumerizedTokensAnnotation_=input.readBool();
break;
}
}
}
}
