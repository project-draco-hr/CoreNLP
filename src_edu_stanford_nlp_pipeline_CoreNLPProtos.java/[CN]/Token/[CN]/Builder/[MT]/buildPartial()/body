{
  edu.stanford.nlp.pipeline.CoreNLPProtos.Token result=new edu.stanford.nlp.pipeline.CoreNLPProtos.Token(this);
  int from_bitField0_=bitField0_;
  int to_bitField0_=0;
  if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
    to_bitField0_|=0x00000001;
  }
  result.word_=word_;
  if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
    to_bitField0_|=0x00000002;
  }
  result.pos_=pos_;
  if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
    to_bitField0_|=0x00000004;
  }
  result.value_=value_;
  if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
    to_bitField0_|=0x00000008;
  }
  result.category_=category_;
  if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
    to_bitField0_|=0x00000010;
  }
  result.before_=before_;
  if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
    to_bitField0_|=0x00000020;
  }
  result.after_=after_;
  if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
    to_bitField0_|=0x00000040;
  }
  result.originalText_=originalText_;
  if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
    to_bitField0_|=0x00000080;
  }
  result.ner_=ner_;
  if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
    to_bitField0_|=0x00000100;
  }
  result.normalizedNER_=normalizedNER_;
  if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
    to_bitField0_|=0x00000200;
  }
  result.lemma_=lemma_;
  if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
    to_bitField0_|=0x00000400;
  }
  result.beginChar_=beginChar_;
  if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
    to_bitField0_|=0x00000800;
  }
  result.endChar_=endChar_;
  if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
    to_bitField0_|=0x00001000;
  }
  result.utterance_=utterance_;
  if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
    to_bitField0_|=0x00002000;
  }
  result.speaker_=speaker_;
  if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
    to_bitField0_|=0x00004000;
  }
  result.beginIndex_=beginIndex_;
  if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
    to_bitField0_|=0x00008000;
  }
  result.endIndex_=endIndex_;
  if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
    to_bitField0_|=0x00010000;
  }
  result.tokenBeginIndex_=tokenBeginIndex_;
  if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
    to_bitField0_|=0x00020000;
  }
  result.tokenEndIndex_=tokenEndIndex_;
  if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
    to_bitField0_|=0x00040000;
  }
  if (timexValueBuilder_ == null) {
    result.timexValue_=timexValue_;
  }
 else {
    result.timexValue_=timexValueBuilder_.build();
  }
  if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
    to_bitField0_|=0x00080000;
  }
  result.hasXmlContext_=hasXmlContext_;
  if (((bitField0_ & 0x00100000) == 0x00100000)) {
    xmlContext_=new com.google.protobuf.UnmodifiableLazyStringList(xmlContext_);
    bitField0_=(bitField0_ & ~0x00100000);
  }
  result.xmlContext_=xmlContext_;
  if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
    to_bitField0_|=0x00100000;
  }
  result.corefClusterID_=corefClusterID_;
  if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
    to_bitField0_|=0x00200000;
  }
  result.answer_=answer_;
  if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
    to_bitField0_|=0x00400000;
  }
  result.headWordIndex_=headWordIndex_;
  if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
    to_bitField0_|=0x00800000;
  }
  if (operatorBuilder_ == null) {
    result.operator_=operator_;
  }
 else {
    result.operator_=operatorBuilder_.build();
  }
  if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
    to_bitField0_|=0x01000000;
  }
  if (polarityBuilder_ == null) {
    result.polarity_=polarity_;
  }
 else {
    result.polarity_=polarityBuilder_.build();
  }
  if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
    to_bitField0_|=0x02000000;
  }
  result.gender_=gender_;
  if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
    to_bitField0_|=0x04000000;
  }
  result.trueCase_=trueCase_;
  if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
    to_bitField0_|=0x08000000;
  }
  result.trueCaseText_=trueCaseText_;
  result.bitField0_=to_bitField0_;
  onBuilt();
  return result;
}
