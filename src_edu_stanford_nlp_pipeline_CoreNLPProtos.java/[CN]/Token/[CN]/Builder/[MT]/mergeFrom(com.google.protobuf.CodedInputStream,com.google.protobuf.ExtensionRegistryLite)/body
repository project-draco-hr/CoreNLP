{
  com.google.protobuf.UnknownFieldSet.Builder unknownFields=com.google.protobuf.UnknownFieldSet.newBuilder(this.getUnknownFields());
  while (true) {
    int tag=input.readTag();
switch (tag) {
case 0:
      this.setUnknownFields(unknownFields.build());
    onChanged();
  return this;
default :
{
  if (!parseUnknownField(input,unknownFields,extensionRegistry,tag)) {
    this.setUnknownFields(unknownFields.build());
    onChanged();
    return this;
  }
  break;
}
case 10:
{
bitField0_|=0x00000001;
word_=input.readBytes();
break;
}
case 18:
{
bitField0_|=0x00000002;
pos_=input.readBytes();
break;
}
case 26:
{
bitField0_|=0x00000004;
value_=input.readBytes();
break;
}
case 34:
{
bitField0_|=0x00000008;
category_=input.readBytes();
break;
}
case 42:
{
bitField0_|=0x00000010;
before_=input.readBytes();
break;
}
case 50:
{
bitField0_|=0x00000020;
after_=input.readBytes();
break;
}
case 58:
{
bitField0_|=0x00000040;
originalText_=input.readBytes();
break;
}
case 66:
{
bitField0_|=0x00000080;
ner_=input.readBytes();
break;
}
case 74:
{
bitField0_|=0x00000100;
normalizedNER_=input.readBytes();
break;
}
case 82:
{
bitField0_|=0x00000200;
lemma_=input.readBytes();
break;
}
case 88:
{
bitField0_|=0x00000400;
beginChar_=input.readUInt32();
break;
}
case 96:
{
bitField0_|=0x00000800;
endChar_=input.readUInt32();
break;
}
case 104:
{
bitField0_|=0x00001000;
utterance_=input.readUInt32();
break;
}
case 114:
{
bitField0_|=0x00002000;
speaker_=input.readBytes();
break;
}
case 120:
{
bitField0_|=0x00004000;
beginIndex_=input.readUInt32();
break;
}
case 128:
{
bitField0_|=0x00008000;
endIndex_=input.readUInt32();
break;
}
case 136:
{
bitField0_|=0x00010000;
tokenBeginIndex_=input.readUInt32();
break;
}
case 144:
{
bitField0_|=0x00020000;
tokenEndIndex_=input.readUInt32();
break;
}
case 154:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.Timex.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.Timex.newBuilder();
if (hasTimexValue()) {
subBuilder.mergeFrom(getTimexValue());
}
input.readMessage(subBuilder,extensionRegistry);
setTimexValue(subBuilder.buildPartial());
break;
}
case 168:
{
bitField0_|=0x00080000;
hasXmlContext_=input.readBool();
break;
}
case 178:
{
ensureXmlContextIsMutable();
xmlContext_.add(input.readBytes());
break;
}
case 184:
{
bitField0_|=0x00200000;
corefClusterID_=input.readUInt32();
break;
}
case 194:
{
bitField0_|=0x00400000;
answer_=input.readBytes();
break;
}
case 208:
{
bitField0_|=0x00800000;
headWordIndex_=input.readUInt32();
break;
}
case 218:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.Operator.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.Operator.newBuilder();
if (hasOperator()) {
subBuilder.mergeFrom(getOperator());
}
input.readMessage(subBuilder,extensionRegistry);
setOperator(subBuilder.buildPartial());
break;
}
case 226:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.Polarity.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.Polarity.newBuilder();
if (hasPolarity()) {
subBuilder.mergeFrom(getPolarity());
}
input.readMessage(subBuilder,extensionRegistry);
setPolarity(subBuilder.buildPartial());
break;
}
case 234:
{
edu.stanford.nlp.pipeline.CoreNLPProtos.Span.Builder subBuilder=edu.stanford.nlp.pipeline.CoreNLPProtos.Span.newBuilder();
if (hasSpan()) {
subBuilder.mergeFrom(getSpan());
}
input.readMessage(subBuilder,extensionRegistry);
setSpan(subBuilder.buildPartial());
break;
}
case 242:
{
bitField0_|=0x08000000;
sentiment_=input.readBytes();
break;
}
case 410:
{
bitField0_|=0x10000000;
gender_=input.readBytes();
break;
}
case 418:
{
bitField0_|=0x20000000;
trueCase_=input.readBytes();
break;
}
case 426:
{
bitField0_|=0x40000000;
trueCaseText_=input.readBytes();
break;
}
}
}
}
