{
  if (other == edu.stanford.nlp.pipeline.CoreNLPProtos.Token.getDefaultInstance())   return this;
  if (other.hasWord()) {
    bitField0_|=0x00000001;
    word_=other.word_;
    onChanged();
  }
  if (other.hasPos()) {
    bitField0_|=0x00000002;
    pos_=other.pos_;
    onChanged();
  }
  if (other.hasValue()) {
    bitField0_|=0x00000004;
    value_=other.value_;
    onChanged();
  }
  if (other.hasCategory()) {
    bitField0_|=0x00000008;
    category_=other.category_;
    onChanged();
  }
  if (other.hasBefore()) {
    bitField0_|=0x00000010;
    before_=other.before_;
    onChanged();
  }
  if (other.hasAfter()) {
    bitField0_|=0x00000020;
    after_=other.after_;
    onChanged();
  }
  if (other.hasOriginalText()) {
    bitField0_|=0x00000040;
    originalText_=other.originalText_;
    onChanged();
  }
  if (other.hasNer()) {
    bitField0_|=0x00000080;
    ner_=other.ner_;
    onChanged();
  }
  if (other.hasNormalizedNER()) {
    bitField0_|=0x00000100;
    normalizedNER_=other.normalizedNER_;
    onChanged();
  }
  if (other.hasLemma()) {
    bitField0_|=0x00000200;
    lemma_=other.lemma_;
    onChanged();
  }
  if (other.hasBeginChar()) {
    setBeginChar(other.getBeginChar());
  }
  if (other.hasEndChar()) {
    setEndChar(other.getEndChar());
  }
  if (other.hasUtterance()) {
    setUtterance(other.getUtterance());
  }
  if (other.hasSpeaker()) {
    bitField0_|=0x00002000;
    speaker_=other.speaker_;
    onChanged();
  }
  if (other.hasBeginIndex()) {
    setBeginIndex(other.getBeginIndex());
  }
  if (other.hasEndIndex()) {
    setEndIndex(other.getEndIndex());
  }
  if (other.hasTokenBeginIndex()) {
    setTokenBeginIndex(other.getTokenBeginIndex());
  }
  if (other.hasTokenEndIndex()) {
    setTokenEndIndex(other.getTokenEndIndex());
  }
  if (other.hasTimexValue()) {
    mergeTimexValue(other.getTimexValue());
  }
  if (other.hasHasXmlContext()) {
    setHasXmlContext(other.getHasXmlContext());
  }
  if (!other.xmlContext_.isEmpty()) {
    if (xmlContext_.isEmpty()) {
      xmlContext_=other.xmlContext_;
      bitField0_=(bitField0_ & ~0x00100000);
    }
 else {
      ensureXmlContextIsMutable();
      xmlContext_.addAll(other.xmlContext_);
    }
    onChanged();
  }
  if (other.hasCorefClusterID()) {
    setCorefClusterID(other.getCorefClusterID());
  }
  if (other.hasAnswer()) {
    bitField0_|=0x00400000;
    answer_=other.answer_;
    onChanged();
  }
  if (other.hasHeadWordIndex()) {
    setHeadWordIndex(other.getHeadWordIndex());
  }
  if (other.hasOperator()) {
    mergeOperator(other.getOperator());
  }
  if (other.hasPolarity()) {
    mergePolarity(other.getPolarity());
  }
  if (other.hasSpan()) {
    mergeSpan(other.getSpan());
  }
  if (other.hasSentiment()) {
    bitField0_|=0x08000000;
    sentiment_=other.sentiment_;
    onChanged();
  }
  if (other.hasQuotationIndex()) {
    setQuotationIndex(other.getQuotationIndex());
  }
  if (other.hasConllUFeatures()) {
    mergeConllUFeatures(other.getConllUFeatures());
  }
  if (other.hasCoarseTag()) {
    bitField0_|=0x40000000;
    coarseTag_=other.coarseTag_;
    onChanged();
  }
  if (other.hasConllUTokenSpan()) {
    mergeConllUTokenSpan(other.getConllUTokenSpan());
  }
  if (other.hasConllUMisc()) {
    bitField1_|=0x00000001;
    conllUMisc_=other.conllUMisc_;
    onChanged();
  }
  if (other.hasConllUSecondaryDeps()) {
    mergeConllUSecondaryDeps(other.getConllUSecondaryDeps());
  }
  if (other.hasGender()) {
    bitField1_|=0x00000004;
    gender_=other.gender_;
    onChanged();
  }
  if (other.hasTrueCase()) {
    bitField1_|=0x00000008;
    trueCase_=other.trueCase_;
    onChanged();
  }
  if (other.hasTrueCaseText()) {
    bitField1_|=0x00000010;
    trueCaseText_=other.trueCaseText_;
    onChanged();
  }
  this.mergeExtensionFields(other);
  this.mergeUnknownFields(other.unknownFields);
  onChanged();
  return this;
}
