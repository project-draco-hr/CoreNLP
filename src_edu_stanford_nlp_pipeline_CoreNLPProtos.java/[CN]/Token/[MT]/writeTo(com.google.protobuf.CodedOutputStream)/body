{
  getSerializedSize();
  com.google.protobuf.GeneratedMessage.ExtendableMessage<edu.stanford.nlp.pipeline.CoreNLPProtos.Token>.ExtensionWriter extensionWriter=newExtensionWriter();
  if (((bitField0_ & 0x00000001) == 0x00000001)) {
    output.writeBytes(1,getWordBytes());
  }
  if (((bitField0_ & 0x00000002) == 0x00000002)) {
    output.writeBytes(2,getPosBytes());
  }
  if (((bitField0_ & 0x00000004) == 0x00000004)) {
    output.writeBytes(3,getValueBytes());
  }
  if (((bitField0_ & 0x00000008) == 0x00000008)) {
    output.writeBytes(4,getCategoryBytes());
  }
  if (((bitField0_ & 0x00000010) == 0x00000010)) {
    output.writeBytes(5,getBeforeBytes());
  }
  if (((bitField0_ & 0x00000020) == 0x00000020)) {
    output.writeBytes(6,getAfterBytes());
  }
  if (((bitField0_ & 0x00000040) == 0x00000040)) {
    output.writeBytes(7,getOriginalTextBytes());
  }
  if (((bitField0_ & 0x00000080) == 0x00000080)) {
    output.writeBytes(8,getNerBytes());
  }
  if (((bitField0_ & 0x00000100) == 0x00000100)) {
    output.writeBytes(9,getNormalizedNERBytes());
  }
  if (((bitField0_ & 0x00000200) == 0x00000200)) {
    output.writeBytes(10,getLemmaBytes());
  }
  if (((bitField0_ & 0x00000400) == 0x00000400)) {
    output.writeUInt32(11,beginChar_);
  }
  if (((bitField0_ & 0x00000800) == 0x00000800)) {
    output.writeUInt32(12,endChar_);
  }
  if (((bitField0_ & 0x00001000) == 0x00001000)) {
    output.writeUInt32(13,utterance_);
  }
  if (((bitField0_ & 0x00002000) == 0x00002000)) {
    output.writeBytes(14,getSpeakerBytes());
  }
  if (((bitField0_ & 0x00004000) == 0x00004000)) {
    output.writeUInt32(15,beginIndex_);
  }
  if (((bitField0_ & 0x00008000) == 0x00008000)) {
    output.writeUInt32(16,endIndex_);
  }
  if (((bitField0_ & 0x00010000) == 0x00010000)) {
    output.writeUInt32(17,tokenBeginIndex_);
  }
  if (((bitField0_ & 0x00020000) == 0x00020000)) {
    output.writeUInt32(18,tokenEndIndex_);
  }
  if (((bitField0_ & 0x00040000) == 0x00040000)) {
    output.writeMessage(19,timexValue_);
  }
  if (((bitField0_ & 0x00080000) == 0x00080000)) {
    output.writeBool(21,hasXmlContext_);
  }
  for (int i=0; i < xmlContext_.size(); i++) {
    output.writeBytes(22,xmlContext_.getByteString(i));
  }
  if (((bitField0_ & 0x00100000) == 0x00100000)) {
    output.writeUInt32(23,corefClusterID_);
  }
  if (((bitField0_ & 0x00200000) == 0x00200000)) {
    output.writeBytes(24,getAnswerBytes());
  }
  if (((bitField0_ & 0x00400000) == 0x00400000)) {
    output.writeUInt32(26,headWordIndex_);
  }
  if (((bitField0_ & 0x00800000) == 0x00800000)) {
    output.writeMessage(27,operator_);
  }
  if (((bitField0_ & 0x01000000) == 0x01000000)) {
    output.writeMessage(28,polarity_);
  }
  if (((bitField0_ & 0x02000000) == 0x02000000)) {
    output.writeMessage(29,span_);
  }
  if (((bitField0_ & 0x04000000) == 0x04000000)) {
    output.writeBytes(30,getSentimentBytes());
  }
  if (((bitField0_ & 0x08000000) == 0x08000000)) {
    output.writeInt32(31,quotationIndex_);
  }
  if (((bitField0_ & 0x10000000) == 0x10000000)) {
    output.writeMessage(32,conllUFeatures_);
  }
  if (((bitField0_ & 0x20000000) == 0x20000000)) {
    output.writeBytes(33,getCoarseTagBytes());
  }
  if (((bitField0_ & 0x40000000) == 0x40000000)) {
    output.writeMessage(34,conllUTokenSpan_);
  }
  if (((bitField0_ & 0x80000000) == 0x80000000)) {
    output.writeBytes(35,getConllUMiscBytes());
  }
  if (((bitField1_ & 0x00000001) == 0x00000001)) {
    output.writeMessage(36,conllUSecondaryDeps_);
  }
  if (((bitField1_ & 0x00000002) == 0x00000002)) {
    output.writeBytes(37,getWikipediaEntityBytes());
  }
  if (((bitField1_ & 0x00000004) == 0x00000004)) {
    output.writeBytes(38,getHeadWordLabelBytes());
  }
  if (((bitField1_ & 0x00000008) == 0x00000008)) {
    output.writeBytes(51,getGenderBytes());
  }
  if (((bitField1_ & 0x00000010) == 0x00000010)) {
    output.writeBytes(52,getTrueCaseBytes());
  }
  if (((bitField1_ & 0x00000020) == 0x00000020)) {
    output.writeBytes(53,getTrueCaseTextBytes());
  }
  extensionWriter.writeUntil(256,output);
  getUnknownFields().writeTo(output);
}
