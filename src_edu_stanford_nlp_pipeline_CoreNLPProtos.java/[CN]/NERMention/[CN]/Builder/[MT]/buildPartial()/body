{
  edu.stanford.nlp.pipeline.CoreNLPProtos.NERMention result=new edu.stanford.nlp.pipeline.CoreNLPProtos.NERMention(this);
  int from_bitField0_=bitField0_;
  int to_bitField0_=0;
  if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
    to_bitField0_|=0x00000001;
  }
  result.sentenceIndex_=sentenceIndex_;
  if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
    to_bitField0_|=0x00000002;
  }
  result.tokenStartInSentenceInclusive_=tokenStartInSentenceInclusive_;
  if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
    to_bitField0_|=0x00000004;
  }
  result.tokenEndInSentenceExclusive_=tokenEndInSentenceExclusive_;
  if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
    to_bitField0_|=0x00000008;
  }
  result.ner_=ner_;
  if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
    to_bitField0_|=0x00000010;
  }
  result.normalizedNER_=normalizedNER_;
  if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
    to_bitField0_|=0x00000020;
  }
  result.entityType_=entityType_;
  if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
    to_bitField0_|=0x00000040;
  }
  if (timexBuilder_ == null) {
    result.timex_=timex_;
  }
 else {
    result.timex_=timexBuilder_.build();
  }
  result.bitField0_=to_bitField0_;
  onBuilt();
  return result;
}
