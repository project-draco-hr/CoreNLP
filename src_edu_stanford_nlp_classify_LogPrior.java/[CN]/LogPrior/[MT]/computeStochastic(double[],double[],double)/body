{
  if (type == LogPriorType.ADAPT) {
    double[] newX=ArrayMath.pairwiseSubtract(x,means);
    return otherPrior.computeStochastic(newX,grad,fractionOfData);
  }
 else   if (type == LogPriorType.MULTIPLE_QUADRATIC) {
    double[] sigmaSquaredOld=getSigmaSquaredM();
    double[] sigmaSquaredTemp=sigmaSquaredOld.clone();
    for (int i=0; i < x.length; i++) {
      sigmaSquaredTemp[i]/=fractionOfData;
    }
    setSigmaSquaredM(sigmaSquaredTemp);
    double val=compute(x,grad);
    setSigmaSquaredM(sigmaSquaredOld);
    return val;
  }
 else {
    double sigmaSquaredOld=getSigmaSquared();
    setSigmaSquared(sigmaSquaredOld / fractionOfData);
    double val=compute(x,grad);
    setSigmaSquared(sigmaSquaredOld);
    return val;
  }
}
