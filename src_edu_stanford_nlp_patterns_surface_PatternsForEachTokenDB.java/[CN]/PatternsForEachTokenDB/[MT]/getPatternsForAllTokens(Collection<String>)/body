{
  try {
    Map<String,Map<Integer,Set<Integer>>> pats=new HashMap<String,Map<Integer,Set<Integer>>>();
    Connection conn=SQLConnection.getConnection();
    Iterator<String> iter=sampledSentIds.iterator();
    int totalNumberOfValuesLeftToBatch=sampledSentIds.size();
    while (totalNumberOfValuesLeftToBatch > 0) {
      int batchSize=SINGLE_BATCH;
      if (totalNumberOfValuesLeftToBatch >= LARGE_BATCH) {
        batchSize=LARGE_BATCH;
      }
 else       if (totalNumberOfValuesLeftToBatch >= MEDIUM_BATCH) {
        batchSize=MEDIUM_BATCH;
      }
 else       if (totalNumberOfValuesLeftToBatch >= SMALL_BATCH) {
        batchSize=SMALL_BATCH;
      }
      totalNumberOfValuesLeftToBatch-=batchSize;
      StringBuilder inClause=new StringBuilder();
      for (int i=0; i < batchSize; i++) {
        inClause.append('?');
        if (i != batchSize - 1) {
          inClause.append(',');
        }
      }
      PreparedStatement stmt=conn.prepareStatement("select sentid, patterns from " + tableName + " where sentid in ("+ inClause.toString()+ ")");
      for (int i=0; i < batchSize && iter.hasNext(); i++) {
        stmt.setString(i + 1,iter.next());
      }
      stmt.execute();
      ResultSet rs=stmt.getResultSet();
      while (rs.next()) {
        String sentid=rs.getString(1);
        byte[] st=(byte[])rs.getObject(2);
        ByteArrayInputStream baip=new ByteArrayInputStream(st);
        ObjectInputStream ois=new ObjectInputStream(baip);
        pats.put(sentid,(Map<Integer,Set<Integer>>)ois.readObject());
      }
    }
    conn.close();
    return pats;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
