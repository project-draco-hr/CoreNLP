{
  String dvmodelFile=null;
  String lexparserFile=null;
  String testTreebankPath=null;
  FileFilter testTreebankFilter=null;
  List<String> unusedArgs=new ArrayList<>();
  for (int argIndex=0; argIndex < args.length; ) {
    if (args[argIndex].equalsIgnoreCase("-lexparser")) {
      lexparserFile=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-testTreebank")) {
      Pair<String,FileFilter> treebankDescription=ArgUtils.getTreebankDescription(args,argIndex,"-testTreebank");
      argIndex=argIndex + ArgUtils.numSubArgs(args,argIndex) + 1;
      testTreebankPath=treebankDescription.first();
      testTreebankFilter=treebankDescription.second();
    }
 else {
      unusedArgs.add(args[argIndex++]);
    }
  }
  log.info("Loading lexparser from: " + lexparserFile);
  String[] newArgs=unusedArgs.toArray(new String[unusedArgs.size()]);
  LexicalizedParser lexparser=LexicalizedParser.loadModel(lexparserFile,newArgs);
  log.info("... done");
  Treebank testTreebank=null;
  if (testTreebankPath != null) {
    log.info("Reading in trees from " + testTreebankPath);
    if (testTreebankFilter != null) {
      log.info("Filtering on " + testTreebankFilter);
    }
    testTreebank=lexparser.getOp().tlpParams.memoryTreebank();
    ;
    testTreebank.loadPath(testTreebankPath,testTreebankFilter);
    log.info("Read in " + testTreebank.size() + " trees for testing");
  }
  double[] labelResults=new double[weights.length];
  double[] tagResults=new double[weights.length];
  for (int i=0; i < weights.length; ++i) {
    lexparser.getOp().baseParserWeight=weights[i];
    EvaluateTreebank evaluator=new EvaluateTreebank(lexparser);
    evaluator.testOnTreebank(testTreebank);
    labelResults[i]=evaluator.getLBScore();
    tagResults[i]=evaluator.getTagScore();
  }
  for (int i=0; i < weights.length; ++i) {
    log.info("LexicalizedParser weight " + weights[i] + ": labeled "+ labelResults[i]+ " tag "+ tagResults[i]);
  }
}
