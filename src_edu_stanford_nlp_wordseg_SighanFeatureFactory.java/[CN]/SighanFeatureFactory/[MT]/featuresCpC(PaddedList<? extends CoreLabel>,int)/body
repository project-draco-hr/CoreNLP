{
  Collection<String> features=new ArrayList<String>();
  CoreLabel c=cInfo.get(loc);
  CoreLabel c1=cInfo.get(loc + 1);
  CoreLabel c2=cInfo.get(loc + 2);
  CoreLabel c3=cInfo.get(loc + 3);
  CoreLabel p=cInfo.get(loc - 1);
  CoreLabel p2=cInfo.get(loc - 2);
  CoreLabel p3=cInfo.get(loc - 3);
  String charc=c.get(CharAnnotation.class);
  String charc1=c1.get(CharAnnotation.class);
  String charc2=c2.get(CharAnnotation.class);
  String charc3=c3.get(CharAnnotation.class);
  String charp=p.get(CharAnnotation.class);
  String charp2=p2.get(CharAnnotation.class);
  String charp3=p3.get(CharAnnotation.class);
  if (flags.useWord2) {
    features.add(charc + "c");
    features.add(charc1 + "c1");
    features.add(charp + "p");
    features.add(charp + charc + "pc");
    if (flags.useMsr) {
      features.add(charc + charc1 + "cc1");
      features.add(charp + charc1 + "pc1");
    }
    features.add("|word2");
  }
  char rcharc, rcharc1, rcharc2, rcharc3, rcharp, rcharp1, rcharp2, rcharp3;
  if (charc.length() == 0) {
    rcharc='n';
  }
 else {
    rcharc=RadicalMap.getRadical(charc.charAt(0));
  }
  if (charc1.length() == 0) {
    rcharc1='n';
  }
 else {
    rcharc1=RadicalMap.getRadical(charc1.charAt(0));
  }
  if (charc2.length() == 0) {
    rcharc2='n';
  }
 else {
    rcharc2=RadicalMap.getRadical(charc2.charAt(0));
  }
  if (charc3.length() == 0) {
    rcharc3='n';
  }
 else {
    rcharc3=RadicalMap.getRadical(charc3.charAt(0));
  }
  if (charp.length() == 0) {
    rcharp='n';
  }
 else {
    rcharp=RadicalMap.getRadical(charp.charAt(0));
  }
  if (charp2.length() == 0) {
    rcharp2='n';
  }
 else {
    rcharp2=RadicalMap.getRadical(charp2.charAt(0));
  }
  if (charp3.length() == 0) {
    rcharp3='n';
  }
 else {
    rcharp3=RadicalMap.getRadical(charp3.charAt(0));
  }
  if (flags.useRad2) {
    features.add(rcharc + "rc");
    features.add(rcharc1 + "rc1");
    features.add(rcharp + "rp");
    features.add(rcharp + rcharc + "rpc");
    features.add(rcharc + rcharc1 + "rcc1");
    features.add(rcharp + rcharc + rcharc1+ "rpcc1");
    features.add("|rad2");
  }
  if (flags.useDict2) {
    NonDict nd=new NonDict(flags.sighanCorporaDict);
    features.add(nd.checkDic(charp + charc,flags) + "nondict");
    features.add("|useDict2");
  }
  if (flags.useCTBChar2) {
    String[] tagsets=new String[]{"2","3","4"};
    if (ctbDetector == null) {
      ctbDetector=new CtbDetector(flags.sighanCorporaDict);
    }
    for (int k=0; k < tagsets.length; k++) {
      features.add(ctbDetector.checkDic(tagsets[k] + "p",charp) + ctbDetector.checkDic(tagsets[k] + "i",charp) + ctbDetector.checkDic(tagsets[k] + "s",charc)+ ctbDetector.checkInDic(charp)+ ctbDetector.checkInDic(charc)+ tagsets[k]+ "prep-sufc");
    }
    features.add("|ctbchar2");
  }
  if (flags.useASBCChar2) {
    String[] tagsets=new String[]{"2","3","4"};
    if (asbcDetector == null) {
      asbcDetector=new AsbcDetector(flags.sighanCorporaDict);
    }
    for (int k=0; k < tagsets.length; k++) {
      features.add(asbcDetector.checkDic(tagsets[k] + "p",charp) + asbcDetector.checkDic(tagsets[k] + "i",charp) + asbcDetector.checkDic(tagsets[k] + "s",charc)+ asbcDetector.checkInDic(charp)+ asbcDetector.checkInDic(charc)+ tagsets[k]+ "prep-sufc");
    }
    features.add("|asbcchar2");
  }
  if (flags.useHKChar2) {
    String[] tagsets=new String[]{"2","3","4"};
    if (hkDetector == null) {
      hkDetector=new HkDetector(flags.sighanCorporaDict);
    }
    for (int k=0; k < tagsets.length; k++) {
      features.add(hkDetector.checkDic(tagsets[k] + "p",charp) + hkDetector.checkDic(tagsets[k] + "i",charp) + hkDetector.checkDic(tagsets[k] + "s",charc)+ hkDetector.checkInDic(charp)+ hkDetector.checkInDic(charc)+ tagsets[k]+ "prep-sufc");
    }
    features.add("|hkchar2");
  }
  if (flags.usePKChar2) {
    String[] tagsets=new String[]{"2","3","4"};
    if (pkDetector == null) {
      pkDetector=new PkDetector(flags.sighanCorporaDict);
    }
    for (int k=0; k < tagsets.length; k++) {
      features.add(pkDetector.checkDic(tagsets[k] + "p",charp) + pkDetector.checkDic(tagsets[k] + "i",charp) + pkDetector.checkDic(tagsets[k] + "s",charc)+ pkDetector.checkInDic(charp)+ pkDetector.checkInDic(charc)+ tagsets[k]+ "prep-sufc");
    }
    features.add("|pkchar2");
  }
  if (flags.useMSRChar2) {
    String[] tagsets=new String[]{"2","3","4"};
    if (msrDetector == null) {
      msrDetector=new MsrDetector(flags.sighanCorporaDict);
    }
    for (int k=0; k < tagsets.length; k++) {
      features.add(msrDetector.checkDic(tagsets[k] + "p",charp) + msrDetector.checkDic(tagsets[k] + "i",charp) + msrDetector.checkDic(tagsets[k] + "s",charc)+ msrDetector.checkInDic(charp)+ msrDetector.checkInDic(charc)+ tagsets[k]+ "prep-sufc");
    }
    features.add("|msrchar2");
  }
  if (flags.useRule2) {
    if (charp.equals(charc)) {
      features.add("11");
    }
    if (charp.equals(charc1)) {
      features.add("22");
    }
    if (flags.usePk || flags.useHk) {
    }
 else {
      if (charc.equals(charc2)) {
        features.add("33");
      }
    }
    if (charc.length() == 1 && charp.length() == 1 && charc1.length() == 1 && charc2.length() == 1) {
      char cur1=charc1.charAt(0);
      char cur2=charc2.charAt(0);
      char cur=charc.charAt(0);
      char pre=charp.charAt(0);
      String prer="" + rcharp;
      Pattern E=Pattern.compile("[a-zA-Z]");
      Pattern N=Pattern.compile("[0-9]");
      Matcher m=E.matcher(charp);
      Matcher ce=E.matcher(charc);
      Matcher pe=E.matcher(charp2);
      Matcher cn=N.matcher(charc);
      Matcher pn=N.matcher(charp2);
      if (cur >= '0' && cur <= '9' && pre >= '0' && pre <= '9') {
        if (cur == '9' && pre == '1' && cur1 == '9' && cur2 >= '0' && cur2 <= '9') {
          features.add("YR");
        }
 else {
          features.add("2N");
        }
      }
 else       if (pre >= '0' && pre <= '9') {
        features.add("1N");
      }
 else       if (m.matches()) {
        features.add("E");
      }
 else       if (prer.equals(".")) {
        if (flags.useHk || flags.usePk) {
        }
 else {
          if (ce.matches()) {
            features.add("PU+E");
          }
          if (pe.matches()) {
            features.add("E+PU");
          }
          if (cn.matches()) {
            features.add("PU+N");
          }
          if (pn.matches()) {
            features.add("N+PU");
          }
        }
        features.add("PU");
      }
      if (isEnglish(charp,charc).equals("")) {
      }
 else {
        features.add(isEnglish(charp,charc));
      }
      if (isEngPU(charp).equals("") || isEnglish(charp,charc).equals("")) {
      }
 else {
        features.add(isEngPU(charp) + isEnglish(charp,charc));
      }
    }
  }
  if (flags.useOccurrencePatterns) {
    Pattern NUM=Pattern.compile("[\ufeff0-9\u4e00\u4e8c\u4e09\u56db\u4e94\u516d\u4e03\u516b\u4e5d\uff2f\u96f6\u5341\u767e\u5343\u842c\u5104\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19\uff10\u4e07\u4ebf]");
    Matcher P=NUM.matcher(charp);
    Matcher P2=NUM.matcher(charp2);
    Matcher P3=NUM.matcher(charp3);
    Pattern CL;
    if (flags.useAs) {
      CL=Pattern.compile("[\u5e74\uff05\uff09\u591a\u865f\u9918\u5206\u65e5\u73ed\u4e16\u9ede\u6708\u5df7\u8def\u6642\u5146\u5e7e\u6210\u89d2\u5b57\u91cd\u6a13]");
    }
 else     if (flags.useHk) {
      CL=Pattern.compile("[\u25cb\u5e74\u6708\u9023\u5f37\u89d2\u5206\u5927\u5b57\u9f8d\u9ede\u4eba\u661f\u4e16\u624b\u5146\u58d8\u6642\u88e1]");
    }
 else     if (flags.useMsr) {
      CL=Pattern.compile("[\u5143\u65e5\u591a\uff05\u5e74\u7f8e\u4e2a\u6708\u516c\u540d\u5206\u4f59\u5428\u7c73\u4ea9\u5bb6\u5c81\u6b21\u70b9\u79cd\u6761\u4ef6\u4f4d\u6237\u53f0\u9879\u53f7\u65f6\u5468\u5929]");
    }
 else     if (flags.usePk) {
      CL=Pattern.compile("[\uff05\u5e74\u65e5\uff0e\u6708\u65f6\u5206\u70b9\u578b\u5927\u53f7\u91cc\u7b49\u661f]");
    }
 else {
      CL=Pattern.compile("[\u5e74\u591a\u65e5\u6708\u4f59\u65f6\u6210\u5206]");
    }
    Matcher C=CL.matcher(charc);
    if (P.matches() && P2.matches() && P3.matches()&& C.matches()) {
      features.add("3P");
    }
    if (P.matches() && P2.matches() && C.matches()) {
      features.add("2P");
    }
    if (P.matches() && C.matches()) {
      features.add("1P");
    }
  }
  return features;
}
