{
  return new AnnotatorFactory(Annotator.STANFORD_NER,NERCombinerAnnotator.class,properties){
    private static final long serialVersionUID=1L;
    @Override public Annotator create(){
      try {
        return annotatorImplementation.ner(properties);
      }
 catch (      IOException e) {
        throw new RuntimeIOException(e);
      }
    }
    @Override public String additionalSignature(){
      boolean useSUTime=Boolean.parseBoolean(properties.getProperty(NumberSequenceClassifier.USE_SUTIME_PROPERTY,Boolean.toString(NumberSequenceClassifier.USE_SUTIME_DEFAULT)));
      String nerSig="";
      if (useSUTime) {
        String sutimeSig=PropertiesUtils.getSignature(NumberSequenceClassifier.SUTIME_PROPERTY,properties);
        if (!sutimeSig.isEmpty()) {
          nerSig=nerSig + sutimeSig;
        }
      }
      return nerSig;
    }
  }
;
}
