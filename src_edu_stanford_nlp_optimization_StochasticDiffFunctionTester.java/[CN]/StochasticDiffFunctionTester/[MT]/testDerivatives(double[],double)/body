{
  boolean ret=false;
  boolean compareHess=true;
  log.info("Making sure that the stochastic derivatives are ok.");
  AbstractStochasticCachingDiffFunction.SamplingMethod tmpSampleMethod=thisFunc.sampleMethod;
  StochasticCalculateMethods tmpMethod=thisFunc.method;
  thisFunc.sampleMethod=AbstractStochasticCachingDiffFunction.SamplingMethod.Ordered;
  if (thisFunc.method == StochasticCalculateMethods.NoneSpecified) {
    log.info("No calculate method has been specified");
  }
 else   if (!thisFunc.method.calculatesHessianVectorProduct()) {
    compareHess=false;
  }
  approxValue=0;
  approxGrad=new double[x.length];
  curGrad=new double[x.length];
  Hv=new double[x.length];
  double percent=0.0;
  for (int i=0; i < numBatches; i++) {
    percent=100 * ((double)i) / (numBatches);
    System.err.printf("%5.1f percent complete\n",percent);
    thisFunc.method=tmpMethod;
    System.arraycopy(thisFunc.HdotVAt(x,v,testBatchSize),0,Hv,0,Hv.length);
    thisFunc.method=StochasticCalculateMethods.ExternalFiniteDifference;
    System.arraycopy(thisFunc.derivativeAt(x,v,testBatchSize),0,gradFD,0,gradFD.length);
    thisFunc.recalculatePrevBatch=true;
    System.arraycopy(thisFunc.HdotVAt(x,v,gradFD,testBatchSize),0,HvFD,0,HvFD.length);
    double DiffHv=ArrayMath.norm_inf(ArrayMath.pairwiseSubtract(Hv,HvFD));
    if (DiffHv > maxHvDiff) {
      maxHvDiff=DiffHv;
    }
  }
  if (maxHvDiff < functionTolerance) {
    sayln("");
    sayln("Success: Hessian approximations lined up");
    ret=true;
  }
 else {
    sayln("");
    sayln("Failure: Hessian approximation at somepoint was off by " + maxHvDiff);
    ret=false;
  }
  thisFunc.sampleMethod=tmpSampleMethod;
  thisFunc.method=tmpMethod;
  return ret;
}
