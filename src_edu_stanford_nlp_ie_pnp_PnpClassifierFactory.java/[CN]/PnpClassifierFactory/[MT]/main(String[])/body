{
  int numFolds=1;
  double trainFraction=0.75;
  Random rand=new Random(0);
  PrintWriter out=new PrintWriter(System.err,true);
  if (args.length == 0) {
    System.err.println("Usage: java PnpClassifierFactory [ -p propertiesfile ] pnpfile+");
    System.err.println("Each pnpfile should have one pnp per line, category = filename");
    System.exit(0);
  }
  Properties props=null;
  BasicDataCollection data=new BasicDataCollection();
  for (int i=0; i < args.length; i++) {
    if (args[i].equals("-p")) {
      props=new Properties(PnpClassifier.getDefaultProperties());
      out.println("Reading pnp properties from " + args[i + 1]);
      props.load(new FileInputStream(args[i + 1]));
      i++;
      continue;
    }
    File file=new File(args[i]);
    String category=getName(file);
    out.print("Reading category " + category + "...");
    String[] examples=IOUtils.slurpFile(file).split("\\s*[\r\n]+\\s*");
    for (int j=0; j < examples.length; j++) {
      data.add(PnpClassifier.makeDatum(examples[j],category));
    }
    out.println("read " + examples.length + " examples");
  }
  out.println();
  if (props == null) {
    props=PnpClassifier.getDefaultProperties();
  }
  ClassifierFactory pnpcf=new PnpClassifierFactory(props);
  for (int i=1; i <= numFolds; i++) {
    out.println("Fold " + i + " of "+ numFolds);
    Collections.shuffle(data,rand);
    DataCollection[] splits=data.split(trainFraction);
    out.println("Training on " + splits[0].size() + " docs...");
    Classifier pnpc=pnpcf.trainClassifier(splits[0]);
    out.println("Testing on " + splits[1].size() + " docs...");
    ClassifiedDatum[] results=ClassifierTester.testClassifier(pnpc,splits[1]);
    ClassifierTester.printConfusionMatrix(results,out,8);
    out.println(ClassifierTester.perLabelAccuracy(results));
    out.println(StringUtils.join(ClassifierTester.incorrectResults(results),"\n"));
    out.println();
  }
}
