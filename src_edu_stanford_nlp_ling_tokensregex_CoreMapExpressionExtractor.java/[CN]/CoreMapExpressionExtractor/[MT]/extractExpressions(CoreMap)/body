{
  List<T> matchedExpressions=new ArrayList<>();
  List<Integer> stageIds=new ArrayList<>(stages.keySet());
  Collections.sort(stageIds);
  for (  int stageId : stageIds) {
    Stage<T> stage=stages.get(stageId);
    SequenceMatchRules.ExtractRule<CoreMap,T> basicExtractRule=stage.basicExtractRule;
    if (stage.clearMatched) {
      matchedExpressions.clear();
    }
    if (basicExtractRule != null) {
      basicExtractRule.extract(annotation,matchedExpressions);
      annotateExpressions(annotation,matchedExpressions);
      matchedExpressions=MatchedExpression.removeNullValues(matchedExpressions);
      matchedExpressions=MatchedExpression.removeNested(matchedExpressions);
      matchedExpressions=MatchedExpression.removeOverlapping(matchedExpressions);
    }
    List<? extends CoreMap> merged=MatchedExpression.replaceMergedUsingTokenOffsets((List<? extends CoreMap>)annotation.get(tokensAnnotationKey),matchedExpressions);
    SequenceMatchRules.ExtractRule<List<? extends CoreMap>,T> compositeExtractRule=stage.compositeExtractRule;
    if (compositeExtractRule != null) {
      Pair<List<? extends CoreMap>,List<T>> p=applyCompositeRule(compositeExtractRule,merged,matchedExpressions,stage.limitIters);
      merged=p.first();
      matchedExpressions=p.second();
    }
    matchedExpressions=filterInvalidExpressions(stage.filterRule,matchedExpressions);
  }
  Collections.sort(matchedExpressions,MatchedExpression.EXPR_TOKEN_OFFSETS_NESTED_FIRST_COMPARATOR);
  if (!keepTags) {
    cleanupTags(annotation);
  }
  return matchedExpressions;
}
