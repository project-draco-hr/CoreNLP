{
  boolean done=false;
  int maxIters=limit;
  int iters=0;
  while (!done) {
    List<T> newExprs=new ArrayList<>();
    boolean extracted=compositeExtractRule.extract(merged,newExprs);
    if (verbose && extracted)     log.info("applyCompositeRule() extracting with " + compositeExtractRule + " from "+ merged+ " gives "+ newExprs);
    if (extracted) {
      annotateExpressions(merged,newExprs);
      newExprs=MatchedExpression.removeNullValues(newExprs);
      if (!newExprs.isEmpty()) {
        newExprs=MatchedExpression.removeNested(newExprs);
        newExprs=MatchedExpression.removeOverlapping(newExprs);
        merged=MatchedExpression.replaceMerged(merged,newExprs);
        newExprs.addAll(matchedExpressions);
        matchedExpressions=MatchedExpression.removeNested(newExprs);
        matchedExpressions=MatchedExpression.removeOverlapping(matchedExpressions);
      }
 else {
        extracted=false;
      }
    }
    done=!extracted;
    iters++;
    if (maxIters > 0 && iters >= maxIters) {
      if (verbose) {
        log.warn("Aborting application of composite rules: Maximum iteration " + maxIters + " reached");
      }
      break;
    }
  }
  return new Pair<>(merged,matchedExpressions);
}
