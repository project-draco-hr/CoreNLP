{
  edgesNb=0;
  len=s.length();
  states=new DFSAState[len + 1];
  lattice=new DFSA("wordLattice");
  for (int i=0; i <= s.length(); ++i)   states[i]=new DFSAState(Integer.valueOf(i),lattice);
  lattice.setInitialState(states[0]);
  states[len].setAccepting(true);
  for (int start=0; start < len; ++start) {
    for (int end=len; end > start; --end) {
      String str=s.substring(start,end);
      assert(str.length() > 0);
      boolean isOneChar=(start + 1 == end);
      boolean isInDict=words.contains(str);
      if (isInDict || isOneChar) {
        double cost=isInDict ? 1 : 100;
        DFSATransition trans=new DFSATransition(null,states[start],states[end],new Word(str),null,cost);
        states[start].addTransition(trans);
        ++edgesNb;
      }
    }
  }
}
