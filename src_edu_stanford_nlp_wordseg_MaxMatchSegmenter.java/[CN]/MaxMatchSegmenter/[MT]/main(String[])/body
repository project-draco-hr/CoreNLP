{
  Properties props=StringUtils.argsToProperties(args);
  SeqClassifierFlags flags=new SeqClassifierFlags(props);
  MaxMatchSegmenter seg=new MaxMatchSegmenter();
  String lexiconFile=props.getProperty("lexicon");
  if (lexiconFile != null) {
    seg.addLexicon(lexiconFile);
  }
 else {
    logger.error("Error: no lexicon file!");
    System.exit(1);
  }
  Sighan2005DocumentReaderAndWriter sighanRW=new Sighan2005DocumentReaderAndWriter();
  sighanRW.init(flags);
  BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
  PrintWriter stdoutW=new PrintWriter(System.out);
  int lineNb=0;
  for (; ; ) {
    ++lineNb;
    logger.info("line: " + lineNb);
    try {
      String line=br.readLine();
      if (line == null)       break;
      String outputLine=null;
      if (props.getProperty("greedy") != null) {
        ArrayList<Word> sentence=seg.greedilySegmentWords(line);
        outputLine=SentenceUtils.listToString(sentence);
      }
 else       if (props.getProperty("maxwords") != null) {
        seg.buildSegmentationLattice(line);
        outputLine=SentenceUtils.listToString(seg.segmentWords(MatchHeuristic.MAXWORDS));
      }
 else {
        seg.buildSegmentationLattice(line);
        outputLine=SentenceUtils.listToString(seg.maxMatchSegmentation());
      }
      StringReader strR=new StringReader(outputLine);
      Iterator<List<CoreLabel>> itr=sighanRW.getIterator(strR);
      while (itr.hasNext()) {
        sighanRW.printAnswers(itr.next(),stdoutW);
      }
    }
 catch (    IOException e) {
      break;
    }
  }
  stdoutW.flush();
}
