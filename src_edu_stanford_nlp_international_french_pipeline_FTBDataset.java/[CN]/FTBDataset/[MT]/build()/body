{
  for (  File path : pathsToData) {
    treebank.loadPath(path,treeFileExtension,false);
  }
  PrintWriter outfile=null;
  PrintWriter flatFile=null;
  try {
    outfile=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outFileName),"UTF-8")));
    flatFile=(makeFlatFile) ? new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(flatFileName),"UTF-8"))) : null;
    outputFileList.add(outFileName);
    if (makeFlatFile) {
      outputFileList.add(flatFileName);
      toStringBuffer.append(" Made flat files\n");
    }
    preprocessMWEs();
    List<TregexPattern> badTrees=new ArrayList<>();
    badTrees.add(TregexPattern.compile("@SENT <: @PUNC"));
    badTrees.add(TregexPattern.compile("@SENT <1 @PUNC <2 @PUNC !<3 __"));
    badTrees.add(TregexPattern.compile("@SENT <1 @PUNC <2 @PUNC <3 @PUNC <4 @PUNC !<5 __"));
    for (    Tree t : treebank) {
      boolean skipTree=false;
      for (      TregexPattern p : badTrees) {
        skipTree=p.matcher(t).find();
        if (skipTree)         break;
      }
      if (skipTree) {
        log.info("Discarding tree: " + t.toString());
        continue;
      }
      if (splitSet != null) {
        String canditoTreeID=getCanditoTreeID(t);
        if (!splitSet.contains(canditoTreeID)) {
          continue;
        }
      }
      if (customTreeVisitor != null)       customTreeVisitor.visitTree(t);
      outfile.println(t.toString());
      if (makeFlatFile) {
        String flatString=(removeEscapeTokens) ? ATBTreeUtils.unEscape(ATBTreeUtils.flattenTree(t)) : ATBTreeUtils.flattenTree(t);
        flatFile.println(flatString);
      }
    }
  }
 catch (  UnsupportedEncodingException e) {
    System.err.printf("%s: Filesystem does not support UTF-8 output%n",this.getClass().getName());
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    System.err.printf("%s: Could not open %s for writing%n",this.getClass().getName(),outFileName);
  }
catch (  TregexParseException e) {
    System.err.printf("%s: Could not compile Tregex expressions%n",this.getClass().getName());
    e.printStackTrace();
  }
 finally {
    if (outfile != null)     outfile.close();
    if (flatFile != null)     flatFile.close();
  }
}
