{
  CoNLLBenchmark coNLL=new CoNLLBenchmark();
  List<CoNLLBenchmark.CoNLLSentence> train=coNLL.getSentences(DATA_PATH + "conll.iob.4class.train");
  List<CoNLLBenchmark.CoNLLSentence> testA=coNLL.getSentences(DATA_PATH + "conll.iob.4class.testa");
  List<CoNLLBenchmark.CoNLLSentence> testB=coNLL.getSentences(DATA_PATH + "conll.iob.4class.testb");
  List<CoNLLBenchmark.CoNLLSentence> allData=new ArrayList<>();
  allData.addAll(train);
  allData.addAll(testA);
  allData.addAll(testB);
  Set<String> tagsSet=new HashSet<>();
  for (  CoNLLBenchmark.CoNLLSentence sentence : allData)   for (  String nerTag : sentence.ner)   tagsSet.add(nerTag);
  List<String> tags=new ArrayList<>();
  tags.addAll(tagsSet);
  coNLL.embeddings=coNLL.getEmbeddings(DATA_PATH + "google-300-trimmed.ser.gz",allData);
  log.info("Making the training set...");
  ConcatVectorNamespace namespace=new ConcatVectorNamespace();
  int trainSize=train.size();
  GraphicalModel[] trainingSet=new GraphicalModel[trainSize];
  for (int i=0; i < trainSize; i++) {
    if (i % 10 == 0) {
      log.info(i + "/" + trainSize);
    }
    trainingSet[i]=coNLL.generateSentenceModel(namespace,train.get(i),tags);
  }
  Random r=new Random(10);
  int numFeatures=5;
  int featureLength=30;
  ConcatVector[] humanFeatureVectors=new ConcatVector[1000];
  for (int i=0; i < humanFeatureVectors.length; i++) {
    humanFeatureVectors[i]=new ConcatVector(numFeatures);
    for (int j=0; j < numFeatures; j++) {
      if (r.nextBoolean()) {
        humanFeatureVectors[i].setSparseComponent(j,r.nextInt(featureLength),r.nextDouble());
      }
 else {
        double[] dense=new double[featureLength];
        for (int k=0; k < dense.length; k++) {
          dense[k]=r.nextDouble();
        }
        humanFeatureVectors[i].setDenseComponent(j,dense);
      }
    }
  }
  ConcatVector weights=new ConcatVector(numFeatures);
  for (int i=0; i < numFeatures; i++) {
    double[] dense=new double[featureLength];
    for (int j=0; j < dense.length; j++)     dense[j]=r.nextDouble();
    weights.setDenseComponent(i,dense);
  }
  log.info("Warming up the JIT...");
  for (int i=0; i < 10; i++) {
    log.info(i);
    gameplay(r,trainingSet[i],weights,humanFeatureVectors);
  }
  log.info("Timing actual run...");
  long start=System.currentTimeMillis();
  for (int i=0; i < 10; i++) {
    log.info(i);
    gameplay(r,trainingSet[i],weights,humanFeatureVectors);
  }
  long duration=System.currentTimeMillis() - start;
  log.info("Duration: " + duration);
}
