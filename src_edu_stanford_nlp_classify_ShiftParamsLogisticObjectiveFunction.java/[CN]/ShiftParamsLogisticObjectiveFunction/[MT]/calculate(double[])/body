{
  clearResults();
  double[][] thetas=new double[numClasses - 1][numFeatures];
  LogisticUtils.unflatten(thetasArray,thetas);
  for (int i=0; i < data.length; i++) {
    int[] featureIndices=data[i];
    double[] featureValues=dataValues[i];
    double[] sums=LogisticUtils.calculateSums(thetas,featureIndices,featureValues);
    for (int c=0; c < numClasses; c++) {
      double sum=sums[c];
      value-=sum * labels[i][c];
      if (c == 0)       continue;
      int offset=(c - 1) * numFeatures;
      double error=Math.exp(sum) - labels[i][c];
      for (int f=0; f < featureIndices.length; f++) {
        int index=featureIndices[f];
        double x=featureValues[f];
        derivative[offset + index]-=error * x;
      }
    }
  }
  if (prior.getType().equals(LogPriorType.NULL))   return;
  double sigma=prior.getSigma();
  for (int c=0; c < numClasses; c++) {
    if (c == 0)     continue;
    int offset=(c - 1) * numFeatures;
    for (int j=0; j < numL2Parameters; j++) {
      double theta=thetasArray[offset + j];
      value+=theta * theta / (sigma * 2.0);
      derivative[offset + j]+=theta / sigma;
    }
  }
}
