{
  String[] testTrees={"(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NP (DT the) (NN woman)) (SBAR (WHNP (WP whom)) (S (NP (PRP you)) (VP (VBD gave) (NP (DT the) (NN package)) (PP (TO to))))))) (. .)))","( (S (NP-SBJ (PRP i)) (VP (VBP m) (ADJP-PRD (JJ fat)))))","(NP (NP (NNP Mr.) (NNP Laidig)) (, ,) (SBAR (WHNP-1 (WP whom)) (S (NP-SBJ (PRP he)) (VP (VBD referred) (PP-CLR (TO to) (NP (-NONE- *T*-1))) (PP-CLR (IN as) (NP (DT a) (NN friend)))))))","( (SBARQ (WHNP-9 (WP what)) (SQ (VBZ does) (NP-SBJ (PRP it)) (VP (VB mean) (NP-9 (-NONE- *T*)) (SBAR-TMP (WHADVP-1 (WRB when)) (S (NP-SBJ (DT a) (JJ veiled) (NN chameleon) (NN egg)) (VP (VBZ is) (ADJP-PRD (JJ soft)) (ADVP-TMP-1 (-NONE- *T*))))))) (. ?)))","( (S (NP-SBJ (PRP it)) (VP (VBD wase) (RB nt) (VP (VBG going))) (. ....)))"};
  String[] testAnswers={"nsubj(saw-2, I-1)\n" + "root(ROOT-0, saw-2)\n" + "det(woman-4, the-3)\n"+ "dobj(saw-2, woman-4)\n"+ "pobj(to-10, whom-5)\n"+ "nsubj(gave-7, you-6)\n"+ "rcmod(woman-4, gave-7)\n"+ "det(package-9, the-8)\n"+ "dobj(gave-7, package-9)\n"+ "prep(gave-7, to-10)\n","nsubj(fat-3, i-1)\n" + "cop(fat-3, m-2)\n" + "root(ROOT-0, fat-3)\n","nn(Laidig-2, Mr.-1)\n" + "root(ROOT-0, Laidig-2)\n" + "pobj(to-7, whom-4)\n"+ "nsubj(referred-6, he-5)\n"+ "rcmod(Laidig-2, referred-6)\n"+ "prep(referred-6, to-7)\n"+ "prep(referred-6, as-8)\n"+ "det(friend-10, a-9)\n"+ "pobj(as-8, friend-10)\n","dobj(mean-4, what-1)\n" + "aux(mean-4, does-2)\n" + "nsubj(mean-4, it-3)\n"+ "root(ROOT-0, mean-4)\n"+ "advmod(soft-11, when-5)\n"+ "det(egg-9, a-6)\n"+ "amod(egg-9, veiled-7)\n"+ "nn(egg-9, chameleon-8)\n"+ "nsubj(soft-11, egg-9)\n"+ "cop(soft-11, is-10)\n"+ "advcl(mean-4, soft-11)\n","nsubj(going-4, it-1)\n" + "aux(going-4, wase-2)\n" + "neg(going-4, nt-3)\n"+ "root(ROOT-0, going-4)\n"+ "punct(going-4, ....-5)\n"};
  assertEquals("Test array lengths mismatch!",testTrees.length,testAnswers.length);
  TreeReaderFactory trf=new PennTreeReaderFactory();
  for (int i=0; i < testTrees.length; i++) {
    String testTree=testTrees[i];
    String testAnswer=testAnswers[i];
    Tree tree=Tree.valueOf(testTree,trf);
    GrammaticalStructure gs=new EnglishGrammaticalStructure(tree);
    assertEquals("Unexpected basic dependencies for tree " + testTree,testAnswer,EnglishGrammaticalStructure.dependenciesToString(gs,gs.typedDependencies(false),tree,false,false));
  }
}
