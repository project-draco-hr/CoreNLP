{
  String[] testTrees={"(ROOT (S (NP (PRP I)) (VP (VBD saw) (NP (NP (DT the) (NN woman)) (SBAR (WHNP (WP whom)) (S (NP (PRP you)) (VP (VBD gave) (NP (DT the) (NN package)) (PP (TO to))))))) (. .)))","( (S (NP-SBJ (PRP i)) (VP (VBP m) (ADJP-PRD (JJ fat)))))","(NP (NP (NNP Mr.) (NNP Laidig)) (, ,) (SBAR (WHNP-1 (WP whom)) (S (NP-SBJ (PRP he)) (VP (VBD referred) (PP-CLR (TO to) (NP (-NONE- *T*-1))) (PP-CLR (IN as) (NP (DT a) (NN friend)))))))","( (SBARQ (WHNP-9 (WP what)) (SQ (VBZ does) (NP-SBJ (PRP it)) (VP (VB mean) (NP-9 (-NONE- *T*)) (SBAR-TMP (WHADVP-1 (WRB when)) (S (NP-SBJ (DT a) (JJ veiled) (NN chameleon) (NN egg)) (VP (VBZ is) (ADJP-PRD (JJ soft)) (ADVP-TMP-1 (-NONE- *T*))))))) (. ?)))","( (S (NP-SBJ (PRP it)) (VP (VBD wase) (RB nt) (VP (VBG going))) (. ....)))","( (S (NP-SBJ (DT An) (NN arbitrator) ) (VP (VP (VBD awarded) (NP (NNP Eastern) (NNPS Airlines) (NNS pilots) ) (NP (NP (QP (IN between) ($ $) (CD 60) (CD million) (CC and) ($ $) (CD 100) (CD million) ) (-NONE- *U*) ) (PP (IN in) (NP (JJ back) (NN pay) )))) (, ,) (NP-ADV (NP (DT a) (NN decision) ) (SBAR (WHNP-285 (WDT that) ) (S (NP-SBJ (-NONE- *T*-285) ) (VP (MD could) (VP (VB complicate) (NP (NP (DT the) (NN carrier) (POS 's) ) (NN bankruptcy-law) (NN reorganization) ))))))) (. .) ))","(ROOT (S (NP (CD Two) (JJ former) (NNS ministers) ) (VP (VBD were) (ADJP (ADJP (ADVP (RB heavily) ) (VBN implicated) )) (PP (IN in) (NP (DT the) (NNP Koskotas) (NN affair) )))))","( (S (NP-SBJ (CD Two) (JJ former) (NNS ministers) ) (VP (VBD were) (ADJP-PRD (ADJP (ADVP (RB heavily) ) (VBN implicated) )) (PP-LOC (IN in) (NP (DT the) (NNP Koskotas) (NN affair) )))))","(NP-ADV (NP (DT The) (JJR more) (NNS accounts) ) (SBAR (WHNP-1 (-NONE- 0) ) (S (NP-SBJ (NNS customers) ) (VP (VBP have) (NP (-NONE- *T*-1) )))))","(NP-ADV (NP-ADV (DT a) (NN-ADV lesson)) (VP (ADVP (RB once)) (VBN learned) (PP (IN by) (NP (NNP Henry) (NNP Kissinger)))))","(NP (NP (NNP U.S.)) (PP (CC v.) (NP (NNP Hudson) (CC and) (NNP Goodwin))))","(NP (NP (NN nothing)) (PP (CC but) (NP (PRP$ their) (NNS scratches))))"};
  String[] testAnswers={"nsubj(saw-2, I-1)\n" + "root(ROOT-0, saw-2)\n" + "det(woman-4, the-3)\n"+ "dobj(saw-2, woman-4)\n"+ "pobj(to-10, whom-5)\n"+ "nsubj(gave-7, you-6)\n"+ "rcmod(woman-4, gave-7)\n"+ "det(package-9, the-8)\n"+ "dobj(gave-7, package-9)\n"+ "prep(gave-7, to-10)\n","nsubj(fat-3, i-1)\n" + "cop(fat-3, m-2)\n" + "root(ROOT-0, fat-3)\n","nn(Laidig-2, Mr.-1)\n" + "root(ROOT-0, Laidig-2)\n" + "pobj(to-7, whom-4)\n"+ "nsubj(referred-6, he-5)\n"+ "rcmod(Laidig-2, referred-6)\n"+ "prep(referred-6, to-7)\n"+ "prep(referred-6, as-8)\n"+ "det(friend-10, a-9)\n"+ "pobj(as-8, friend-10)\n","dobj(mean-4, what-1)\n" + "aux(mean-4, does-2)\n" + "nsubj(mean-4, it-3)\n"+ "root(ROOT-0, mean-4)\n"+ "advmod(soft-11, when-5)\n"+ "det(egg-9, a-6)\n"+ "amod(egg-9, veiled-7)\n"+ "nn(egg-9, chameleon-8)\n"+ "nsubj(soft-11, egg-9)\n"+ "cop(soft-11, is-10)\n"+ "advcl(mean-4, soft-11)\n","nsubj(going-4, it-1)\n" + "aux(going-4, wase-2)\n" + "neg(going-4, nt-3)\n"+ "root(ROOT-0, going-4)\n"+ "punct(going-4, ....-5)\n","det(arbitrator-2, An-1)\n" + "nsubj(awarded-3, arbitrator-2)\n" + "root(ROOT-0, awarded-3)\n"+ "nn(pilots-6, Eastern-4)\n"+ "nn(pilots-6, Airlines-5)\n"+ "iobj(awarded-3, pilots-6)\n"+ "amod($-8, between-7)\n"+ "dobj(awarded-3, $-8)\n"+ "num($-8, 60-9)\n"+ "num($-8, million-10)\n"+ "cc($-8, and-11)\n"+ "conj($-8, $-12)\n"+ "num($-12, 100-13)\n"+ "num($-12, million-14)\n"+ "prep($-8, in-15)\n"+ "amod(pay-17, back-16)\n"+ "pobj(in-15, pay-17)\n"+ "det(decision-20, a-19)\n"+ "npadvmod(awarded-3, decision-20)\n"+ "nsubj(complicate-23, that-21)\n"+ "aux(complicate-23, could-22)\n"+ "rcmod(decision-20, complicate-23)\n"+ "det(carrier-25, the-24)\n"+ "poss(reorganization-28, carrier-25)\n"+ "possessive(carrier-25, 's-26)\n"+ "nn(reorganization-28, bankruptcy-law-27)\n"+ "dobj(complicate-23, reorganization-28)\n","num(ministers-3, Two-1)\n" + "amod(ministers-3, former-2)\n" + "nsubjpass(implicated-6, ministers-3)\n"+ "auxpass(implicated-6, were-4)\n"+ "advmod(implicated-6, heavily-5)\n"+ "root(ROOT-0, implicated-6)\n"+ "prep(implicated-6, in-7)\n"+ "det(affair-10, the-8)\n"+ "nn(affair-10, Koskotas-9)\n"+ "pobj(in-7, affair-10)\n","num(ministers-3, Two-1)\n" + "amod(ministers-3, former-2)\n" + "nsubjpass(implicated-6, ministers-3)\n"+ "auxpass(implicated-6, were-4)\n"+ "advmod(implicated-6, heavily-5)\n"+ "root(ROOT-0, implicated-6)\n"+ "prep(implicated-6, in-7)\n"+ "det(affair-10, the-8)\n"+ "nn(affair-10, Koskotas-9)\n"+ "pobj(in-7, affair-10)\n","det(accounts-3, The-1)\n" + "amod(accounts-3, more-2)\n" + "root(ROOT-0, accounts-3)\n"+ "nsubj(have-5, customers-4)\n"+ "rcmod(accounts-3, have-5)\n","det(lesson-2, a-1)\nroot(ROOT-0, lesson-2)\nadvmod(learned-4, once-3)\nvmod(lesson-2, learned-4)\nprep(learned-4, by-5)\nnn(Kissinger-7, Henry-6)\npobj(by-5, Kissinger-7)\n","root(ROOT-0, U.S.-1)\n" + "prep(U.S.-1, v.-2)\n" + "pobj(v.-2, Hudson-3)\n"+ "cc(Hudson-3, and-4)\n"+ "conj(Hudson-3, Goodwin-5)\n","root(ROOT-0, nothing-1)\n" + "prep(nothing-1, but-2)\n" + "poss(scratches-4, their-3)\n"+ "pobj(but-2, scratches-4)\n"};
  assertEquals("Test array lengths mismatch!",testTrees.length,testAnswers.length);
  TreeReaderFactory trf=new NPTmpRetainingTreeNormalizer.NPTmpAdvRetainingTreeReaderFactory();
  for (int i=0; i < testTrees.length; i++) {
    String testTree=testTrees[i];
    String testAnswer=testAnswers[i];
    Tree tree=Tree.valueOf(testTree,trf);
    GrammaticalStructure gs=new EnglishGrammaticalStructure(tree);
    assertEquals("Unexpected basic dependencies for tree " + testTree,testAnswer,EnglishGrammaticalStructure.dependenciesToString(gs,gs.typedDependencies(false),tree,false,false));
  }
}
