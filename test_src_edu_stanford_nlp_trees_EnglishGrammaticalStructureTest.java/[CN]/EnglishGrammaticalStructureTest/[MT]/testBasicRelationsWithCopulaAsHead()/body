{
  String[] testTrees={"(ROOT (S (NP (NNP Reagan)) (VP (VBZ has) (VP (VBN died))) (. .)))","(ROOT (S (NP (NNP Kennedy)) (VP (VBZ has) (VP (VBN been) (VP (VBN killed)))) (. .)))","(ROOT (S (NP (NNP Bill)) (VP (VBZ is) (NP (DT an) (JJ honest) (NN man))) (. .)))","(ROOT (S (NP (NNP Bill)) (VP (VBZ is) (ADJP (JJ big) (CC and) (JJ honest))) (. .)))","(ROOT (S (NP (NNP Clinton)) (VP (VBD defeated) (NP (NNP Dole))) (. .)))","(ROOT (S (SBAR (WHNP (WP What)) (S (NP (PRP she)) (VP (VBD said)))) (VP (VBZ is) (ADJP (JJ untrue))) (. .)))","(ROOT (S (NP (NNP Dole)) (VP (VBD was) (VP (VBN defeated) (PP (IN by) (NP (NNP Clinton))))) (. .)))","(ROOT (S (NP (PRP I)) (VP (VBP like) (S (VP (TO to) (VP (VB swim))))) (. .)))","(ROOT (S (NP (PRP We)) (VP (VBP have) (NP (NP (DT no) (JJ useful) (NN information)) (PP (IN on) (SBAR (IN whether) (S (NP (NNS users)) (VP (VBP are) (PP (IN at) (NP (NN risk))))))))) (. .)))","(ROOT (S (NP (PRP I)) (VP (VBP am) (ADJP (JJ certain) (SBAR (IN that) (S (NP (PRP he)) (VP (VBD did) (NP (PRP it))))))) (. .)))","(ROOT (S (NP (PRP I)) (VP (VBP am) (ADJP (JJ ready) (S (VP (TO to) (VP (VB leave)))))) (. .)))","(ROOT (S (NP (EX There)) (VP (VBZ is) (NP (NP (DT a) (NN statue)) (PP (IN in) (NP (DT the) (NN corner))))) (. .)))","(ROOT (S (NP (DT The) (NN director)) (VP (VBZ is) (ADJP (NP (CD 65) (NNS years)) (JJ old))) (. .)))","(ROOT (S (NP (DT The) (NN man)) (VP (VBZ is) (ADVP (RB here))) (. .)))","(ROOT (S (NP (NNP Xml) (NN field)) (VP (MD should) (VP (VB include) (NP (PDT both) (NP (DT the) (NN entity) (NN id)) (CC and) (NP (DT the) (NN entity) (NN name))) (SBAR (IN since) (S (NP (DT the) (NN entity) (NNS names)) (VP (VBP are) (RB not) (ADJP (JJ unique))))))) (. .)))","(ROOT (S (S (NP (DT The) (NN government)) (VP (VBZ counts) (NP (NN money)) (SBAR (IN as) (S (NP (PRP it)) (VP (VBZ is) (VP (VBN spent))))))) (: ;) (S (NP (NNP Dodge)) (VP (VBZ counts) (NP (NNS contracts)) (SBAR (WHADVP (WRB when)) (S (NP (PRP they)) (VP (VBP are) (VP (VBN awarded))))))) (. .)))"};
  String[] testAnswers={"nsubj(died-3, Reagan-1)\n" + "aux(died-3, has-2)\n" + "root(ROOT-0, died-3)\n","nsubjpass(killed-4, Kennedy-1)\n" + "aux(killed-4, has-2)\n" + "auxpass(killed-4, been-3)\n"+ "root(ROOT-0, killed-4)\n","nsubj(is-2, Bill-1)\n" + "root(ROOT-0, is-2)\n" + "det(man-5, an-3)\n"+ "amod(man-5, honest-4)\n"+ "attr(is-2, man-5)\n","nsubj(is-2, Bill-1)\n" + "root(ROOT-0, is-2)\n" + "acomp(is-2, big-3)\n"+ "cc(big-3, and-4)\n"+ "conj(big-3, honest-5)\n","nsubj(defeated-2, Clinton-1)\n" + "root(ROOT-0, defeated-2)\n" + "dobj(defeated-2, Dole-3)\n","dobj(said-3, What-1)\n" + "nsubj(said-3, she-2)\n" + "csubj(is-4, said-3)\n"+ "root(ROOT-0, is-4)\n"+ "acomp(is-4, untrue-5)\n","nsubjpass(defeated-3, Dole-1)\n" + "auxpass(defeated-3, was-2)\n" + "root(ROOT-0, defeated-3)\n"+ "prep(defeated-3, by-4)\n"+ "pobj(by-4, Clinton-5)\n","nsubj(like-2, I-1)\n" + "root(ROOT-0, like-2)\n" + "aux(swim-4, to-3)\n"+ "xcomp(like-2, swim-4)\n","nsubj(have-2, We-1)\n" + "root(ROOT-0, have-2)\n" + "det(information-5, no-3)\n"+ "amod(information-5, useful-4)\n"+ "dobj(have-2, information-5)\n"+ "prep(information-5, on-6)\n"+ "mark(are-9, whether-7)\n"+ "nsubj(are-9, users-8)\n"+ "pcomp(on-6, are-9)\n"+ "prep(are-9, at-10)\n"+ "pobj(at-10, risk-11)\n","nsubj(am-2, I-1)\n" + "root(ROOT-0, am-2)\n" + "acomp(am-2, certain-3)\n"+ "mark(did-6, that-4)\n"+ "nsubj(did-6, he-5)\n"+ "ccomp(certain-3, did-6)\n"+ "dobj(did-6, it-7)\n","nsubj(am-2, I-1)\n" + "root(ROOT-0, am-2)\n" + "acomp(am-2, ready-3)\n"+ "aux(leave-5, to-4)\n"+ "xcomp(ready-3, leave-5)\n","expl(is-2, There-1)\n" + "root(ROOT-0, is-2)\n" + "det(statue-4, a-3)\n"+ "nsubj(is-2, statue-4)\n"+ "prep(statue-4, in-5)\n"+ "det(corner-7, the-6)\n"+ "pobj(in-5, corner-7)\n","det(director-2, The-1)\n" + "nsubj(is-3, director-2)\n" + "root(ROOT-0, is-3)\n"+ "num(years-5, 65-4)\n"+ "npadvmod(old-6, years-5)\n"+ "acomp(is-3, old-6)\n","det(man-2, The-1)\n" + "nsubj(is-3, man-2)\n" + "root(ROOT-0, is-3)\n"+ "advmod(is-3, here-4)\n","nn(field-2, Xml-1)\n" + "nsubj(include-4, field-2)\n" + "aux(include-4, should-3)\n"+ "root(ROOT-0, include-4)\n"+ "preconj(id-8, both-5)\n"+ "det(id-8, the-6)\n"+ "nn(id-8, entity-7)\n"+ "dobj(include-4, id-8)\n"+ "cc(id-8, and-9)\n"+ "det(name-12, the-10)\n"+ "nn(name-12, entity-11)\n"+ "conj(id-8, name-12)\n"+ "mark(are-17, since-13)\n"+ "det(names-16, the-14)\n"+ "nn(names-16, entity-15)\n"+ "nsubj(are-17, names-16)\n"+ "advcl(include-4, are-17)\n"+ "neg(are-17, not-18)\n"+ "acomp(are-17, unique-19)\n","det(government-2, The-1)\n" + "nsubj(counts-3, government-2)\n" + "root(ROOT-0, counts-3)\n"+ "dobj(counts-3, money-4)\n"+ "mark(spent-8, as-5)\n"+ "nsubjpass(spent-8, it-6)\n"+ "auxpass(spent-8, is-7)\n"+ "advcl(counts-3, spent-8)\n"+ "nsubj(counts-11, Dodge-10)\n"+ "parataxis(counts-3, counts-11)\n"+ "dobj(counts-11, contracts-12)\n"+ "advmod(awarded-16, when-13)\n"+ "nsubjpass(awarded-16, they-14)\n"+ "auxpass(awarded-16, are-15)\n"+ "advcl(counts-11, awarded-16)\n"};
  assertEquals("Test array lengths mismatch!",testTrees.length,testAnswers.length);
  TreeReaderFactory trf=new PennTreeReaderFactory();
  for (int i=0; i < testTrees.length; i++) {
    String testTree=testTrees[i];
    String testAnswer=testAnswers[i];
    Tree tree=Tree.valueOf(testTree,trf);
    GrammaticalStructure gs=new EnglishGrammaticalStructure(tree,new PennTreebankLanguagePack().punctuationWordRejectFilter(),new SemanticHeadFinder(false));
    assertEquals("Unexpected basic dependencies for tree " + testTree,testAnswer,EnglishGrammaticalStructure.dependenciesToString(gs,gs.typedDependencies(false),tree,false,false));
  }
}
