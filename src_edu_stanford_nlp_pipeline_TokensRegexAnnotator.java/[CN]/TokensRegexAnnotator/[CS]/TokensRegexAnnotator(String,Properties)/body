{
  String prefix=(name == null) ? "" : name + ".";
  String[] files=PropertiesUtils.getStringArray(props,prefix + "rules");
  if (files == null || files.length == 0) {
    throw new RuntimeException("No rules specified for TokensRegexAnnotator " + name + ", check "+ prefix+ "rules property");
  }
  env=TokenSequencePattern.getNewEnv();
  env.bind("options",options);
  extractor=CoreMapExpressionExtractor.createExtractorFromFiles(env,files);
  verbose=PropertiesUtils.getBool(props,prefix + "verbose",false);
  options.setTokenOffsets=PropertiesUtils.getBool(props,prefix + "setTokenOffsets",options.setTokenOffsets);
  options.extractWithTokens=PropertiesUtils.getBool(props,prefix + "extractWithTokens",options.extractWithTokens);
  options.flatten=PropertiesUtils.getBool(props,prefix + "flatten",options.flatten);
  String matchedExpressionsAnnotationKeyName=props.getProperty(prefix + "matchedExpressionsAnnotationKey");
  if (matchedExpressionsAnnotationKeyName != null) {
    options.matchedExpressionsAnnotationKey=EnvLookup.lookupAnnotationKeyWithClassname(env,matchedExpressionsAnnotationKeyName);
    if (options.matchedExpressionsAnnotationKey == null) {
      String propName=prefix + "matchedExpressionsAnnotationKey";
      throw new RuntimeException("Cannot determine annotation key for " + propName + "="+ matchedExpressionsAnnotationKeyName);
    }
  }
}
