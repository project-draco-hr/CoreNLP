{
  if (gold == null || guess == null) {
    System.err.printf("%s: Cannot compare against a null gold or guess tree!%n",this.getClass().getName());
    return;
  }
  Map<Label,Set<Constituent>> guessDeps=makeObjectsByCat(guess);
  Map<Label,Set<Constituent>> goldDeps=makeObjectsByCat(gold);
  Set<Label> cats=new HashSet<Label>(guessDeps.keySet());
  cats.addAll(goldDeps.keySet());
  if (pw != null && runningAverages) {
    pw.println("========================================");
    pw.println("Labeled Bracketed Evaluation by Category");
    pw.println("========================================");
  }
  ++num;
  for (  Label cat : cats) {
    Set<Constituent> thisGuessDeps=guessDeps.containsKey(cat) ? guessDeps.get(cat) : new HashSet<Constituent>();
    Set<Constituent> thisGoldDeps=goldDeps.containsKey(cat) ? goldDeps.get(cat) : new HashSet<Constituent>();
    double currentPrecision=precision(thisGuessDeps,thisGoldDeps);
    double currentRecall=precision(thisGoldDeps,thisGuessDeps);
    double currentF1=(currentPrecision > 0.0 && currentRecall > 0.0 ? 2.0 / (1.0 / currentPrecision + 1.0 / currentRecall) : 0.0);
    precisions.incrementCount(cat,currentPrecision);
    recalls.incrementCount(cat,currentRecall);
    f1s.incrementCount(cat,currentF1);
    precisions2.incrementCount(cat,thisGuessDeps.size() * currentPrecision);
    pnums2.incrementCount(cat,thisGuessDeps.size());
    recalls2.incrementCount(cat,thisGoldDeps.size() * currentRecall);
    rnums2.incrementCount(cat,thisGoldDeps.size());
    if (pw != null && runningAverages) {
      pw.println(cat + "\tP: " + ((int)(currentPrecision * 10000)) / 100.0 + " (sent ave " + ((int)(precisions.getCount(cat) * 10000 / num)) / 100.0 + ") (evalb " + ((int)(precisions2.getCount(cat) * 10000 / pnums2.getCount(cat))) / 100.0 + ")");
      pw.println("\tR: " + ((int)(currentRecall * 10000)) / 100.0 + " (sent ave " + ((int)(recalls.getCount(cat) * 10000 / num)) / 100.0 + ") (evalb " + ((int)(recalls2.getCount(cat) * 10000 / rnums2.getCount(cat))) / 100.0 + ")");
      double cF1=2.0 / (rnums2.getCount(cat) / recalls2.getCount(cat) + pnums2.getCount(cat) / precisions2.getCount(cat));
      String emit=str + " F1: " + ((int)(currentF1 * 10000)) / 100.0 + " (sent ave " + ((int)(10000 * f1s.getCount(cat) / num)) / 100.0 + ", evalb " + ((int)(10000 * cF1)) / 100.0 + ")";
      pw.println(emit);
    }
  }
  if (pw != null && runningAverages) {
    pw.println("========================================");
  }
}
