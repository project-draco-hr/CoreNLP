{
  for (int i=0; i < testTexts.length; i++) {
    String[] testText=testTexts[i];
    assertEquals(i + ": Wrong array size in test",7,testText.length);
    String out;
    out=crf.classifyToString(testText[0]);
    assertEquals(i + ": CRF buggy on classifyToString",testText[1],out);
    out=crf.classifyWithInlineXML(testText[0]);
    assertEquals(i + ": CRF buggy on classifyWithInlineXML",testText[2],out);
    out=crf.classifyToString(testText[0],"xml",false).replaceAll("\r","");
    assertEquals(i + ": CRF buggy on classifyToString(xml, false)",testText[3],out);
    out=crf.classifyToString(testText[0],"xml",true);
    assertEquals(i + ": CRF buggy on classifyToString(xml, true)",testText[4],out);
    out=crf.classifyToString(testText[0],"slashTags",false).replaceAll("\r","");
    assertEquals(i + ": CRF buggy on classifyToString(slashTags, false)",testText[5],out);
    out=crf.classifyToString(testText[0],"inlineXML",false).replaceAll("\r","");
    assertEquals(i + ": CRF buggy on classifyToString(inlineXML, false)",testText[6],out);
    List<Triple<String,Integer,Integer>> trip=crf.classifyToCharacterOffsets(testText[0]);
    assertEquals(i + ": CRF buggy on classifyToCharacterOffsets",Arrays.asList(testTrip[i]),trip);
    if (i == 0) {
      Triple<String,Integer,Integer> x=trip.get(trip.size() - 1);
      assertEquals("CRF buggy on classifyToCharacterOffsets abbreviation period",'r',testText[0].charAt(x.third() - 1));
    }
    if (i == 3) {
      List<List<CoreLabel>> doc=crf.classify(testText[0]);
      assertEquals("Wrong number of sentences",1,doc.size());
      List<CoreLabel> tokens=doc.get(0);
      assertEquals("Wrong number of tokens",offsets.length,tokens.size());
      for (int j=0, sz=tokens.size(); j < sz; j++) {
        CoreLabel token=tokens.get(j);
        assertEquals("Wrong begin offset",offsets[j][0],(int)token.get(CoreAnnotations.CharacterOffsetBeginAnnotation.class));
        assertEquals("Wrong end offset",offsets[j][1],(int)token.get(CoreAnnotations.CharacterOffsetEndAnnotation.class));
      }
    }
  }
}
