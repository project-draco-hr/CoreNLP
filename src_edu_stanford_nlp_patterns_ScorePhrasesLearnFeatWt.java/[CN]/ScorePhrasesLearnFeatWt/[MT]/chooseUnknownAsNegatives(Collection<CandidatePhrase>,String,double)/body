{
  Counter<CandidatePhrase> sims=new ClassicCounter<CandidatePhrase>();
  double allMaxSim=Double.MIN_VALUE;
  for (  CandidatePhrase p : candidatePhrases) {
    Counter<Integer> feat=wordClassClustersForPhrase.get(p);
    if (feat == null) {
      feat=wordClass(p.getPhrase(),p.getPhraseLemma());
      wordClassClustersForPhrase.put(p,feat);
    }
    double maxSim=Double.MIN_VALUE;
    if (feat.size() > 0) {
      for (      CandidatePhrase pos : CollectionUtils.union(constVars.getLearnedWords(label).keySet(),constVars.getSeedLabelDictionary().get(label))) {
        Counter<Integer> posfeat=wordClassClustersForPhrase.get(pos);
        if (posfeat.size() > 0) {
          double j=Counters.jaccardCoefficient(posfeat,feat);
          if (j > maxSim)           maxSim=j;
        }
      }
    }
    sims.setCount(p,maxSim);
    if (allMaxSim < maxSim)     allMaxSim=maxSim;
  }
  if (allMaxSim == Double.MIN_VALUE) {
    Redwood.log(Redwood.DBG,"No similarity recorded between the positives and the unknown!");
    percentage=1.0;
  }
  Collection<CandidatePhrase> removed=Counters.retainBottom(sims,(int)(sims.size() * percentage));
  System.out.println("not choosing " + removed + " as the negative phrases. percentage is "+ percentage+ " and allMaxsim was "+ allMaxSim);
  return sims.keySet();
}
