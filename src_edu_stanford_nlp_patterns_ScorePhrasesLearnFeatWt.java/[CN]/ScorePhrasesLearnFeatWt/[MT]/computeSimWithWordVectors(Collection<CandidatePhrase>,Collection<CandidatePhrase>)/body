{
  Counter<CandidatePhrase> sims=new ClassicCounter<CandidatePhrase>(candidatePhrases.size());
  for (  CandidatePhrase p : candidatePhrases) {
    if (wordVectors.containsKey(p.getPhrase())) {
      double[] d1=wordVectors.get(p.getPhrase());
      double finalSimScore=0;
      boolean donotuse=false;
      for (      CandidatePhrase pos : otherPhrases) {
        if (p.equals(pos)) {
          donotuse=true;
          break;
        }
        if (!wordVectors.containsKey(pos.getPhrase()))         continue;
        double sim;
        PhrasePair pair=new PhrasePair(p.getPhrase(),pos.getPhrase());
        if (cacheSimilarities.containsKey(pair))         sim=cacheSimilarities.getCount(pair);
 else {
          double[] d2=wordVectors.get(pos.getPhrase());
          double sum=0;
          double d1sq=0;
          double d2sq=0;
          for (int i=0; i < d1.length; i++) {
            sum+=d1[i] * d2[i];
            d1sq+=d1[i] * d1[i];
            d2sq+=d2[i] * d2[i];
          }
          sim=sum / (Math.sqrt(d1sq) * Math.sqrt(d2sq));
          cacheSimilarities.setCount(pair,sim);
        }
        if (sim > finalSimScore)         finalSimScore=sim;
      }
      if (!donotuse) {
        sims.setCount(p,finalSimScore);
      }
    }
 else {
      sims.setCount(p,Double.MIN_VALUE);
    }
  }
  return sims;
}
