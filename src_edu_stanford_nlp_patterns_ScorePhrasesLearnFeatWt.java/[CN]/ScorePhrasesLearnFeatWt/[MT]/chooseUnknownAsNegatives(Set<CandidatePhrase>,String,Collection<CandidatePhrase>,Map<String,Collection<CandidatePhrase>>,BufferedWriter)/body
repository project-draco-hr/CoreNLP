{
  List<List<CandidatePhrase>> threadedCandidates=GetPatternsFromDataMultiClass.getThreadBatches(CollectionUtils.toList(candidatePhrases),constVars.numThreads);
  Counter<CandidatePhrase> sims=new ClassicCounter<>();
  AtomicDouble allMaxSim=new AtomicDouble(Double.MIN_VALUE);
  ExecutorService executor=Executors.newFixedThreadPool(constVars.numThreads);
  List<Future<Pair<Counter<CandidatePhrase>,Counter<CandidatePhrase>>>> list=new ArrayList<>();
  for (  List<CandidatePhrase> keys : threadedCandidates) {
    Callable<Pair<Counter<CandidatePhrase>,Counter<CandidatePhrase>>> task=new ComputeSim(label,keys,allMaxSim,positivePhrases,knownNegativePhrases);
    Future<Pair<Counter<CandidatePhrase>,Counter<CandidatePhrase>>> submit=executor.submit(task);
    list.add(submit);
  }
  for (  Future<Pair<Counter<CandidatePhrase>,Counter<CandidatePhrase>>> future : list) {
    try {
      sims.addAll(future.get().first());
    }
 catch (    Exception e) {
      executor.shutdownNow();
      throw new RuntimeException(e);
    }
  }
  executor.shutdown();
  if (allMaxSim.get() == Double.MIN_VALUE) {
    Redwood.log(Redwood.DBG,"No similarity recorded between the positives and the unknown!");
  }
  CandidatePhrase k=Counters.argmax(sims);
  System.out.println("Maximum similarity was " + sims.getCount(k) + " for word "+ k);
  Counter<CandidatePhrase> removed=Counters.retainBelow(sims,constVars.positiveSimilarityThresholdLowPrecision);
  System.out.println("removing phrases as negative phrases that were higher that positive similarity threshold of " + constVars.positiveSimilarityThresholdLowPrecision + removed);
  if (logFile != null && wordVectors != null) {
    for (    Entry<CandidatePhrase,Double> en : removed.entrySet())     if (wordVectors.containsKey(en.getKey().getPhrase()))     logFile.write(en.getKey() + "-PN " + ArrayUtils.toString(wordVectors.get(en.getKey().getPhrase())," ")+ "\n");
  }
  return sims.keySet();
}
