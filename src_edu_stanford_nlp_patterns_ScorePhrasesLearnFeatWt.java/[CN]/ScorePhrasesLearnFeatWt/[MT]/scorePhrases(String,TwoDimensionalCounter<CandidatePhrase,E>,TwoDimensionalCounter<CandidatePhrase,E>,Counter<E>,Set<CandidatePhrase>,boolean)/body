{
  getAllLabeledWordsCluster();
  Counter<CandidatePhrase> scores=new ClassicCounter<>();
  edu.stanford.nlp.classify.Classifier classifier=learnClassifier(label,forLearningPatterns,wordsPatExtracted,allSelectedPatterns);
  for (  Entry<CandidatePhrase,ClassicCounter<E>> en : terms.entrySet()) {
    Double score=this.scoreUsingClassifer(classifier,en.getKey(),label,forLearningPatterns,en.getValue(),allSelectedPatterns);
    if (!score.isNaN() && !score.isInfinite()) {
      scores.setCount(en.getKey(),score);
    }
 else     Redwood.log(Redwood.DBG,"Ignoring " + en.getKey() + " because score is "+ score);
  }
  return scores;
}
