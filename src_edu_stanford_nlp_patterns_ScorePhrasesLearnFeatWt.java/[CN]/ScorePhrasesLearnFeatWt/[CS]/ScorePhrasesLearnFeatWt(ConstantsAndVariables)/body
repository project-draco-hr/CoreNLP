{
  super(constvar);
  if (constvar.useWordVectorsToComputeSim && (constvar.subsampleUnkAsNegUsingSim || constvar.expandPositivesWhenSampling || constvar.expandNegativesWhenSampling|| constVars.usePhraseEvalWordVector) && wordVectors == null) {
    if (Data.rawFreq == null) {
      Data.rawFreq=new ClassicCounter<>();
      Data.computeRawFreqIfNull(PatternFactory.numWordsCompoundMax,constvar.batchProcessSents);
    }
    Redwood.log(Redwood.DBG,"Reading word vectors");
    wordVectors=new HashMap<>();
    for (    String line : IOUtils.readLines(constVars.wordVectorFile)) {
      String[] tok=line.split("\\s+");
      String word=tok[0];
      CandidatePhrase p=CandidatePhrase.createOrGet(word);
      if (Data.rawFreq.containsKey(p) || constvar.getStopWords().contains(p) || constvar.getEnglishWords().contains(word)|| constvar.hasSeedWordOrOtherSem(p)) {
        double[] d=new double[tok.length - 1];
        for (int i=1; i < tok.length; i++) {
          d[i - 1]=Double.valueOf(tok[i]);
        }
        wordVectors.put(word,d);
      }
 else       CandidatePhrase.deletePhrase(p);
    }
    Redwood.log(Redwood.DBG,"Read " + wordVectors.size() + " word vectors");
  }
  OOVExternalFeatWt=0;
  OOVdictOdds=0;
  OOVDomainNgramScore=0;
  OOVGoogleNgramScore=0;
}
