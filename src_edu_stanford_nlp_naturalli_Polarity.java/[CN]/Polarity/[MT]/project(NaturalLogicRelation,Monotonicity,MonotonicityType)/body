{
switch (input) {
case EQUIVALENCE:
    return NaturalLogicRelation.EQUIVALENCE;
case FORWARD_ENTAILMENT:
switch (mono) {
case MONOTONE:
    return NaturalLogicRelation.FORWARD_ENTAILMENT;
case ANTITONE:
  return NaturalLogicRelation.REVERSE_ENTAILMENT;
case NONMONOTONE:
case INVALID:
return NaturalLogicRelation.INDEPENDENCE;
}
case REVERSE_ENTAILMENT:
switch (mono) {
case MONOTONE:
return NaturalLogicRelation.REVERSE_ENTAILMENT;
case ANTITONE:
return NaturalLogicRelation.FORWARD_ENTAILMENT;
case NONMONOTONE:
case INVALID:
return NaturalLogicRelation.INDEPENDENCE;
}
case NEGATION:
switch (type) {
case NONE:
return NaturalLogicRelation.INDEPENDENCE;
case ADDITIVE:
switch (mono) {
case MONOTONE:
return NaturalLogicRelation.COVER;
case ANTITONE:
return NaturalLogicRelation.ALTERNATION;
case NONMONOTONE:
case INVALID:
return NaturalLogicRelation.INDEPENDENCE;
}
case MULTIPLICATIVE:
switch (mono) {
case MONOTONE:
return NaturalLogicRelation.ALTERNATION;
case ANTITONE:
return NaturalLogicRelation.COVER;
case NONMONOTONE:
case INVALID:
return NaturalLogicRelation.INDEPENDENCE;
}
break;
case BOTH:
return NaturalLogicRelation.NEGATION;
}
break;
case ALTERNATION:
switch (mono) {
case MONOTONE:
switch (type) {
case NONE:
case ADDITIVE:
return NaturalLogicRelation.INDEPENDENCE;
case MULTIPLICATIVE:
case BOTH:
return NaturalLogicRelation.ALTERNATION;
}
case ANTITONE:
switch (type) {
case NONE:
case ADDITIVE:
return NaturalLogicRelation.INDEPENDENCE;
case MULTIPLICATIVE:
case BOTH:
return NaturalLogicRelation.COVER;
}
case NONMONOTONE:
case INVALID:
return NaturalLogicRelation.INDEPENDENCE;
}
case COVER:
switch (mono) {
case MONOTONE:
switch (type) {
case NONE:
case MULTIPLICATIVE:
return NaturalLogicRelation.INDEPENDENCE;
case ADDITIVE:
case BOTH:
return NaturalLogicRelation.COVER;
}
case ANTITONE:
switch (type) {
case NONE:
case MULTIPLICATIVE:
return NaturalLogicRelation.INDEPENDENCE;
case ADDITIVE:
case BOTH:
return NaturalLogicRelation.ALTERNATION;
}
case NONMONOTONE:
case INVALID:
return NaturalLogicRelation.INDEPENDENCE;
}
case INDEPENDENCE:
return NaturalLogicRelation.INDEPENDENCE;
}
throw new IllegalStateException("[should not happen!] Projection table is incomplete for " + mono + " : "+ type+ " on relation "+ input);
}
