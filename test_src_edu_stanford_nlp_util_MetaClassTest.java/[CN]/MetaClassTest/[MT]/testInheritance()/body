{
  try {
    Object o=MetaClass.create(CLASS + "$SomethingWrapper").createInstance(new Something());
    assertTrue("Returned class should be a SomethingWrapper",o instanceof SomethingWrapper);
    assertEquals(((SomethingWrapper)o).display(),"something");
  }
 catch (  MetaClass.ClassCreationException e) {
    e.printStackTrace();
    assertFalse("Should not exception on this call",true);
  }
  try {
    Object o=MetaClass.create(CLASS + "$SomethingWrapper").createInstance(new SInstSomething());
    assertTrue("Returned class should be a SomethingWrapper",o instanceof SomethingWrapper);
    assertEquals(((SomethingWrapper)o).displayS(),"Ssomething");
  }
 catch (  MetaClass.ClassCreationException e) {
    e.printStackTrace();
    assertFalse("Should not exception on this call",true);
  }
  try {
    Object o=MetaClass.create(CLASS + "$SomethingWrapper").createInstance(new AInstSomething());
    assertTrue("Returned class should be a SomethingWrapper",o instanceof SomethingWrapper);
    assertEquals(((SomethingWrapper)o).displayA(),"Asomething");
  }
 catch (  MetaClass.ClassCreationException e) {
    e.printStackTrace();
    assertFalse("Should not exception on this call",true);
  }
  try {
    Object o=MetaClass.create(CLASS + "$SomethingWrapper").createInstance(new IInstSomething());
    assertTrue("Returned class should be a SomethingWrapper",o instanceof SomethingWrapper);
    assertEquals(((SomethingWrapper)o).displayI(),"Isomething");
  }
 catch (  MetaClass.ClassCreationException e) {
    e.printStackTrace();
    assertFalse("Should not exception on this call",true);
  }
}
