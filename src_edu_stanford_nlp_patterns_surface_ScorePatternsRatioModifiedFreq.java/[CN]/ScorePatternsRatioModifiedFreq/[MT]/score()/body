{
  Counter<String> externalWordWeightsNormalized=null;
  if (constVars.dictOddsWeights.containsKey(label))   externalWordWeightsNormalized=GetPatternsFromDataMultiClass.normalizeSoftMaxMinMaxScores(constVars.dictOddsWeights.get(label),true,true,false);
  Counter<SurfacePattern> currentPatternWeights4Label=new ClassicCounter<SurfacePattern>();
  boolean useFreqPhraseExtractedByPat=false;
  if (patternScoring.equals(PatternScoring.SqrtAllRatio))   useFreqPhraseExtractedByPat=true;
  Counter<SurfacePattern> numeratorPatWt=this.convert2OneDim(label,patternsandWords4Label,constVars.sqrtPatScore,false,null,useFreqPhraseExtractedByPat);
  Counter<SurfacePattern> denominatorPatWt=null;
  if (patternScoring.equals(PatternScoring.PosNegUnlabOdds)) {
    denominatorPatWt=this.convert2OneDim(label,negandUnLabeledPatternsandWords4Label,constVars.sqrtPatScore,false,externalWordWeightsNormalized,useFreqPhraseExtractedByPat);
  }
 else   if (patternScoring.equals(PatternScoring.RatioAll)) {
    denominatorPatWt=this.convert2OneDim(label,allPatternsandWords4Label,constVars.sqrtPatScore,false,externalWordWeightsNormalized,useFreqPhraseExtractedByPat);
  }
 else   if (patternScoring.equals(PatternScoring.PosNegOdds)) {
    denominatorPatWt=this.convert2OneDim(label,negPatternsandWords4Label,constVars.sqrtPatScore,false,externalWordWeightsNormalized,useFreqPhraseExtractedByPat);
  }
 else   if (patternScoring.equals(PatternScoring.PhEvalInPat) || patternScoring.equals(PatternScoring.PhEvalInPatLogP) || patternScoring.equals(PatternScoring.LOGREG)|| patternScoring.equals(PatternScoring.LOGREGlogP)) {
    denominatorPatWt=this.convert2OneDim(label,negandUnLabeledPatternsandWords4Label,constVars.sqrtPatScore,true,externalWordWeightsNormalized,useFreqPhraseExtractedByPat);
  }
 else   if (patternScoring.equals(PatternScoring.SqrtAllRatio)) {
    denominatorPatWt=this.convert2OneDim(label,negandUnLabeledPatternsandWords4Label,true,false,externalWordWeightsNormalized,useFreqPhraseExtractedByPat);
  }
 else   throw new RuntimeException("Cannot understand patterns scoring");
  currentPatternWeights4Label=Counters.divisionNonNaN(numeratorPatWt,denominatorPatWt);
  if (patternScoring.equals(PatternScoring.PhEvalInPatLogP) || patternScoring.equals(PatternScoring.LOGREGlogP)) {
    Counter<SurfacePattern> logpos_i=new ClassicCounter<SurfacePattern>();
    for (    Entry<SurfacePattern,ClassicCounter<String>> en : patternsandWords4Label.entrySet()) {
      logpos_i.setCount(en.getKey(),Math.log(en.getValue().size()));
    }
    Counters.multiplyInPlace(currentPatternWeights4Label,logpos_i);
  }
  Counters.retainNonZeros(currentPatternWeights4Label);
  return currentPatternWeights4Label;
}
