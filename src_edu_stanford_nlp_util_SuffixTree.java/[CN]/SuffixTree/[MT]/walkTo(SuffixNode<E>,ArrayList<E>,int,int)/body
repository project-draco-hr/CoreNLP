{
  SuffixNode<E> currentNode;
  SuffixNode<E> arrivedAt;
  End end=null;
  currentNode=starting;
  arrivedAt=starting;
  while (from < to) {
    arrivedAt=currentNode.children.get(lookingFor.get(from));
    if (arrivedAt == null) {
      arrivedAt=currentNode;
      end=End.EXTEND_INTERNAL;
      break;
    }
    Label<E> edgeLabel=getEdgeLabel(arrivedAt);
    if (edgeLabel.length() >= to - from) {
      if (edgeLabel.equals(lookingFor,from,to)) {
        if (arrivedAt.isTerminal()) {
          end=End.END_LEAF;
        }
 else {
          end=End.END_INTERNAL;
        }
      }
 else       if (edgeLabel.beginsWith(lookingFor,from,to)) {
        end=End.END_EDGE;
      }
 else {
        end=End.SPLIT_EDGE;
      }
      break;
    }
 else     if (edgeLabel.equals(lookingFor,from,from + edgeLabel.length())) {
      from+=edgeLabel.length();
      currentNode=arrivedAt;
    }
 else {
      end=End.SPLIT_EDGE;
      break;
    }
  }
  return new PathEnd<E>(arrivedAt,end);
}
