{
  StringBuilder sentStr=new StringBuilder();
  List<CoreMap> sentences=document.annotation.get(CoreAnnotations.SentencesAnnotation.class);
  List<List<Mention>> allMentions;
  if (gold) {
    allMentions=document.goldMentions;
  }
 else {
    allMentions=document.predictedMentions;
  }
  int previousOffset=0;
  CoreMap sentence=sentences.get(i);
  List<Mention> mentions=allMentions.get(i);
  List<CoreLabel> t=sentence.get(CoreAnnotations.TokensAnnotation.class);
  String speaker=t.get(0).get(SpeakerAnnotation.class);
  if (NumberMatchingRegex.isDecimalInteger(speaker))   speaker=speaker + ": " + document.predictedMentionsByID.get(Integer.parseInt(speaker)).spanToString();
  sentStr.append("\tspeaker: " + speaker + " ("+ t.get(0).get(UtteranceAnnotation.class)+ ") ");
  String[] tokens=new String[t.size()];
  for (  CoreLabel c : t) {
    tokens[c.index() - 1]=c.word();
  }
  previousOffset=t.get(t.size() - 1).get(CoreAnnotations.CharacterOffsetEndAnnotation.class);
  Counter<Integer> startCounts=new ClassicCounter<Integer>();
  Counter<Integer> endCounts=new ClassicCounter<Integer>();
  Map<Integer,Deque<Mention>> endMentions=Generics.newHashMap();
  for (  Mention m : mentions) {
    startCounts.incrementCount(m.startIndex);
    endCounts.incrementCount(m.endIndex);
    if (!endMentions.containsKey(m.endIndex))     endMentions.put(m.endIndex,new ArrayDeque<Mention>());
    endMentions.get(m.endIndex).push(m);
  }
  for (int j=0; j < tokens.length; j++) {
    if (endMentions.containsKey(j)) {
      for (      Mention m : endMentions.get(j)) {
        int id=(gold) ? m.goldCorefClusterID : m.corefClusterID;
        id=(printClusterID) ? id : m.mentionID;
        sentStr.append("]_").append(id);
      }
    }
    for (int k=0; k < startCounts.getCount(j); k++) {
      if (sentStr.length() > 0 && sentStr.charAt(sentStr.length() - 1) != '[')       sentStr.append(" ");
      sentStr.append("[");
    }
    if (sentStr.length() > 0 && sentStr.charAt(sentStr.length() - 1) != '[')     sentStr.append(" ");
    sentStr.append(tokens[j]);
  }
  if (endMentions.containsKey(tokens.length)) {
    for (    Mention m : endMentions.get(tokens.length)) {
      int id=(gold) ? m.goldCorefClusterID : m.corefClusterID;
      id=(printClusterID) ? id : m.mentionID;
      sentStr.append("]_").append(id);
    }
  }
  return sentStr.toString();
}
