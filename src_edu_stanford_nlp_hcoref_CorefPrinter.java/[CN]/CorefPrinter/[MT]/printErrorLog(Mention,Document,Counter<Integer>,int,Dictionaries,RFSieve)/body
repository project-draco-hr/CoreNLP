{
  StringBuilder sb=new StringBuilder();
  sb.append("\nERROR START-----------------------------------------------------------------------\n");
  sb.append("RESOLVER TYPE: mType: " + sieve.mType + ", aType: "+ sieve.aType).append("\n");
  sb.append("DOCUMENT: " + document.docInfo.get("DOC_ID") + ", "+ document.docInfo.get("DOC_PART")).append("\n");
  List<Mention> orderedAnts=new ArrayList<>();
  sb.append("\nGOLD CLUSTER ID\n");
  for (int sentDist=m.sentNum; sentDist >= 0; sentDist--) {
    if (sentDist == sieve.maxSentDist)     sb.append("\tstart compare from here-------------\n");
    int sentIdx=m.sentNum - sentDist;
    sb.append("\tSENT " + sentIdx + "\t"+ sentenceStringWithMention(sentIdx,document,true,true)).append("\n");
  }
  sb.append("\nMENTION ID\n");
  for (int sentDist=m.sentNum; sentDist >= 0; sentDist--) {
    if (sentDist == sieve.maxSentDist)     sb.append("\tstart compare from here-------------\n");
    int sentIdx=m.sentNum - sentDist;
    sb.append("\tSENT " + sentIdx + "\t"+ sentenceStringWithMention(sentIdx,document,false,false)).append("\n");
  }
  for (int sentDist=0; sentDist <= Math.min(sieve.maxSentDist,m.sentNum); sentDist++) {
    int sentIdx=m.sentNum - sentDist;
    orderedAnts.addAll(Sieve.getOrderedAntecedents(m,sentIdx,mIdx,document.predictedMentions,dict));
  }
  Map<Integer,Integer> orders=Generics.newHashMap();
  for (int i=0; i < orderedAnts.size(); i++) {
    Mention ant=orderedAnts.get(i);
    orders.put(ant.mentionID,i);
  }
  CorefCluster mC=document.corefClusters.get(m.corefClusterID);
  boolean isFirstMention=isFirstMention(m,document);
  boolean foundCorefAnt=(probs.size() > 0 && Counters.max(probs) > sieve.thresMerge);
  boolean correctDecision=((isFirstMention && !foundCorefAnt) || (foundCorefAnt && Sieve.isReallyCoref(document,m.mentionID,Counters.argmax(probs))));
  boolean barePlural=(m.originalSpan.size() == 1 && m.headWord.tag().equals("NNS"));
  if (correctDecision)   return "";
  sb.append("\nMENTION: " + m.spanToString() + " ("+ m.mentionID+ ")\tperson: "+ m.person+ "\tsingleton? "+ (!m.hasTwin)+ "\t\tisFirstMention? "+ isFirstMention+ "\t\tfoundAnt? "+ foundCorefAnt+ "\t\tcorrectDecision? "+ correctDecision+ "\tbarePlural? "+ barePlural);
  sb.append("\n\ttype: " + m.mentionType + "\tHeadword: "+ m.headWord.word()+ "\tNEtype: "+ m.nerString+ "\tnumber: "+ m.number+ "\tgender: "+ m.gender+ "\tanimacy: "+ m.animacy).append("\n");
  if (m.contextParseTree != null)   sb.append(m.contextParseTree.pennString());
  sb.append("\n\n\t\tOracle\t\tDcoref\t\t\tRF\t\tAntecedent\n");
  for (  int antID : Counters.toSortedList(probs)) {
    Mention ant=document.predictedMentionsByID.get(antID);
    CorefCluster aC=document.corefClusters.get(ant.corefClusterID);
    boolean oracle=Sieve.isReallyCoref(document,m.mentionID,antID);
    double prob=probs.getCount(antID);
    int order=orders.get(antID);
    String oracleStr=(oracle) ? "coref   " : "notcoref";
    String dcorefStr="notcoref";
    if (dcorefDiscourse.coreferent(document,mC,aC,m,ant,dict,null))     dcorefStr="coref-discourse";
 else     if (dcorefExactString.coreferent(document,mC,aC,m,ant,dict,null))     dcorefStr="coref-exactString";
 else     if (dcorefRelaxedExactString.coreferent(document,mC,aC,m,ant,dict,null))     dcorefStr="coref-relaxedExact";
 else     if (dcorefPreciseConstructs.coreferent(document,mC,aC,m,ant,dict,null))     dcorefStr="coref-preciseConstruct";
 else     if (dcorefHead1.coreferent(document,mC,aC,m,ant,dict,null))     dcorefStr="coref-head1";
 else     if (dcorefHead2.coreferent(document,mC,aC,m,ant,dict,null))     dcorefStr="coref-head2";
 else     if (dcorefHead3.coreferent(document,mC,aC,m,ant,dict,null))     dcorefStr="coref-head3";
 else     if (dcorefHead4.coreferent(document,mC,aC,m,ant,dict,null))     dcorefStr="coref-head4";
 else     if (dcorefRelaxedHead.coreferent(document,mC,aC,m,ant,dict,null))     dcorefStr="coref-relaxedHead";
 else     if (dcorefPronounSieve.coreferent(document,mC,aC,m,ant,dict,null))     dcorefStr="coref-pronounSieve";
 else     if (dcorefSpeaker.coreferent(document,mC,aC,m,ant,dict,null))     dcorefStr="coref-speaker";
    dcorefStr+="\t" + String.valueOf(order);
    String probStr=df.format(prob);
    sb.append("\t\t" + oracleStr + "\t"+ dcorefStr+ "\t"+ probStr+ "\t\t"+ ant.spanToString()+ " ("+ ant.mentionID+ ")\n");
  }
  sb.append("ERROR END -----------------------------------------------------------------------\n");
  return sb.toString();
}
