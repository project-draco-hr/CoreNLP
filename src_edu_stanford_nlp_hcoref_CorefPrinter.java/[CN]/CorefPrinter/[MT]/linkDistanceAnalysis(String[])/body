{
  Properties props=StringUtils.argsToProperties(args);
  CorefSystem cs=new CorefSystem(props);
  cs.docMaker.resetDocs();
  Counter<Integer> proper=new ClassicCounter<>();
  Counter<Integer> common=new ClassicCounter<>();
  Counter<Integer> pronoun=new ClassicCounter<>();
  Counter<Integer> list=new ClassicCounter<>();
  while (true) {
    Document document=cs.docMaker.nextDoc();
    if (document == null)     break;
    document.extractGoldCorefClusters();
    for (int sentIdx=0; sentIdx < document.predictedMentions.size(); sentIdx++) {
      List<Mention> predictedInSent=document.predictedMentions.get(sentIdx);
      for (int mIdx=0; mIdx < predictedInSent.size(); mIdx++) {
        Mention m=predictedInSent.get(mIdx);
        loop:         for (int distance=0; distance <= sentIdx; distance++) {
          List<Mention> candidates=Sieve.getOrderedAntecedents(m,sentIdx - distance,mIdx,document.predictedMentions,cs.dictionaries);
          for (          Mention candidate : candidates) {
            if (candidate == m)             continue;
            if (distance == 0 && m.appearEarlierThan(candidate))             continue;
            if (candidate.goldCorefClusterID == m.goldCorefClusterID) {
switch (m.mentionType) {
case NOMINAL:
                if (candidate.mentionType == MentionType.NOMINAL || candidate.mentionType == MentionType.PROPER) {
                  common.incrementCount(distance);
                  break loop;
                }
              break;
case PROPER:
            if (candidate.mentionType == MentionType.PROPER) {
              proper.incrementCount(distance);
              break loop;
            }
          break;
case PRONOMINAL:
        pronoun.incrementCount(distance);
      break loop;
case LIST:
    if (candidate.mentionType == MentionType.LIST) {
      list.incrementCount(distance);
      break loop;
    }
  break;
default :
break;
}
}
}
}
}
}
}
System.out.println("PROPER -------------------------------------------");
Counters.printCounterSortedByKeys(proper);
System.out.println("COMMON -------------------------------------------");
Counters.printCounterSortedByKeys(common);
System.out.println("PRONOUN -------------------------------------------");
Counters.printCounterSortedByKeys(pronoun);
System.out.println("LIST -------------------------------------------");
Counters.printCounterSortedByKeys(list);
log.info();
}
