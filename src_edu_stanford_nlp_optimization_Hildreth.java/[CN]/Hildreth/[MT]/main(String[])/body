{
  if (args.length != 4) {
    System.err.println("Usage:\n\tjava ...Hildreth Cfn dfn Gfn hfn");
    System.err.println("\nSolves: ");
    System.err.println("\targmax x' C x + x d");
    System.err.println("\tsubject to G x <= h");
    System.exit(-1);
  }
  RealMatrix C=readMatrix(args[0]);
  RealVector d=readVector(args[1]);
  RealMatrix G=readMatrix(args[2]);
  RealVector h=readVector(args[3]);
  Hildreth hildreth=new Hildreth();
  RealMatrix invC=new LUDecompositionImpl(C).getSolver().getInverse();
  System.out.println("Solving:\n");
  System.out.printf("\targmax_x x' %s x + x %s\n",C,d);
  System.out.printf("\tsubject to %s x <= %s\n",G,h);
  System.out.printf("\ninvC: %s\n",invC);
  RealVector x=hildreth.solve(invC,d,G,h);
  double obj=C.preMultiply(x).dotProduct(x) + x.dotProduct(d);
  RealVector constViolations=G.operate(x).subtract(h);
  System.out.printf("\nSolution: %s\n",x);
  System.out.printf("Value x' C x + x d: %e\n",obj);
  System.out.printf("Constraint Violations\n");
  for (int i=0; i < constViolations.getDimension(); i++) {
    System.out.printf("\t%s x <= %e violation: %e [unclipped %e]\n",Arrays.toString(G.getRow(i)),h.getEntry(i),Math.max(0,constViolations.getEntry(i)),constViolations.getEntry(i));
  }
}
