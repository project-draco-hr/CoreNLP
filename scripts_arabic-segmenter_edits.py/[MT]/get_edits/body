def get_edits(line, options, special_noseg=True):
    if ('\t' not in line):
        if options.verbose:
            uprint("ignoring line that doesn't have two parts:")
            uprint(('    ' + repr(line)))
        return
    (raw, seg) = line.split('\t')
    if (special_noseg and (raw != seg) and (SEG_MARKER not in seg)):
        return ([u'<other>'] * len(raw))
    if (seg == ''):
        return ([u' <del> '] * len(raw))
    if (raw == ''):
        if options.verbose:
            uprint('ignoring line with empty raw text:')
            uprint(('    ' + repr(line)))
        return
    edits = []
    last_raw = ''
    last_seg = ''
    while (len(raw) != 0):
        if (raw.endswith(u'\u0644\u0644') and seg.endswith((u'\u0644%s\u0627\u0644\u0644' % SEG_MARKER))):
            edits.append((u'   %s+\u0627\u0644' % SEG_MARKER))
            seg = seg[:(-3)]
        elif is_ma_alif(seg, raw):
            edits.append((u' +\u0627%s+\u0627 ' % SEG_MARKER))
            seg = seg[:(-3)]
        elif is_shadda(seg, raw):
            if seg.endswith((SEG_MARKER + raw[(-1)])):
                edits.append(u'  x:x  ')
                seg = seg[:(-2)]
            else:
                assert seg.endswith((raw[(-1)] * 2)), repr(((seg + '\t') + raw))
                edits.append(u'  x>xx ')
                seg = seg[:(-1)]
        elif is_seg_plus(seg, raw):
            edits.append((u'   %s+%s ' % (SEG_MARKER, seg[(-2)])))
            seg = seg[:(-2)]
        elif is_plus_seg(seg, raw):
            edits.append((u' +%s%s   ' % (seg[(-3)], SEG_MARKER)))
            seg = seg[:(-2)]
        elif is_lengthening(seg, raw, last_raw):
            edits.append(u' <del> ')
            seg += u' '
        elif seg.endswith((SEG_MARKER + raw[(-1)])):
            edits.append(SEG)
            seg = seg[:(-1)]
        elif ((len(seg) != 0) and (seg[(-1)] == raw[(-1)])):
            edits.append(NOSEG)
        elif is_alaa_normalization(seg, raw):
            edits.append(u'<other>')
            seg = seg[:(-2)]
            if (raw[(-1)] != u'\u0639'):
                assert (raw[(-2)] == u'\u0639')
                seg = (seg + ' ')
        elif ((len(seg) >= 2) and (seg[(-2)] == raw[(-1)]) and (seg[(-1)] in LONG_VOWELS)):
            if ((len(seg) >= 3) and (seg[(-3)] == SEG_MARKER)):
                edits.append((u'   %s+%s ' % (SEG_MARKER, seg[(-1)])))
                seg = seg[:(-2)]
            else:
                edits.append((u'   +%s  ' % seg[(-1)]))
                seg = seg[:(-1)]
        elif (seg.endswith(((u'\u064a' + SEG_MARKER) + u'\u0647')) and raw.endswith(u'\u064a')):
            edits.append((u'  \u064a%s+\u0647 ' % SEG_MARKER))
            seg = seg[:(-2)]
        elif ((len(raw) >= 2) and norm_endswith(seg, raw[(-2)], HAAS) and (raw[(-1)] in (LONG_VOWELS + u'\u0647'))):
            edits.append(u' <del> ')
            seg += u' '
        elif is_diacritic(raw[(-1)]):
            edits.append(u' <del> ')
            seg += u' '
        elif ((len(seg) >= 2) and (seg[(-2)] == SEG_MARKER) and is_common_rewrite(seg, raw)):
            edits.append((u'   %s%s>%s ' % (SEG_MARKER, raw[(-1)], seg[(-1)])))
            seg = seg[:(-1)]
        elif is_common_rewrite(seg, raw):
            edits.append((u'  %s>%s  ' % (raw[(-1)], seg[(-1)])))
        else:
            if options.verbose:
                uprint('ignoring line with unknown edit:')
                uprint(('    ' + line))
                uprint(('(seg = %s; raw = %s)' % (seg, raw)))
                uprint(('(edits = %s)' % edits))
            return
        last_raw = raw[(-1)]
        seg = seg[:(-1)]
        last_seg = raw[(-1)]
        raw = raw[:(-1)]
    if (len(seg) != 0):
        if options.verbose:
            uprint('ignoring line with unknown edit:')
            uprint(('    ' + line))
            uprint(('(extra seg: %s)' % seg))
            uprint(('(edits = %s)' % edits))
        return
    edits.reverse()
    return edits
