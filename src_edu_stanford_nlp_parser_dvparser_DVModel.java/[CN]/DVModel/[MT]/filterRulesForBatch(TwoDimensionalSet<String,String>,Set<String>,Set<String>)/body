{
  TwoDimensionalMap<String,String,SimpleMatrix> newBinaryTransforms=TwoDimensionalMap.treeMap();
  TwoDimensionalMap<String,String,SimpleMatrix> newBinaryScores=TwoDimensionalMap.treeMap();
  for (  Pair<String,String> binaryRule : binaryRules) {
    SimpleMatrix transform=binaryTransform.get(binaryRule.first(),binaryRule.second());
    if (transform != null) {
      newBinaryTransforms.put(binaryRule.first(),binaryRule.second(),transform);
    }
    SimpleMatrix score=binaryScore.get(binaryRule.first(),binaryRule.second());
    if (score != null) {
      newBinaryScores.put(binaryRule.first(),binaryRule.second(),score);
    }
    if ((transform == null && score != null) || (transform != null && score == null)) {
      throw new AssertionError();
    }
  }
  binaryTransform=newBinaryTransforms;
  binaryScore=newBinaryScores;
  numBinaryMatrices=binaryTransform.size();
  Map<String,SimpleMatrix> newUnaryTransforms=Generics.newTreeMap();
  Map<String,SimpleMatrix> newUnaryScores=Generics.newTreeMap();
  for (  String unaryRule : unaryRules) {
    SimpleMatrix transform=unaryTransform.get(unaryRule);
    if (transform != null) {
      newUnaryTransforms.put(unaryRule,transform);
    }
    SimpleMatrix score=unaryScore.get(unaryRule);
    if (score != null) {
      newUnaryScores.put(unaryRule,score);
    }
    if ((transform == null && score != null) || (transform != null && score == null)) {
      throw new AssertionError();
    }
  }
  unaryTransform=newUnaryTransforms;
  unaryScore=newUnaryScores;
  numUnaryMatrices=unaryTransform.size();
  Map<String,SimpleMatrix> newWordVectors=Generics.newTreeMap();
  for (  String word : words) {
    SimpleMatrix wordVector=wordVectors.get(word);
    if (wordVector != null) {
      newWordVectors.put(word,wordVector);
    }
  }
  wordVectors=newWordVectors;
}
