{
  Map<String,Map<Integer,Triple<Set<Integer>,Set<Integer>,Set<Integer>>>> patternsForTokens=new HashMap<String,Map<Integer,Triple<Set<Integer>,Set<Integer>,Set<Integer>>>>();
  for (  String id : sentIds) {
    List<CoreLabel> sent=sents.get(id);
    Map<Integer,Triple<Set<Integer>,Set<Integer>,Set<Integer>>> p=new HashMap<Integer,Triple<Set<Integer>,Set<Integer>,Set<Integer>>>();
    for (int i=0; i < sent.size(); i++) {
      p.put(i,new Triple<Set<Integer>,Set<Integer>,Set<Integer>>(new HashSet<Integer>(),new HashSet<Integer>(),new HashSet<Integer>()));
      CoreLabel token=sent.get(i);
      if (doNotUse(token.word(),constVars.getStopWords())) {
        continue;
      }
      Triple<Set<Integer>,Set<Integer>,Set<Integer>> pat=getContext(sent,i);
      p.put(i,pat);
    }
    patternsForTokens.put(id,p);
  }
  return patternsForTokens;
}
