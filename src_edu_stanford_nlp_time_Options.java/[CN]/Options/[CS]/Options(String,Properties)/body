{
  includeRange=PropertiesUtils.getBool(props,name + ".includeRange",includeRange);
  markTimeRanges=PropertiesUtils.getBool(props,name + ".markTimeRanges",markTimeRanges);
  includeNested=PropertiesUtils.getBool(props,name + ".includeNested",includeNested);
  restrictToTimex3=PropertiesUtils.getBool(props,name + ".restrictToTimex3",restrictToTimex3);
  teRelHeurLevel=RelativeHeuristicLevel.valueOf(props.getProperty(name + ".teRelHeurLevel",teRelHeurLevel.toString()));
  verbose=PropertiesUtils.getBool(props,name + ".verbose",verbose);
  grammarFilename=props.getProperty(name + ".rules",DEFAULT_GRAMMAR_FILES);
  String binderProperty=props.getProperty(name + ".binders");
  int nBinders;
  String[] binderClasses;
  if (binderProperty == null) {
    nBinders=DEFAULT_BINDERS.length;
    binderClasses=DEFAULT_BINDERS;
  }
 else {
    nBinders=PropertiesUtils.getInt(props,name + ".binders",0);
    binderClasses=new String[nBinders];
    for (int i=0; i < nBinders; ++i) {
      String binderPrefix=name + ".binder." + (i + 1);
      binderClasses[i]=props.getProperty(binderPrefix);
    }
  }
  if (nBinders > 0) {
    binders=new Env.Binder[nBinders];
    for (int i=0; i < nBinders; i++) {
      int bi=i + 1;
      String binderPrefix=name + ".binder." + bi;
      try {
        Class binderClass=Class.forName(binderClasses[i]);
        binderPrefix=binderPrefix + ".";
        binders[i]=(Env.Binder)binderClass.newInstance();
        binders[i].init(binderPrefix,props);
      }
 catch (      Exception ex) {
        throw new RuntimeException("Error initializing binder " + bi,ex);
      }
    }
  }
}
