{
  Options op=new Options();
  op.trainOptions.sisterSplitters=new HashSet<String>(Arrays.asList(op.tlpParams.sisterSplitters()));
  Set<String> targets=null;
  System.out.println("Currently " + new Date());
  System.out.print("Invoked with arguments:");
  for (  String arg : args) {
    System.out.print(" " + arg);
  }
  System.out.println();
  int trainLow=200, trainHigh=299, testLow=-1, testHigh=-1, heldoutLow=-1, heldoutHigh=-1;
  String path="/u/nlp/stuff/corpora/Treebank3/parsed/mrg/wsj";
  String binaryOutFile=null;
  String textGrammarOutFile=null;
  String textGrammarInFile=null;
  String testFile=null;
  int i=0;
  while (i < args.length && args[i].startsWith("-")) {
    if (args[i].equalsIgnoreCase("-path") && (i + 1 < args.length)) {
      path=args[i + 1];
      i+=2;
    }
 else     if (args[i].equalsIgnoreCase("-train") && (i + 2 < args.length)) {
      trainLow=Integer.parseInt(args[i + 1]);
      trainHigh=Integer.parseInt(args[i + 2]);
      i+=3;
    }
 else     if (args[i].equalsIgnoreCase("-test") && (i + 2 < args.length)) {
      testLow=Integer.parseInt(args[i + 1]);
      testHigh=Integer.parseInt(args[i + 2]);
      i+=3;
    }
 else     if (args[i].equalsIgnoreCase("-parse") && (i + 1 < args.length)) {
      testFile=args[i + 1];
      i+=2;
    }
 else     if (args[i].equalsIgnoreCase("-saveToBinary") && (i + 1 < args.length)) {
      binaryOutFile=args[i + 1];
      i+=2;
    }
 else     if (args[i].equalsIgnoreCase("-saveToTextFile") && (i + 1 < args.length)) {
      textGrammarOutFile=args[i + 1];
      i+=2;
    }
 else     if (args[i].equalsIgnoreCase("-loadFromTextFile") && (i + 1 < args.length)) {
      textGrammarInFile=args[i + 1];
      i+=2;
    }
 else     if (args[i].equalsIgnoreCase("-targets") && (i + 1 < args.length)) {
      targets=parseTargets(args[i + 1]);
      i+=2;
    }
 else {
      i=op.setOptionOrWarn(args,i);
    }
  }
  op.doDep=false;
  op.doPCFG=true;
  op.trainOptions.markUnary=1;
  op.trainOptions.PA=true;
  op.trainOptions.gPA=false;
  op.trainOptions.tagPA=true;
  op.trainOptions.tagSelectiveSplit=false;
  op.trainOptions.rightRec=true;
  op.trainOptions.selectiveSplit=true;
  op.trainOptions.markovFactor=true;
  op.trainOptions.markovOrder=2;
  op.trainOptions.hSelSplit=true;
  op.lexOptions.useUnknownWordSignatures=2;
  op.lexOptions.flexiTag=true;
  op.dcTags=false;
  LexicalizedParser pd=null;
  if (textGrammarInFile != null) {
    pd=LexicalizedParser.getParserFromTextFile(textGrammarInFile,op);
  }
 else {
    op.trainOptions.display();
    op.display();
    NumberRangeFileFilter filt=new NumberRangeFileFilter(trainLow,trainHigh,true);
    Treebank trainTreebank=op.tlpParams.memoryTreebank();
    Timing.startTime();
    System.err.print("Reading trees...");
    trainTreebank.loadPath(path,filt);
    Timing.tick("done.");
    if (targets == null) {
      throw new RuntimeException("no targets given");
    }
    pd=createParserData(trainTreebank,targets,op);
  }
  if (textGrammarOutFile != null) {
    pd.saveParserToTextFile(textGrammarOutFile);
  }
  if (binaryOutFile != null) {
    pd.saveParserToSerialized(binaryOutFile);
  }
  if (testLow >= 0 && testHigh >= 0) {
    Treebank testTreebank=op.tlpParams.testMemoryTreebank();
    testTreebank.loadPath(path,new NumberRangeFileFilter(testLow,testHigh,true));
    pd.parserQuery().testOnTreebank(testTreebank);
  }
 else   if (testFile != null) {
    parseTestFile(testFile,pd,op);
  }
}
