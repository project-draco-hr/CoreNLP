{
  String wordString=tw.word();
  String tagString=tw.tag();
  IntTaggedWord iTW=new IntTaggedWord(wordString,tagString,wordIndex,tagIndex);
  boolean isMarked=tagString.indexOf('_') >= 0;
  if (targetWords.contains(Integer.valueOf(iTW.word)) && isMarked) {
    IntTaggedWord miTW=new IntTaggedWord(wordIndex.indexOf(wordString + "^",true),iTW.tag);
    seenCounter.incrementCount(miTW,weight);
    IntTaggedWord miT=new IntTaggedWord(nullWord,miTW.tag);
    seenCounter.incrementCount(miT,weight);
    IntTaggedWord miW=new IntTaggedWord(miTW.word,nullTag);
    seenCounter.incrementCount(miW,weight);
    IntTaggedWord mi=new IntTaggedWord(nullWord,nullTag);
    seenCounter.incrementCount(mi,weight);
    tags.add(miT);
    words.add(miW);
  }
  if (isMarked) {
    tagString=treeExtractor.removeSubcatMarkersFromString(tagString,new ArrayList<Integer>());
    iTW=new IntTaggedWord(iTW.word,tagIndex.indexOf(tagString,true));
  }
  seenCounter.incrementCount(iTW,weight);
  IntTaggedWord iT=new IntTaggedWord(nullWord,iTW.tag);
  seenCounter.incrementCount(iT,weight);
  IntTaggedWord iW=new IntTaggedWord(iTW.word,nullTag);
  seenCounter.incrementCount(iW,weight);
  IntTaggedWord i=new IntTaggedWord(nullWord,nullTag);
  seenCounter.incrementCount(i,weight);
  tags.add(iT);
  words.add(iW);
  uwModelTrainer.train(tw,loc,weight);
}
