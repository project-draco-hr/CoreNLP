{
  if (!Arrays.stream(factor.neighborIndices).boxed().collect(Collectors.toSet()).contains(marginalize))   return;
  if (factor.neighborIndices.length <= 1)   return;
  TableFactor maxedOut=factor.maxOut(marginalize);
  assertEquals(factor.neighborIndices.length - 1,maxedOut.neighborIndices.length);
  assertTrue(!Arrays.stream(maxedOut.neighborIndices).boxed().collect(Collectors.toSet()).contains(marginalize));
  for (  int[] assignment : factor) {
    assertTrue(factor.getAssignmentValue(assignment) >= Double.NEGATIVE_INFINITY);
    assertTrue(factor.getAssignmentValue(assignment) <= maxedOut.getAssignmentValue(subsetAssignment(assignment,factor,maxedOut)));
  }
  Map<List<Integer>,List<int[]>> subsetToSuperset=subsetToSupersetAssignments(factor,maxedOut);
  for (  List<Integer> subsetAssignmentList : subsetToSuperset.keySet()) {
    double max=Double.NEGATIVE_INFINITY;
    for (    int[] supersetAssignment : subsetToSuperset.get(subsetAssignmentList)) {
      max=Math.max(max,factor.getAssignmentValue(supersetAssignment));
    }
    int[] subsetAssignment=new int[subsetAssignmentList.size()];
    for (int i=0; i < subsetAssignment.length; i++) {
      subsetAssignment[i]=subsetAssignmentList.get(i);
    }
    assertEquals(max,maxedOut.getAssignmentValue(subsetAssignment),1.0e-5);
  }
}
