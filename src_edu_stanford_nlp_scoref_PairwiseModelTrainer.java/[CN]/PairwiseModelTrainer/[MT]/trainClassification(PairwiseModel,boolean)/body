{
  int numTrainingExamples=model.getNumTrainingExamples();
  Redwood.log("scoref-train","Reading compression...");
  Compressor<String> compressor=IOUtils.readObjectFromFile(StatisticalCorefTrainer.compressorFile);
  Redwood.log("scoref-train","Reading train data...");
  List<DocumentExamples> trainDocuments=IOUtils.readObjectFromFile(StatisticalCorefTrainer.extractedFeaturesFile);
  Redwood.log("scoref-train","Building train set...");
  List<Pair<Example,Map<Integer,CompressedFeatureVector>>> allExamples=anaphoricityModel ? getAnaphoricityExamples(trainDocuments) : getExamples(trainDocuments);
  Redwood.log("scoref-train","Training...");
  Random random=new Random(0);
  int i=0;
  boolean stopTraining=false;
  while (!stopTraining) {
    Collections.shuffle(allExamples,random);
    for (    Pair<Example,Map<Integer,CompressedFeatureVector>> pair : allExamples) {
      if (i++ > numTrainingExamples) {
        stopTraining=true;
        break;
      }
      if (i % 10000 == 0) {
        Redwood.log("scoref-train",String.format("On example %d/%d = %.2f%%",i,numTrainingExamples,100.0 * i / numTrainingExamples));
      }
      model.learn(pair.first,pair.second,compressor);
    }
  }
  Redwood.log("scoref-train","Writing models...");
  model.writeModel();
}
