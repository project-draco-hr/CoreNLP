{
  String modelName=config.getModel();
  MaxentTagger maxentTagger=new MaxentTagger();
  maxentTagger.init(config);
  TaggerExperiments samples=new TaggerExperiments(config,maxentTagger);
  TaggerFeatures feats=samples.getTaggerFeatures();
  byte[][] fnumArr=samples.getFnumArr();
  log.info("Samples from " + config.getFile());
  log.info("Number of features: " + feats.size());
  log.info("Tag set: " + maxentTagger.tags.tagSet());
  Problem p=new Problem(samples,feats);
  LambdaSolveTagger prob=new LambdaSolveTagger(p,0.0001,fnumArr);
  maxentTagger.prob=prob;
  if (config.getSearch().equals("owlqn")) {
    CGRunner runner=new CGRunner(prob,config.getModel(),config.getSigmaSquared());
    runner.solveL1(config.getRegL1());
  }
 else   if (config.getSearch().equals("owlqn2")) {
    CGRunner runner=new CGRunner(prob,config.getModel(),config.getSigmaSquared());
    runner.solveOWLQN2(config.getRegL1());
  }
 else   if (config.getSearch().equals("cg")) {
    CGRunner runner=new CGRunner(prob,config.getModel(),config.getSigmaSquared());
    runner.solveCG();
  }
 else   if (config.getSearch().equals("qn")) {
    CGRunner runner=new CGRunner(prob,config.getModel(),config.getSigmaSquared());
    runner.solveQN();
  }
 else {
    prob.improvedIterative(config.getIterations());
  }
  if (prob.checkCorrectness()) {
    log.info("Model is correct [empirical expec = model expec]");
  }
 else {
    log.info("Model is not correct");
  }
  maxentTagger.removeDeadRules();
  maxentTagger.simplifyLambda();
  maxentTagger.saveModel(modelName);
  log.info("Extractors list:");
  log.info(maxentTagger.extractors.toString() + "\nrare" + maxentTagger.extractorsRare.toString());
}
