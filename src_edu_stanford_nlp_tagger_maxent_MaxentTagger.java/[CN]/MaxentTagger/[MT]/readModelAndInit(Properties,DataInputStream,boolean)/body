{
  try {
    Timing t=new Timing();
    if (printLoading) {
      String source=null;
      if (config != null) {
        source=config.getProperty("model");
      }
      if (source == null) {
        source="data stream";
      }
      t.doing("Reading POS tagger model from " + source);
    }
    TaggerConfig taggerConfig=TaggerConfig.readConfig(rf);
    if (config != null) {
      taggerConfig.setProperties(config);
    }
    init(taggerConfig);
    xSize=rf.readInt();
    ySize=rf.readInt();
    dict=new Dictionary();
    dict.read(rf);
    if (VERBOSE) {
      System.err.println(" dictionary read ");
    }
    tags.read(rf);
    readExtractors(rf);
    dict.setAmbClasses(ambClasses,veryCommonWordThresh,tags);
    int[] numFA=new int[extractors.getSize() + extractorsRare.getSize()];
    int sizeAssoc=rf.readInt();
    fAssociations=new ArrayList<Map<String,int[]>>();
    for (int i=0; i < extractors.getSize() + extractorsRare.getSize(); ++i) {
      fAssociations.add(Generics.<String,int[]>newHashMap());
    }
    if (VERBOSE)     System.err.printf("Reading %d feature keys...\n",sizeAssoc);
    PrintFile pfVP=null;
    if (VERBOSE) {
      pfVP=new PrintFile("pairs.txt");
    }
    for (int i=0; i < sizeAssoc; i++) {
      int numF=rf.readInt();
      FeatureKey fK=new FeatureKey();
      fK.read(rf);
      numFA[fK.num]++;
      Map<String,int[]> fValueAssociations=fAssociations.get(fK.num);
      int[] fTagAssociations=fValueAssociations.get(fK.val);
      if (fTagAssociations == null) {
        fTagAssociations=new int[ySize];
        for (int j=0; j < ySize; ++j) {
          fTagAssociations[j]=-1;
        }
        fValueAssociations.put(fK.val,fTagAssociations);
      }
      fTagAssociations[tags.getIndex(fK.tag)]=numF;
    }
    if (VERBOSE) {
      pfVP.close();
    }
    if (VERBOSE) {
      for (int k=0; k < numFA.length; k++) {
        System.err.println(" Number of features of kind " + k + ' '+ numFA[k]);
      }
    }
    prob=new LambdaSolveTagger(rf);
    if (VERBOSE) {
      System.err.println(" prob read ");
    }
    if (printLoading)     t.done();
  }
 catch (  IOException e) {
    throw new RuntimeIOException("Unrecoverable error while loading a tagger model",e);
  }
catch (  ClassNotFoundException e) {
    throw new RuntimeIOException("Unrecoverable error while loading a tagger model",e);
  }
}
