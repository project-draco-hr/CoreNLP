{
  final TokenizerFactory<? extends HasWord> tokenizerFactory=chooseTokenizerFactory();
  long totalMillis=0;
  int numWords=0;
  int numSentences=0;
  boolean outputVerbosity=config.getOutputVerbosity();
  boolean outputLemmas=config.getOutputLemmas();
  Morphology morpha=(outputLemmas) ? new Morphology() : null;
  if (outputStyle == OutputStyle.XML || outputStyle == OutputStyle.INLINE_XML) {
    writer.write("<?xml version=\"1.0\" encoding=\"" + config.getEncoding() + "\"?>\n");
    writer.write("<pos>\n");
  }
  while (true) {
    final DocumentPreprocessor docProcessor;
    String line=reader.readLine();
    if (line == null)     break;
    docProcessor=new DocumentPreprocessor(new BufferedReader(new StringReader(line)));
    docProcessor.setTokenizerFactory(tokenizerFactory);
    if (config.keepEmptySentences()) {
      docProcessor.setKeepEmptySentences(true);
    }
    for (    List<HasWord> sentence : docProcessor) {
      numWords+=sentence.size();
      Timing t=new Timing();
      tagAndOutputSentence(sentence,outputLemmas,morpha,outputStyle,outputVerbosity,numSentences,"\n",writer);
      totalMillis+=t.stop();
      writer.newLine();
      writer.flush();
      numSentences++;
    }
  }
  if (outputStyle == OutputStyle.XML || outputStyle == OutputStyle.INLINE_XML) {
    writer.write("</pos>\n");
  }
  writer.flush();
  printErrWordsPerSec(totalMillis,numWords);
}
