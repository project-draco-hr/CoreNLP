{
  if (initted)   return;
  this.config=config;
  String lang, arch;
  String[] openClassTags, closedClassTags;
  if (config == null) {
    lang="english";
    arch="left3words";
    openClassTags=StringUtils.EMPTY_STRING_ARRAY;
    closedClassTags=StringUtils.EMPTY_STRING_ARRAY;
    wordFunction=null;
  }
 else {
    this.VERBOSE=config.getVerbose();
    lang=config.getLang();
    arch=config.getArch();
    openClassTags=config.getOpenClassTags();
    closedClassTags=config.getClosedClassTags();
    if (!config.getWordFunction().equals("")) {
      wordFunction=ReflectionLoading.loadByReflection(config.getWordFunction());
    }
    if (((openClassTags.length > 0) && !lang.equals("")) || ((closedClassTags.length > 0) && !lang.equals("")) || ((closedClassTags.length > 0) && (openClassTags.length > 0))) {
      throw new RuntimeException("At least two of lang (\"" + lang + "\"), openClassTags (length "+ openClassTags.length+ ": "+ Arrays.toString(openClassTags)+ "),"+ "and closedClassTags (length "+ closedClassTags.length+ ": "+ Arrays.toString(closedClassTags)+ ") specified---you must choose one!");
    }
 else     if ((openClassTags.length == 0) && lang.equals("") && (closedClassTags.length == 0)&& !config.getLearnClosedClassTags()) {
      System.err.println("warning: no language set, no open-class tags specified, and no closed-class tags specified; assuming ALL tags are open class tags");
    }
  }
  if (openClassTags.length > 0) {
    tags=new TTags();
    tags.setOpenClassTags(openClassTags);
  }
 else   if (closedClassTags.length > 0) {
    tags=new TTags();
    tags.setClosedClassTags(closedClassTags);
  }
 else {
    tags=new TTags(lang);
  }
  defaultScore=lang.equals("english") ? 1.0 : 0.0;
  if (config != null) {
    rareWordThresh=config.getRareWordThresh();
    minFeatureThresh=config.getMinFeatureThresh();
    curWordMinFeatureThresh=config.getCurWordMinFeatureThresh();
    rareWordMinFeatureThresh=config.getRareWordMinFeatureThresh();
    veryCommonWordThresh=config.getVeryCommonWordThresh();
    occurringTagsOnly=config.occurringTagsOnly();
    possibleTagsOnly=config.possibleTagsOnly();
    if (config.getDefaultScore() >= 0)     defaultScore=config.getDefaultScore();
  }
  defaultScores=null;
  if (config == null || config.getMode() == TaggerConfig.Mode.TRAIN) {
    extractors=new Extractors(ExtractorFrames.getExtractorFrames(arch));
    extractorsRare=new Extractors(ExtractorFramesRare.getExtractorFramesRare(arch,tags));
    setExtractorsGlobal();
  }
  ambClasses=new AmbiguityClasses(tags);
  initted=true;
}
