{
  Timing t=new Timing();
  if (printLoading)   t.doing("Reading POS tagger model from " + config.getModel());
  init(config);
  TaggerConfig.readConfig(rf);
  xSize=rf.readInt();
  ySize=rf.readInt();
  dict.read(rf);
  if (VERBOSE) {
    System.err.println(" dictionary read ");
  }
  tags.read(rf);
  readExtractors(rf);
  dict.setAmbClasses(ambClasses,veryCommonWordThresh,tags);
  int[] numFA=new int[extractors.getSize() + extractorsRare.getSize()];
  int sizeAssoc=rf.readInt();
  fAssociations=new ArrayList<Map<String,int[]>>();
  for (int i=0; i < extractors.getSize() + extractorsRare.getSize(); ++i) {
    fAssociations.add(new HashMap<String,int[]>());
  }
  if (VERBOSE)   System.err.printf("Reading %d feature keys...\n",sizeAssoc);
  PrintFile pfVP=null;
  if (VERBOSE) {
    pfVP=new PrintFile("pairs.txt");
  }
  for (int i=0; i < sizeAssoc; i++) {
    int numF=rf.readInt();
    FeatureKey fK=new FeatureKey();
    fK.read(rf);
    numFA[fK.num]++;
    Map<String,int[]> fValueAssociations=fAssociations.get(fK.num);
    int[] fTagAssociations=fValueAssociations.get(fK.val);
    if (fTagAssociations == null) {
      fTagAssociations=new int[ySize];
      for (int j=0; j < ySize; ++j) {
        fTagAssociations[j]=-1;
      }
      fValueAssociations.put(fK.val,fTagAssociations);
    }
    fTagAssociations[tags.getIndex(fK.tag)]=numF;
  }
  if (VERBOSE) {
    pfVP.close();
  }
  if (VERBOSE) {
    for (int k=0; k < numFA.length; k++) {
      System.err.println(" Number of features of kind " + k + ' '+ numFA[k]);
    }
  }
  prob=new LambdaSolveTagger(rf);
  if (VERBOSE) {
    System.err.println(" prob read ");
  }
  if (printLoading)   t.done();
}
