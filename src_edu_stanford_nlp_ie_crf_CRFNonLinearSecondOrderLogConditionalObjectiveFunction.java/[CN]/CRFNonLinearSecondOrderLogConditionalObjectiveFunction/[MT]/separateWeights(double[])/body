{
  int index=0;
  double[][] inputLayerWeights4Edge=emptyW4Edge();
  for (int i=0; i < inputLayerWeights4Edge.length; i++) {
    for (int j=0; j < inputLayerWeights4Edge[i].length; j++) {
      inputLayerWeights4Edge[i][j]=x[index++];
    }
  }
  double[][] inputLayerWeights=emptyW();
  for (int i=0; i < inputLayerWeights.length; i++) {
    for (int j=0; j < inputLayerWeights[i].length; j++) {
      inputLayerWeights[i][j]=x[index++];
    }
  }
  double[][] outputLayerWeights4Edge=emptyU4Edge();
  for (int i=0; i < outputLayerWeights4Edge.length; i++) {
    for (int j=0; j < outputLayerWeights4Edge[i].length; j++) {
      if (useOutputLayer)       outputLayerWeights4Edge[i][j]=x[index++];
 else       outputLayerWeights4Edge[i][j]=1;
    }
  }
  double[][] outputLayerWeights=emptyU();
  for (int i=0; i < outputLayerWeights.length; i++) {
    for (int j=0; j < outputLayerWeights[i].length; j++) {
      if (useOutputLayer)       outputLayerWeights[i][j]=x[index++];
 else       outputLayerWeights[i][j]=1;
    }
  }
  assert(index == x.length);
  return new Quadruple<>(inputLayerWeights4Edge,outputLayerWeights4Edge,inputLayerWeights,outputLayerWeights);
}
