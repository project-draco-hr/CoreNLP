{
  String[] prevLabelSplit=firstCharAndRest(prevLabel);
  String[] currLabelSplit=firstCharAndRest(currLabel);
  if (currLabel.equalsIgnoreCase("O")) {
    return "O";
  }
 else   if (currLabel.equals("")) {
    return "";
  }
 else   if (currLabel.equals("-X-")) {
    return currLabel;
  }
  if (newScheme.equalsIgnoreCase("IO")) {
    if (currLabel.contains("-"))     return "I" + currLabelSplit[1];
 else     return "I-" + currLabel;
  }
  if (newScheme.equalsIgnoreCase("IOB1"))   return currLabel;
  if (newScheme.equalsIgnoreCase("IOB2")) {
    if (currLabelSplit[0].equalsIgnoreCase("I"))     return currLabel;
    if ((prevLabelSplit[1]).equalsIgnoreCase(currLabelSplit[1]))     return currLabel;
 else     return "I" + currLabelSplit[1];
  }
  if (newScheme.equalsIgnoreCase("IOE1")) {
    if ((prevLabelSplit[0]).equalsIgnoreCase("E"))     return "B" + currLabelSplit[1];
 else     return "I" + currLabelSplit[1];
  }
  if (newScheme.equalsIgnoreCase("IOE2")) {
    if (!((prevLabelSplit[0]).equalsIgnoreCase("E")))     return "I" + currLabelSplit[1];
    if (currLabelSplit[1].equalsIgnoreCase(prevLabelSplit[1]))     return "B" + currLabelSplit[1];
 else     return "I" + currLabelSplit[1];
  }
  if (newScheme.equalsIgnoreCase("IOBES")) {
    if ((currLabelSplit[0].equalsIgnoreCase("I")) || (currLabelSplit[0].equalsIgnoreCase("E")))     return "I" + currLabelSplit[1];
    if (currLabelSplit[1].equalsIgnoreCase(prevLabelSplit[1]))     return "B" + currLabelSplit[1];
 else     return "I" + currLabelSplit[1];
  }
  return "ERROR in spec";
}
