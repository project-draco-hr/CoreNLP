{
  CollectionValuedMap<Integer,Integer> originalMap=new CollectionValuedMap<>();
  Random r=new Random();
  for (int i=0; i < 800; i++) {
    Integer rInt1=Integer.valueOf(r.nextInt(400));
    Integer rInt2=Integer.valueOf(r.nextInt(400));
    originalMap.add(rInt1,rInt2);
  }
  CollectionValuedMap<Integer,Integer> originalCopyMap=new CollectionValuedMap<>(originalMap);
  CollectionValuedMap<Integer,Integer> deltaCopyMap=new CollectionValuedMap<>(originalMap);
  CollectionValuedMap<Integer,Integer> deltaMap=new DeltaCollectionValuedMap<>(originalMap);
  CollectionValuedMap<Integer,Integer> delta2Map=originalMap.deltaCopy();
  for (int i=0; i < 400; i++) {
    Integer rInt1=Integer.valueOf(r.nextInt(400));
    Integer rInt2=Integer.valueOf(r.nextInt(400) + 1000);
    deltaMap.add(rInt1,rInt2);
    delta2Map.add(rInt1,rInt2);
    deltaCopyMap.add(rInt1,rInt2);
  }
  for (int i=0; i < 400; i++) {
    Integer rInt1=Integer.valueOf(r.nextInt(1400));
    Integer rInt2=Integer.valueOf(r.nextInt(1400));
    deltaMap.removeMapping(rInt1,rInt2);
    delta2Map.removeMapping(rInt1,rInt2);
    deltaCopyMap.removeMapping(rInt1,rInt2);
  }
  Assert.assertEquals("Copy map not identical",originalMap,originalCopyMap);
  Assert.assertEquals("Delta map not equal to copy",deltaCopyMap,deltaMap);
  Assert.assertEquals("Delta2Map not equal to copy",deltaCopyMap,delta2Map);
}
