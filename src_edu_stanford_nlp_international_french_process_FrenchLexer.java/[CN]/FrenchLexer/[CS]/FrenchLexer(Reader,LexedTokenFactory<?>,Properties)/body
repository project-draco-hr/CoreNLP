{
  this(r);
  this.tokenFactory=tf;
  for (  String key : props.stringPropertyNames()) {
    String value=props.getProperty(key);
    boolean val=Boolean.valueOf(value);
    if ("".equals(key)) {
    }
 else     if ("noSGML".equals(key)) {
      noSGML=val;
    }
 else     if ("invertible".equals(key)) {
      invertible=val;
    }
 else     if ("tokenizeNLs".equals(key)) {
      tokenizeNLs=val;
    }
 else     if ("ptb3Escaping".equals(key)) {
      normalizeAmpersandEntity=val;
      normalizeFractions=val;
      normalizeParentheses=val;
      normalizeOtherBrackets=val;
      ptb3Ellipsis=val;
      unicodeEllipsis=val;
      ptb3Dashes=val;
      escapeForwardSlashAsterisk=val;
    }
 else     if ("normalizeAmpersandEntity".equals(key)) {
      normalizeAmpersandEntity=val;
    }
 else     if ("normalizeFractions".equals(key)) {
      normalizeFractions=val;
    }
 else     if ("normalizeParentheses".equals(key)) {
      normalizeParentheses=val;
    }
 else     if ("normalizeOtherBrackets".equals(key)) {
      normalizeOtherBrackets=val;
    }
 else     if ("ptb3Ellipsis".equals(key)) {
      ptb3Ellipsis=val;
    }
 else     if ("unicodeEllipsis".equals(key)) {
      unicodeEllipsis=val;
    }
 else     if ("ptb3Dashes".equals(key)) {
      ptb3Dashes=val;
    }
 else     if ("escapeForwardSlashAsterisk".equals(key)) {
      escapeForwardSlashAsterisk=val;
    }
 else     if ("untokenizable".equals(key)) {
      if (value.equals("noneDelete")) {
        untokenizable=UntokenizableOptions.NONE_DELETE;
      }
 else       if (value.equals("firstDelete")) {
        untokenizable=UntokenizableOptions.FIRST_DELETE;
      }
 else       if (value.equals("allDelete")) {
        untokenizable=UntokenizableOptions.ALL_DELETE;
      }
 else       if (value.equals("noneKeep")) {
        untokenizable=UntokenizableOptions.NONE_KEEP;
      }
 else       if (value.equals("firstKeep")) {
        untokenizable=UntokenizableOptions.FIRST_KEEP;
      }
 else       if (value.equals("allKeep")) {
        untokenizable=UntokenizableOptions.ALL_KEEP;
      }
 else {
        throw new IllegalArgumentException("FrenchLexer: Invalid option value in constructor: " + key + ": "+ value);
      }
    }
 else     if ("strictTreebank3".equals(key)) {
      strictTreebank3=val;
    }
 else {
      System.err.printf("%s: Invalid options key in constructor: %s%n",this.getClass().getName(),key);
    }
  }
  if (invertible) {
    if (!(tf instanceof CoreLabelTokenFactory)) {
      throw new IllegalArgumentException("FrenchLexer: the invertible option requires a CoreLabelTokenFactory");
    }
    prevWord=(CoreLabel)tf.makeToken("",0,0);
    prevWordAfter=new StringBuilder();
  }
}
