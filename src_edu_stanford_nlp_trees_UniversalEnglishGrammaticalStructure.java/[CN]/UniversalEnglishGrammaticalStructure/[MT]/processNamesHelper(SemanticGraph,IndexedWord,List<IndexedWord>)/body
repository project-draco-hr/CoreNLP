{
  if (nameParts.size() < 1) {
    return;
  }
  Collections.sort(nameParts);
  for (int i=nameParts.get(0).index(), end=oldHead.index(); i < end; i++) {
    IndexedWord node=sg.getNodeByIndexSafe(i);
    if (node == null) {
      return;
    }
    if (!nameParts.contains(node) && PUNCT_TAG_FILTER.test(node.tag())) {
      return;
    }
  }
  IndexedWord gov=sg.getParent(oldHead);
  IndexedWord newHead=nameParts.get(0);
  Set<IndexedWord> children=new HashSet<>(sg.getChildren(oldHead));
  for (  IndexedWord child : children) {
    if (child == newHead) {
      SemanticGraphEdge oldEdge=sg.getEdge(gov,oldHead);
      sg.addEdge(gov,newHead,oldEdge.getRelation(),oldEdge.getWeight(),oldEdge.isExtra());
      sg.removeEdge(oldEdge);
      oldEdge=sg.getEdge(oldHead,newHead);
      sg.addEdge(newHead,oldHead,UniversalEnglishGrammaticalRelations.NAME_MODIFIER,oldEdge.getWeight(),oldEdge.isExtra());
      sg.removeEdge(oldEdge);
    }
 else     if (nameParts.contains(child)) {
      SemanticGraphEdge oldEdge=sg.getEdge(oldHead,child);
      sg.addEdge(newHead,child,UniversalEnglishGrammaticalRelations.NAME_MODIFIER,oldEdge.getWeight(),oldEdge.isExtra());
      sg.removeEdge(oldEdge);
    }
 else {
      SemanticGraphEdge oldEdge=sg.getEdge(oldHead,child);
      sg.addEdge(newHead,child,oldEdge.getRelation(),oldEdge.getWeight(),oldEdge.isExtra());
      sg.removeEdge(oldEdge);
    }
  }
}
