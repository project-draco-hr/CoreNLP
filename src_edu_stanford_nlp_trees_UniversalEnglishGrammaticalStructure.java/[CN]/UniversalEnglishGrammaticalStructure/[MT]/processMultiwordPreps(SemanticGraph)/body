{
  if (sg.getRoots().isEmpty())   return;
  HashMap<String,HashSet<Integer>> bigrams=new HashMap<String,HashSet<Integer>>();
  HashMap<String,HashSet<Integer>> trigrams=new HashMap<String,HashSet<Integer>>();
  List<IndexedWord> vertexList=sg.vertexListSorted();
  int numWords=vertexList.size();
  for (int i=1; i < numWords; i++) {
    String bigram=vertexList.get(i - 1).value().toLowerCase() + "_" + vertexList.get(i).value().toLowerCase();
    if (bigrams.get(bigram) == null) {
      bigrams.put(bigram,new HashSet<Integer>());
    }
    bigrams.get(bigram).add(vertexList.get(i - 1).index());
    if (i > 1) {
      String trigram=vertexList.get(i - 2).value().toLowerCase() + "_" + bigram;
      if (trigrams.get(trigram) == null) {
        trigrams.put(trigram,new HashSet<Integer>());
      }
      trigrams.get(trigram).add(vertexList.get(i - 2).index());
    }
  }
  for (  String bigram : MULTIWORD_PREPS) {
    if (bigrams.get(bigram) == null) {
      continue;
    }
    for (    Integer i : bigrams.get(bigram)) {
      IndexedWord w1=sg.getNodeByIndexSafe(i);
      IndexedWord w2=sg.getNodeByIndexSafe(i + 1);
      if (w1 == null || w2 == null) {
        continue;
      }
      IndexedWord gov1=sg.getParent(w1);
      IndexedWord gov2=sg.getParent(w2);
      if (gov1 == null || gov2 == null) {
        continue;
      }
      SemanticGraphEdge edge1=sg.getEdge(gov1,w1);
      SemanticGraphEdge edge2=sg.getEdge(gov2,w2);
      GrammaticalRelation reln1=edge1.getRelation();
      GrammaticalRelation reln2=edge2.getRelation();
      if (reln1 != CASE_MARKER && reln2 != CASE_MARKER) {
        continue;
      }
      IndexedWord caseGov=reln1 == CASE_MARKER ? gov1 : gov2;
      IndexedWord caseGovGov=sg.getParent(caseGov);
      if (caseGovGov != null && (caseGovGov.equals(w1) || caseGovGov.equals(w2))) {
        continue;
      }
      sg.removeEdge(edge1);
      sg.removeEdge(edge2);
      sg.addEdge(caseGov,w1,CASE_MARKER,Double.NEGATIVE_INFINITY,false);
      sg.addEdge(w1,w2,MULTI_WORD_EXPRESSION,Double.NEGATIVE_INFINITY,false);
    }
  }
  for (  String trigram : THREEWORD_PREPS) {
    if (trigrams.get(trigram) == null) {
      continue;
    }
    for (    Integer i : trigrams.get(trigram)) {
      IndexedWord w1=sg.getNodeByIndexSafe(i);
      IndexedWord w2=sg.getNodeByIndexSafe(i + 1);
      IndexedWord w3=sg.getNodeByIndexSafe(i + 2);
      if (w1 == null || w2 == null || w3 == null) {
        continue;
      }
      IndexedWord gov1=sg.getParent(w1);
      IndexedWord gov2=sg.getParent(w2);
      IndexedWord gov3=sg.getParent(w3);
      if (gov1 == null || gov2 == null || gov3 == null) {
        continue;
      }
      SemanticGraphEdge edge1=sg.getEdge(gov1,w1);
      SemanticGraphEdge edge2=sg.getEdge(gov2,w2);
      SemanticGraphEdge edge3=sg.getEdge(gov3,w3);
      GrammaticalRelation reln1=edge1.getRelation();
      GrammaticalRelation reln3=edge3.getRelation();
      if (reln1 != CASE_MARKER && reln3 != CASE_MARKER) {
        continue;
      }
      IndexedWord caseGov=reln3 == CASE_MARKER ? gov3 : gov1;
      IndexedWord caseGovGov=sg.getParent(caseGov);
      if (caseGovGov != null && (caseGovGov.equals(w1) || caseGovGov.equals(w2) || caseGovGov.equals(w3))) {
        continue;
      }
      sg.removeEdge(edge1);
      sg.removeEdge(edge2);
      sg.removeEdge(edge3);
      sg.addEdge(caseGov,w1,CASE_MARKER,Double.NEGATIVE_INFINITY,false);
      sg.addEdge(w1,w2,MULTI_WORD_EXPRESSION,Double.NEGATIVE_INFINITY,false);
      sg.addEdge(w1,w3,MULTI_WORD_EXPRESSION,Double.NEGATIVE_INFINITY,false);
    }
  }
}
