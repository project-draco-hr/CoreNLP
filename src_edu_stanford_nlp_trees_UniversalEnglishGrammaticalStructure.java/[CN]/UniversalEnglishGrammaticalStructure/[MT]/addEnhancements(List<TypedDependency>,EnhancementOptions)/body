{
  SemanticGraph sg=new SemanticGraph(list);
  if (DEBUG) {
    printListSorted("addEnhancements: before correctDependencies()",sg.typedDependencies());
  }
  correctDependencies(sg);
  if (DEBUG) {
    printListSorted("addEnhancements: after correctDependencies()",sg.typedDependencies());
  }
  if (options.processMultiWordPrepositions) {
    processMultiwordPreps(sg);
    if (DEBUG) {
      printListSorted("addEnhancements: after processMultiwordPreps()",sg.typedDependencies());
    }
  }
  if (options.demoteQuantMod) {
    demoteQuantificationalModifiers(sg);
    if (DEBUG) {
      printListSorted("addEnhancements: after demoteQuantificationalModifiers()",sg.typedDependencies());
    }
  }
  if (options.addCopyNodes) {
    expandPPConjunctions(sg);
    if (DEBUG) {
      printListSorted("addEnhancements: after expandPPConjunctions()",sg.typedDependencies());
    }
    expandPrepConjunctions(sg);
    if (DEBUG) {
      printListSorted("addEnhancements: after expandPrepConjunctions()",sg.typedDependencies());
    }
  }
  if (options.enhancePrepositionalModifiers) {
    addCaseMarkerInformation(sg);
    if (DEBUG) {
      printListSorted("addEnhancements: after addCaseMarkerInformation()",sg.typedDependencies());
    }
  }
  if (options.enhanceConjuncts) {
    addConjInformation(sg);
    if (DEBUG) {
      printListSorted("addEnhancements: after addConjInformation()",sg.typedDependencies());
    }
  }
  if (options.addReferent) {
    addRef(sg);
    if (DEBUG) {
      printListSorted("addEnhancements: after addRef()",sg.typedDependencies());
    }
    collapseReferent(sg);
    if (DEBUG) {
      printListSorted("addEnhancements: after collapseReferent()",sg.typedDependencies());
    }
  }
  if (options.propagateDependents) {
    treatCC(sg);
    if (DEBUG) {
      printListSorted("addEnhancements: after treatCC()",sg.typedDependencies());
    }
  }
  if (options.addXSubj) {
    addExtraNSubj(sg);
    if (DEBUG) {
      printListSorted("addEnhancements: after addExtraNSubj()",sg.typedDependencies());
    }
  }
  correctSubjPass(sg);
  list.clear();
  list.addAll(sg.typedDependencies());
  Collections.sort(list);
}
