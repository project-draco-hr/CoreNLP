{
  this.trainDocs=trainDocs;
  this.props=props;
  this.verbose=verbose;
  stopEarly=("stopEarly".equals(props.getProperty("slTerminate"))) ? true : false;
  maxDepth=Integer.parseInt(props.getProperty("slMaxDepth"));
  bestStructures=new Structure[maxDepth];
  bestF1s=new double[maxDepth];
  trainers[0]=(Corpus)trainDocs.splitRange(0,.67);
  testers[0]=(Corpus)trainDocs.splitRange(.67,1);
  trainers[1]=(Corpus)trainDocs.splitRange(.33,1);
  testers[1]=(Corpus)trainDocs.splitRange(0,.33);
  trainers[2]=(Corpus)trainDocs.splitRange(0,.33,.66,1);
  testers[2]=(Corpus)trainDocs.splitRange(.33,.66);
  if (verbose) {
    System.err.println("*** Structure learning ***");
    System.err.println("Initializing start structure...");
  }
  Structure current;
  Structure start=new Structure();
  start.giveDefault();
  start.initializeTransitions();
  bestResult=crossValidateTest(start);
  argBest=start;
  HMM hmm=new HMM(start,HMM.REGULAR_HMM);
  if (verbose) {
    System.err.println("Training on full set of training documents to get MDL score...");
  }
  hmm.train(trainDocs,props,false);
  mdlScore=hmm.mdlScore(trainDocs);
  int depth=0;
  current=start;
  improving=true;
  oneWorse=false;
  while (depth < maxDepth) {
    if (stopEarly && !improving) {
      break;
    }
    current=expandNode(current,depth);
    depth++;
  }
  if (verbose) {
    System.err.println("*** Structure learning completed ***");
    System.err.println("Depth reached " + depth);
  }
  if (!stopEarly) {
    if (verbose) {
      System.err.println("Selecting best structure across all depths");
    }
    double bestF1=Double.NEGATIVE_INFINITY;
    for (int i=0; i < bestF1s.length; i++) {
      if (bestF1s[i] > bestF1) {
        argBest=bestStructures[i];
        bestF1=bestF1s[i];
      }
    }
  }
  if (verbose) {
    System.err.println("Best structure overall (F1=" + bestResult + "):");
    new HMM(argBest,HMM.REGULAR_HMM).printTransitions();
  }
  return argBest;
}
