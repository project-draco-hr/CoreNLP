{
  q=q.trim();
  if (q.length() == 0) {
    return;
  }
  char lastChar=q.charAt(q.length() - 1);
  if (lastChar != '.' && lastChar != '!' && lastChar != '?') {
    q=q + ".";
  }
  TextAnnotationPatterns annotate=new TextAnnotationPatterns();
  String quotedString=quote(q);
  String jsonObject="{\"input\":" + quotedString + ",\"seedWords\":{\"NAME\":[\""+ StringUtils.join(seedWords.split("[,;]"),"\",\"")+ "\"]}}";
  boolean testmode=true;
  if (model.equalsIgnoreCase("new"))   testmode=false;
  logger.info("Testmode is " + testmode);
  logger.info("model is " + model);
  String suggestions;
  if (testmode) {
    Properties testProps=new Properties();
    if (testPropertiesFile != null && new File(testPropertiesFile).exists()) {
      try {
        String props=IOUtils.stringFromFile(testPropertiesFile);
        testProps.load(new StringReader(props));
      }
 catch (      IOException e) {
        writeError(e,out,"Cannot read test properties file");
        return;
      }
    }
 else {
      writeError(new RuntimeException("test prop file not found"),out,"Test properties file not found");
      return;
    }
    String modelDir=getServletContext().getRealPath("/WEB-INF/data/" + modelNametoDirName.get(model));
    testProps.setProperty("patternsWordsDir",modelDir);
    logger.info("Reading saved model from " + modelDir);
    String seedWordsFiles="NAME," + modelDir + "/NAME/seedwords.txt,"+ modelDir+ "/NAME/phrases.txt";
    String modelPropertiesFile=modelDir + "/model.properties";
    logger.info("Loading model properties from " + modelPropertiesFile);
    String stopWordsFile=modelDir + "/stopwords.txt";
    boolean writeOutputFile=false;
    annotate.setUpProperties(jsonObject,false,writeOutputFile,seedWordsFiles);
    suggestions=annotate.suggestPhrasesTest(testProps,modelPropertiesFile,stopWordsFile);
  }
 else {
    boolean writeOutputFile=false;
    annotate.setUpProperties(jsonObject,false,writeOutputFile,null);
    annotate.processText(writeOutputFile);
    suggestions=annotate.suggestPhrases();
  }
  out.print(suggestions);
}
