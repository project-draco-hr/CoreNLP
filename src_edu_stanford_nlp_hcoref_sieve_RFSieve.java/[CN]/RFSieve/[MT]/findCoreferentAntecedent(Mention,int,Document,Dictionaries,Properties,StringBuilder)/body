{
  int sentIdx=m.sentNum;
  Counter<Integer> probs=new ClassicCounter<>();
  int mentionDist=0;
  for (int sentDist=0; sentDist <= Math.min(this.maxSentDist,sentIdx); sentDist++) {
    List<Mention> candidates=getOrderedAntecedents(m,sentIdx - sentDist,mIdx,document.predictedMentions,dict);
    for (    Mention candidate : candidates) {
      if (skipForAnalysis(candidate,m,props))       continue;
      if (candidate == m)       continue;
      if (!aType.contains(candidate.mentionType))       continue;
      if (m.mentionType == MentionType.PRONOMINAL) {
        if (!matchedMentionType(m,mTypeStr))         continue;
        if (!matchedMentionType(candidate,aTypeStr))         continue;
      }
      if (sentDist == 0 && m.appearEarlierThan(candidate))       continue;
      mentionDist++;
      RVFDatum<Boolean,String> datum=extractDatum(m,candidate,document,mentionDist,dict,props,sievename);
      double probTrue=0;
      if (this.classifierType == ClassifierType.RF) {
        probTrue=this.rf.probabilityOfTrue(datum);
      }
      probs.setCount(candidate.mentionID,probTrue);
    }
  }
  if (CorefProperties.debug(props)) {
    sbLog.append(CorefPrinter.printErrorLog(m,document,probs,mIdx,dict,this));
  }
  if (probs.size() > 0 && Counters.max(probs) > this.thresMerge) {
    int antID=Counters.argmax(probs);
    Sieve.merge(document,m.mentionID,antID);
  }
}
