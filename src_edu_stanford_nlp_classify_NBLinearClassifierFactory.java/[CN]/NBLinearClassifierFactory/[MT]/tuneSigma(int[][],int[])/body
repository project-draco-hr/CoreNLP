{
  Function<Double,Double> CVSigmaToPerplexity=new Function<Double,Double>(){
    @Override public Double apply(    Double trialSigma){
      double score=0.0;
      double sumScore=0.0;
      int foldSize, nbCV;
      System.err.println("Trying sigma = " + trialSigma);
      if (data.length >= folds) {
        foldSize=data.length / folds;
        nbCV=folds;
      }
 else {
        foldSize=1;
        nbCV=data.length;
      }
      for (int j=0; j < nbCV; j++) {
        int testMin=j * foldSize;
        int testMax=testMin + foldSize;
        LinearClassifier<L,F> c=new LinearClassifier<L,F>(weights(data,labels,testMin,testMax,trialSigma,foldSize),featureIndex,labelIndex);
        for (int i=testMin; i < testMax; i++) {
          score-=c.logProbabilityOf(new BasicDatum<L,F>(featureIndex.objects(data[i]))).getCount(labelIndex.get(labels[i]));
        }
        sumScore+=score;
      }
      System.err.printf(": %8g\n",sumScore);
      return sumScore;
    }
  }
;
  GoldenSectionLineSearch gsls=new GoldenSectionLineSearch(true);
  sigma=gsls.minimize(CVSigmaToPerplexity,0.01,0.0001,2.0);
  System.out.println("Sigma used: " + sigma);
}
