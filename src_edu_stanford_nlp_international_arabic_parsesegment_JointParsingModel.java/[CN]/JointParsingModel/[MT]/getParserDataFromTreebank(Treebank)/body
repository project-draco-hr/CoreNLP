{
  log.info("Binarizing training trees...");
  List<Tree> binaryTrainTrees=getAnnotatedBinaryTreebankFromTreebank(trainTreebank);
  Timing.tick("done.");
  Index<String> stateIndex=new HashIndex<>();
  log.info("Extracting PCFG...");
  Extractor<Pair<UnaryGrammar,BinaryGrammar>> bgExtractor=new BinaryGrammarExtractor(op,stateIndex);
  Pair<UnaryGrammar,BinaryGrammar> bgug=bgExtractor.extract(binaryTrainTrees);
  BinaryGrammar bg=bgug.second;
  bg.splitRules();
  UnaryGrammar ug=bgug.first;
  ug.purgeRules();
  Timing.tick("done.");
  log.info("Extracting Lexicon...");
  Index<String> wordIndex=new HashIndex<>();
  Index<String> tagIndex=new HashIndex<>();
  Lexicon lex=op.tlpParams.lex(op,wordIndex,tagIndex);
  lex.initializeTraining(binaryTrainTrees.size());
  lex.train(binaryTrainTrees);
  lex.finishTraining();
  Timing.tick("done.");
  Extractor<DependencyGrammar> dgExtractor=op.tlpParams.dependencyGrammarExtractor(op,wordIndex,tagIndex);
  DependencyGrammar dg=null;
  if (op.doDep) {
    log.info("Extracting Dependencies...");
    dg=dgExtractor.extract(binaryTrainTrees);
    dg.setLexicon(lex);
    Timing.tick("done.");
  }
  log.info("Done extracting grammars and lexicon.");
  return new LexicalizedParser(lex,bg,ug,dg,stateIndex,wordIndex,tagIndex,op);
}
