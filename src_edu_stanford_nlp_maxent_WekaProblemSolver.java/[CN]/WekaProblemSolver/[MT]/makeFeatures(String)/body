{
  data=new Experiments(train.vArray,train.numClasses);
  instanceIndex=createIndex(train.vArray.length,train.numClasses);
  train.makeStringsClasses();
  functions=new Features();
  int maxA=train.numAttributes;
  HashMap<String,Integer> possibleKeys=new HashMap<String,Integer>();
  for (int i=0; i < data.size(); i++) {
    for (int indA=0; indA < maxA; indA++) {
      int a=indA;
      int value=(int)train.getFValue(a,i);
      String key=a + "|" + value+ '|'+ train.getClass(i);
      if (possibleKeys.containsKey(key)) {
        Integer prev=possibleKeys.get(key);
        prev=Integer.valueOf(prev.intValue() + 1);
        possibleKeys.put(key,prev);
      }
 else {
        possibleKeys.put(key,Integer.valueOf(1));
      }
    }
  }
  for (int indA=0; indA < maxA; indA++) {
    int a=indA;
    if (train.nominal(a)) {
      int[][] indsall=new int[train.getNumValues(a)][];
      int[] currentinds=new int[train.getNumValues(a)];
      for (int val=0; val < train.getNumValues(a); val++) {
        int totalval=0;
        for (int y=0; y < data.ySize; y++) {
          String key=a + "|" + val+ '|'+ y;
          if (possibleKeys.containsKey(key)) {
            int thisy=possibleKeys.get(key).intValue();
            totalval+=thisy;
          }
        }
        indsall[val]=new int[totalval];
      }
      for (int i=0; i < data.size(); i++) {
        int val=(int)train.getFValue(a,i);
        indsall[val][currentinds[val]++]=i * data.ySize;
      }
      for (int val=0; val < train.getNumValues(a); val++) {
        for (int y=0; y < data.ySize; y++) {
          String key=a + "|" + val+ '|'+ y;
          int numTrue=0;
          if (possibleKeys.containsKey(key)) {
            numTrue=possibleKeys.get(key).intValue();
          }
          if ((numTrue > cutoff)) {
            int numHere=indsall[val].length;
            int[] indS=new int[numHere];
            for (int j=0; j < numHere; j++) {
              indS[j]=indsall[val][j] + y;
            }
            functions.add(new BinaryFeature(data,indS,instanceIndex));
            fAssociations.put(a + "|" + val+ '|'+ y,Integer.valueOf(functions.size() - 1));
            reverseMap.put(Integer.valueOf(functions.size() - 1),a + "|" + val+ '|'+ y);
            System.out.println("Added " + a + '|'+ val+ '|'+ y);
          }
        }
      }
    }
    if (train.numeric(a)) {
      for (int y=0; y < data.ySize; y++) {
        int numTrue=0;
        double[][] v1=new double[data.size()][data.ySize];
        for (int i=0; i < data.size(); i++) {
          if (train.getFValue(a,i) > 0) {
            v1[i][y]=train.getFValue(a,i);
            numTrue++;
          }
        }
        if (numTrue > cutoff) {
          functions.add(new Feature(data,v1,instanceIndex));
          fAssociations.put(a + "|" + "num"+ '|'+ y,Integer.valueOf(functions.size() - 1));
          reverseMap.put(Integer.valueOf(functions.size() - 1),a + "|" + "num"+ '|'+ y);
        }
      }
    }
  }
  System.out.println("Number of features " + functions.size());
  p=new Problem(data,functions);
}
