{
  data=new Experiments(train.vArray);
  int max=train.getNumAttributes();
  HashMap<Object,Integer> newAssociations=new HashMap<Object,Integer>();
  functions=new Features();
  int start=0;
  if (binary) {
    start=1;
  }
  for (int y=0; y < data.ySize; y++) {
    int numTrue=0;
    double[][] v1=new double[data.size()][data.ySize];
    for (int i=0; i < data.size(); i++) {
      v1[i][y]=1;
      if (train.getClass(i) == y) {
        numTrue++;
      }
    }
    if (fAssociations.containsKey(max + "|" + y)) {
      functions.add(new BinaryFeature(data,v1,instanceIndex));
      newAssociations.put(max + "|" + y,Integer.valueOf(functions.size() - 1));
    }
  }
  for (int a=0; a < train.getNumAttributes(); a++) {
    if (train.nominal(a)) {
      for (int val=start; val < train.getNumValues(a); val++) {
        for (int y=0; y < data.ySize; y++) {
          int numTrue=0;
          double[][] v1=new double[data.size()][data.ySize];
          for (int i=0; i < data.size(); i++) {
            if (train.getFValue(a,i) == val) {
              v1[i][y]=1;
              if (train.getClass(i) == y) {
                numTrue++;
              }
            }
          }
          if (fAssociations.containsKey(a + "|" + val+ '|'+ y)) {
            functions.add(new BinaryFeature(data,v1,instanceIndex));
            newAssociations.put(a + "|" + val+ '|'+ y,Integer.valueOf(functions.size() - 1));
          }
        }
      }
    }
    if (train.numeric(a)) {
      for (int y=0; y < data.ySize; y++) {
        int numTrue=0;
        double[][] v1=new double[data.size()][data.ySize];
        for (int i=0; i < data.size(); i++) {
          if (train.getFValue(a,i) > 0) {
            v1[i][y]=train.getFValue(a,i);
            numTrue++;
          }
        }
        if (fAssociations.containsKey(a + "|" + "num"+ '|'+ y)) {
          functions.add(new Feature(data,v1,instanceIndex));
          newAssociations.put(a + "|" + "num"+ '|'+ y,Integer.valueOf(functions.size() - 1));
        }
      }
    }
  }
  p=new Problem(data,functions);
  fAssociations.clear();
  fAssociations=newAssociations;
}
