{
  RA.begin(argv,CounterGUI.class);
  Arrays.sort(counterFiles);
  List<Counter<E>> counters=new ArrayList<Counter<E>>(counterFiles.length);
  List<File> files=Arrays.asList(counterFiles);
  for (  File file : counterFiles) {
    Counter<E> counter=Counters.loadCounter(file.getPath(),(Class)counterType);
    counters.add(counter);
  }
  for (  CounterGUIAction action : actions) {
switch (action) {
case topKcounts:
      for (int i=0; i < counters.size(); i++) {
        System.out.println(files.get(i).getName() + " : " + counters.get(i).totalCount()+ " : "+ Counters.toBiggestValuesFirstString(counters.get(i),topK));
      }
    break;
case topKtfidf:
  List<Map<E,Double>> asMaps=new ArrayList<Map<E,Double>>(counters.size());
for (Counter<E> counter : counters) {
  asMaps.add(Counters.asMap(new ClassicCounter<E>(counter)));
}
BagUtils.weightByTFIDF(asMaps);
for (int i=0; i < counters.size(); i++) {
System.out.println(files.get(i).getName() + " : " + Counters.toBiggestValuesFirstString(Counters.fromMap(asMaps.get(i)),topK));
}
break;
case topKnormed:
Counter<E> total=new ClassicCounter<E>();
for (Counter<E> counter : counters) {
Counters.addInPlace(total,counter);
}
List<Counter<E>> newCounters=new LinkedList<Counter<E>>();
for (Counter<E> counter : counters) {
ClassicCounter<E> newCounter=new ClassicCounter<E>();
newCounters.add(newCounter);
for (E e : counter.keySet()) {
newCounter.setCount(e,1.0 / ((1.0 / Math.log(counter.getCount(e))) + (1.0 / (counter.getCount(e) / total.getCount(e)))));
}
}
for (int i=0; i < counters.size(); i++) {
System.out.println(files.get(i).getName() + " : " + Counters.toBiggestValuesFirstString(newCounters.get(i),topK));
}
break;
case similarity:
double[][] similarities=new double[counters.size()][counters.size()];
for (int i=0; i < similarities.length; i++) {
final Counter<E> a=counters.get(i);
similarities[i][i]=1;
for (int j=i + 1; j < similarities.length; j++) {
final Counter<E> b=counters.get(j);
similarities[i][j]=similarities[j][i]=Counters.dotProduct(a,b) / (a.totalCount() * b.totalCount());
}
}
System.out.println(Stringify.toString(similarities));
break;
case show:
showCounters(windowTitle,counters);
break;
default :
throw new UnsupportedOperationException("Unrecognized action: " + action);
}
}
}
