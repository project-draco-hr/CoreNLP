{
  Properties props=StringUtils.argsToProperties(args);
  System.err.println("Using properties: " + props);
  String trainFile=props.getProperty("train");
  if (trainFile == null) {
    usage();
    System.exit(1);
  }
  String testFile=props.getProperty("test");
  if (testFile == null) {
    usage();
    System.exit(1);
  }
  double sigma=Double.valueOf(props.getProperty("sigma","1.0"));
  int featureCountThreshold=Integer.valueOf(props.getProperty("threshold","0"));
  String modelFile=props.getProperty("model");
  String outputFile=props.getProperty("output");
  GeneralDataset<String,String> trainSet=loadDataset(trainFile,featureCountThreshold);
  LinearClassifierFactory<String,String> factory=new LinearClassifierFactory<String,String>(1e-4,false,sigma);
  LinearClassifier<String,String> classifier=factory.trainClassifier(trainSet);
  if (modelFile != null)   save(modelFile,classifier);
  List<Datum<String,String>> datums=loadDatums(testFile);
  PrintStream os=null;
  if (outputFile != null)   os=new PrintStream(new FileOutputStream(outputFile));
  int correct=0, total=0;
  for (  Datum<String,String> datum : datums) {
    Pair<String,Double> output=classOf(datum,classifier);
    total++;
    if (output.first().equals(datum.label())) {
      correct++;
    }
    if (os != null) {
      os.println(output.first() + "\t" + output.second());
    }
  }
  if (os != null)   os.close();
  double acc=(double)correct / (double)total;
  System.err.println("Overall accuracy for sigma " + sigma + " and featureCountThreshold "+ featureCountThreshold+ ": "+ acc);
}
