{
  if (args.length == 0) {
    System.err.println("Usage: java edu.stanford.nlp.ie.ExtractorMediator mediatorFilename");
    System.exit(1);
  }
  File mediatorFile=new File(args[0]);
  ExtractorMediator mediator=new ExtractorMediator();
  if (mediatorFile.exists()) {
    System.out.print("Loading mediator file (" + mediatorFile + ")...");
    if (mediator.load(mediatorFile)) {
      System.out.println("Successful.");
    }
 else {
      System.out.println("ERROR");
    }
  }
 else {
    System.out.println("Mediator file not found -> using new mediator");
  }
  mediator.addExtractor(new RegexpExtractor("time-test","time","((1[0-2])|0?[0-9]):[0-5][0-9]( ?[AaPp]\\.?[Mm]\\.?)?"));
  mediator.addExtractor(new RegexpExtractor("price-test","price","\\$[1-9][0-9]*\\.[0-9][0-9]"));
  mediator.assignExtractorField("Product","cost","price-test","price");
  mediator.assignExtractorField("Seminar","start-time","time-test","time");
  try {
    BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
    while (true) {
      System.out.print("command or '?' > ");
      String line=in.readLine().trim();
      if ("?".equals(line)) {
        printCommands();
      }
 else       if (line.startsWith("add ")) {
        String[] addArgs=line.split(" +",2);
        if (addArgs.length == 2) {
          File extractorFile=new File(addArgs[1]);
          if (extractorFile.canRead()) {
            FieldExtractor extractor=ExtractorUtilities.loadExtractor(extractorFile);
            if (extractor == null) {
              System.out.println("ERROR: unable to load extractor from " + extractorFile);
            }
 else             if (mediator.addExtractor(extractor)) {
              String extractorName=extractor.getName();
              String className=mediator.getClassName(extractorName);
              String description=mediator.getDescription(extractorName);
              String[] extractableFields=mediator.getExtractableFields(extractorName);
              System.out.println("Added new extractor: " + extractorName);
              System.out.println("* class name: " + className);
              System.out.println("* extractable fields: " + StringUtils.join(extractableFields,", "));
              System.out.println("* description: " + description);
            }
 else {
              System.out.println("ERROR: mediator already has an extractor named " + extractor.getName());
            }
          }
 else {
            System.out.println("ERROR: can't read " + extractorFile);
          }
        }
 else {
          System.out.println("ERROR: must specify a serialized extractor to add");
        }
      }
 else       if (line.startsWith("assign ")) {
        String[] assignArgs=line.split(" +",5);
        if (assignArgs.length == 5) {
          String className=assignArgs[1];
          String slotName=assignArgs[2];
          String extractorName=assignArgs[3];
          String fieldName=assignArgs[4];
          if (mediator.assignExtractorField(className,slotName,extractorName,fieldName)) {
            System.out.println("Assigned " + className + "."+ slotName+ " to "+ extractorName+ "."+ fieldName);
          }
 else {
            System.out.println("ERROR: assignment failed (bad extractor of field)");
          }
        }
 else {
          System.out.println("ERORR: must specify a class, slot, extractor, and field for assignment");
        }
      }
 else       if (line.startsWith("extract ")) {
        String[] extractArgs=line.split(" +",3);
        if (extractArgs.length == 3) {
          String className=extractArgs[1];
          File file=new File(extractArgs[2]);
          if (file.isFile() && file.canRead()) {
            System.out.println("Loading " + file + "...");
            String text=IOUtils.slurpFile(file);
            System.out.println("Extracting fields to instantiate a new instance of " + className);
            Map<String,String> extractedFieldsBySlotName=mediator.extractSlotFillers(className,text);
            System.out.println("Extracted slots:");
            Iterator<String> slotNameIter=extractedFieldsBySlotName.keySet().iterator();
            while (slotNameIter.hasNext()) {
              String slotName=slotNameIter.next();
              String extractedField=extractedFieldsBySlotName.get(slotName);
              System.out.println("* " + slotName + ": "+ extractedField);
            }
          }
 else {
            System.out.println("ERROR: can't load " + file);
          }
        }
 else {
          System.out.println("ERROR: must provide a class name and file name to extract");
        }
      }
 else       if (line.startsWith("fill ")) {
        String[] extractArgs=line.split(" +",4);
        if (extractArgs.length == 4) {
          String className=extractArgs[1];
          String slotName=extractArgs[2];
          File file=new File(extractArgs[3]);
          if (file.isFile() && file.canRead()) {
            System.out.println("Loading " + file + "...");
            String text=IOUtils.slurpFile(file);
            System.out.println("Extracting filler for " + slotName + " in class "+ className);
            String extractedValue=mediator.extractSlotFiller(className,slotName,text);
            System.out.println("Extracted value for " + slotName + ": "+ extractedValue);
          }
 else {
            System.out.println("ERROR: can't load " + file);
          }
        }
 else {
          System.out.println("ERROR: must provide a class name, slot name, and file name to fill slot");
        }
      }
 else       if ("list assignments".equals(line)) {
        System.out.println("Currently assigned extractor fields (Class.slot -> Extractor.field):");
        String[] classNames=mediator.getExtractableClassNames();
        for (int i=0; i < classNames.length; i++) {
          String[] slotNames=mediator.getExtractableSlots(classNames[i]);
          for (int j=0; j < slotNames.length; j++) {
            ExtractorMediator.ExtractorField ef=mediator.getAssignedExtractorField(classNames[i],slotNames[j]);
            System.out.println("* " + classNames[i] + "."+ slotNames[j]+ " -> "+ ef.getExtractorName()+ "."+ ef.getFieldName());
          }
        }
      }
 else       if ("list extractors".equals(line)) {
        System.out.println("Current extractors managed by this mediator:");
        Iterator<String> extractorNameIter=mediator.getExtractorNames().iterator();
        while (extractorNameIter.hasNext()) {
          String extractorName=extractorNameIter.next();
          String className=mediator.getClassName(extractorName);
          String description=mediator.getDescription(extractorName);
          String[] extractableFields=mediator.getExtractableFields(extractorName);
          System.out.println("* " + extractorName);
          System.out.println("  - class name: " + className);
          System.out.println("  - extractable fields: " + StringUtils.join(extractableFields,", "));
          System.out.println("  - description: " + description);
        }
      }
 else       if (line.startsWith("remove ")) {
        String[] removeArgs=line.split(" +",2);
        if (removeArgs.length == 2) {
          String extractorName=removeArgs[1];
          if (mediator.removeExtractor(extractorName)) {
            System.out.println("Removed extractor: " + extractorName);
          }
 else {
            System.out.println("ERROR: unable to remove extractor: " + extractorName);
          }
        }
 else {
          System.out.println("ERROR: must specify an extractor to remove");
        }
      }
 else       if ("store".equals(line)) {
        System.out.print("Storing mediator file (" + mediatorFile + ")...");
        if (mediator.store()) {
          System.out.println("Successful.");
        }
 else {
          System.out.println("ERROR");
        }
      }
 else       if (line.startsWith("unassign ")) {
        String[] assignArgs=line.split(" +",5);
        if (assignArgs.length == 5) {
          String className=assignArgs[1];
          String slotName=assignArgs[2];
          String extractorName=assignArgs[3];
          String fieldName=assignArgs[4];
          if (mediator.unassignExtractorField(className,slotName,extractorName,fieldName)) {
            System.out.println("Unassigned " + extractorName + "."+ fieldName+ " for "+ className+ "."+ slotName);
          }
 else {
            System.out.println("ERROR: unassignment failed (bad extractor of field)");
          }
        }
 else {
          System.out.println("ERORR: must specify a class, slot, extractor, and field for unassignment");
        }
      }
 else       if ("exit".equals(line)) {
        System.out.println("Goodbye!");
        System.exit(0);
      }
 else {
        System.out.println("UNRECOGNIZED COMMAND - type ? for help");
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
