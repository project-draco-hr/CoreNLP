{
  List<List<Mention>> orderedMentionsBySentence=document.getOrderedMentions();
  List<List<Mention>> goldOrderedMentionsBySentence=document.goldOrderedMentionsBySentence;
  Mention srcMention=orderedMentionsBySentence.get(src.get(0)).get(src.get(1));
  Mention dstMention=orderedMentionsBySentence.get(dst.get(0)).get(dst.get(1));
  List<CoreLabel> srcSentence=srcMention.sentenceWords;
  List<CoreLabel> dstSentence=dstMention.sentenceWords;
  printLink(logger,header,src,dst,orderedMentionsBySentence);
  printList(logger,"Mention:" + srcMention.spanToString(),"Gender:" + srcMention.gender.toString(),"Number:" + srcMention.number.toString(),"Animacy:" + srcMention.animacy.toString(),"Person:" + srcMention.person.toString(),"NER:" + srcMention.nerString,"Head:" + srcMention.headString,"Type:" + srcMention.mentionType.toString(),"utter: " + srcMention.headWord.get(CoreAnnotations.UtteranceAnnotation.class),"speakerID: " + srcMention.headWord.get(CoreAnnotations.SpeakerAnnotation.class),"twinless:" + srcMention.twinless);
  logger.fine("Context:");
  String p="";
  for (int i=0; i < srcSentence.size(); i++) {
    if (i == srcMention.startIndex) {
      p+="[";
    }
    if (i == srcMention.endIndex) {
      p+="]";
    }
    p+=srcSentence.get(i).word() + " ";
  }
  logger.fine(p);
  StringBuilder golds=new StringBuilder();
  golds.append("Gold mentions in the sentence:\n");
  Counter<Integer> mBegin=new ClassicCounter<Integer>();
  Counter<Integer> mEnd=new ClassicCounter<Integer>();
  for (  Mention m : goldOrderedMentionsBySentence.get(src.get(0))) {
    mBegin.incrementCount(m.startIndex);
    mEnd.incrementCount(m.endIndex);
  }
  List<CoreLabel> l=document.annotation.get(CoreAnnotations.SentencesAnnotation.class).get(src.get(0)).get(CoreAnnotations.TokensAnnotation.class);
  for (int i=0; i < l.size(); i++) {
    for (int j=0; j < mEnd.getCount(i); j++) {
      golds.append("]");
    }
    for (int j=0; j < mBegin.getCount(i); j++) {
      golds.append("[");
    }
    golds.append(l.get(i).get(CoreAnnotations.TextAnnotation.class));
    golds.append(" ");
  }
  logger.fine(golds.toString());
  printList(logger,"\nAntecedent:" + dstMention.spanToString(),"Gender:" + dstMention.gender.toString(),"Number:" + dstMention.number.toString(),"Animacy:" + dstMention.animacy.toString(),"Person:" + dstMention.person.toString(),"NER:" + dstMention.nerString,"Head:" + dstMention.headString,"Type:" + dstMention.mentionType.toString(),"utter: " + dstMention.headWord.get(CoreAnnotations.UtteranceAnnotation.class),"speakerID: " + dstMention.headWord.get(CoreAnnotations.SpeakerAnnotation.class),"twinless:" + dstMention.twinless);
  logger.fine("Context:");
  p="";
  for (int i=0; i < dstSentence.size(); i++) {
    if (i == dstMention.startIndex) {
      p+="[";
    }
    if (i == dstMention.endIndex) {
      p+="]";
    }
    p+=dstSentence.get(i).word() + " ";
  }
  logger.fine(p);
  golds=new StringBuilder();
  golds.append("Gold mentions in the sentence:\n");
  mBegin=new ClassicCounter<Integer>();
  mEnd=new ClassicCounter<Integer>();
  for (  Mention m : goldOrderedMentionsBySentence.get(dst.get(0))) {
    mBegin.incrementCount(m.startIndex);
    mEnd.incrementCount(m.endIndex);
  }
  l=document.annotation.get(CoreAnnotations.SentencesAnnotation.class).get(dst.get(0)).get(CoreAnnotations.TokensAnnotation.class);
  for (int i=0; i < l.size(); i++) {
    for (int j=0; j < mEnd.getCount(i); j++) {
      golds.append("]");
    }
    for (int j=0; j < mBegin.getCount(i); j++) {
      golds.append("[");
    }
    golds.append(l.get(i).get(CoreAnnotations.TextAnnotation.class));
    golds.append(" ");
  }
  logger.fine(golds.toString());
  logger.finer("\nMention:: --------------------------------------------------------");
  try {
    logger.finer(srcMention.dependency.toString());
  }
 catch (  Exception e) {
  }
  logger.finer("Parse:");
  logger.finer(formatPennTree(srcMention.contextParseTree));
  logger.finer("\nAntecedent:: -----------------------------------------------------");
  try {
    logger.finer(dstMention.dependency.toString());
  }
 catch (  Exception e) {
  }
  logger.finer("Parse:");
  logger.finer(formatPennTree(dstMention.contextParseTree));
}
