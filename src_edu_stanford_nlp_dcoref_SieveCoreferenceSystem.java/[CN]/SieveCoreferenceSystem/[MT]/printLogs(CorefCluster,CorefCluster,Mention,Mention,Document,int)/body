{
  Map<Mention,IntTuple> positions=document.positions;
  List<List<Mention>> orderedMentionsBySentence=document.getOrderedMentions();
  List<Pair<IntTuple,IntTuple>> goldLinks=document.getGoldLinks();
  IntTuple p1=positions.get(m1);
  assert(p1 != null);
  IntTuple p2=positions.get(m2);
  assert(p2 != null);
  int menDist=0;
  for (int i=p2.get(0); i <= p1.get(0); i++) {
    if (p1.get(0) == p2.get(0)) {
      menDist=p1.get(1) - p2.get(1);
      break;
    }
    if (i == p2.get(0)) {
      menDist+=orderedMentionsBySentence.get(p2.get(0)).size() - p2.get(1);
      continue;
    }
    if (i == p1.get(0)) {
      menDist+=p1.get(1);
      continue;
    }
    if (p2.get(0) < i && i < p1.get(0))     menDist+=orderedMentionsBySentence.get(i).size();
  }
  String correct=(goldLinks.contains(new Pair<IntTuple,IntTuple>(p1,p2))) ? "\tCorrect" : "\tIncorrect";
  logger.finest("\nsentence distance: " + (p1.get(0) - p2.get(0)) + "\tmention distance: "+ menDist+ correct);
  if (!goldLinks.contains(new Pair<IntTuple,IntTuple>(p1,p2))) {
    logger.finer("-------Incorrect merge in pass" + sieveIndex + "::--------------------");
    c1.printCorefCluster(logger);
    logger.finer("--------------------------------------------");
    c2.printCorefCluster(logger);
    logger.finer("--------------------------------------------");
  }
  logger.finer("antecedent: " + m2.spanToString() + "("+ m2.mentionID+ ")\tmention: "+ m1.spanToString()+ "("+ m1.mentionID+ ")\tsentDistance: "+ Math.abs(m1.sentNum - m2.sentNum)+ "\t"+ correct+ " Pass"+ sieveIndex+ ":");
}
