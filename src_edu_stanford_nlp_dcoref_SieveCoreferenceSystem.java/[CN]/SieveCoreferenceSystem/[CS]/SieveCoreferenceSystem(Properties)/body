{
  currentSieve=-1;
  String sievePasses=props.getProperty(Constants.SIEVES_PROP,Constants.SIEVEPASSES);
  sieveClassNames=sievePasses.trim().split(",\\s*");
  sieves=new DeterministicCorefSieve[sieveClassNames.length];
  for (int i=0; i < sieveClassNames.length; i++) {
    sieves[i]=(DeterministicCorefSieve)Class.forName("edu.stanford.nlp.dcoref.sievepasses." + sieveClassNames[i]).getConstructor().newInstance();
    sieves[i].init(props);
  }
  doScore=Boolean.parseBoolean(props.getProperty(Constants.SCORE_PROP,"false"));
  doPostProcessing=Boolean.parseBoolean(props.getProperty(Constants.POSTPROCESSING_PROP,"false"));
  useSingletonPredictor=Boolean.parseBoolean(props.getProperty(Constants.SINGLETON_PROP,"true"));
  maxSentDist=Integer.parseInt(props.getProperty(Constants.MAXDIST_PROP,"-1"));
  useSemantics=sievePasses.contains("AliasMatch") || sievePasses.contains("LexicalChainMatch");
  replicateCoNLL=Boolean.parseBoolean(props.getProperty(Constants.REPLICATECONLL_PROP,"false"));
  conllMentionEvalScript=props.getProperty(Constants.CONLL_SCORER,Constants.conllMentionEvalScript);
  optimizeSieves=Boolean.parseBoolean(props.getProperty(Constants.OPTIMIZE_SIEVES_PROP,"false"));
  optimizeScoreType=props.getProperty(Constants.OPTIMIZE_SIEVES_SCORE_PROP,"pairwise.Precision");
  String[] validMetricTypes={"muc","pairwise","bcub","ceafe","ceafm","combined"};
  String[] parts=optimizeScoreType.split("\\.");
  optimizeConllScore=parts.length > 2 && "conll".equalsIgnoreCase(parts[2]);
  optimizeMetricType=parts[0];
  boolean optimizeMetricTypeOk=false;
  for (  String validMetricType : validMetricTypes) {
    if (validMetricType.equalsIgnoreCase(optimizeMetricType)) {
      optimizeMetricTypeOk=true;
      break;
    }
  }
  if (!optimizeMetricTypeOk) {
    throw new IllegalArgumentException("Invalid metric type for " + Constants.OPTIMIZE_SIEVES_SCORE_PROP + " property: "+ optimizeScoreType);
  }
  optimizeSubScoreType=CorefScorer.SubScoreType.valueOf(parts[1]);
  if (optimizeSieves) {
    String keepSieveOrder=props.getProperty(Constants.OPTIMIZE_SIEVES_KEEP_ORDER_PROP);
    if (keepSieveOrder != null) {
      String[] orderings=keepSieveOrder.split("\\s*,\\s*");
      sievesKeepOrder=new ArrayList<Pair<Integer,Integer>>();
      String firstSieveConstraint=null;
      String lastSieveConstraint=null;
      for (      String ordering : orderings) {
        Pair<Integer,Integer> p=fromSieveOrderConstraintString(ordering,sieveClassNames);
        if (p.first() < 0 && p.second() < 0) {
          throw new IllegalArgumentException("Invalid ordering constraint: " + ordering);
        }
 else         if (p.first() < 0) {
          if (lastSieveConstraint != null) {
            throw new IllegalArgumentException("Cannot have these two ordering constraints: " + lastSieveConstraint + ","+ ordering);
          }
          lastSieveConstraint=ordering;
        }
 else         if (p.second() < 0) {
          if (firstSieveConstraint != null) {
            throw new IllegalArgumentException("Cannot have these two ordering constraints: " + firstSieveConstraint + ","+ ordering);
          }
          firstSieveConstraint=ordering;
        }
        sievesKeepOrder.add(p);
      }
    }
  }
  if (doScore) {
    initScorers();
  }
  dictionaries=new Dictionaries(props);
  semantics=(useSemantics) ? new Semantics(dictionaries) : null;
  if (useSingletonPredictor) {
    singletonPredictor=getSingletonPredictorFromSerializedFile(DefaultPaths.DEFAULT_DCOREF_SINGLETON_MODEL);
  }
  if (props.containsKey("typesToResolve")) {
    this.typesToResolve=props.getProperty("typesToResolve");
  }
}
