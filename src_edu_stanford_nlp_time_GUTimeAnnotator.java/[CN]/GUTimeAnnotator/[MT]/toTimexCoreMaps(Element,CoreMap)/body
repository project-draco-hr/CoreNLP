{
  HashMap<Integer,Integer> beginMap=new HashMap<Integer,Integer>();
  HashMap<Integer,Integer> endMap=new HashMap<Integer,Integer>();
  boolean haveTokenOffsets=true;
  for (  CoreMap sent : originalDocument.get(CoreAnnotations.SentencesAnnotation.class)) {
    for (    CoreLabel token : sent.get(CoreAnnotations.TokensAnnotation.class)) {
      Integer tokBegin=token.get(CoreAnnotations.TokenBeginAnnotation.class);
      Integer tokEnd=token.get(CoreAnnotations.TokenEndAnnotation.class);
      if (tokBegin == null || tokEnd == null) {
        haveTokenOffsets=false;
      }
      int charBegin=token.get(CoreAnnotations.CharacterOffsetBeginAnnotation.class);
      int charEnd=token.get(CoreAnnotations.CharacterOffsetEndAnnotation.class);
      beginMap.put(charBegin,tokBegin);
      endMap.put(charEnd,tokEnd);
    }
  }
  List<CoreMap> timexMaps=new ArrayList<CoreMap>();
  int offset=0;
  NodeList docNodes=docElem.getChildNodes();
  Element textElem=null;
  for (int i=0; i < docNodes.getLength(); i++) {
    Node n=docNodes.item(i);
    if ("text".equals(n.getNodeName())) {
      textElem=(Element)n;
      break;
    }
  }
  NodeList textNodes=textElem.getChildNodes();
  for (int i=0; i < textNodes.getLength(); i++) {
    Node content=textNodes.item(i);
    if (content instanceof Text) {
      Text text=(Text)content;
      offset+=text.getWholeText().length();
    }
 else     if (content instanceof Element) {
      Element child=(Element)content;
      if (child.getNodeName().equals("TIMEX3")) {
        Timex timex=new Timex(child);
        if (child.getChildNodes().getLength() != 1) {
          throw new RuntimeException("TIMEX3 should only contain text " + child);
        }
        String timexText=child.getTextContent();
        CoreMap timexMap=new ArrayCoreMap();
        timexMap.set(TimexAnnotation.class,timex);
        timexMap.set(CoreAnnotations.TextAnnotation.class,timexText);
        int charBegin=offset;
        timexMap.set(CoreAnnotations.CharacterOffsetBeginAnnotation.class,charBegin);
        offset+=timexText.length();
        int charEnd=offset;
        timexMap.set(CoreAnnotations.CharacterOffsetEndAnnotation.class,charEnd);
        if (haveTokenOffsets) {
          Integer tokBegin=beginMap.get(charBegin);
          int searchStep=1;
          while (tokBegin == null) {
            tokBegin=beginMap.get(charBegin - searchStep);
            if (tokBegin == null) {
              tokBegin=beginMap.get(charBegin + searchStep);
            }
            searchStep+=1;
          }
          searchStep=1;
          Integer tokEnd=endMap.get(charEnd);
          while (tokEnd == null) {
            tokEnd=endMap.get(charEnd - searchStep);
            if (tokEnd == null) {
              tokEnd=endMap.get(charEnd + searchStep);
            }
            searchStep+=1;
          }
          timexMap.set(CoreAnnotations.TokenBeginAnnotation.class,tokBegin);
          timexMap.set(CoreAnnotations.TokenEndAnnotation.class,tokEnd);
        }
        timexMaps.add(timexMap);
      }
 else {
        throw new RuntimeException("unexpected element " + child);
      }
    }
 else {
      throw new RuntimeException("unexpected content " + content);
    }
  }
  return timexMaps;
}
