{
  Element inputXML=toInputXML(document);
  File inputFile=File.createTempFile("gutime",".input");
  PrintWriter inputWriter=new PrintWriter(inputFile);
  inputWriter.println(XMLUtils.nodeToString(inputXML,false));
  inputWriter.close();
  boolean useFirstDate=(!document.has(CoreAnnotations.CalendarAnnotation.class) && !document.has(CoreAnnotations.DocDateAnnotation.class));
  ArrayList<String> args=new ArrayList<String>();
  args.add("perl");
  args.add("-I" + this.gutimePath.getPath());
  args.add(new File(this.gutimePath,"TimeTag.pl").getPath());
  if (useFirstDate)   args.add("-FDNW");
  args.add(inputFile.getPath());
  ProcessBuilder process=new ProcessBuilder(args);
  StringWriter outputWriter=new StringWriter();
  SystemUtils.run(process,outputWriter,null);
  String output=outputWriter.getBuffer().toString();
  Pattern docClose=Pattern.compile("</DOC>.*",Pattern.DOTALL);
  output=docClose.matcher(output).replaceAll("</DOC>");
  output=output.replaceAll("<lex.*?>","");
  output=output.replace("</lex>","");
  output=output.replace("<NG>","");
  output=output.replace("</NG>","");
  output=output.replace("<VG>","");
  output=output.replace("</VG>","");
  output=output.replace("<s>","");
  output=output.replace("</s>","");
  Element outputXML;
  try {
    outputXML=XMLUtils.parseElement(output);
  }
 catch (  Exception ex) {
    throw new RuntimeException(String.format("error:\n%s\ninput:\n%s\noutput:\n%s",ex,IOUtils.slurpFile(inputFile),output),ex);
  }
  inputFile.delete();
  List<CoreMap> timexAnns=toTimexCoreMaps(outputXML,document);
  document.set(TimeAnnotations.TimexAnnotations.class,timexAnns);
  if (outputResults) {
    System.out.println(timexAnns);
  }
  int timexIndex=0;
  for (  CoreMap sentence : document.get(CoreAnnotations.SentencesAnnotation.class)) {
    int sentBegin=beginOffset(sentence);
    int sentEnd=endOffset(sentence);
    while (timexIndex < timexAnns.size() && beginOffset(timexAnns.get(timexIndex)) < sentBegin) {
      ++timexIndex;
    }
    int sublistBegin=timexIndex;
    int sublistEnd=timexIndex;
    while (timexIndex < timexAnns.size() && sentBegin <= beginOffset(timexAnns.get(timexIndex)) && endOffset(timexAnns.get(timexIndex)) <= sentEnd) {
      ++sublistEnd;
      ++timexIndex;
    }
    sentence.set(TimeAnnotations.TimexAnnotations.class,timexAnns.subList(sublistBegin,sublistEnd));
  }
}
