{
  TreeReader tr=null;
  CollectionValuedMap<Integer,String> srlMap=null;
  if (this.srlMap != null) {
    String filename=file.getAbsolutePath();
    for (    String suffix : this.srlMap.keySet()) {
      if (filename.endsWith(suffix)) {
        srlMap=this.srlMap.get(suffix);
        break;
      }
    }
    if (srlMap == null) {
      System.err.println("could not find SRL entries for file: " + file);
    }
  }
  try {
    if (PRINT_FILENAMES) {
      System.err.println(file);
    }
    tr=treeReaderFactory().newTreeReader(new BufferedReader(new InputStreamReader(new FileInputStream(file),encoding())));
    int sentIndex=0;
    Tree pt;
    while ((pt=tr.readTree()) != null) {
      if (pt.label() instanceof HasIndex) {
        HasIndex hi=(HasIndex)pt.label();
        hi.setDocID(file.getName());
        hi.setSentIndex(sentIndex);
      }
      if (srlMap == null) {
        parseTrees.add(pt);
      }
 else {
        Collection<String> srls=srlMap.get(sentIndex);
        parseTrees.add(pt);
        if (srls.isEmpty()) {
        }
 else {
          for (          String srl : srls) {
            String[] bits=srl.split("\\s+");
            int verbIndex=Integer.parseInt(bits[0]);
            String lemma=bits[2].split("\\.")[0];
            Tree verb=Trees.getTerminal(pt,verbIndex);
            ((CoreLabel)verb.label()).set(CoreAnnotations.CoNLLPredicateAnnotation.class,true);
            for (int i=4; i < bits.length; i++) {
              String arg=bits[i];
              String[] bits1;
              if (arg.indexOf("ARGM") >= 0) {
                bits1=arg.split("-");
              }
 else {
                bits1=arg.split("-");
              }
              String locs=bits1[0];
              String argType=bits1[1];
              if (argType.equals("rel")) {
                continue;
              }
              for (              String loc : locs.split("[*,]")) {
                bits1=loc.split(":");
                int term=Integer.parseInt(bits1[0]);
                int height=Integer.parseInt(bits1[1]);
                Tree t1=Trees.getPreTerminal(pt,term);
                for (int j=0; j < height; j++) {
                  t1=t1.parent(pt);
                }
                Map<Integer,String> roleMap=((CoreLabel)t1.label()).get(CoreAnnotations.CoNLLSRLAnnotation.class);
                if (roleMap == null) {
                  roleMap=Generics.newHashMap();
                  ((CoreLabel)t1.label()).set(CoreAnnotations.CoNLLSRLAnnotation.class,roleMap);
                }
                roleMap.put(verbIndex,argType);
              }
            }
          }
        }
      }
      sentIndex++;
    }
  }
 catch (  IOException e) {
    throw new RuntimeIOException("MemoryTreebank.processFile IOException in file " + file,e);
  }
 finally {
    IOUtils.closeIgnoringExceptions(tr);
  }
}
