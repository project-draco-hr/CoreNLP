{
  Interval<Integer> i1_10=Interval.toInterval(1,10);
  Interval<Integer> i2_9=Interval.toInterval(2,9);
  Interval<Integer> i5_10=Interval.toInterval(5,10);
  Interval<Integer> i1_5=Interval.toInterval(1,5);
  Interval<Integer> i1_15=Interval.toInterval(1,15);
  Interval<Integer> i5_20=Interval.toInterval(5,20);
  Interval<Integer> i10_20=Interval.toInterval(10,20);
  Interval<Integer> i15_20=Interval.toInterval(15,20);
  Interval<Integer> i1_10b=Interval.toInterval(1,10);
  Interval.RelType rel=i1_10.getRelation(null);
  assertEquals(Interval.RelType.NONE,rel);
  int flags=i1_10.getRelationFlags(null);
  assertEquals(0,flags);
  rel=i1_10.getRelation(i2_9);
  assertEquals(Interval.RelType.CONTAIN,rel);
  flags=i1_10.getRelationFlags(i2_9);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_BEFORE | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_AFTER| Interval.REL_FLAGS_INTERVAL_CONTAIN| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i1_10.getRelation(i1_5);
  assertEquals(Interval.RelType.CONTAIN,rel);
  flags=i1_10.getRelationFlags(i1_5);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_SAME | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_AFTER| Interval.REL_FLAGS_INTERVAL_CONTAIN| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i1_10.getRelation(i1_15);
  assertEquals(Interval.RelType.INSIDE,rel);
  flags=i1_10.getRelationFlags(i1_15);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_SAME | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_BEFORE| Interval.REL_FLAGS_INTERVAL_INSIDE| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i1_10.getRelation(i5_10);
  assertEquals(Interval.RelType.CONTAIN,rel);
  flags=i1_10.getRelationFlags(i5_10);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_BEFORE | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_SAME| Interval.REL_FLAGS_INTERVAL_CONTAIN| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i1_10.getRelation(i5_20);
  assertEquals(Interval.RelType.OVERLAP,rel);
  flags=i1_10.getRelationFlags(i5_20);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_BEFORE | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_BEFORE| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i1_10.getRelation(i10_20);
  assertEquals(Interval.RelType.END_MEET_BEGIN,rel);
  flags=i1_10.getRelationFlags(i10_20);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_BEFORE | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_SAME| Interval.REL_FLAGS_EE_BEFORE| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i1_10.getRelation(i15_20);
  assertEquals(Interval.RelType.BEFORE,rel);
  flags=i1_10.getRelationFlags(i15_20);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_BEFORE | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_BEFORE| Interval.REL_FLAGS_EE_BEFORE| Interval.REL_FLAGS_INTERVAL_BEFORE),toHexString(flags));
  rel=i1_10.getRelation(i1_10b);
  assertEquals(Interval.RelType.EQUAL,rel);
  flags=i1_10.getRelationFlags(i1_10b);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_SAME | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_SAME| Interval.REL_FLAGS_INTERVAL_SAME| Interval.REL_FLAGS_INTERVAL_OVERLAP| Interval.REL_FLAGS_INTERVAL_CONTAIN| Interval.REL_FLAGS_INTERVAL_INSIDE),toHexString(flags));
  rel=i2_9.getRelation(i1_10);
  assertEquals(Interval.RelType.INSIDE,rel);
  flags=i2_9.getRelationFlags(i1_10);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_AFTER | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_BEFORE| Interval.REL_FLAGS_INTERVAL_INSIDE| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i1_5.getRelation(i1_10);
  assertEquals(Interval.RelType.INSIDE,rel);
  flags=i1_5.getRelationFlags(i1_10);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_SAME | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_BEFORE| Interval.REL_FLAGS_INTERVAL_INSIDE| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i1_15.getRelation(i1_10);
  assertEquals(Interval.RelType.CONTAIN,rel);
  flags=i1_15.getRelationFlags(i1_10);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_SAME | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_AFTER| Interval.REL_FLAGS_INTERVAL_CONTAIN| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i5_10.getRelation(i1_10);
  assertEquals(Interval.RelType.INSIDE,rel);
  flags=i5_10.getRelationFlags(i1_10);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_AFTER | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_SAME| Interval.REL_FLAGS_INTERVAL_INSIDE| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i5_20.getRelation(i1_10);
  assertEquals(Interval.RelType.OVERLAP,rel);
  flags=i5_20.getRelationFlags(i1_10);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_AFTER | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_AFTER| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i10_20.getRelation(i1_10);
  assertEquals(Interval.RelType.BEGIN_MEET_END,rel);
  flags=i10_20.getRelationFlags(i1_10);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_AFTER | Interval.REL_FLAGS_SE_SAME | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_AFTER| Interval.REL_FLAGS_INTERVAL_OVERLAP),toHexString(flags));
  rel=i15_20.getRelation(i1_10);
  assertEquals(Interval.RelType.AFTER,rel);
  flags=i15_20.getRelationFlags(i1_10);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_AFTER | Interval.REL_FLAGS_SE_AFTER | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_AFTER| Interval.REL_FLAGS_INTERVAL_AFTER),toHexString(flags));
  rel=i1_10b.getRelation(i1_10);
  assertEquals(Interval.RelType.EQUAL,rel);
  flags=i1_10b.getRelationFlags(i1_10);
  assertEquals(toHexString(Interval.REL_FLAGS_SS_SAME | Interval.REL_FLAGS_SE_BEFORE | Interval.REL_FLAGS_ES_AFTER| Interval.REL_FLAGS_EE_SAME| Interval.REL_FLAGS_INTERVAL_SAME| Interval.REL_FLAGS_INTERVAL_OVERLAP| Interval.REL_FLAGS_INTERVAL_CONTAIN| Interval.REL_FLAGS_INTERVAL_INSIDE),toHexString(flags));
}
