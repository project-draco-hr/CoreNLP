{
  Interval<Integer> i1_10=Interval.toInterval(1,10);
  Interval<Integer> i2_9=Interval.toInterval(2,9);
  Interval<Integer> i5_10=Interval.toInterval(5,10);
  Interval<Integer> i1_5=Interval.toInterval(1,5);
  Interval<Integer> i1_15=Interval.toInterval(1,15);
  Interval<Integer> i5_20=Interval.toInterval(5,20);
  Interval<Integer> i10_20=Interval.toInterval(10,20);
  Interval<Integer> i15_20=Interval.toInterval(15,20);
  Interval<Integer> i1_10b=Interval.toInterval(1,10);
  assertTrue(i1_10.contains(i2_9));
  assertTrue(i1_10.contains(i5_10));
  assertTrue(i1_10.contains(i1_5));
  assertFalse(i1_10.contains(i1_15));
  assertFalse(i1_10.contains(i5_20));
  assertFalse(i1_10.contains(i10_20));
  assertFalse(i1_10.contains(i15_20));
  assertTrue(i1_10.contains(i1_10b));
  assertFalse(i2_9.contains(i1_10));
  assertFalse(i5_10.contains(i1_10));
  assertFalse(i1_5.contains(i1_10));
  assertTrue(i1_15.contains(i1_10));
  assertFalse(i5_20.contains(i1_10));
  assertFalse(i10_20.contains(i1_10));
  assertFalse(i15_20.contains(i1_10));
  assertTrue(i1_10b.contains(i1_10));
  int openFlags=Interval.INTERVAL_OPEN_BEGIN | Interval.INTERVAL_OPEN_END;
  Interval<Integer> i1_10_open=Interval.toInterval(1,10,openFlags);
  Interval<Integer> i2_9_open=Interval.toInterval(2,9,openFlags);
  Interval<Integer> i5_10_open=Interval.toInterval(5,10,openFlags);
  Interval<Integer> i1_5_open=Interval.toInterval(1,5,openFlags);
  Interval<Integer> i1_15_open=Interval.toInterval(1,15,openFlags);
  Interval<Integer> i5_20_open=Interval.toInterval(5,20,openFlags);
  Interval<Integer> i10_20_open=Interval.toInterval(10,20,openFlags);
  Interval<Integer> i15_20_open=Interval.toInterval(15,20,openFlags);
  Interval<Integer> i1_10b_open=Interval.toInterval(1,10,openFlags);
  assertTrue(i1_10_open.contains(i2_9_open));
  assertTrue(i1_10_open.contains(i5_10_open));
  assertTrue(i1_10_open.contains(i1_5_open));
  assertFalse(i1_10_open.contains(i1_15_open));
  assertFalse(i1_10_open.contains(i5_20_open));
  assertFalse(i1_10_open.contains(i10_20_open));
  assertFalse(i1_10_open.contains(i15_20_open));
  assertTrue(i1_10_open.contains(i1_10b_open));
  assertFalse(i2_9_open.contains(i1_10_open));
  assertFalse(i5_10_open.contains(i1_10_open));
  assertFalse(i1_5_open.contains(i1_10_open));
  assertTrue(i1_15_open.contains(i1_10_open));
  assertFalse(i5_20_open.contains(i1_10_open));
  assertFalse(i10_20_open.contains(i1_10_open));
  assertFalse(i15_20_open.contains(i1_10_open));
  assertTrue(i1_10b_open.contains(i1_10_open));
  int openClosedFlags=Interval.INTERVAL_OPEN_BEGIN;
  Interval<Integer> i1_10_openClosed=Interval.toInterval(1,10,openClosedFlags);
  Interval<Integer> i2_9_openClosed=Interval.toInterval(2,9,openClosedFlags);
  Interval<Integer> i5_10_openClosed=Interval.toInterval(5,10,openClosedFlags);
  Interval<Integer> i1_5_openClosed=Interval.toInterval(1,5,openClosedFlags);
  Interval<Integer> i1_10b_openClosed=Interval.toInterval(1,10,openClosedFlags);
  int closedOpenFlags=Interval.INTERVAL_OPEN_END;
  Interval<Integer> i1_10_closedOpen=Interval.toInterval(1,10,closedOpenFlags);
  Interval<Integer> i2_9_closedOpen=Interval.toInterval(2,9,closedOpenFlags);
  Interval<Integer> i5_10_closedOpen=Interval.toInterval(5,10,closedOpenFlags);
  Interval<Integer> i1_5_closedOpen=Interval.toInterval(1,5,closedOpenFlags);
  Interval<Integer> i1_10b_closedOpen=Interval.toInterval(1,10,closedOpenFlags);
  assertTrue(i1_10_closedOpen.contains(i2_9_openClosed));
  assertTrue(i1_10.contains(i2_9_openClosed));
  assertTrue(i1_10_openClosed.contains(i2_9_openClosed));
  assertTrue(i1_10_closedOpen.contains(i2_9_closedOpen));
  assertTrue(i1_10.contains(i2_9_closedOpen));
  assertTrue(i1_10_openClosed.contains(i2_9_closedOpen));
  assertFalse(i1_10_closedOpen.contains(i5_10_openClosed));
  assertTrue(i1_10.contains(i5_10_openClosed));
  assertTrue(i1_10_openClosed.contains(i5_10_openClosed));
  assertTrue(i1_10_closedOpen.contains(i5_10_closedOpen));
  assertTrue(i1_10.contains(i5_10_closedOpen));
  assertTrue(i1_10_openClosed.contains(i5_10_closedOpen));
  assertTrue(i1_10_closedOpen.contains(i1_5_openClosed));
  assertTrue(i1_10.contains(i1_5_openClosed));
  assertTrue(i1_10_openClosed.contains(i1_5_openClosed));
  assertTrue(i1_10_closedOpen.contains(i1_5_closedOpen));
  assertTrue(i1_10.contains(i1_5_closedOpen));
  assertFalse(i1_10_openClosed.contains(i1_5_closedOpen));
  assertTrue(i1_10_openClosed.contains(i1_10b_openClosed));
  assertFalse(i1_10_openClosed.contains(i1_10b_closedOpen));
  assertFalse(i1_10_closedOpen.contains(i1_10b_openClosed));
  assertTrue(i1_10_closedOpen.contains(i1_10b_closedOpen));
}
