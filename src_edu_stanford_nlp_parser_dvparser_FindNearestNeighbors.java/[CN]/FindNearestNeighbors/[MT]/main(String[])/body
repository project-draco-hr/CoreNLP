{
  String modelPath=null;
  String outputPath=null;
  String testTreebankPath=null;
  FileFilter testTreebankFilter=null;
  List<String> unusedArgs=new ArrayList<>();
  for (int argIndex=0; argIndex < args.length; ) {
    if (args[argIndex].equalsIgnoreCase("-model")) {
      modelPath=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-testTreebank")) {
      Pair<String,FileFilter> treebankDescription=ArgUtils.getTreebankDescription(args,argIndex,"-testTreebank");
      argIndex=argIndex + ArgUtils.numSubArgs(args,argIndex) + 1;
      testTreebankPath=treebankDescription.first();
      testTreebankFilter=treebankDescription.second();
    }
 else     if (args[argIndex].equalsIgnoreCase("-output")) {
      outputPath=args[argIndex + 1];
      argIndex+=2;
    }
 else {
      unusedArgs.add(args[argIndex++]);
    }
  }
  if (modelPath == null) {
    throw new IllegalArgumentException("Need to specify -model");
  }
  if (testTreebankPath == null) {
    throw new IllegalArgumentException("Need to specify -testTreebank");
  }
  if (outputPath == null) {
    throw new IllegalArgumentException("Need to specify -output");
  }
  String[] newArgs=unusedArgs.toArray(new String[unusedArgs.size()]);
  LexicalizedParser lexparser=LexicalizedParser.loadModel(modelPath,newArgs);
  Treebank testTreebank=null;
  if (testTreebankPath != null) {
    System.err.println("Reading in trees from " + testTreebankPath);
    if (testTreebankFilter != null) {
      System.err.println("Filtering on " + testTreebankFilter);
    }
    testTreebank=lexparser.getOp().tlpParams.memoryTreebank();
    ;
    testTreebank.loadPath(testTreebankPath,testTreebankFilter);
    System.err.println("Read in " + testTreebank.size() + " trees for testing");
  }
  FileWriter out=new FileWriter(outputPath);
  BufferedWriter bout=new BufferedWriter(out);
  System.err.println("Parsing " + testTreebank.size() + " trees");
  int count=0;
  List<ParseRecord> records=Generics.newArrayList();
  for (  Tree goldTree : testTreebank) {
    List<Word> tokens=goldTree.yieldWords();
    ParserQuery parserQuery=lexparser.parserQuery();
    if (!parserQuery.parse(tokens)) {
      throw new AssertionError("Could not parse: " + tokens);
    }
    if (!(parserQuery instanceof RerankingParserQuery)) {
      throw new IllegalArgumentException("Expected a LexicalizedParser with a Reranker attached");
    }
    RerankingParserQuery rpq=(RerankingParserQuery)parserQuery;
    if (!(rpq.rerankerQuery() instanceof DVModelReranker.Query)) {
      throw new IllegalArgumentException("Expected a LexicalizedParser with a DVModel attached");
    }
    DeepTree tree=((DVModelReranker.Query)rpq.rerankerQuery()).getDeepTrees().get(0);
    SimpleMatrix rootVector=null;
    for (    Map.Entry<Tree,SimpleMatrix> entry : tree.getVectors().entrySet()) {
      if (entry.getKey().label().value().equals("ROOT")) {
        rootVector=entry.getValue();
        break;
      }
    }
    if (rootVector == null) {
      throw new AssertionError("Could not find root nodevector");
    }
    out.write(tokens + "\n");
    out.write(tree.getTree() + "\n");
    for (int i=0; i < rootVector.getNumElements(); ++i) {
      out.write("  " + rootVector.get(i));
    }
    out.write("\n\n\n");
    count++;
    if (count % 10 == 0) {
      System.err.print("  " + count);
    }
    records.add(new ParseRecord(tokens,goldTree,tree.getTree(),rootVector,tree.getVectors()));
  }
  System.err.println("  done parsing");
  List<Pair<Tree,SimpleMatrix>> subtrees=Generics.newArrayList();
  for (  ParseRecord record : records) {
    for (    Map.Entry<Tree,SimpleMatrix> entry : record.nodeVectors.entrySet()) {
      if (entry.getKey().getLeaves().size() <= maxLength) {
        subtrees.add(Pair.makePair(entry.getKey(),entry.getValue()));
      }
    }
  }
  System.err.println("There are " + subtrees.size() + " subtrees in the set of trees");
  PriorityQueue<ScoredObject<Pair<Tree,Tree>>> bestmatches=new PriorityQueue<>(101,ScoredComparator.DESCENDING_COMPARATOR);
  for (int i=0; i < subtrees.size(); ++i) {
    System.err.println(subtrees.get(i).first().yieldWords());
    System.err.println(subtrees.get(i).first());
    for (int j=0; j < subtrees.size(); ++j) {
      if (i == j) {
        continue;
      }
      double normF=subtrees.get(i).second().minus(subtrees.get(j).second()).normF();
      bestmatches.add(new ScoredObject<>(Pair.makePair(subtrees.get(i).first(),subtrees.get(j).first()),normF));
      if (bestmatches.size() > 100) {
        bestmatches.poll();
      }
    }
    List<ScoredObject<Pair<Tree,Tree>>> ordered=Generics.newArrayList();
    while (bestmatches.size() > 0) {
      ordered.add(bestmatches.poll());
    }
    Collections.reverse(ordered);
    for (    ScoredObject<Pair<Tree,Tree>> pair : ordered) {
      System.err.println(" MATCHED " + pair.object().second.yieldWords() + " ... "+ pair.object().second()+ " with a score of "+ pair.score());
    }
    System.err.println();
    System.err.println();
    bestmatches.clear();
  }
  bout.flush();
  out.flush();
  out.close();
}
