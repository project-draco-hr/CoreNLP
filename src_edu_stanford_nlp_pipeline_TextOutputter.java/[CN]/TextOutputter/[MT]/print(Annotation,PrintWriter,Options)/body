{
  double beam=options.beamPrintingOption;
  List<CoreMap> sentences=annotation.get(CoreAnnotations.SentencesAnnotation.class);
  String docId=annotation.get(CoreAnnotations.DocIDAnnotation.class);
  if (docId != null) {
    List<CoreLabel> tokens=annotation.get(CoreAnnotations.TokensAnnotation.class);
    int nSentences=(sentences != null) ? sentences.size() : 0;
    int nTokens=(tokens != null) ? tokens.size() : 0;
    pw.printf("Document: ID=%s (%d sentences, %d tokens)%n",docId,nSentences,nTokens);
  }
  String docTitle=annotation.get(CoreAnnotations.DocTitleAnnotation.class);
  if (docTitle != null) {
    pw.printf("Document Title: %s%n",docTitle);
  }
  String docDate=annotation.get(CoreAnnotations.DocDateAnnotation.class);
  if (docDate != null) {
    pw.printf("Document Date: %s%n",docDate);
  }
  String docType=annotation.get(CoreAnnotations.DocTypeAnnotation.class);
  if (docType != null) {
    pw.printf("Document Type: %s%n",docType);
  }
  String docSourceType=annotation.get(CoreAnnotations.DocSourceTypeAnnotation.class);
  if (docSourceType != null) {
    pw.printf("Document Source Type: %s%n",docSourceType);
  }
  if (sentences != null) {
    for (int i=0, sz=sentences.size(); i < sz; i++) {
      CoreMap sentence=sentences.get(i);
      List<CoreLabel> tokens=sentence.get(CoreAnnotations.TokensAnnotation.class);
      String sentiment=sentence.get(SentimentCoreAnnotations.SentimentClass.class);
      if (sentiment == null) {
        sentiment="";
      }
 else {
        sentiment=", sentiment: " + sentiment;
      }
      pw.printf("Sentence #%d (%d tokens%s):%n",(i + 1),tokens.size(),sentiment);
      String text=sentence.get(CoreAnnotations.TextAnnotation.class);
      pw.println(text);
      String[] tokenAnnotations={"Text","PartOfSpeech","Lemma","Answer","NamedEntityTag","CharacterOffsetBegin","CharacterOffsetEnd","NormalizedNamedEntityTag","Timex","TrueCase","TrueCaseText","SentimentClass"};
      for (      CoreLabel token : tokens) {
        pw.print(token.toShorterString(tokenAnnotations));
        pw.println();
      }
      Tree tree=sentence.get(TreeCoreAnnotations.TreeAnnotation.class);
      if (tree != null) {
        options.constituentTreePrinter.printTree(tree,pw);
      }
      if (sentence.get(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class) != null) {
        pw.print(sentence.get(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class).toList());
        pw.println();
      }
      List<EntityMention> entities=sentence.get(MachineReadingAnnotations.EntityMentionsAnnotation.class);
      if (entities != null) {
        pw.println("Extracted the following MachineReading entity mentions:");
        for (        EntityMention e : entities) {
          pw.print('\t');
          pw.println(e);
        }
      }
      List<RelationMention> relations=sentence.get(MachineReadingAnnotations.RelationMentionsAnnotation.class);
      if (relations != null) {
        pw.println("Extracted the following MachineReading relation mentions:");
        for (        RelationMention r : relations) {
          if (r.printableObject(beam)) {
            pw.println(r);
          }
        }
      }
      Collection<RelationTriple> openieTriples=sentence.get(NaturalLogicAnnotations.RelationTriplesAnnotation.class);
      if (openieTriples != null && openieTriples.size() > 0) {
        pw.println("Extracted the following Open IE triples:");
        for (        RelationTriple triple : openieTriples) {
          pw.println(OpenIE.tripleToString(triple,docId,sentence));
        }
      }
      Collection<RelationTriple> kbpTriples=sentence.get(CoreAnnotations.KBPTriplesAnnotation.class);
      if (kbpTriples != null && kbpTriples.size() > 0) {
        pw.println("Extracted the following KBP triples:");
        for (        RelationTriple triple : kbpTriples) {
          pw.println(triple.toString());
        }
      }
    }
  }
  Map<Integer,CorefChain> corefChains=annotation.get(CorefCoreAnnotations.CorefChainAnnotation.class);
  if (corefChains != null && sentences != null) {
    for (    CorefChain chain : corefChains.values()) {
      CorefChain.CorefMention representative=chain.getRepresentativeMention();
      boolean outputHeading=false;
      for (      CorefChain.CorefMention mention : chain.getMentionsInTextualOrder()) {
        if (mention == representative)         continue;
        if (!outputHeading) {
          outputHeading=true;
          pw.println("Coreference set:");
        }
        pw.printf("\t(%d,%d,[%d,%d]) -> (%d,%d,[%d,%d]), that is: \"%s\" -> \"%s\"%n",mention.sentNum,mention.headIndex,mention.startIndex,mention.endIndex,representative.sentNum,representative.headIndex,representative.startIndex,representative.endIndex,mention.mentionSpan,representative.mentionSpan);
      }
    }
  }
  pw.flush();
}
