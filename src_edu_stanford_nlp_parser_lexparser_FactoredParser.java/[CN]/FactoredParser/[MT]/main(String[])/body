{
  Options op=new Options(new EnglishTreebankParserParams());
  System.out.println(StringUtils.toInvocationString("FactoredParser",args));
  String path="/u/nlp/stuff/corpora/Treebank3/parsed/mrg/wsj";
  int trainLow=200, trainHigh=2199, testLow=2200, testHigh=2219;
  String serializeFile=null;
  int i=0;
  while (i < args.length && args[i].startsWith("-")) {
    if (args[i].equalsIgnoreCase("-path") && (i + 1 < args.length)) {
      path=args[i + 1];
      i+=2;
    }
 else     if (args[i].equalsIgnoreCase("-train") && (i + 2 < args.length)) {
      trainLow=Integer.parseInt(args[i + 1]);
      trainHigh=Integer.parseInt(args[i + 2]);
      i+=3;
    }
 else     if (args[i].equalsIgnoreCase("-test") && (i + 2 < args.length)) {
      testLow=Integer.parseInt(args[i + 1]);
      testHigh=Integer.parseInt(args[i + 2]);
      i+=3;
    }
 else     if (args[i].equalsIgnoreCase("-serialize") && (i + 1 < args.length)) {
      serializeFile=args[i + 1];
      i+=2;
    }
 else     if (args[i].equalsIgnoreCase("-tLPP") && (i + 1 < args.length)) {
      try {
        op.tlpParams=(TreebankLangParserParams)Class.forName(args[i + 1]).newInstance();
      }
 catch (      ClassNotFoundException e) {
        System.err.println("Class not found: " + args[i + 1]);
        throw new RuntimeException(e);
      }
catch (      InstantiationException e) {
        System.err.println("Couldn't instantiate: " + args[i + 1] + ": "+ e.toString());
        throw new RuntimeException(e);
      }
catch (      IllegalAccessException e) {
        System.err.println("illegal access" + e);
        throw new RuntimeException(e);
      }
      i+=2;
    }
 else     if (args[i].equals("-encoding")) {
      op.tlpParams.setInputEncoding(args[i + 1]);
      op.tlpParams.setOutputEncoding(args[i + 1]);
      i+=2;
    }
 else {
      i=op.setOptionOrWarn(args,i);
    }
  }
  TreebankLanguagePack tlp=op.tlpParams.treebankLanguagePack();
  op.trainOptions.sisterSplitters=new HashSet<String>(Arrays.asList(op.tlpParams.sisterSplitters()));
  PrintWriter pw=op.tlpParams.pw();
  op.testOptions.display();
  op.trainOptions.display();
  op.display();
  op.tlpParams.display();
  Treebank trainTreebank=op.tlpParams.memoryTreebank();
  MemoryTreebank testTreebank=op.tlpParams.testMemoryTreebank();
  Timing.startTime();
  System.err.print("Reading trees...");
  testTreebank.loadPath(path,new NumberRangeFileFilter(testLow,testHigh,true));
  if (op.testOptions.increasingLength) {
    Collections.sort(testTreebank,new TreeLengthComparator());
  }
  trainTreebank.loadPath(path,new NumberRangeFileFilter(trainLow,trainHigh,true));
  Timing.tick("done.");
  System.err.print("Binarizing trees...");
  TreeAnnotatorAndBinarizer binarizer;
  if (!op.trainOptions.leftToRight) {
    binarizer=new TreeAnnotatorAndBinarizer(op.tlpParams,op.forceCNF,!op.trainOptions.outsideFactor(),true,op);
  }
 else {
    binarizer=new TreeAnnotatorAndBinarizer(op.tlpParams.headFinder(),new LeftHeadFinder(),op.tlpParams,op.forceCNF,!op.trainOptions.outsideFactor(),true,op);
  }
  CollinsPuncTransformer collinsPuncTransformer=null;
  if (op.trainOptions.collinsPunc) {
    collinsPuncTransformer=new CollinsPuncTransformer(tlp);
  }
  TreeTransformer debinarizer=new Debinarizer(op.forceCNF);
  List<Tree> binaryTrainTrees=new ArrayList<Tree>();
  if (op.trainOptions.selectiveSplit) {
    op.trainOptions.splitters=ParentAnnotationStats.getSplitCategories(trainTreebank,op.trainOptions.tagSelectiveSplit,0,op.trainOptions.selectiveSplitCutOff,op.trainOptions.tagSelectiveSplitCutOff,op.tlpParams.treebankLanguagePack());
    if (op.trainOptions.deleteSplitters != null) {
      List<String> deleted=new ArrayList<String>();
      for (      String del : op.trainOptions.deleteSplitters) {
        String baseDel=tlp.basicCategory(del);
        boolean checkBasic=del.equals(baseDel);
        for (Iterator<String> it=op.trainOptions.splitters.iterator(); it.hasNext(); ) {
          String elem=it.next();
          String baseElem=tlp.basicCategory(elem);
          boolean delStr=checkBasic && baseElem.equals(baseDel) || elem.equals(del);
          if (delStr) {
            it.remove();
            deleted.add(elem);
          }
        }
      }
      System.err.println("Removed from vertical splitters: " + deleted);
    }
  }
  if (op.trainOptions.selectivePostSplit) {
    TreeTransformer myTransformer=new TreeAnnotator(op.tlpParams.headFinder(),op.tlpParams,op);
    Treebank annotatedTB=trainTreebank.transform(myTransformer);
    op.trainOptions.postSplitters=ParentAnnotationStats.getSplitCategories(annotatedTB,true,0,op.trainOptions.selectivePostSplitCutOff,op.trainOptions.tagSelectivePostSplitCutOff,op.tlpParams.treebankLanguagePack());
  }
  if (op.trainOptions.hSelSplit) {
    binarizer.setDoSelectiveSplit(false);
    for (    Tree tree : trainTreebank) {
      if (op.trainOptions.collinsPunc) {
        tree=collinsPuncTransformer.transformTree(tree);
      }
      tree=binarizer.transformTree(tree);
    }
    binarizer.setDoSelectiveSplit(true);
  }
  for (  Tree tree : trainTreebank) {
    if (op.trainOptions.collinsPunc) {
      tree=collinsPuncTransformer.transformTree(tree);
    }
    tree=binarizer.transformTree(tree);
    binaryTrainTrees.add(tree);
  }
  if (op.testOptions.verbose) {
    binarizer.dumpStats();
  }
  List<Tree> binaryTestTrees=new ArrayList<Tree>();
  for (  Tree tree : testTreebank) {
    if (op.trainOptions.collinsPunc) {
      tree=collinsPuncTransformer.transformTree(tree);
    }
    tree=binarizer.transformTree(tree);
    binaryTestTrees.add(tree);
  }
  Timing.tick("done.");
  BinaryGrammar bg=null;
  UnaryGrammar ug=null;
  DependencyGrammar dg=null;
  Lexicon lex=null;
  Index<String> stateIndex=new HashIndex<String>();
  Extractor<Pair<UnaryGrammar,BinaryGrammar>> bgExtractor=new BinaryGrammarExtractor(op,stateIndex);
  if (op.doPCFG) {
    System.err.print("Extracting PCFG...");
    Pair<UnaryGrammar,BinaryGrammar> bgug=null;
    if (op.trainOptions.cheatPCFG) {
      List<Tree> allTrees=new ArrayList<Tree>(binaryTrainTrees);
      allTrees.addAll(binaryTestTrees);
      bgug=bgExtractor.extract(allTrees);
    }
 else {
      bgug=bgExtractor.extract(binaryTrainTrees);
    }
    bg=bgug.second;
    bg.splitRules();
    ug=bgug.first;
    ug.purgeRules();
    Timing.tick("done.");
  }
  System.err.print("Extracting Lexicon...");
  Index<String> wordIndex=new HashIndex<String>();
  Index<String> tagIndex=new HashIndex<String>();
  lex=op.tlpParams.lex(op,wordIndex,tagIndex);
  lex.initializeTraining(binaryTrainTrees.size());
  lex.train(binaryTrainTrees);
  lex.finishTraining();
  Timing.tick("done.");
  if (op.doDep) {
    System.err.print("Extracting Dependencies...");
    binaryTrainTrees.clear();
    Extractor<DependencyGrammar> dgExtractor=new MLEDependencyGrammarExtractor(op,wordIndex,tagIndex);
    dg=dgExtractor.extract(binaryTrainTrees);
    Timing.tick("done.");
    System.out.print("Tuning Dependency Model...");
    dg.tune(binaryTestTrees);
    Timing.tick("done.");
  }
  BinaryGrammar boundBG=bg;
  UnaryGrammar boundUG=ug;
  GrammarProjection gp=new NullGrammarProjection(bg,ug);
  if (serializeFile != null) {
    System.err.print("Serializing parser...");
    LexicalizedParser parser=new LexicalizedParser(lex,bg,ug,dg,stateIndex,wordIndex,tagIndex,op);
    parser.saveParserToSerialized(serializeFile);
    Timing.tick("done.");
  }
  ExhaustivePCFGParser parser=null;
  if (op.doPCFG) {
    parser=new ExhaustivePCFGParser(boundBG,boundUG,lex,op,stateIndex,wordIndex,tagIndex);
  }
  ExhaustiveDependencyParser dparser=((op.doDep && !op.testOptions.useFastFactored) ? new ExhaustiveDependencyParser(dg,lex,op,wordIndex,tagIndex) : null);
  Scorer scorer=(op.doPCFG ? new TwinScorer(new ProjectionScorer(parser,gp,op),dparser) : null);
  BiLexPCFGParser bparser=null;
  if (op.doPCFG && op.doDep) {
    bparser=(op.testOptions.useN5) ? new BiLexPCFGParser.N5BiLexPCFGParser(scorer,parser,dparser,bg,ug,dg,lex,op,gp,stateIndex,wordIndex,tagIndex) : new BiLexPCFGParser(scorer,parser,dparser,bg,ug,dg,lex,op,gp,stateIndex,wordIndex,tagIndex);
  }
  Evalb pcfgPE=new Evalb("pcfg  PE",true);
  Evalb comboPE=new Evalb("combo PE",true);
  AbstractEval pcfgCB=new Evalb.CBEval("pcfg  CB",true);
  AbstractEval pcfgTE=new TaggingEval("pcfg  TE");
  AbstractEval comboTE=new TaggingEval("combo TE");
  AbstractEval pcfgTEnoPunct=new TaggingEval("pcfg nopunct TE");
  AbstractEval comboTEnoPunct=new TaggingEval("combo nopunct TE");
  AbstractEval depTE=new TaggingEval("depnd TE");
  AbstractEval depDE=new UnlabeledAttachmentEval("depnd DE",true,null,tlp.punctuationWordRejectFilter());
  AbstractEval comboDE=new UnlabeledAttachmentEval("combo DE",true,null,tlp.punctuationWordRejectFilter());
  if (op.testOptions.evalb) {
    EvalbFormatWriter.initEVALBfiles(op.tlpParams);
  }
  Function<List<? extends HasWord>,ArrayList<TaggedWord>> tagger=null;
  if (op.testOptions.preTag) {
    try {
      Class[] argsClass={String.class};
      Object[] arguments=new Object[]{op.testOptions.taggerSerializedFile};
      tagger=(Function<List<? extends HasWord>,ArrayList<TaggedWord>>)Class.forName("edu.stanford.nlp.tagger.maxent.MaxentTagger").getConstructor(argsClass).newInstance(arguments);
    }
 catch (    Exception e) {
      System.err.println(e);
      System.err.println("Warning: No pretagging of sentences will be done.");
    }
  }
  for (int tNum=0, ttSize=testTreebank.size(); tNum < ttSize; tNum++) {
    Tree tree=testTreebank.get(tNum);
    int testTreeLen=tree.yield().size();
    if (testTreeLen > op.testOptions.maxLength) {
      continue;
    }
    Tree binaryTree=binaryTestTrees.get(tNum);
    System.out.println("-------------------------------------");
    System.out.println("Number: " + (tNum + 1));
    System.out.println("Length: " + testTreeLen);
    long timeMil1=System.currentTimeMillis();
    Timing.tick("Starting parse.");
    if (op.doPCFG) {
      if (op.testOptions.forceTags) {
        if (tagger != null) {
          parser.parse(addLast(tagger.apply(cutLast(wordify(binaryTree.yield())))));
        }
 else {
          parser.parse(cleanTags(binaryTree.taggedYield(),tlp));
        }
      }
 else {
        parser.parse(binaryTree.yieldHasWord());
      }
    }
    if (op.doDep) {
      dparser.parse(binaryTree.yieldHasWord());
    }
    boolean bothPassed=false;
    if (op.doPCFG && op.doDep) {
      bothPassed=bparser.parse(binaryTree.yieldHasWord());
    }
    long timeMil2=System.currentTimeMillis();
    long elapsed=timeMil2 - timeMil1;
    System.err.println("Time: " + ((int)(elapsed / 100)) / 10.00 + " sec.");
    Tree tree2b=null;
    Tree tree2=null;
    if (op.doPCFG) {
      tree2b=parser.getBestParse();
      tree2=debinarizer.transformTree(tree2b);
    }
    Tree tree3=null;
    Tree tree3db=null;
    if (op.doDep) {
      tree3=dparser.getBestParse();
      tree3db=debinarizer.transformTree(tree3);
      tree3.pennPrint(pw);
    }
    Tree tree4=null;
    if (op.doPCFG && op.doDep) {
      try {
        tree4=bparser.getBestParse();
        if (tree4 == null) {
          tree4=tree2b;
        }
      }
 catch (      NullPointerException e) {
        System.err.println("Blocked, using PCFG parse!");
        tree4=tree2b;
      }
    }
    if (op.doPCFG && !bothPassed) {
      tree4=tree2b;
    }
    if (op.doDep) {
      depDE.evaluate(tree3,binaryTree,pw);
      depTE.evaluate(tree3db,tree,pw);
    }
    TreeTransformer tc=op.tlpParams.collinizer();
    TreeTransformer tcEvalb=op.tlpParams.collinizerEvalb();
    if (op.doPCFG) {
      pcfgPE.evaluate(tc.transformTree(tree2),tc.transformTree(tree),pw);
      pcfgCB.evaluate(tc.transformTree(tree2),tc.transformTree(tree),pw);
      Tree tree4b=null;
      if (op.doDep) {
        comboDE.evaluate((bothPassed ? tree4 : tree3),binaryTree,pw);
        tree4b=tree4;
        tree4=debinarizer.transformTree(tree4);
        if (op.nodePrune) {
          NodePruner np=new NodePruner(parser,debinarizer);
          tree4=np.prune(tree4);
        }
        comboPE.evaluate(tc.transformTree(tree4),tc.transformTree(tree),pw);
      }
      pcfgTE.evaluate(tcEvalb.transformTree(tree2),tcEvalb.transformTree(tree),pw);
      pcfgTEnoPunct.evaluate(tc.transformTree(tree2),tc.transformTree(tree),pw);
      if (op.doDep) {
        comboTE.evaluate(tcEvalb.transformTree(tree4),tcEvalb.transformTree(tree),pw);
        comboTEnoPunct.evaluate(tc.transformTree(tree4),tc.transformTree(tree),pw);
      }
      System.out.println("PCFG only: " + parser.scoreBinarizedTree(tree2b,0));
      tree2.pennPrint(pw);
      if (op.doDep) {
        System.out.println("Combo: " + parser.scoreBinarizedTree(tree4b,0));
        tree4.pennPrint(pw);
      }
      System.out.println("Correct:" + parser.scoreBinarizedTree(binaryTree,0));
      tree.pennPrint(pw);
    }
    if (op.testOptions.evalb) {
      if (op.doPCFG && op.doDep) {
        EvalbFormatWriter.writeEVALBline(tcEvalb.transformTree(tree),tcEvalb.transformTree(tree4));
      }
 else       if (op.doPCFG) {
        EvalbFormatWriter.writeEVALBline(tcEvalb.transformTree(tree),tcEvalb.transformTree(tree2));
      }
 else       if (op.doDep) {
        EvalbFormatWriter.writeEVALBline(tcEvalb.transformTree(tree),tcEvalb.transformTree(tree3db));
      }
    }
  }
  if (op.testOptions.evalb) {
    EvalbFormatWriter.closeEVALBfiles();
  }
  if (op.doPCFG) {
    pcfgPE.display(false,pw);
    System.out.println("Grammar size: " + stateIndex.size());
    pcfgCB.display(false,pw);
    if (op.doDep) {
      comboPE.display(false,pw);
    }
    pcfgTE.display(false,pw);
    pcfgTEnoPunct.display(false,pw);
    if (op.doDep) {
      comboTE.display(false,pw);
      comboTEnoPunct.display(false,pw);
    }
  }
  if (op.doDep) {
    depTE.display(false,pw);
    depDE.display(false,pw);
  }
  if (op.doPCFG && op.doDep) {
    comboDE.display(false,pw);
  }
}
