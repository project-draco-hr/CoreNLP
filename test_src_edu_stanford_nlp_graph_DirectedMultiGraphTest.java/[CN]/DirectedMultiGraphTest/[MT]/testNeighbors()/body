{
  DirectedMultiGraph<Integer,String> g=new DirectedMultiGraph<Integer,String>();
  g.addVertex(1);
  assertEquals(Collections.emptySet(),g.getParents(1));
  assertEquals(Collections.emptySet(),g.getChildren(1));
  assertEquals(Collections.emptySet(),g.getNeighbors(1));
  assertEquals(null,g.getParents(2));
  assertEquals(null,g.getChildren(2));
  assertEquals(null,g.getNeighbors(2));
  g.addVertex(2);
  assertEquals(Collections.emptySet(),g.getParents(1));
  assertEquals(Collections.emptySet(),g.getChildren(1));
  assertEquals(Collections.emptySet(),g.getNeighbors(1));
  assertEquals(Collections.emptySet(),g.getParents(2));
  assertEquals(Collections.emptySet(),g.getChildren(2));
  assertEquals(Collections.emptySet(),g.getNeighbors(2));
  g.add(1,2,"foo");
  assertEquals(Collections.emptySet(),g.getParents(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getChildren(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getNeighbors(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(2));
  assertEquals(Collections.emptySet(),g.getChildren(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getNeighbors(2));
  g.add(1,2,"bar");
  assertEquals(Collections.emptySet(),g.getParents(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getChildren(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getNeighbors(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(2));
  assertEquals(Collections.emptySet(),g.getChildren(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getNeighbors(2));
  g.addVertex(3);
  g.add(1,3,"bar");
  g.add(2,3,"foo");
  g.add(2,3,"baz");
  assertEquals(Collections.emptySet(),g.getParents(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2,3)),g.getChildren(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2,3)),g.getNeighbors(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(3)),g.getChildren(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1,3)),g.getNeighbors(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1,2)),g.getParents(3));
  assertEquals(Collections.emptySet(),g.getChildren(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(1,2)),g.getNeighbors(3));
  g.add(2,4,"baz");
  assertEquals(Collections.emptySet(),g.getParents(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2,3)),g.getChildren(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2,3)),g.getNeighbors(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(3,4)),g.getChildren(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1,3,4)),g.getNeighbors(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1,2)),g.getParents(3));
  assertEquals(Collections.emptySet(),g.getChildren(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(1,2)),g.getNeighbors(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getParents(4));
  assertEquals(Collections.emptySet(),g.getChildren(4));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getNeighbors(4));
  g.removeEdges(2,3);
  assertEquals(Collections.emptySet(),g.getParents(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2,3)),g.getChildren(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2,3)),g.getNeighbors(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(4)),g.getChildren(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1,4)),g.getNeighbors(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getNeighbors(3));
  assertEquals(Collections.emptySet(),g.getChildren(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getParents(4));
  assertEquals(Collections.emptySet(),g.getChildren(4));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getNeighbors(4));
  g.removeEdge(1,2,"foo");
  assertEquals(Collections.emptySet(),g.getParents(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2,3)),g.getChildren(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2,3)),g.getNeighbors(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(4)),g.getChildren(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1,4)),g.getNeighbors(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getNeighbors(3));
  assertEquals(Collections.emptySet(),g.getChildren(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getParents(4));
  assertEquals(Collections.emptySet(),g.getChildren(4));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getNeighbors(4));
  g.removeEdge(1,2,"bar");
  assertEquals(Collections.emptySet(),g.getParents(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(3)),g.getChildren(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(3)),g.getNeighbors(1));
  assertEquals(Collections.emptySet(),g.getParents(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(4)),g.getChildren(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(4)),g.getNeighbors(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(3));
  assertEquals(Collections.emptySet(),g.getChildren(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getNeighbors(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getParents(4));
  assertEquals(Collections.emptySet(),g.getChildren(4));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getNeighbors(4));
  g.add(1,2,"bar");
  assertEquals(Collections.emptySet(),g.getParents(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2,3)),g.getChildren(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(2,3)),g.getNeighbors(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(4)),g.getChildren(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1,4)),g.getNeighbors(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getNeighbors(3));
  assertEquals(Collections.emptySet(),g.getChildren(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getParents(4));
  assertEquals(Collections.emptySet(),g.getChildren(4));
  assertEquals(new HashSet<Integer>(Arrays.asList(2)),g.getNeighbors(4));
  g.removeVertex(2);
  assertEquals(Collections.emptySet(),g.getParents(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(3)),g.getChildren(1));
  assertEquals(new HashSet<Integer>(Arrays.asList(3)),g.getNeighbors(1));
  assertEquals(null,g.getParents(2));
  assertEquals(null,g.getChildren(2));
  assertEquals(null,g.getNeighbors(2));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getParents(3));
  assertEquals(Collections.emptySet(),g.getChildren(3));
  assertEquals(new HashSet<Integer>(Arrays.asList(1)),g.getNeighbors(3));
  assertEquals(Collections.emptySet(),g.getParents(4));
  assertEquals(Collections.emptySet(),g.getChildren(4));
  assertEquals(Collections.emptySet(),g.getNeighbors(4));
}
