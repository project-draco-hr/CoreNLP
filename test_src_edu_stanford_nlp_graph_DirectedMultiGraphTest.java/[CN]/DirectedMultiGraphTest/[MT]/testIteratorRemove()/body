{
  DirectedMultiGraph<Integer,String> g=new DirectedMultiGraph<Integer,String>();
  g.addVertex(1);
  g.addVertex(2);
  g.addVertex(3);
  g.add(1,2,"1-2a");
  g.add(1,2,"1-2b");
  g.add(1,2,"1-2c");
  g.add(1,3,"1-3a");
  g.add(1,3,"1-3b");
  g.add(2,3,"2-3a");
  g.add(2,3,"2-3b");
  g.add(3,1,"3-1a");
  g.add(3,1,"3-1b");
  for (  String edge : g.getAllEdges()) {
    int originalSize=g.getNumEdges();
    DirectedMultiGraph<Integer,String> gold=new DirectedMultiGraph<Integer,String>(g);
    DirectedMultiGraph<Integer,String> guess=new DirectedMultiGraph<Integer,String>(g);
    gold.removeEdge(Integer.parseInt(edge.substring(0,1)),Integer.parseInt(edge.substring(2,3)),edge);
    assertEquals(originalSize,g.getNumEdges());
    assertEquals(originalSize - 1,gold.getAllEdges().size());
    Iterator<String> iter=guess.edgeIterator();
    while (iter.hasNext()) {
      if (iter.next().equals(edge)) {
        iter.remove();
      }
    }
    assertEquals(gold,guess);
  }
}
