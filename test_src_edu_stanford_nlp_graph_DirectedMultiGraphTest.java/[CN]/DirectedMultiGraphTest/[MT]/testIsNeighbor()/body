{
  DirectedMultiGraph<Integer,String> g=new DirectedMultiGraph<Integer,String>();
  g.addVertex(1);
  g.addVertex(2);
  assertFalse(g.isNeighbor(1,2));
  assertFalse(g.isNeighbor(2,1));
  g.add(1,2,"foo");
  assertTrue(g.isNeighbor(1,2));
  assertTrue(g.isNeighbor(2,1));
  g.add(1,2,"bar");
  assertTrue(g.isNeighbor(1,2));
  assertTrue(g.isNeighbor(2,1));
  g.addVertex(3);
  assertTrue(g.isNeighbor(1,2));
  assertTrue(g.isNeighbor(2,1));
  assertFalse(g.isNeighbor(1,3));
  assertFalse(g.isNeighbor(3,1));
  assertFalse(g.isNeighbor(2,3));
  assertFalse(g.isNeighbor(3,2));
  g.add(1,3,"bar");
  assertTrue(g.isNeighbor(1,2));
  assertTrue(g.isNeighbor(2,1));
  assertTrue(g.isNeighbor(1,3));
  assertTrue(g.isNeighbor(3,1));
  assertFalse(g.isNeighbor(2,3));
  assertFalse(g.isNeighbor(3,2));
  g.add(2,3,"foo");
  g.add(2,3,"baz");
  assertTrue(g.isNeighbor(1,2));
  assertTrue(g.isNeighbor(2,1));
  assertTrue(g.isNeighbor(1,3));
  assertTrue(g.isNeighbor(3,1));
  assertTrue(g.isNeighbor(2,3));
  assertTrue(g.isNeighbor(3,2));
  g.removeEdge(1,2,"foo");
  assertTrue(g.isNeighbor(1,2));
  assertTrue(g.isNeighbor(2,1));
  assertTrue(g.isNeighbor(1,3));
  assertTrue(g.isNeighbor(3,1));
  assertTrue(g.isNeighbor(2,3));
  assertTrue(g.isNeighbor(3,2));
  g.removeEdge(1,2,"bar");
  assertFalse(g.isNeighbor(1,2));
  assertFalse(g.isNeighbor(2,1));
  assertTrue(g.isNeighbor(1,3));
  assertTrue(g.isNeighbor(3,1));
  assertTrue(g.isNeighbor(2,3));
  assertTrue(g.isNeighbor(3,2));
  g.add(1,2,"foo");
  g.add(1,2,"bar");
  assertTrue(g.isNeighbor(1,2));
  assertTrue(g.isNeighbor(2,1));
  assertTrue(g.isNeighbor(1,3));
  assertTrue(g.isNeighbor(3,1));
  assertTrue(g.isNeighbor(2,3));
  assertTrue(g.isNeighbor(3,2));
  g.removeEdges(1,2);
  assertFalse(g.isNeighbor(1,2));
  assertFalse(g.isNeighbor(2,1));
  assertTrue(g.isNeighbor(1,3));
  assertTrue(g.isNeighbor(3,1));
  assertTrue(g.isNeighbor(2,3));
  assertTrue(g.isNeighbor(3,2));
  g.removeVertex(2);
  assertFalse(g.isNeighbor(1,2));
  assertFalse(g.isNeighbor(2,1));
  assertTrue(g.isNeighbor(1,3));
  assertTrue(g.isNeighbor(3,1));
  assertFalse(g.isNeighbor(2,3));
  assertFalse(g.isNeighbor(3,2));
}
