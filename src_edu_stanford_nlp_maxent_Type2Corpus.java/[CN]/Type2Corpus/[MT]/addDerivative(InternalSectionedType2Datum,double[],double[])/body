{
  double[] scores=new double[datum.numOptions()];
  for (int j=0; j < datum.numBlocks(); j++) {
    InternalFeatureBlock block=datum.get(j);
    for (int index=0; index < block.numFeatures(); index++) {
      int fNo=block.getFIndex(index);
      float value=block.getFValue(index);
      for (int l=0; l < block.numLocations(); l++) {
        IntPair location=block.location(l);
        int cNo=location.get(0);
        int oNo=location.get(1);
        int fIndex=indexOf(fNo,cNo);
        if (fIndex > -1) {
          scores[oNo]+=value * weights[fIndex];
        }
      }
    }
  }
  double z=ArrayMath.logSum(scores);
  ArrayMath.addInPlace(scores,-z);
  ArrayMath.expInPlace(scores);
  for (int j=0; j < datum.numBlocks(); j++) {
    InternalFeatureBlock block=datum.get(j);
    for (int index=0; index < block.numFeatures(); index++) {
      int fNo=block.getFIndex(index);
      float value=block.getFValue(index);
      for (int l=0; l < block.numLocations(); l++) {
        IntPair location=block.location(l);
        int cNo=location.get(0);
        int oNo=location.get(1);
        int fIndex=indexOf(fNo,cNo);
        if (fIndex > -1) {
          derivative[fIndex]-=value * scores[oNo];
          if (oNo == datum.correctOption()) {
            derivative[fIndex]+=value;
          }
        }
      }
    }
  }
  return derivative;
}
