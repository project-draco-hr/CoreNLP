{
  if (nodeNum >= stack.size()) {
    return null;
  }
  TreeShapedStack<Tree> stack=this.stack;
  for (int i=0; i < nodeNum; ++i) {
    stack=stack.pop();
  }
  Tree node=stack.peek();
  int head=ShiftReduceUtils.headIndex(node);
  if (separators.get(head) != null) {
    return HeadPosition.HEAD;
  }
  int left=ShiftReduceUtils.leftIndex(node);
  Integer nextLeft=separators.floorKey(head);
  boolean hasLeft=(nextLeft != null && nextLeft >= left);
  int right=ShiftReduceUtils.rightIndex(node);
  Integer nextRight=separators.ceilingKey(head);
  boolean hasRight=(nextRight != null && nextRight <= right);
  if (hasLeft && hasRight) {
    return HeadPosition.BOTH;
  }
 else   if (hasLeft) {
    return HeadPosition.LEFT;
  }
 else   if (hasRight) {
    return HeadPosition.RIGHT;
  }
 else {
    return HeadPosition.NONE;
  }
}
