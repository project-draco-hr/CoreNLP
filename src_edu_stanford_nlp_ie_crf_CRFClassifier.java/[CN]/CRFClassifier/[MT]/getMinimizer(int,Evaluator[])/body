{
  Minimizer<DiffFunction> minimizer=null;
  if (flags.useQN) {
    int QNmem;
    if (featurePruneIteration == 0) {
      QNmem=flags.QNsize;
    }
 else {
      QNmem=flags.QNsize2;
    }
    if (flags.interimOutputFreq != 0) {
      Function monitor=new ResultStoringMonitor(flags.interimOutputFreq,flags.serializeTo);
      minimizer=new QNMinimizer(monitor,QNmem,flags.useRobustQN);
    }
 else {
      minimizer=new QNMinimizer(QNmem,flags.useRobustQN);
    }
    ((QNMinimizer)minimizer).terminateOnMaxItr(flags.maxQNItr);
    ((QNMinimizer)minimizer).terminateOnEvalImprovement(flags.terminateOnEvalImprovement);
    ((QNMinimizer)minimizer).setTerminateOnEvalImprovementNumOfEpoch(flags.terminateOnEvalImprovementNumOfEpoch);
    ((QNMinimizer)minimizer).suppressTestPrompt(flags.suppressTestDebug);
    if (flags.useOWLQN) {
      ((QNMinimizer)minimizer).useOWLQN(flags.useOWLQN,flags.priorLambda);
    }
  }
 else   if (flags.useInPlaceSGD) {
    SGDMinimizer<DiffFunction> sgdMinimizer=new SGDMinimizer<DiffFunction>(flags.sigma,flags.SGDPasses,flags.tuneSampleSize,flags.stochasticBatchSize);
    if (flags.useSGDtoQN) {
      QNMinimizer qnMinimizer;
      int QNmem;
      if (featurePruneIteration == 0) {
        QNmem=flags.QNsize;
      }
 else {
        QNmem=flags.QNsize2;
      }
      if (flags.interimOutputFreq != 0) {
        Function monitor=new ResultStoringMonitor(flags.interimOutputFreq,flags.serializeTo);
        qnMinimizer=new QNMinimizer(monitor,QNmem,flags.useRobustQN);
      }
 else {
        qnMinimizer=new QNMinimizer(QNmem,flags.useRobustQN);
      }
      minimizer=new HybridMinimizer(sgdMinimizer,qnMinimizer,flags.SGDPasses);
    }
 else {
      minimizer=sgdMinimizer;
    }
  }
 else   if (flags.useAdaGradFOBOS) {
    double lambda=0.5 / (flags.sigma * flags.sigma);
    minimizer=new SGDWithAdaGradAndFOBOS<DiffFunction>(flags.initRate,lambda,flags.SGDPasses,flags.stochasticBatchSize,flags.priorType,flags.priorAlpha,flags.useAdaDelta,flags.useAdaDiff,flags.adaGradEps,flags.adaDeltaRho);
    ((SGDWithAdaGradAndFOBOS)minimizer).terminateOnEvalImprovement(flags.terminateOnEvalImprovement);
    ((SGDWithAdaGradAndFOBOS)minimizer).terminateOnAvgImprovement(flags.terminateOnAvgImprovement,flags.tolerance);
    ((SGDWithAdaGradAndFOBOS)minimizer).setTerminateOnEvalImprovementNumOfEpoch(flags.terminateOnEvalImprovementNumOfEpoch);
    ((SGDWithAdaGradAndFOBOS)minimizer).suppressTestPrompt(flags.suppressTestDebug);
  }
 else   if (flags.useSGDtoQN) {
    minimizer=new SGDToQNMinimizer(flags.initialGain,flags.stochasticBatchSize,flags.SGDPasses,flags.QNPasses,flags.SGD2QNhessSamples,flags.QNsize,flags.outputIterationsToFile);
  }
 else   if (flags.useSMD) {
    minimizer=new SMDMinimizer<DiffFunction>(flags.initialGain,flags.stochasticBatchSize,flags.stochasticMethod,flags.SGDPasses);
  }
 else   if (flags.useSGD) {
    minimizer=new InefficientSGDMinimizer<DiffFunction>(flags.initialGain,flags.stochasticBatchSize);
  }
 else   if (flags.useScaledSGD) {
    minimizer=new ScaledSGDMinimizer(flags.initialGain,flags.stochasticBatchSize,flags.SGDPasses,flags.scaledSGDMethod);
  }
 else   if (flags.l1reg > 0.0) {
    minimizer=ReflectionLoading.loadByReflection("edu.stanford.nlp.optimization.OWLQNMinimizer",flags.l1reg);
  }
  if (minimizer instanceof HasEvaluators) {
    if (minimizer instanceof QNMinimizer) {
      ((QNMinimizer)minimizer).setEvaluators(flags.evaluateIters,flags.startEvaluateIters,evaluators);
    }
 else     ((HasEvaluators)minimizer).setEvaluators(flags.evaluateIters,evaluators);
  }
  if (minimizer == null) {
    throw new RuntimeException("No minimizer assigned!");
  }
  return minimizer;
}
