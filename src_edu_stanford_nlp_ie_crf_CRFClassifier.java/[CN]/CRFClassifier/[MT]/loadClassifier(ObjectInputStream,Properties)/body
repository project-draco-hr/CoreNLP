{
  Object o=ois.readObject();
  if (o instanceof List) {
    labelIndices=(List<Index<CRFLabel>>)o;
  }
 else {
    Index<CRFLabel>[] indexArray=(Index<CRFLabel>[])o;
    labelIndices=new ArrayList<>(indexArray.length);
    Collections.addAll(labelIndices,indexArray);
  }
  classIndex=(Index<String>)ois.readObject();
  featureIndex=(Index<String>)ois.readObject();
  flags=(SeqClassifierFlags)ois.readObject();
  if (flags.useEmbedding) {
    embeddings=(Map<String,double[]>)ois.readObject();
  }
  Object featureFactory=ois.readObject();
  if (featureFactory instanceof List) {
    featureFactories=ErasureUtils.uncheckedCast(featureFactories);
  }
 else   if (featureFactory instanceof FeatureFactory) {
    featureFactories=Generics.newArrayList();
    featureFactories.add((FeatureFactory)featureFactory);
  }
 else   if (featureFactory instanceof Integer) {
    int size=(Integer)featureFactory;
    featureFactories=Generics.newArrayList(size);
    for (int i=0; i < size; ++i) {
      featureFactory=ois.readObject();
      if (!(featureFactory instanceof FeatureFactory)) {
        throw new RuntimeIOException("Should have FeatureFactory but got " + featureFactory.getClass());
      }
      featureFactories.add((FeatureFactory)featureFactory);
    }
  }
  if (props != null) {
    flags.setProperties(props,false);
  }
  windowSize=ois.readInt();
  weights=(double[][])ois.readObject();
  Set<String> lcWords=(Set<String>)ois.readObject();
  if (lcWords instanceof MaxSizeConcurrentHashSet) {
    knownLCWords=(MaxSizeConcurrentHashSet<String>)lcWords;
  }
 else {
    knownLCWords=new MaxSizeConcurrentHashSet<>(lcWords);
  }
  reinit();
  if (flags.labelDictionaryCutoff > 0) {
    labelDictionary=(LabelDictionary)ois.readObject();
  }
  if (VERBOSE) {
    log.info("windowSize=" + windowSize);
    log.info("flags=\n" + flags);
  }
}
