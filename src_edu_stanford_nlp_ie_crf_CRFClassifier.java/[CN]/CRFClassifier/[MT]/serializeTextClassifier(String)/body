{
  System.err.print("Serializing Text classifier to " + serializePath + "...");
  try {
    PrintWriter pw=new PrintWriter(new GZIPOutputStream(new FileOutputStream(serializePath)));
    pw.printf("labelIndices.length=\t%d%n",labelIndices.size());
    for (int i=0; i < labelIndices.size(); i++) {
      pw.printf("labelIndices[%d].size()=\t%d%n",i,labelIndices.get(i).size());
      for (int j=0; j < labelIndices.get(i).size(); j++) {
        int[] label=labelIndices.get(i).get(j).getLabel();
        List<Integer> list=new ArrayList<Integer>();
        for (        int l : label) {
          list.add(l);
        }
        pw.printf("%d\t%s%n",j,StringUtils.join(list," "));
      }
    }
    pw.printf("classIndex.size()=\t%d%n",classIndex.size());
    for (int i=0; i < classIndex.size(); i++) {
      pw.printf("%d\t%s%n",i,classIndex.get(i));
    }
    pw.printf("featureIndex.size()=\t%d%n",featureIndex.size());
    for (int i=0; i < featureIndex.size(); i++) {
      pw.printf("%d\t%s%n",i,featureIndex.get(i));
    }
    pw.println("<flags>");
    pw.print(flags.toString());
    pw.println("</flags>");
    if (flags.useEmbedding) {
      pw.printf("embeddings.size()=\t%d%n",embeddings.size());
      for (      String word : embeddings.keySet()) {
        double[] arr=embeddings.get(word);
        Double[] arrUnboxed=new Double[arr.length];
        for (int i=0; i < arr.length; i++)         arrUnboxed[i]=arr[i];
        pw.printf("%s\t%s%n",word,StringUtils.join(arrUnboxed," "));
      }
    }
    if (flags.nonLinearCRF) {
      pw.printf("nodeFeatureIndicesMap.size()=\t%d%n",nodeFeatureIndicesMap.size());
      for (int i=0; i < nodeFeatureIndicesMap.size(); i++) {
        pw.printf("%d\t%d%n",i,nodeFeatureIndicesMap.get(i));
      }
      pw.printf("edgeFeatureIndicesMap.size()=\t%d%n",edgeFeatureIndicesMap.size());
      for (int i=0; i < edgeFeatureIndicesMap.size(); i++) {
        pw.printf("%d\t%d%n",i,edgeFeatureIndicesMap.get(i));
      }
      if (flags.secondOrderNonLinear) {
        pw.printf("inputLayerWeights4Edge.length=\t%d%n",inputLayerWeights4Edge.length);
        for (        double[] ws : inputLayerWeights4Edge) {
          ArrayList<Double> list=new ArrayList<Double>();
          for (          double w : ws) {
            list.add(w);
          }
          pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
        }
        pw.printf("outputLayerWeights4Edge.length=\t%d%n",outputLayerWeights4Edge.length);
        for (        double[] ws : outputLayerWeights4Edge) {
          ArrayList<Double> list=new ArrayList<Double>();
          for (          double w : ws) {
            list.add(w);
          }
          pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
        }
      }
 else {
        pw.printf("linearWeights.length=\t%d%n",linearWeights.length);
        for (        double[] ws : linearWeights) {
          ArrayList<Double> list=new ArrayList<Double>();
          for (          double w : ws) {
            list.add(w);
          }
          pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
        }
      }
      pw.printf("inputLayerWeights.length=\t%d%n",inputLayerWeights.length);
      for (      double[] ws : inputLayerWeights) {
        ArrayList<Double> list=new ArrayList<Double>();
        for (        double w : ws) {
          list.add(w);
        }
        pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
      }
      pw.printf("outputLayerWeights.length=\t%d%n",outputLayerWeights.length);
      for (      double[] ws : outputLayerWeights) {
        ArrayList<Double> list=new ArrayList<Double>();
        for (        double w : ws) {
          list.add(w);
        }
        pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
      }
    }
    pw.printf("<featureFactory> %s </featureFactory>%n",featureFactory.getClass().getName());
    pw.printf("<windowSize> %d </windowSize>%n",windowSize);
    pw.printf("weights.length=\t%d%n",weights.length);
    for (    double[] ws : weights) {
      ArrayList<Double> list=new ArrayList<Double>();
      for (      double w : ws) {
        list.add(w);
      }
      pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
    }
    pw.close();
    System.err.println("done.");
  }
 catch (  Exception e) {
    System.err.println("Failed");
    e.printStackTrace();
  }
}
