{
  StringUtils.printErrInvocationString("CRFClassifier",args);
  Properties props=StringUtils.argsToProperties(args);
  SeqClassifierFlags flags=new SeqClassifierFlags(props);
  CRFClassifier<CoreLabel> crf=chooseCRFClassifier(flags);
  String testFile=flags.testFile;
  String testFiles=flags.testFiles;
  String textFile=flags.textFile;
  String textFiles=flags.textFiles;
  String loadPath=flags.loadClassifier;
  String loadTextPath=flags.loadTextClassifier;
  String serializeTo=flags.serializeTo;
  String serializeToText=flags.serializeToText;
  if (crf.flags.useEmbedding && crf.flags.embeddingWords != null && crf.flags.embeddingVectors != null) {
    System.err.println("Reading Embedding Files");
    BufferedReader br=IOUtils.readerFromString(crf.flags.embeddingWords);
    List<String> wordList=new ArrayList<String>();
    for (String line; (line=br.readLine()) != null; ) {
      wordList.add(line.trim());
    }
    System.err.println("Found a dictionary of size " + wordList.size());
    br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(crf.flags.embeddingVectors))));
    crf.embeddings=Generics.newHashMap();
    double[] vector=null;
    int count=0;
    for (String line; (line=br.readLine()) != null; ) {
      vector=ArrayUtils.toDoubleArray(line.trim().split(" "));
      crf.embeddings.put(wordList.get(count++),vector);
    }
    System.err.println("Found " + count + " matching embeddings of dimension "+ vector.length);
  }
  if (crf.flags.loadClassIndexFrom != null) {
    crf.classIndex=loadClassIndexFromFile(crf.flags.loadClassIndexFrom);
  }
  if (loadPath != null) {
    crf.loadClassifierNoExceptions(loadPath,props);
  }
 else   if (loadTextPath != null) {
    System.err.println("Warning: this is now only tested for Chinese Segmenter");
    System.err.println("(Sun Dec 23 00:59:39 2007) (pichuan)");
    try {
      crf.loadTextClassifier(loadTextPath,props);
    }
 catch (    Exception e) {
      throw new RuntimeException("error loading " + loadTextPath,e);
    }
  }
 else   if (crf.flags.loadJarClassifier != null) {
    crf.loadJarClassifier(crf.flags.loadJarClassifier,props);
  }
 else   if (crf.flags.trainFile != null || crf.flags.trainFileList != null) {
    Timing timing=new Timing();
    crf.train();
    timing.done("CRFClassifier training");
  }
 else {
    crf.loadDefaultClassifier();
  }
  crf.loadTagIndex();
  if (serializeTo != null) {
    crf.serializeClassifier(serializeTo);
  }
  if (crf.flags.serializeWeightsTo != null) {
    crf.serializeWeights(crf.flags.serializeWeightsTo);
  }
  if (crf.flags.serializeFeatureIndexTo != null) {
    crf.serializeFeatureIndex(crf.flags.serializeFeatureIndexTo);
  }
  if (serializeToText != null) {
    crf.serializeTextClassifier(serializeToText);
  }
  if (testFile != null) {
    DocumentReaderAndWriter<CoreLabel> readerAndWriter=crf.defaultReaderAndWriter();
    if (crf.flags.searchGraphPrefix != null) {
      crf.classifyAndWriteViterbiSearchGraph(testFile,crf.flags.searchGraphPrefix,crf.makeReaderAndWriter());
    }
 else     if (crf.flags.printFirstOrderProbs) {
      crf.printFirstOrderProbs(testFile,readerAndWriter);
    }
 else     if (crf.flags.printFactorTable) {
      crf.printFactorTable(testFile,readerAndWriter);
    }
 else     if (crf.flags.printProbs) {
      crf.printProbs(testFile,readerAndWriter);
    }
 else     if (crf.flags.useKBest) {
      int k=crf.flags.kBest;
      crf.classifyAndWriteAnswersKBest(testFile,k,readerAndWriter);
    }
 else     if (crf.flags.printLabelValue) {
      crf.printLabelInformation(testFile,readerAndWriter);
    }
 else {
      crf.classifyAndWriteAnswers(testFile,readerAndWriter);
    }
  }
  if (testFiles != null) {
    List<File> files=new ArrayList<File>();
    for (    String filename : testFiles.split(",")) {
      files.add(new File(filename));
    }
    crf.classifyFilesAndWriteAnswers(files,crf.defaultReaderAndWriter());
  }
  if (textFile != null) {
    crf.classifyAndWriteAnswers(textFile);
  }
  if (textFiles != null) {
    List<File> files=new ArrayList<File>();
    for (    String filename : textFiles.split(",")) {
      files.add(new File(filename));
    }
    crf.classifyFilesAndWriteAnswers(files);
  }
  if (crf.flags.readStdin) {
    crf.classifyStdin();
  }
}
