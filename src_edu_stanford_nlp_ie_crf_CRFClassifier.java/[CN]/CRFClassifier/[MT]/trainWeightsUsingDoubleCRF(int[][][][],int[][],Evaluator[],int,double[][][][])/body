{
  CRFLogConditionalObjectiveFunction func=new CRFLogConditionalObjectiveFunction(data,labels,windowSize,classIndex,labelIndices,map,flags.priorType,flags.backgroundSymbol,flags.sigma,featureVals);
  cliquePotentialFunctionHelper=func;
  Minimizer minimizer=getMinimizer(pruneFeatureItr,evaluators);
  double[] initialWeights;
  if (flags.initialWeights == null) {
    initialWeights=func.initial();
  }
 else {
    try {
      System.err.println("Reading initial weights from file " + flags.initialWeights);
      DataInputStream dis=new DataInputStream(new BufferedInputStream(new GZIPInputStream(new FileInputStream(flags.initialWeights))));
      initialWeights=ConvertByteArray.readDoubleArr(dis);
    }
 catch (    IOException e) {
      throw new RuntimeException("Could not read from double initial weight file " + flags.initialWeights);
    }
  }
  System.err.println("numWeights: " + initialWeights.length);
  if (flags.testObjFunction) {
    StochasticDiffFunctionTester tester=new StochasticDiffFunctionTester(func);
    if (tester.testSumOfBatches(initialWeights,1e-4)) {
      System.err.println("Testing complete... exiting");
      System.exit(1);
    }
 else {
      System.err.println("Testing failed....exiting");
      System.exit(1);
    }
  }
  if (flags.checkGradient) {
    if (func.gradientCheck()) {
      System.err.println("gradient check passed");
    }
 else {
      throw new RuntimeException("gradient check failed");
    }
  }
  double[] ws=minimizer.minimize(func,flags.tolerance,initialWeights);
  if (flags.inputDropOut != 0.0) {
    ArrayMath.multiplyInPlace(ws,1.0 / (1.0 - flags.inputDropOut));
    System.err.printf("Scaled weights by %f",1.0 / (1.0 - flags.inputDropOut));
  }
  return ws;
}
