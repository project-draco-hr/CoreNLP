{
  final int numBins=10;
  boolean verbose=flags.verboseMode;
  Triple<int[][][],int[],double[][][]> p=documentToDataAndLabels(document);
  CRFCliqueTree<String> cliqueTree=getCliqueTree(p);
  Counter<Integer> calibration=new ClassicCounter<>();
  TwoDimensionalCounter<Integer,String> calibratedTokens=new TwoDimensionalCounter<>();
  for (int i=0; i < cliqueTree.length(); i++) {
    IN wi=document.get(i);
    String token=wi.get(CoreAnnotations.TextAnnotation.class);
    String goldAnswer=wi.get(CoreAnnotations.GoldAnswerAnnotation.class);
    System.out.print(token);
    System.out.print('\t');
    System.out.print(goldAnswer);
    for (    String label : classIndex) {
      int index=classIndex.indexOf(label);
      double prob=cliqueTree.prob(i,index);
      System.out.print('\t');
      System.out.print(label);
      System.out.print('=');
      System.out.print(prob);
      if (verbose) {
        int binnedProb=(int)(prob * numBins);
        if (binnedProb > (numBins - 1)) {
          binnedProb=numBins - 1;
        }
        calibration.incrementCount(binnedProb);
        if (label.equals(goldAnswer) && !label.equals(flags.backgroundSymbol)) {
          calibratedTokens.incrementCount(binnedProb,token);
        }
      }
    }
    System.out.println();
  }
  if (verbose) {
    return new Pair<>(calibration,calibratedTokens);
  }
 else {
    return null;
  }
}
