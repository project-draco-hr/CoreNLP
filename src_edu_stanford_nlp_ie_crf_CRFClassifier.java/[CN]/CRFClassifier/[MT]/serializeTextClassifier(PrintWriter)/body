{
  pw.printf("labelIndices.length=\t%d%n",labelIndices.size());
  for (int i=0; i < labelIndices.size(); i++) {
    pw.printf("labelIndices[%d].size()=\t%d%n",i,labelIndices.get(i).size());
    for (int j=0; j < labelIndices.get(i).size(); j++) {
      int[] label=labelIndices.get(i).get(j).getLabel();
      List<Integer> list=new ArrayList<Integer>();
      for (      int l : label) {
        list.add(l);
      }
      pw.printf("%d\t%s%n",j,StringUtils.join(list," "));
    }
  }
  pw.printf("classIndex.size()=\t%d%n",classIndex.size());
  for (int i=0; i < classIndex.size(); i++) {
    pw.printf("%d\t%s%n",i,classIndex.get(i));
  }
  pw.printf("featureIndex.size()=\t%d%n",featureIndex.size());
  for (int i=0; i < featureIndex.size(); i++) {
    pw.printf("%d\t%s%n",i,featureIndex.get(i));
  }
  pw.println("<flags>");
  pw.print(flags.toString());
  pw.println("</flags>");
  if (flags.useEmbedding) {
    pw.printf("embeddings.size()=\t%d%n",embeddings.size());
    for (    String word : embeddings.keySet()) {
      double[] arr=embeddings.get(word);
      Double[] arrUnboxed=new Double[arr.length];
      for (int i=0; i < arr.length; i++)       arrUnboxed[i]=arr[i];
      pw.printf("%s\t%s%n",word,StringUtils.join(arrUnboxed," "));
    }
  }
  pw.printf("<featureFactory>");
  for (  FeatureFactory featureFactory : featureFactories) {
    pw.printf(" %s ",featureFactory.getClass().getName());
  }
  pw.printf("</featureFactory>%n");
  pw.printf("<windowSize> %d </windowSize>%n",windowSize);
  pw.printf("weights.length=\t%d%n",weights.length);
  for (  double[] ws : weights) {
    ArrayList<Double> list=new ArrayList<Double>();
    for (    double w : ws) {
      list.add(w);
    }
    pw.printf("%d\t%s%n",ws.length,StringUtils.join(list," "));
  }
}
