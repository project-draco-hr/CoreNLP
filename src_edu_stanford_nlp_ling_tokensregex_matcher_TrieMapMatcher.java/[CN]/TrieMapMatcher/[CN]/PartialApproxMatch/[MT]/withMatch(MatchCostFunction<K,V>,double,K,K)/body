{
  PartialApproxMatch<K,V> res=new PartialApproxMatch<>();
  res.matched=matched;
  if (k != null) {
    if (res.matched == null) {
      res.matched=new ArrayList<>(1);
    }
 else {
      res.matched=new ArrayList<>(matched.size() + 1);
      res.matched.addAll(matched);
    }
    res.matched.add(k);
  }
  res.begin=begin;
  res.end=(t != null) ? end + 1 : end;
  res.cost=cost + deltaCost;
  res.trie=(k != null) ? trie.getChildTrie(k) : trie;
  res.value=(res.trie != null) ? res.trie.value : null;
  res.multimatches=multimatches;
  res.lastMultimatchedMatchedStartIndex=lastMultimatchedMatchedStartIndex;
  res.lastMultimatchedOriginalStartIndex=lastMultimatchedOriginalStartIndex;
  if (res.lastMultimatchedOriginalStartIndex == end && k == null && t != null) {
    res.lastMultimatchedOriginalStartIndex++;
  }
  if (alignments != null) {
    res.alignments=new Interval[alignments.length];
    System.arraycopy(alignments,0,res.alignments,0,alignments.length);
    if (k != null && res.end > 0) {
      int p=res.end - 1;
      if (res.alignments[p] == null) {
        res.alignments[p]=Interval.toInterval(res.matched.size() - 1,res.matched.size());
      }
 else {
        res.alignments[p]=Interval.toInterval(res.alignments[p].getBegin(),res.alignments[p].getEnd() + 1);
      }
    }
  }
  return res;
}
