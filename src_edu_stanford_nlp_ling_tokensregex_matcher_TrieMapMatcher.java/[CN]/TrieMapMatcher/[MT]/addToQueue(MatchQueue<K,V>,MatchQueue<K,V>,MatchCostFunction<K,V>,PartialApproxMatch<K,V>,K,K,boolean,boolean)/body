{
  double deltaCost=costFunction.cost(a,b,pam.getMatchedLength());
  double newCost=pam.cost + deltaCost;
  if (queue.maxCost != Double.MAX_VALUE && newCost > queue.maxCost)   return false;
  if (best.size() >= queue.maxSize && newCost > best.topCost())   return false;
  PartialApproxMatch<K,V> npam=pam.withMatch(costFunction,deltaCost,a,b);
  if (!multimatch || (npam.trie != null && npam.trie.children != null)) {
    if (!multimatch && complete && npam.value != null) {
      best.add(npam);
    }
    queue.add(npam);
  }
  if (multimatch && npam.value != null) {
    npam=pam.withMatch(costFunction,deltaCost,a,b,multimatch,rootWithDelimiter);
    if (complete && npam.value != null) {
      best.add(npam);
    }
    queue.add(npam);
  }
  return true;
}
