{
  if (root.isEmpty())   return null;
  int extra=3;
  MatchQueue<K,V> best=new MatchQueue<>(n,maxCost);
  List<PartialApproxMatch<K,V>>[] prevMatches=null;
  List<PartialApproxMatch<K,V>>[] curMatches;
  for (int i=0; i <= target.size(); i++) {
    curMatches=new List[target.size() + 1 + extra];
    for (int j=0; j <= target.size() + extra; j++) {
      if (j > 0) {
        boolean complete=(i == target.size());
        K t=(i > 0 && i <= target.size()) ? target.get(i - 1) : null;
        MatchQueue<K,V> queue=(multimatch) ? new MultiMatchQueue<>(n,maxCost) : new MatchQueue<>(n,maxCost);
        if (i > 0) {
          for (          PartialApproxMatch<K,V> pam : prevMatches[j - 1]) {
            if (pam.trie != null) {
              if (pam.trie.children != null) {
                for (                K k : pam.trie.children.keySet()) {
                  addToQueue(queue,best,costFunction,pam,t,k,multimatch,complete);
                }
              }
            }
          }
        }
        for (        PartialApproxMatch<K,V> pam : curMatches[j - 1]) {
          if (pam.trie != null) {
            if (pam.trie.children != null) {
              for (              K k : pam.trie.children.keySet()) {
                addToQueue(queue,best,costFunction,pam,null,k,multimatch,complete);
              }
            }
          }
        }
        if (i > 0) {
          for (          PartialApproxMatch<K,V> pam : prevMatches[j]) {
            addToQueue(queue,best,costFunction,pam,t,null,multimatch,complete);
          }
        }
        curMatches[j]=queue.toSortedList();
      }
 else {
        curMatches[0]=new ArrayList<>();
        if (i > 0) {
          K t=(i < target.size()) ? target.get(i - 1) : null;
          for (          PartialApproxMatch<K,V> pam : prevMatches[0]) {
            PartialApproxMatch<K,V> npam=pam.withMatch(costFunction,costFunction.cost(t,null,pam.getMatchedLength()),t,null);
            if (npam.cost <= maxCost) {
              curMatches[0].add(npam);
            }
          }
        }
 else {
          curMatches[0].add(new PartialApproxMatch<>(0,root,keepAlignments ? target.size() : 0));
        }
      }
    }
    prevMatches=curMatches;
  }
  List<ApproxMatch<K,V>> res=new ArrayList<>();
  for (  PartialApproxMatch<K,V> m : best.toSortedList()) {
    res.add(m.toApproxMatch());
  }
  return res;
}
