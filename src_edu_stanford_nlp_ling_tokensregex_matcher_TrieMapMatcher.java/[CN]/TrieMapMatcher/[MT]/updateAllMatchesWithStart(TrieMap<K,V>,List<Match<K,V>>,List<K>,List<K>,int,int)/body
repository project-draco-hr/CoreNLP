{
  if (start > end)   return;
  if (trie.children != null && start < end) {
    K key=list.get(start);
    TrieMap<K,V> child=trie.children.get(key);
    if (child != null) {
      List<K> p=new ArrayList<K>(matched.size() + 1);
      p.addAll(matched);
      p.add(key);
      updateAllMatchesWithStart(child,matches,p,list,start + 1,end);
    }
  }
  if (trie.isLeaf()) {
    matches.add(new Match<K,V>(matched,trie.value,start - matched.size(),start));
  }
}
