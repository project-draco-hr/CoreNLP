{
  return new Collection<Double>(){
    @Override public int size(){
      return map.size();
    }
    @Override public boolean isEmpty(){
      return map.size() == 0;
    }
    @Override public boolean contains(    Object o){
      if (o instanceof Double) {
        return map.values().contains(new AtomicDouble((Double)o));
      }
      return false;
    }
    @Override public Iterator<Double> iterator(){
      return null;
    }
    @Override public Object[] toArray(){
      return null;
    }
    @Override public <T>T[] toArray(    T[] a){
      return null;
    }
    @Override public boolean add(    Double e){
      throw new UnsupportedOperationException();
    }
    @Override public boolean remove(    Object o){
      throw new UnsupportedOperationException();
    }
    @Override public boolean containsAll(    Collection<?> c){
      return false;
    }
    @Override public boolean addAll(    Collection<? extends Double> c){
      throw new UnsupportedOperationException();
    }
    @Override public boolean removeAll(    Collection<?> c){
      throw new UnsupportedOperationException();
    }
    @Override public boolean retainAll(    Collection<?> c){
      throw new UnsupportedOperationException();
    }
    @Override public void clear(){
      throw new UnsupportedOperationException();
    }
  }
;
}
