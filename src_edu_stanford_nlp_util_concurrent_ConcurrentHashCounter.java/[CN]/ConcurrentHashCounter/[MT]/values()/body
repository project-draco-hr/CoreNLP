{
  return new Collection<Double>(){
    @Override public int size(){
      return map.size();
    }
    @Override public boolean isEmpty(){
      return map.size() == 0;
    }
    @Override public boolean contains(    Object o){
      if (o instanceof Double) {
        double value=(Double)o;
        for (        AtomicDouble atomic : map.values()) {
          if (atomic.get() == value) {
            return true;
          }
        }
      }
      return false;
    }
    @Override public Iterator<Double> iterator(){
      return new Iterator<Double>(){
        Iterator<AtomicDouble> iterator=map.values().iterator();
        @Override public boolean hasNext(){
          return iterator.hasNext();
        }
        @Override public Double next(){
          return iterator.next().get();
        }
        @Override public void remove(){
          iterator.remove();
        }
      }
;
    }
    @Override public Object[] toArray(){
      return map.values().toArray();
    }
    @Override public <T>T[] toArray(    T[] a){
      return map.values().toArray(a);
    }
    @Override public boolean add(    Double e){
      throw new UnsupportedOperationException();
    }
    @Override public boolean remove(    Object o){
      throw new UnsupportedOperationException();
    }
    @Override public boolean containsAll(    Collection<?> c){
      throw new UnsupportedOperationException();
    }
    @Override public boolean addAll(    Collection<? extends Double> c){
      throw new UnsupportedOperationException();
    }
    @Override public boolean removeAll(    Collection<?> c){
      throw new UnsupportedOperationException();
    }
    @Override public boolean retainAll(    Collection<?> c){
      throw new UnsupportedOperationException();
    }
    @Override public void clear(){
      throw new UnsupportedOperationException();
    }
  }
;
}
