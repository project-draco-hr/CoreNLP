{
  BinaryGrammar binaryGrammar=parser.bg;
  UnaryGrammar unaryGrammar=parser.ug;
  Options op=parser.getOp();
  Index<String> stateIndex=parser.stateIndex;
  for (  UnaryRule unaryRule : unaryGrammar) {
    String childState=stateIndex.get(unaryRule.child);
    String childBasic=op.langpack().basicCategory(childState);
    unaryRules.add(childBasic);
  }
  for (  BinaryRule binaryRule : binaryGrammar) {
    String leftState=stateIndex.get(binaryRule.leftChild);
    String leftBasic=op.langpack().basicCategory(leftState);
    String rightState=stateIndex.get(binaryRule.rightChild);
    String rightBasic=op.langpack().basicCategory(rightState);
    binaryRules.add(leftBasic,rightBasic);
  }
  if (DEBUG) {
    log.info("UNARY RULES");
    for (    String rule : unaryRules) {
      log.info("  " + rule);
    }
    log.info();
    log.info("BINARY RULES");
    for (    Pair<String,String> rule : binaryRules) {
      log.info("  " + rule);
    }
    log.info();
    log.info();
  }
}
