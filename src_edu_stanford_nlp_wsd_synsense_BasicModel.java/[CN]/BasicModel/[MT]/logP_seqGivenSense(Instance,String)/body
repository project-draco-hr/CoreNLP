{
  ClassicCounter<String> wordCountsGivenThisSense;
  double totalWordsGivenThisSense;
  if (wordsGivenSenseCache.containsKey(sense)) {
    Pair p=wordsGivenSenseCache.get(sense);
    wordCountsGivenThisSense=(ClassicCounter<String>)p.first;
    totalWordsGivenThisSense=((Double)p.second).doubleValue();
  }
 else {
    wordCountsGivenThisSense=wordsGivenSenseCounts.getCounter(sense);
    totalWordsGivenThisSense=wordCountsGivenThisSense.totalCount();
    wordsGivenSenseCache.put(sense,new Pair<ClassicCounter<String>,Double>(wordCountsGivenThisSense,new Double(totalWordsGivenThisSense)));
  }
  double totalLogWordProb=0.0;
  double totalWeight=0.0;
  for (int i=0; i < ins.allWords.size(); i++) {
    int bucket=bucketing.getBucket(ins.index - i);
    String word=ins.allWords.get(i).word().toLowerCase();
    double wordCount=wordCountsGivenThisSense.getCount(word);
    double wordPriorProb=wordPrior.probabilityOf(word);
    double smoothedWordProb;
    if (wordBayesSmoothing) {
      smoothedWordProb=(wordCount + (wordPriorProb * bayesSmoothingParam)) / (totalWordsGivenThisSense + bayesSmoothingParam);
    }
 else {
      smoothedWordProb=((1.0 - linearSmoothingParam) * (wordCount / totalWordsGivenThisSense)) + ((linearSmoothingParam) * (wordPriorProb));
    }
    double logWordProb=Math.log(smoothedWordProb) * bucketWeights[bucket];
    totalWeight+=bucketWeights[bucket];
    if (i == ins.index) {
      continue;
    }
    if (logWordProb == Double.NEGATIVE_INFINITY) {
      continue;
    }
    totalLogWordProb+=logWordProb;
  }
  double seqProb=(totalLogWordProb * Math.pow(totalWeight,seqGivenSenseTestLenPow));
  return seqProb * senseEvidenceMult;
}
