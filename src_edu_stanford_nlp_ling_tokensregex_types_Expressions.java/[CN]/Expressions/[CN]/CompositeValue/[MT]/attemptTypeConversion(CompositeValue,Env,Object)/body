{
  Expression typeFieldExpr=cv.value.get("type");
  if (typeFieldExpr != null) {
    Value typeValue=typeFieldExpr.evaluate(env,args);
    if (typeFieldExpr instanceof VarExpression) {
      VarExpression varExpr=(VarExpression)typeFieldExpr;
      String typeName=varExpr.get();
      if (typeValue != null) {
        if (TYPE_CLASS.equals(typeValue.getType())) {
          Class c=(Class)typeValue.get();
          try {
            Object obj=c.newInstance();
            for (            String s : cv.value.keySet()) {
              if (!"type".equals(s)) {
                Value v=cv.value.get(s).evaluate(env,args);
                try {
                  Field f=c.getField(s);
                  f.set(obj,v.get());
                }
 catch (                NoSuchFieldException ex) {
                  throw new RuntimeException("Unknown field " + s + " for type "+ typeName,ex);
                }
              }
            }
            return new PrimitiveValue<Object>(typeName,obj);
          }
 catch (          InstantiationException ex) {
            throw new RuntimeException("Cannot instantiate " + c,ex);
          }
catch (          IllegalAccessException ex) {
            throw new RuntimeException("Cannot instantiate " + c,ex);
          }
        }
 else         if (typeValue.get() != null) {
          Class c=typeValue.get().getClass();
          try {
            Method m=c.getMethod("create",CompositeValue.class);
            CompositeValue evaluatedCv=cv.evaluateNoTypeConversion(env,args);
            try {
              return new PrimitiveValue<Object>(typeName,m.invoke(typeValue.get(),evaluatedCv));
            }
 catch (            InvocationTargetException ex) {
              throw new RuntimeException("Cannot instantiate " + c,ex);
            }
catch (            IllegalAccessException ex) {
              throw new RuntimeException("Cannot instantiate " + c,ex);
            }
          }
 catch (          NoSuchMethodException ex) {
          }
        }
      }
    }
 else     if (typeValue != null && typeValue.get() instanceof String) {
      String typeName=(String)typeValue.get();
      Expression valueField=cv.value.get("value");
      Value value=valueField.evaluate(env,args);
      if (TYPE_ANNOTATION_KEY.equals(typeName)) {
        String className=(String)value.get();
        try {
          return new PrimitiveValue<Class>(TYPE_ANNOTATION_KEY,Class.forName(className));
        }
 catch (        ClassNotFoundException ex) {
          throw new RuntimeException("Unknown class " + className,ex);
        }
      }
 else       if (TYPE_CLASS.equals(typeName)) {
        String className=(String)value.get();
        try {
          return new PrimitiveValue<Class>(TYPE_CLASS,Class.forName(className));
        }
 catch (        ClassNotFoundException ex) {
          throw new RuntimeException("Unknown class " + className,ex);
        }
      }
 else       if (TYPE_STRING.equals(typeName)) {
        return new PrimitiveValue<String>(TYPE_STRING,(String)value.get());
      }
 else       if (TYPE_REGEX.equals(typeName)) {
        return new RegexValue((String)value.get());
      }
 else       if (TYPE_NUMBER.equals(typeName)) {
        if (value.get() instanceof Number) {
          return new PrimitiveValue<Number>(TYPE_NUMBER,(Number)value.get());
        }
 else         if (value.get() instanceof String) {
          String str=(String)value.get();
          if (str.contains(".")) {
            return new PrimitiveValue<Number>(TYPE_NUMBER,Double.valueOf(str));
          }
 else {
            return new PrimitiveValue<Number>(TYPE_NUMBER,Long.valueOf(str));
          }
        }
 else {
          throw new IllegalArgumentException("Invalid value " + value + " for type "+ typeName);
        }
      }
 else {
        return new PrimitiveValue(typeName,value.get());
      }
    }
  }
  return null;
}
