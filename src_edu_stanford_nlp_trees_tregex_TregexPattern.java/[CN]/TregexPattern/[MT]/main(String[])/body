{
  Timing.startTime();
  StringBuilder treePrintFormats=new StringBuilder();
  String printNonMatchingTreesOption="-v";
  String subtreeCodeOption="-x";
  String extractSubtreesOption="-extract";
  String extractSubtreesFileOption="-extractFile";
  String inputFileOption="-i";
  String headFinderOption="-hf";
  String headFinderArgOption="-hfArg";
  String trfOption="-trf";
  String extensionOption="-e";
  String extension=null;
  String headFinderClassName=null;
  String[] headFinderArgs=StringUtils.EMPTY_STRING_ARRAY;
  String treeReaderFactoryClassName=null;
  String printHandleOption="-h";
  String markHandleOption="-k";
  String encodingOption="-encoding";
  String encoding="UTF-8";
  String macroOption="-macros";
  String macroFilename="";
  String yieldOnly="-t";
  String printAllTrees="-T";
  String quietMode="-C";
  String wholeTreeMode="-w";
  String filenameOption="-f";
  String oneMatchPerRootNodeMode="-o";
  String reportTreeNumbers="-n";
  String rootLabelOnly="-u";
  String oneLine="-s";
  Map<String,Integer> flagMap=Generics.newHashMap();
  flagMap.put(extractSubtreesOption,2);
  flagMap.put(extractSubtreesFileOption,2);
  flagMap.put(subtreeCodeOption,0);
  flagMap.put(printNonMatchingTreesOption,0);
  flagMap.put(encodingOption,1);
  flagMap.put(inputFileOption,1);
  flagMap.put(printHandleOption,1);
  flagMap.put(markHandleOption,2);
  flagMap.put(headFinderOption,1);
  flagMap.put(headFinderArgOption,1);
  flagMap.put(trfOption,1);
  flagMap.put(extensionOption,1);
  flagMap.put(macroOption,1);
  flagMap.put(yieldOnly,0);
  flagMap.put(quietMode,0);
  flagMap.put(wholeTreeMode,0);
  flagMap.put(printAllTrees,0);
  flagMap.put(filenameOption,0);
  flagMap.put(oneMatchPerRootNodeMode,0);
  flagMap.put(reportTreeNumbers,0);
  flagMap.put(rootLabelOnly,0);
  flagMap.put(oneLine,0);
  Map<String,String[]> argsMap=StringUtils.argsToMap(args,flagMap);
  args=argsMap.get(null);
  if (argsMap.containsKey(encodingOption)) {
    encoding=argsMap.get(encodingOption)[0];
    System.err.println("Encoding set to " + encoding);
  }
  PrintWriter errPW=new PrintWriter(new OutputStreamWriter(System.err,encoding),true);
  if (argsMap.containsKey(extractSubtreesOption)) {
    List<String> subTreeStrings=Collections.singletonList(argsMap.get(extractSubtreesOption)[0]);
    extractSubtrees(subTreeStrings,argsMap.get(extractSubtreesOption)[1]);
    return;
  }
  if (argsMap.containsKey(extractSubtreesFileOption)) {
    List<String> subTreeStrings=Arrays.asList(IOUtils.slurpFile(argsMap.get(extractSubtreesFileOption)[0]).split("\n|\r|\n\r"));
    extractSubtrees(subTreeStrings,argsMap.get(extractSubtreesFileOption)[0]);
    return;
  }
  if (args.length < 1) {
    errPW.println("Usage: java edu.stanford.nlp.trees.tregex.TregexPattern [-T] [-C] [-w] [-f] [-o] [-n] [-s] [-filter]  [-hf class] [-trf class] [-h handle]* [-e ext] pattern [filepath]");
    return;
  }
  String matchString=args[0];
  if (argsMap.containsKey(macroOption)) {
    macroFilename=argsMap.get(macroOption)[0];
  }
  if (argsMap.containsKey(headFinderOption)) {
    headFinderClassName=argsMap.get(headFinderOption)[0];
    errPW.println("Using head finder " + headFinderClassName + "...");
  }
  if (argsMap.containsKey(headFinderArgOption)) {
    headFinderArgs=argsMap.get(headFinderArgOption);
  }
  if (argsMap.containsKey(trfOption)) {
    treeReaderFactoryClassName=argsMap.get(trfOption)[0];
    errPW.println("Using tree reader factory " + treeReaderFactoryClassName + "...");
  }
  if (argsMap.containsKey(extensionOption)) {
    extension=argsMap.get(extensionOption)[0];
  }
  if (argsMap.containsKey(printAllTrees)) {
    TRegexTreeVisitor.printTree=true;
  }
  if (argsMap.containsKey(inputFileOption)) {
    String inputFile=argsMap.get(inputFileOption)[0];
    matchString=IOUtils.slurpFile(inputFile,encoding);
    String[] newArgs=new String[args.length + 1];
    System.arraycopy(args,0,newArgs,1,args.length);
    args=newArgs;
  }
  if (argsMap.containsKey(quietMode)) {
    TRegexTreeVisitor.printMatches=false;
    TRegexTreeVisitor.printNumMatchesToStdOut=true;
  }
  if (argsMap.containsKey(printNonMatchingTreesOption)) {
    TRegexTreeVisitor.printNonMatchingTrees=true;
  }
  if (argsMap.containsKey(subtreeCodeOption)) {
    TRegexTreeVisitor.printSubtreeCode=true;
    TRegexTreeVisitor.printMatches=false;
  }
  if (argsMap.containsKey(wholeTreeMode)) {
    TRegexTreeVisitor.printWholeTree=true;
  }
  if (argsMap.containsKey(filenameOption)) {
    TRegexTreeVisitor.printFilename=true;
  }
  if (argsMap.containsKey(oneMatchPerRootNodeMode))   TRegexTreeVisitor.oneMatchPerRootNode=true;
  if (argsMap.containsKey(reportTreeNumbers))   TRegexTreeVisitor.reportTreeNumbers=true;
  if (argsMap.containsKey(rootLabelOnly)) {
    treePrintFormats.append(TreePrint.rootLabelOnlyFormat).append(',');
  }
 else   if (argsMap.containsKey(oneLine)) {
    treePrintFormats.append("oneline,");
  }
 else   if (argsMap.containsKey(yieldOnly)) {
    treePrintFormats.append("words,");
  }
 else {
    treePrintFormats.append("penn,");
  }
  HeadFinder hf=new CollinsHeadFinder();
  if (headFinderClassName != null) {
    Class[] hfArgClasses=new Class[headFinderArgs.length];
    for (int i=0; i < hfArgClasses.length; i++)     hfArgClasses[i]=String.class;
    try {
      hf=(HeadFinder)Class.forName(headFinderClassName).getConstructor(hfArgClasses).newInstance((Object[])headFinderArgs);
    }
 catch (    Exception e) {
      throw new RuntimeException("Error occurred while constructing HeadFinder: " + e);
    }
  }
  TRegexTreeVisitor.tp=new TreePrint(treePrintFormats.toString(),new PennTreebankLanguagePack());
  try {
    TregexPatternCompiler tpc=new TregexPatternCompiler(hf);
    Macros.addAllMacros(tpc,macroFilename,encoding);
    TregexPattern p=tpc.compile(matchString);
    errPW.println("Pattern string:\n" + p.pattern());
    errPW.println("Parsed representation:");
    p.prettyPrint(errPW);
    String[] handles=argsMap.get(printHandleOption);
    if (argsMap.containsKey("-filter")) {
      TreeReaderFactory trf=getTreeReaderFactory(treeReaderFactoryClassName);
      treebank=new MemoryTreebank(trf,encoding);
      Reader reader=new BufferedReader(new InputStreamReader(System.in,encoding));
      ((MemoryTreebank)treebank).load(reader);
      reader.close();
    }
 else     if (args.length == 1) {
      errPW.println("using default tree");
      TreeReader r=new PennTreeReader(new StringReader("(VP (VP (VBZ Try) (NP (NP (DT this) (NN wine)) (CC and) (NP (DT these) (NNS snails)))) (PUNCT .))"),new LabeledScoredTreeFactory(new StringLabelFactory()));
      Tree t=r.readTree();
      treebank=new MemoryTreebank();
      treebank.add(t);
    }
 else {
      int last=args.length - 1;
      errPW.println("Reading trees from file(s) " + args[last]);
      TreeReaderFactory trf=getTreeReaderFactory(treeReaderFactoryClassName);
      treebank=new DiskTreebank(trf,encoding);
      treebank.loadPath(args[last],extension,true);
    }
    TRegexTreeVisitor vis=new TRegexTreeVisitor(p,handles,encoding);
    treebank.apply(vis);
    Timing.endTime();
    if (TRegexTreeVisitor.printMatches) {
      errPW.println("There were " + vis.numMatches() + " matches in total.");
    }
    if (TRegexTreeVisitor.printNumMatchesToStdOut) {
      System.out.println(vis.numMatches());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  TregexParseException e) {
    errPW.println("Error parsing expression: " + args[0]);
    errPW.println("Parse exception: " + e.toString());
  }
}
