{
  treeNumber++;
  if (printTree) {
    pw.print(treeNumber + ":");
    pw.println("Next tree read:");
    tp.printTree(t,pw);
  }
  TregexMatcher match=p.matcher(t);
  if (printNonMatchingTrees) {
    if (match.find())     numMatches++;
 else     tp.printTree(t,pw);
    return;
  }
  Tree lastMatchingRootNode=null;
  while (match.find()) {
    if (oneMatchPerRootNode) {
      if (lastMatchingRootNode == match.getMatch())       continue;
 else       lastMatchingRootNode=match.getMatch();
    }
    numMatches++;
    if (printFilename && treebank instanceof DiskTreebank) {
      DiskTreebank dtb=(DiskTreebank)treebank;
      pw.print("# ");
      pw.println(dtb.getCurrentFilename());
    }
    if (printSubtreeCode) {
      pw.print(treeNumber);
      pw.print(':');
      pw.println(match.getMatch().nodeNumber(t));
    }
    if (printMatches) {
      if (reportTreeNumbers) {
        pw.print(treeNumber);
        pw.print(": ");
      }
      if (printTree) {
        pw.println("Found a full match:");
      }
      if (printWholeTree) {
        tp.printTree(t,pw);
      }
 else       if (handles != null) {
        if (printTree) {
          pw.println("Here's the node you were interested in:");
        }
        for (        String handle : handles) {
          Tree labeledNode=match.getNode(handle);
          if (labeledNode == null) {
            log.info("Error!!  There is no matched node \"" + handle + "\"!  Did you specify such a label in the pattern?");
          }
 else {
            tp.printTree(labeledNode,pw);
          }
        }
      }
 else {
        tp.printTree(match.getMatch(),pw);
      }
    }
  }
}
