{
  SemanticGraph graph=SemanticGraph.valueOf("[ate subj>Bill dobj>[muffins compound>blueberry]]");
  SemgrexPattern pattern=SemgrexPattern.compile("{idx:0}=gov >>=foo {idx:3}=dep");
  SemgrexMatcher matcher=pattern.matcher(graph);
  assertTrue(matcher.find());
  assertEquals("ate",matcher.getNode("gov").toString());
  assertEquals("blueberry",matcher.getNode("dep").toString());
  assertEquals("compound",matcher.getRelnString("foo"));
  assertFalse(matcher.find());
  pattern=SemgrexPattern.compile("{idx:3}=dep <<=foo {idx:0}=gov");
  matcher=pattern.matcher(graph);
  assertTrue(matcher.find());
  assertEquals("ate",matcher.getNode("gov").toString());
  assertEquals("blueberry",matcher.getNode("dep").toString());
  assertEquals("dobj",matcher.getRelnString("foo"));
  assertFalse(matcher.find());
  pattern=SemgrexPattern.compile("{idx:3}=dep <=foo {idx:2}=gov");
  matcher=pattern.matcher(graph);
  assertTrue(matcher.find());
  assertEquals("muffins",matcher.getNode("gov").toString());
  assertEquals("blueberry",matcher.getNode("dep").toString());
  assertEquals("compound",matcher.getRelnString("foo"));
  assertFalse(matcher.find());
  pattern=SemgrexPattern.compile("{idx:2}=gov >=foo {idx:3}=dep");
  matcher=pattern.matcher(graph);
  assertTrue(matcher.find());
  assertEquals("muffins",matcher.getNode("gov").toString());
  assertEquals("blueberry",matcher.getNode("dep").toString());
  assertEquals("compound",matcher.getRelnString("foo"));
  assertFalse(matcher.find());
}
