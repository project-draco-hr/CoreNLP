{
  arch=arch.replaceAll("left3words","words(-1,1),order(2)");
  arch=arch.replaceAll("left5words","words(-2,2),order(2)");
  arch=arch.replaceAll("generic","words(-1,1),order(2),biwords(-1,0),wordTag(0,-1)");
  arch=arch.replaceAll("bidirectional5words","words(-2,2),order(-2,2),twoTags(-1,1),wordTag(0,-1),wordTag(0,1),biwords(-1,1)");
  arch=arch.replaceAll("bidirectional","words(-1,1),order(-2,2),twoTags(-1,1),wordTag(0,-1),wordTag(0,1),biwords(-1,1)");
  ArrayList<Extractor> extrs=new ArrayList<>();
  List<String> args=StringUtils.valueSplit(arch,"[a-zA-Z0-9]*(?:\\([^)]*\\))?","\\s*,\\s*");
  for (  String arg : args) {
    if (arg.equals("sighan2005")) {
      extrs.addAll(Arrays.asList(eFrames_sighan2005));
    }
 else     if (arg.equalsIgnoreCase("german")) {
      extrs.addAll(Arrays.asList(eFrames_german));
    }
 else     if (arg.startsWith("words(")) {
      int lWindow=Extractor.getParenthesizedNum(arg,1);
      int rWindow=Extractor.getParenthesizedNum(arg,2);
      for (int i=lWindow; i <= rWindow; i++) {
        extrs.add(new Extractor(i,false));
      }
    }
 else     if (arg.startsWith("tags(")) {
      int lWindow=Extractor.getParenthesizedNum(arg,1);
      int rWindow=Extractor.getParenthesizedNum(arg,2);
      for (int i=lWindow; i <= rWindow; i++) {
        extrs.add(new Extractor(i,true));
      }
    }
 else     if (arg.startsWith("biwords(")) {
      int lWindow=Extractor.getParenthesizedNum(arg,1);
      int rWindow=Extractor.getParenthesizedNum(arg,2);
      for (int i=lWindow; i < rWindow; i++) {
        extrs.add(new ExtractorTwoWords(i));
      }
    }
 else     if (arg.startsWith("biword(")) {
      int left=Extractor.getParenthesizedNum(arg,1);
      int right=Extractor.getParenthesizedNum(arg,2);
      extrs.add(new ExtractorTwoWords(left,right));
    }
 else     if (arg.startsWith("twoTags(")) {
      int left=Extractor.getParenthesizedNum(arg,1);
      int right=Extractor.getParenthesizedNum(arg,2);
      extrs.add(new ExtractorTwoTags(left,right));
    }
 else     if (arg.startsWith("lowercasewords(")) {
      int lWindow=Extractor.getParenthesizedNum(arg,1);
      int rWindow=Extractor.getParenthesizedNum(arg,2);
      for (int i=lWindow; i <= rWindow; i++) {
        extrs.add(new ExtractorWordLowerCase(i));
      }
    }
 else     if (arg.startsWith("order(")) {
      int leftOrder=Extractor.getParenthesizedNum(arg,1);
      int rightOrder=Extractor.getParenthesizedNum(arg,2);
      if (leftOrder > 0) {
        leftOrder=-leftOrder;
      }
      if (rightOrder < 0) {
        throw new IllegalArgumentException("Right order must be non-negative, not " + rightOrder);
      }
      for (int idx=leftOrder; idx <= rightOrder; idx++) {
        if (idx == 0) {
        }
 else         if (idx == -1 || idx == 1) {
          extrs.add(new Extractor(idx,true));
        }
 else {
          extrs.add(new ExtractorContinuousTagConjunction(idx));
        }
      }
    }
 else     if (arg.startsWith("wordTag(")) {
      int posW=Extractor.getParenthesizedNum(arg,1);
      int posT=Extractor.getParenthesizedNum(arg,2);
      extrs.add(new ExtractorWordTag(posW,posT));
    }
 else     if (arg.startsWith("wordTwoTags(")) {
      int word=Extractor.getParenthesizedNum(arg,1);
      int tag1=Extractor.getParenthesizedNum(arg,2);
      int tag2=Extractor.getParenthesizedNum(arg,3);
      extrs.add(new ExtractorWordTwoTags(word,tag1,tag2));
    }
 else     if (arg.startsWith("threeTags(")) {
      int pos1=Extractor.getParenthesizedNum(arg,1);
      int pos2=Extractor.getParenthesizedNum(arg,2);
      int pos3=Extractor.getParenthesizedNum(arg,3);
      extrs.add(new ExtractorThreeTags(pos1,pos2,pos3));
    }
 else     if (arg.startsWith("vbn(")) {
      int order=Extractor.getParenthesizedNum(arg,1);
      extrs.add(new ExtractorVerbalVBNZero(order));
    }
 else     if (arg.startsWith("allwordshapes(")) {
      int lWindow=Extractor.getParenthesizedNum(arg,1);
      int rWindow=Extractor.getParenthesizedNum(arg,2);
      String wsc=Extractor.getParenthesizedArg(arg,3);
      if (wsc == null) {
        wsc="chris2";
      }
      for (int i=lWindow; i <= rWindow; i++) {
        extrs.add(new ExtractorWordShapeClassifier(i,wsc));
      }
    }
 else     if (arg.startsWith("allwordshapeconjunction(")) {
      int lWindow=Extractor.getParenthesizedNum(arg,1);
      int rWindow=Extractor.getParenthesizedNum(arg,2);
      String wsc=Extractor.getParenthesizedArg(arg,3);
      if (wsc == null) {
        wsc="chris2";
      }
      extrs.add(new ExtractorWordShapeConjunction(lWindow,rWindow,wsc));
    }
 else     if (arg.startsWith("allunicodeshapes(")) {
      int lWindow=Extractor.getParenthesizedNum(arg,1);
      int rWindow=Extractor.getParenthesizedNum(arg,2);
      for (int i=lWindow; i <= rWindow; i++) {
        extrs.add(new ExtractorWordShapeClassifier(i,"chris4"));
      }
    }
 else     if (arg.startsWith("allunicodeshapeconjunction(")) {
      int lWindow=Extractor.getParenthesizedNum(arg,1);
      int rWindow=Extractor.getParenthesizedNum(arg,2);
      extrs.add(new ExtractorWordShapeConjunction(lWindow,rWindow,"chris4"));
    }
 else     if (arg.equalsIgnoreCase("spanishauxiliaries")) {
      extrs.add(new ExtractorSpanishAuxiliaryTag());
      extrs.add(new ExtractorSpanishSemiauxiliaryTag());
    }
 else     if (arg.equalsIgnoreCase("naacl2003unknowns") || arg.equalsIgnoreCase("lnaacl2003unknowns") || arg.equalsIgnoreCase("caselessnaacl2003unknowns")|| arg.equalsIgnoreCase("naacl2003conjunctions")|| arg.equalsIgnoreCase("frenchunknowns")|| arg.equalsIgnoreCase("spanishunknowns")|| arg.startsWith("wordshapes(")|| arg.startsWith("wordshapeconjunction(")|| arg.equalsIgnoreCase("motleyUnknown")|| arg.startsWith("suffix(")|| arg.startsWith("prefix(")|| arg.startsWith("prefixsuffix")|| arg.startsWith("capitalizationsuffix(")|| arg.startsWith("distsim(")|| arg.startsWith("distsimconjunction(")|| arg.equalsIgnoreCase("lctagfeatures")|| arg.startsWith("unicodeshapes(")|| arg.startsWith("chinesedictionaryfeatures(")|| arg.startsWith("unicodeshapeconjunction(")) {
    }
 else {
      log.info("Unrecognized ExtractorFrames identifier (ignored): " + arg);
    }
  }
  return extrs.toArray(new Extractor[extrs.size()]);
}
