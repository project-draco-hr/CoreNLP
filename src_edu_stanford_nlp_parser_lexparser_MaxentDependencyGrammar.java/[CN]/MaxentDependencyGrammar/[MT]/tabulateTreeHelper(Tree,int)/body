{
  if (tree.isLeaf() || tree.isPreTerminal()) {
    tempEndHead.head=loc;
    tempEndHead.end=loc + 1;
    return tempEndHead;
  }
  if (tree.children().length == 1) {
    return tabulateTreeHelper(tree.children()[0],loc);
  }
  tempEndHead=tabulateTreeHelper(tree.children()[0],loc);
  int lHead=tempEndHead.head;
  int split=tempEndHead.end;
  tempEndHead=tabulateTreeHelper(tree.children()[1],tempEndHead.end);
  int end=tempEndHead.end;
  int rHead=tempEndHead.head;
  String hWord=((HasWord)tree.label()).word();
  String lWord=((HasWord)tree.children()[0].label()).word();
  boolean leftHeaded=hWord.equals(lWord);
  int head=(leftHeaded ? lHead : rHead);
  int arg=(leftHeaded ? rHead : lHead);
  IntTaggedWord hTW=ITWs[head];
  IntTaggedWord aTW=ITWs[arg];
  IntDependency dependency=intern(hTW,aTW,leftHeaded,distanceBin(leftHeaded ? split - head - 1 : head - split));
  posExamples.incrementCount(dependency);
  IntDependency stopL=intern(aTW,stopTW,false,distanceBin(leftHeaded ? arg - split : arg - loc));
  stopExamples.incrementCount(stopL);
  IntDependency stopR=intern(aTW,stopTW,true,distanceBin(leftHeaded ? end - arg - 1 : split - arg - 1));
  stopExamples.incrementCount(stopR);
  distCounter.incrementCount(intern(wildTW,wildTW,leftHeaded,distanceBin(leftHeaded ? split - head - 1 : head - split)));
  List<IntDependency> negExamples=new ArrayList<IntDependency>();
  int beginArg=(leftHeaded ? split : loc);
  int endArg=(leftHeaded ? end : split);
  for (int notHead=0; notHead < beginArg; notHead++) {
    if (notHead == head) {
      continue;
    }
    int thisDist=beginArg - notHead - 1;
    negExamples.add(intern(ITWs[notHead],aTW,true,distanceBin(thisDist)));
  }
  for (int notHead=endArg + 1; notHead < lengthOfCurrentSentence; notHead++) {
    if (notHead == head) {
      continue;
    }
    int thisDist=notHead - endArg;
    negExamples.add(intern(ITWs[notHead],aTW,false,distanceBin(thisDist)));
  }
  negExamplesForSentence.add(negExamples);
  tempEndHead.head=head;
  return tempEndHead;
}
