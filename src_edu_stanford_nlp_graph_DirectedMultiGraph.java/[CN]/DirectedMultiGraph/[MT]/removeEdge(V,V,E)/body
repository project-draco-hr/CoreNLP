{
  if (!outgoingEdges.containsKey(source)) {
    return false;
  }
  if (!incomingEdges.containsKey(dest)) {
    return false;
  }
  if (!outgoingEdges.get(source).containsKey(dest)) {
    return false;
  }
  boolean foundOut=outgoingEdges.get(source).get(dest).remove(data);
  boolean foundIn=incomingEdges.get(dest).get(source).remove(data);
  if (foundOut && !foundIn) {
    throw new AssertionError("Edge found in outgoing but not incoming");
  }
  if (foundIn && !foundOut) {
    throw new AssertionError("Edge found in incoming but not outgoing");
  }
  if (outgoingEdges.get(source).get(dest).size() == 0) {
    outgoingEdges.get(source).remove(dest);
  }
  if (incomingEdges.get(dest).get(source).size() == 0) {
    incomingEdges.get(dest).remove(source);
  }
  return foundOut;
}
