{
  if (TEST_FLAT) {
    runForFlatInput();
    return;
  }
  try {
    PrintWriter crfOutFile=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outFileName),"UTF-8")));
    BufferedReader madaFeatFile=new BufferedReader(new InputStreamReader(new FileInputStream(new File(madaFile))));
    PrintWriter flatSentenceFile=new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outFileName + ".raw"),"UTF-8")));
    ArabicTreeReaderFactory.ArabicRawTreeReaderFactory rf=new ArabicTreeReaderFactory.ArabicRawTreeReaderFactory();
    TreeReader treeReader=rf.newTreeReader(new InputStreamReader(new BufferedInputStream(new FileInputStream(new File(inFileName))),"UTF-8"));
    ConstituentFinder constituentFinder=new ConstituentFinder(VERBOSE);
    int treeId=1;
    for (Tree t; (t=treeReader.readTree()) != null; treeId++) {
      System.err.printf("\n>>> Processing tree %d <<<\n",treeId);
      t=t.prune(emptyFilter,tf);
      numberLeaves(t,0);
      List<Tree> mainSubj=constituentFinder.findSubjects(t);
      List<Tree> mainVerb=constituentFinder.findVerbs(t);
      List<Tree> nonSubjNPs=constituentFinder.findNPs(t);
      printLabeledSentence(treeId,t,crfOutFile,madaFeatFile,mainSubj,mainVerb,nonSubjNPs);
      printFlatSentence(t,flatSentenceFile);
      if ((treeId % 500) == 0)       System.out.print(".");
 else       if ((treeId % 10000) == 0)       System.out.println();
    }
    System.out.printf("\n\nProcessed %d trees\n",treeId - 1);
    treeReader.close();
    crfOutFile.close();
    flatSentenceFile.close();
    madaFeatFile.close();
  }
 catch (  FileNotFoundException e) {
    System.err.printf("%s: Could not open file\n",this.getClass().getName());
    e.printStackTrace();
  }
catch (  IOException e) {
    System.err.printf("%s: Unknown exception while opening files\n",this.getClass().getName());
  }
}
