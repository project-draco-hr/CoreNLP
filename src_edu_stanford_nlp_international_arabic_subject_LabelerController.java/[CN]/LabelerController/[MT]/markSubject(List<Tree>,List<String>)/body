{
  if (sbj.size() == 0)   return;
  Iterator<Tree> subjItr=sbj.iterator();
  while (subjItr.hasNext()) {
    Tree thisSubj=subjItr.next();
    List<Tree> scoredYield=thisSubj.getLeaves();
    if (scoredYield.size() > subjectLenLimit) {
      System.err.printf("Discarding subject of length %d (length limit = %d)\n",scoredYield.size(),subjectLenLimit);
      continue;
    }
 else     if (scoredYield.size() == 1) {
      setNPLabel(labels,subjSingleLabel,scoredYield);
    }
 else     if (scoredYield.size() == 2) {
      List<Tree> start=new ArrayList<Tree>();
      start.add(scoredYield.get(0));
      setNPLabel(labels,subjStartLabel,start);
      List<Tree> end=new ArrayList<Tree>();
      end.add(scoredYield.get(1));
      setNPLabel(labels,subjEndLabel,end);
    }
 else {
      List<Tree> start=new ArrayList<Tree>();
      start.add(scoredYield.get(0));
      setNPLabel(labels,subjStartLabel,start);
      List<Tree> end=new ArrayList<Tree>();
      end.add(scoredYield.get(scoredYield.size() - 1));
      setNPLabel(labels,subjEndLabel,end);
      scoredYield.remove(0);
      scoredYield.remove(scoredYield.size() - 1);
      setNPLabel(labels,subjInsideLabel,scoredYield);
    }
  }
}
