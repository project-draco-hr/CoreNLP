{
  if (featureGrouping != null)   return featureGrouping;
 else {
    List<Set<Integer>> groups=new ArrayList<>();
    if (flags.groupByInput) {
      for (int nodeFeatureIndex=0; nodeFeatureIndex < numNodeFeatures; nodeFeatureIndex++) {
        Set<Integer> newSet=new HashSet<>();
        for (int outputClassIndex=0; outputClassIndex < numClasses; outputClassIndex++) {
          for (int hiddenUnitIndex=0; hiddenUnitIndex < numHiddenUnits; hiddenUnitIndex++) {
            int firstLayerIndex=hiddenUnitIndex * numClasses + outputClassIndex;
            int oneDIndex=firstLayerIndex * numNodeFeatures + nodeFeatureIndex + edgeParamCount;
            newSet.add(oneDIndex);
          }
        }
        groups.add(newSet);
      }
    }
 else     if (flags.groupByHiddenUnit) {
      for (int nodeFeatureIndex=0; nodeFeatureIndex < numNodeFeatures; nodeFeatureIndex++) {
        for (int hiddenUnitIndex=0; hiddenUnitIndex < numHiddenUnits; hiddenUnitIndex++) {
          Set<Integer> newSet=new HashSet<>();
          for (int outputClassIndex=0; outputClassIndex < numClasses; outputClassIndex++) {
            int firstLayerIndex=hiddenUnitIndex * numClasses + outputClassIndex;
            int oneDIndex=firstLayerIndex * numNodeFeatures + nodeFeatureIndex + edgeParamCount;
            newSet.add(oneDIndex);
          }
          groups.add(newSet);
        }
      }
    }
 else {
      for (int nodeFeatureIndex=0; nodeFeatureIndex < numNodeFeatures; nodeFeatureIndex++) {
        for (int outputClassIndex=0; outputClassIndex < numClasses; outputClassIndex++) {
          Set<Integer> newSet=new HashSet<>();
          for (int hiddenUnitIndex=0; hiddenUnitIndex < numHiddenUnits; hiddenUnitIndex++) {
            int firstLayerIndex=hiddenUnitIndex * numClasses + outputClassIndex;
            int oneDIndex=firstLayerIndex * numNodeFeatures + nodeFeatureIndex + edgeParamCount;
            newSet.add(oneDIndex);
          }
          groups.add(newSet);
        }
      }
    }
    int[][] fg=new int[groups.size()][];
    for (int i=0; i < fg.length; i++) {
      Set<Integer> aSet=groups.get(i);
      fg[i]=new int[aSet.size()];
      int ind=0;
      for (      int j : aSet)       fg[i][ind++]=j;
    }
    featureGrouping=fg;
    return fg;
  }
}
