{
  if (prior == L1_PRIOR) {
    Set<Integer> paramRange=new HashSet<Integer>(x.length);
    for (int i=0; i < x.length; i++)     paramRange.add(i);
    return paramRange;
  }
 else   if (prior == L1_NODE_L2_EDGE_PRIOR) {
    Set<Integer> paramRange=new HashSet<Integer>(beforeOutputWeights - edgeParamCount);
    for (int i=edgeParamCount; i < beforeOutputWeights; i++)     paramRange.add(i);
    return paramRange;
  }
 else   if (prior == L1_SPARSENODE_L2_EDGE_PRIOR) {
    double[][] W=separateWeights(x).second();
    Set<Integer> paramRange=new HashSet<Integer>();
    for (int nodeFeatureIndex=0; nodeFeatureIndex < numNodeFeatures; nodeFeatureIndex++) {
      for (int outputClassIndex=0; outputClassIndex < numClasses; outputClassIndex++) {
        double maxParamAbsVal=0;
        int maxHiddenUnitIndex=0;
        for (int hiddenUnitIndex=0; hiddenUnitIndex < numHiddenUnits; hiddenUnitIndex++) {
          int firstLayerIndex=hiddenUnitIndex * numClasses + outputClassIndex;
          double absWeight=Math.abs(W[firstLayerIndex][nodeFeatureIndex]);
          if (absWeight > maxParamAbsVal) {
            maxParamAbsVal=absWeight;
            maxHiddenUnitIndex=hiddenUnitIndex;
          }
        }
        for (int hiddenUnitIndex=0; hiddenUnitIndex < numHiddenUnits; hiddenUnitIndex++) {
          if (hiddenUnitIndex != maxHiddenUnitIndex) {
            int firstLayerIndex=hiddenUnitIndex * numClasses + outputClassIndex;
            int oneDIndex=firstLayerIndex * numNodeFeatures + nodeFeatureIndex + edgeParamCount;
            paramRange.add(oneDIndex);
          }
        }
      }
    }
    return paramRange;
  }
 else {
    return new HashSet<Integer>();
  }
}
