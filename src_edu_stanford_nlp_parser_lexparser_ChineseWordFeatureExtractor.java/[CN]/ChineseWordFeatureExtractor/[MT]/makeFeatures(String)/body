{
  List<String> features=new ArrayList<>();
  if (morpho) {
    for (    Map.Entry<String,Set<Character>> e : cmfs.getSingletonFeatures().entrySet()) {
      if (e.getValue().contains(word.charAt(0))) {
        features.add(e.getKey() + "-1");
      }
    }
    for (    Map.Entry<String,Pair<Set<Character>,Set<Character>>> e : cmfs.getAffixFeatures().entrySet()) {
      boolean both=false;
      if (e.getValue().first().contains(word.charAt(0))) {
        features.add(e.getKey() + "-P");
        both=true;
      }
      if (e.getValue().second().contains(word.charAt(word.length() - 1))) {
        features.add(e.getKey() + "-S");
      }
 else {
        both=false;
      }
      if (both && mildConjunctions && !conjunctions) {
        features.add(e.getKey() + "-PS");
      }
    }
    if (conjunctions) {
      int max=features.size();
      for (int i=1; i < max; i++) {
        String s1=features.get(i);
        for (int j=0; j < i; j++) {
          String s2=features.get(j);
          features.add(s1 + "&&" + s2);
        }
      }
    }
  }
  if (!turnOffWordFeatures) {
    features.add(word + "-W");
  }
  if (rads) {
    features.add(RadicalMap.getRadical(word.charAt(0)) + "-FR");
    features.add(RadicalMap.getRadical(word.charAt(word.length() - 1)) + "-LR");
    for (int i=0; i < word.length(); i++) {
      features.add(RadicalMap.getRadical(word.charAt(i)) + "-CR");
    }
  }
  if (chars) {
    features.add(word.charAt(0) + "-FC");
    features.add(word.charAt(word.length() - 1) + "-LC");
    for (int i=0; i < word.length(); i++) {
      features.add(word.charAt(i) + "-CC");
    }
    if (bigrams && word.length() > 1) {
      features.add(word.substring(0,2) + "-FB");
      features.add(word.substring(word.length() - 2) + "-LB");
      for (int i=2; i <= word.length(); i++) {
        features.add(word.substring(i - 2,i) + "-CB");
      }
    }
  }
  if (useLength) {
    int lengthBin=word.length();
    if (lengthBin >= 5) {
      if (lengthBin >= 8) {
        lengthBin=8;
      }
 else {
        lengthBin=5;
      }
    }
    features.add(word.length() + "-L");
  }
  if (useFreq && !turnOffWordFeatures) {
    int freq=wordCounter.getIntCount(word);
    int freqBin;
    if (freq <= 1)     freqBin=0;
 else     if (freq <= 3)     freqBin=1;
 else     if (freq <= 6)     freqBin=2;
 else     if (freq <= 15)     freqBin=3;
 else     if (freq <= 50)     freqBin=4;
 else     freqBin=5;
    features.add(freqBin + "-FQ");
  }
  features.add("PR");
  if (threshedFeatures != null) {
    for (Iterator<String> iter=features.iterator(); iter.hasNext(); ) {
      String s=iter.next();
      if (!threshedFeatures.contains(s)) {
        iter.remove();
      }
    }
  }
  return features;
}
