{
  BitSet keepBidStates=new BitSet();
  for (  MatchedStates ms : activeMatchedStates) {
    List<State> states=ms.states;
    if (logger.isLoggable(Level.FINEST)) {
      logger.finest("Condense matched state: curPosition=" + ms.curPosition + ", totalTokens="+ ms.matcher.elements.size()+ ", nStates="+ states.size());
    }
    for (    State state : states) {
      keepBidStates.set(state.bid);
    }
  }
  for (  MatchedStates ms : activeMatchedStates) {
    for (    State state : (List<State>)ms.states) {
      int bid=state.bid;
      BranchState bs=getBranchState(bid);
      if (bs != null) {
        keepBidStates.set(bs.bid);
        bs.updateKeepBids(keepBidStates);
        if (bs.bidsToCollapse != null) {
          mergeBranchStates(bs);
        }
      }
    }
  }
  Iterator<Integer> iter=branchStates.keySet().iterator();
  while (iter.hasNext()) {
    int bid=iter.next();
    if (!keepBidStates.get(bid)) {
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest("Remove state for bid=" + bid);
      }
      iter.remove();
    }
  }
}
