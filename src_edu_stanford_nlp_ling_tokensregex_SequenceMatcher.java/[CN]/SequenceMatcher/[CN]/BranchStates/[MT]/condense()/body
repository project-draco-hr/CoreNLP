{
  Set<Integer> curBidSet=new HashSet<Integer>();
  Set<Integer> keepBidStates=new HashSet<Integer>();
  for (  MatchedStates ms : activeMatchedStates) {
    List<State> states=ms.states;
    if (logger.isLoggable(Level.FINEST)) {
      logger.finest("Condense matched state: curPosition=" + ms.curPosition + ", totalTokens="+ ms.matcher.elements.size()+ ", nStates="+ states.size());
    }
    for (    State state : states) {
      curBidSet.add(state.bid);
      keepBidStates.add(state.bid);
    }
  }
  for (  int bid : curBidSet) {
    BranchState bs=getBranchState(bid);
    if (bs != null) {
      keepBidStates.add(bs.bid);
      bs.updateKeepBids(keepBidStates);
      if (bs.bidsToCollapse != null) {
        mergeBranchStates(bs);
      }
    }
  }
  Collection<Integer> curBidStates=new ArrayList<Integer>(branchStates.keySet());
  for (  int bid : curBidStates) {
    if (!keepBidStates.contains(bid)) {
      if (logger.isLoggable(Level.FINEST)) {
        logger.finest("Remove state for bid=" + bid);
      }
      branchStates.remove(bid);
    }
  }
  if (logger.isLoggable(Level.FINEST)) {
    logger.finest("Condense matched state: oldBidStates=" + curBidStates.size() + ", newBidStates="+ branchStates.size()+ ", curBidSet="+ curBidSet.size());
  }
}
