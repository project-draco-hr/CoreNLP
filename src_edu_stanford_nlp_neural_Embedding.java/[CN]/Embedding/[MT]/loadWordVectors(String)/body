{
  System.err.println("# Loading embedding ...\n  word vector file = " + wordVectorFile);
  boolean warned=false;
  int numWords=0;
  for (  String line : IOUtils.readLines(wordVectorFile,"utf-8")) {
    String[] lineSplit=line.split("\\s+");
    String word=lineSplit[0];
    if (word.equals("UNKNOWN") || word.equals("UUUNKKK") || word.equals("UNK")|| word.equals("*UNKNOWN*")|| word.equals("<unk>")) {
      word=UNKNOWN_WORD;
    }
    if (word.equals("<s>")) {
      word=START_WORD;
    }
    if (word.equals("</s>")) {
      word=END_WORD;
    }
    int dimOfWords=lineSplit.length - 1;
    if (embeddingSize <= 0) {
      embeddingSize=dimOfWords;
      System.err.println("  detected embedding size = " + dimOfWords);
    }
    if (dimOfWords > embeddingSize) {
      if (!warned) {
        warned=true;
        System.err.println("WARNING: Dimensionality of numHid parameter and word vectors do not match, deleting word vector dimensions to fit!");
      }
      dimOfWords=embeddingSize;
    }
 else     if (dimOfWords < embeddingSize) {
      throw new RuntimeException("Word vectors file has dimension too small for requested numHid of " + embeddingSize);
    }
    double[][] vec=new double[dimOfWords][1];
    for (int i=1; i <= dimOfWords; i++) {
      vec[i - 1][0]=Double.parseDouble(lineSplit[i]);
    }
    SimpleMatrix vector=new SimpleMatrix(vec);
    wordVectors.put(word,vector);
    numWords++;
  }
  System.err.println("  num words = " + numWords);
}
