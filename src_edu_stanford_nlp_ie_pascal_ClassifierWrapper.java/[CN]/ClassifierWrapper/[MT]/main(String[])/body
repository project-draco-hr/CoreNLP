{
  Properties props=StringUtils.argsToProperties(args);
  String trainFile=props.getProperty("trainFile");
  String testFileString=props.getProperty("testFile");
  String loadPath=props.getProperty("loadClassifier");
  String serializeTo=props.getProperty("serializeTo");
  String useCRFString=props.getProperty("useCRF");
  String outputPrefix=props.getProperty("outputPrefix");
  boolean useCRF=false;
  if (useCRFString != null && Boolean.parseBoolean(useCRFString)) {
    useCRF=true;
  }
  AbstractSequenceClassifier classifier;
  if (useCRF) {
    classifier=new CRFClassifier(props);
  }
 else {
    classifier=new CMMClassifier(props);
  }
  if (trainFile != null) {
    classifier.train(trainFile);
  }
  if (serializeTo != null) {
    classifier.serializeClassifier(serializeTo);
  }
  if (loadPath != null) {
    classifier.loadClassifier(loadPath);
    classifier.flags.setProperties(props);
  }
  if (testFileString != null) {
    String[] testFiles=testFileString.split(",");
    for (int f=0; f < testFiles.length; ++f) {
      PrintStream output=System.out;
      if (outputPrefix != null) {
        output=new PrintStream(new FileOutputStream(testFiles[f] + '.' + outputPrefix));
      }
      if (useCRF) {
        testCRF((CRFClassifier)classifier,testFiles[f],output);
      }
 else {
        testCMM((CMMClassifier)classifier,testFiles[f],output);
      }
      if (outputPrefix != null) {
        output.close();
      }
    }
  }
}
