{
  List<RelationMention> extractions=new ArrayList<>();
  List<RelationMention> cands=null;
  if (createUnrelatedRelations) {
    cands=AnnotationUtils.getAllUnrelatedRelations(relationMentionFactory,sentence,false);
  }
 else {
    cands=sentence.get(MachineReadingAnnotations.RelationMentionsAnnotation.class);
    if (cands == null) {
      cands=new ArrayList<>();
    }
  }
  for (  RelationMention rel : cands) {
    Datum<String,String> testDatum=createDatum(rel);
    String label=classOf(testDatum,rel);
    Counter<String> probs=probabilityOf(testDatum);
    double prob=probs.getCount(label);
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    if (logger.isLoggable(Level.INFO)) {
      justificationOf(testDatum,pw,label);
    }
    logger.info("Current sentence: " + AnnotationUtils.tokensAndNELabelsToString(rel.getArg(0).getSentence()) + "\n"+ "Classifying relation: "+ rel+ "\n"+ "JUSTIFICATION for label GOLD:"+ rel.getType()+ " SYS:"+ label+ " (prob:"+ prob+ "):\n"+ sw.toString());
    logger.info("Justification done.");
    RelationMention relation=relationMentionFactory.constructRelationMention(rel.getObjectId(),sentence,rel.getExtent(),label,null,rel.getArgs(),probs);
    extractions.add(relation);
    if (!relation.getType().equals(rel.getType())) {
      logger.info("Classification: found different type " + relation.getType() + " for relation: "+ rel);
      logger.info("The predicted relation is: " + relation);
      logger.info("Current sentence: " + AnnotationUtils.tokensAndNELabelsToString(rel.getArg(0).getSentence()));
    }
 else {
      logger.info("Classification: found similar type " + relation.getType() + " for relation: "+ rel);
      logger.info("The predicted relation is: " + relation);
      logger.info("Current sentence: " + AnnotationUtils.tokensAndNELabelsToString(rel.getArg(0).getSentence()));
    }
  }
  return extractions;
}
