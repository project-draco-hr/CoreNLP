{
  edu.stanford.nlp.util.PriorityQueue<Pair<Integer,Integer>> biggestKeys=new FixedPrioritiesPriorityQueue<Pair<Integer,Integer>>();
  for (int feat=0; feat < weights.length; feat++) {
    for (int lab=0; lab < weights[feat].length; lab++) {
      double thisWeight;
      if (useMagnitude) {
        thisWeight=-Math.abs(weights[feat][lab]);
      }
 else {
        thisWeight=-weights[feat][lab];
      }
      if (biggestKeys.size() == numFeatures) {
        double lowest=biggestKeys.getPriority();
        if (thisWeight < lowest) {
          biggestKeys.removeFirst();
          biggestKeys.add(new Pair<Integer,Integer>(feat,lab),thisWeight);
        }
      }
 else {
        biggestKeys.add(new Pair<Integer,Integer>(feat,lab),thisWeight);
      }
    }
  }
  int actualSize=biggestKeys.size();
  Pair<Integer,Integer>[] bigArray=ErasureUtils.<Pair<Integer,Integer>>mkTArray(Pair.class,actualSize);
  if (printDescending) {
    for (int j=actualSize - 1; j >= 0; j--) {
      bigArray[j]=biggestKeys.removeFirst();
    }
  }
 else {
    for (int j=0; j < actualSize; j--) {
      bigArray[j]=biggestKeys.removeFirst();
    }
  }
  List<Pair<Integer,Integer>> bigColl=Arrays.asList(bigArray);
  int maxLeng=0;
  for (  Pair<Integer,Integer> p : bigColl) {
    String key="(" + featureIndex.get(p.first) + ","+ labelIndex.get(p.second)+ ")";
    int leng=key.length();
    if (leng > maxLeng) {
      maxLeng=leng;
    }
  }
  maxLeng=Math.min(64,maxLeng);
  NumberFormat nf=NumberFormat.getNumberInstance();
  nf.setMinimumFractionDigits(4);
  nf.setMaximumFractionDigits(4);
  if (nf instanceof DecimalFormat) {
    ((DecimalFormat)nf).setPositivePrefix(" ");
  }
  StringBuilder sb=new StringBuilder("LinearClassifier [printing top " + numFeatures + " features]\n");
  for (  Pair<Integer,Integer> p : bigColl) {
    String key="(" + featureIndex.get(p.first) + ","+ labelIndex.get(p.second)+ ")";
    sb.append(StringUtils.pad(key,maxLeng));
    sb.append(" ");
    double cnt=weights[p.first][p.second];
    if (Double.isInfinite(cnt)) {
      sb.append(cnt);
    }
 else {
      sb.append(nf.format(cnt));
    }
    sb.append("\n");
  }
  return sb.toString();
}
