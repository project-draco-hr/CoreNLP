{
  if (!mention.getType().equals("NFLTeam")) {
    return;
  }
  List<CoreLabel> tokens=mention.getSentence().get(TokensAnnotation.class);
  int endToken=mention.getExtentTokenEnd();
  int startToken=mention.getExtentTokenStart();
  for (endToken=endToken + 1; endToken <= tokens.size(); endToken++) {
    String nameCandidate=joinTokens(tokens,startToken,endToken);
    if (!partialToFullTeamNames.containsKey(nameCandidate)) {
      break;
    }
  }
  endToken--;
  for (startToken=startToken - 1; startToken >= 0; startToken--) {
    String nameCandidate=joinTokens(tokens,startToken,endToken);
    if (!partialToFullTeamNames.containsKey(nameCandidate)) {
      break;
    }
  }
  startToken++;
  if (startToken != mention.getExtentTokenStart() || endToken != mention.getExtentTokenEnd()) {
    if (verbose)     System.err.println("Mention extended from " + joinTokens(tokens,mention.getExtentTokenStart(),mention.getExtentTokenEnd()) + " to "+ joinTokens(tokens,startToken,endToken));
    mention.setExtent(new Span(startToken,endToken));
  }
  String nameCandidate=joinTokens(tokens,startToken,endToken);
  Set<String> fullNames=partialToFullTeamNames.get(nameCandidate);
  if (fullNames != null && fullNames.size() > 0) {
    if (fullNames.size() > 1) {
      fullNames=disambiguateNames(sentences,sentPosition,startToken,endToken,nameCandidate,new ArrayList<String>(fullNames));
    }
    StringBuffer fullNameAnnotation=new StringBuffer();
    List<String> sortedNames=new ArrayList<String>(fullNames);
    Collections.sort(sortedNames);
    boolean first=true;
    for (    String n : sortedNames) {
      if (!first)       fullNameAnnotation.append("|");
      fullNameAnnotation.append(n);
      first=false;
    }
    if (verbose)     System.err.println("Mention " + nameCandidate + " mapped to normalized name: "+ fullNameAnnotation.toString());
    mention.setNormalizedName(fullNameAnnotation.toString().replaceAll("\\s+",""));
  }
}
