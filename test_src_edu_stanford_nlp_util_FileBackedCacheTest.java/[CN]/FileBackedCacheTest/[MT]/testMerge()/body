{
  cache.put("key","value");
  File constituent1File=File.createTempFile("cache",".dir");
  assertTrue(constituent1File.delete());
  FileBackedCache<String,String> constituent1=new FileBackedCache<String,String>(constituent1File);
  File constituent2File=File.createTempFile("cache",".dir");
  assertTrue(constituent2File.delete());
  FileBackedCache<String,String> constituent2=new FileBackedCache<String,String>(constituent2File);
  constituent1.put("c1Key1","constituent1a");
  constituent1.put("c1Key2","constituent1b");
  constituent1.put("c1Key3","overlap");
  constituent2.put("c2Key1","constituent2a");
  constituent2.put("c2Key2","constituent2b");
  constituent2.put("c1Key3","overlapReplaced");
  constituent1.clear();
  constituent2.clear();
  FileBackedCache.merge(cache,new FileBackedCache[]{constituent1,constituent2});
  assertEquals("value",cache.get("key"));
  cache.clear();
  assertEquals("constituent1a",cache.get("c1Key1"));
  assertEquals("constituent1b",cache.get("c1Key2"));
  assertEquals("constituent2a",cache.get("c2Key1"));
  assertEquals("constituent2b",cache.get("c2Key2"));
  assertEquals("overlapReplaced",cache.get("c1Key3"));
  if (constituent1File.listFiles() != null) {
    for (    File c : constituent1File.listFiles()) {
      assertTrue(c.delete());
    }
    assertTrue(constituent1File.delete());
  }
  if (constituent2File.listFiles() != null) {
    for (    File c : constituent2File.listFiles()) {
      assertTrue(c.delete());
    }
    assertTrue(constituent2File.delete());
  }
  assertTrue(FileBackedCache.locksHeld().isEmpty());
}
