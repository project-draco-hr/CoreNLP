{
  File cacheDir=File.createTempFile("cache",".dir");
  cacheDir.delete();
  FileBackedCache<CustomHash,String> myCache=new FileBackedCache<CustomHash,String>(cacheDir);
  assertEquals(0,cacheDir.listFiles().length);
  myCache.put(new CustomHash(0,0),"zero");
  myCache.put(new CustomHash(1,0),"one");
  myCache.put(new CustomHash(1,1),"one'");
  assertEquals("zero",myCache.get(new CustomHash(0,0)));
  assertEquals("one",myCache.get(new CustomHash(1,0)));
  assertEquals("one'",myCache.get(new CustomHash(1,1)));
  myCache.clear();
  assertEquals(0,myCache.sizeInMemory());
  assertEquals("zero",myCache.get(new CustomHash(0,0)));
  assertEquals("one",myCache.get(new CustomHash(1,0)));
  assertEquals("one'",myCache.get(new CustomHash(1,1)));
  FileBackedCache<CustomHash,String> reload=new FileBackedCache<CustomHash,String>(cacheDir);
  assertEquals("zero",reload.get(new CustomHash(0,0)));
  assertEquals("one",reload.get(new CustomHash(1,0)));
  assertEquals("one'",reload.get(new CustomHash(1,1)));
  reload.put(new CustomHash(2,0),"two");
  assertEquals("two",reload.get(new CustomHash(2,0)));
  for (  File c : cache.cacheDir.listFiles()) {
    assertTrue(c.delete());
  }
  assertTrue(cache.cacheDir.delete());
  assertTrue(FileBackedCache.locksHeld().isEmpty());
}
