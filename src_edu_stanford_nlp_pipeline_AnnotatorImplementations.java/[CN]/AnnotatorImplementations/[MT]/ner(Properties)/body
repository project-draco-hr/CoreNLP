{
  List<String> models=new ArrayList<>();
  String modelNames=properties.getProperty("ner.model");
  if (modelNames == null) {
    modelNames=DefaultPaths.DEFAULT_NER_THREECLASS_MODEL + "," + DefaultPaths.DEFAULT_NER_MUC_MODEL+ ","+ DefaultPaths.DEFAULT_NER_CONLL_MODEL;
  }
  if (!modelNames.isEmpty()) {
    models.addAll(Arrays.asList(modelNames.split(",")));
  }
  if (models.isEmpty()) {
    log.info("WARNING: no NER models specified");
  }
  boolean applyNumericClassifiers=PropertiesUtils.getBool(properties,NERClassifierCombiner.APPLY_NUMERIC_CLASSIFIERS_PROPERTY,NERClassifierCombiner.APPLY_NUMERIC_CLASSIFIERS_DEFAULT);
  boolean useSUTime=PropertiesUtils.getBool(properties,NumberSequenceClassifier.USE_SUTIME_PROPERTY,NumberSequenceClassifier.USE_SUTIME_DEFAULT);
  boolean verbose=PropertiesUtils.getBool(properties,"ner." + "verbose",false);
  String[] loadPaths=models.toArray(new String[models.size()]);
  Properties combinerProperties=PropertiesUtils.extractSelectedProperties(properties,NERClassifierCombiner.DEFAULT_PASS_DOWN_PROPERTIES);
  if (useSUTime) {
    Properties sutimeProps=PropertiesUtils.extractPrefixedProperties(properties,NumberSequenceClassifier.SUTIME_PROPERTY + ".",true);
    PropertiesUtils.overWriteProperties(combinerProperties,sutimeProps);
  }
  NERClassifierCombiner nerCombiner=new NERClassifierCombiner(applyNumericClassifiers,useSUTime,combinerProperties,loadPaths);
  int nThreads=PropertiesUtils.getInt(properties,"ner.nthreads",PropertiesUtils.getInt(properties,"nthreads",1));
  long maxTime=PropertiesUtils.getLong(properties,"ner.maxtime",0);
  int maxSentenceLength=PropertiesUtils.getInt(properties,"ner.maxLength",Integer.MAX_VALUE);
  return new NERCombinerAnnotator(nerCombiner,verbose,nThreads,maxTime,maxSentenceLength);
}
