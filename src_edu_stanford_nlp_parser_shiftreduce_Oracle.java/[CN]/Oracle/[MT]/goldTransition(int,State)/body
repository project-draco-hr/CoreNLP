{
  if (state.finished) {
    return new OracleTransition(new IdleTransition(),false,false,false);
  }
  if (state.stack.size() == 0) {
    return new OracleTransition(new ShiftTransition(),false,false,false);
  }
  Map<Tree,Tree> parents=parentMaps.get(index);
  Tree gold=binarizedTrees.get(index);
  List<Tree> leaves=leafLists.get(index);
  Tree S0=state.stack.peek();
  Tree enclosingS0=getEnclosingTree(S0,parents,leaves);
  OracleTransition result=getUnaryTransition(S0,enclosingS0,parents,compoundUnaries);
  if (result != null) {
    return result;
  }
  if (state.tokenPosition >= state.sentence.size() && state.stack.size() == 1) {
    return new OracleTransition(new FinalizeTransition(rootStates),false,false,false);
  }
  if (state.stack.size() == 1) {
    return new OracleTransition(new ShiftTransition(),false,false,false);
  }
  if (spansEqual(S0,enclosingS0)) {
    Tree parent=parents.get(enclosingS0);
    while (spansEqual(parent,enclosingS0)) {
      enclosingS0=parent;
      parent=parents.get(parent);
    }
    if (parent.children()[0] == enclosingS0) {
      return new OracleTransition(new ShiftTransition(),false,false,false);
    }
    Tree S1=state.stack.pop().peek();
    Tree enclosingS1=getEnclosingTree(S1,parents,leaves);
    if (spansEqual(S1,enclosingS1)) {
      return new OracleTransition(new BinaryTransition(parent.value(),ShiftReduceUtils.getBinarySide(parent)),false,false,false);
    }
    return new OracleTransition(null,false,true,false);
  }
  if (ShiftReduceUtils.leftIndex(S0) == ShiftReduceUtils.leftIndex(enclosingS0)) {
    return new OracleTransition(new ShiftTransition(),false,false,false);
  }
  if (ShiftReduceUtils.rightIndex(S0) == ShiftReduceUtils.rightIndex(enclosingS0)) {
    Tree S1=state.stack.pop().peek();
    Tree enclosingS1=getEnclosingTree(S1,parents,leaves);
    if (enclosingS0 == enclosingS1) {
      return new OracleTransition(new BinaryTransition(enclosingS0.value(),BinaryTransition.Side.LEFT),false,false,true);
    }
    if (ShiftReduceUtils.leftIndex(S1) > ShiftReduceUtils.leftIndex(enclosingS0)) {
      return new OracleTransition(null,false,true,true);
    }
    return new OracleTransition(null,true,true,true);
  }
  return new OracleTransition(null,true,true,true);
}
