{
  if (!spansEqual(S0,enclosingS0)) {
    return null;
  }
  Tree parent=parents.get(enclosingS0);
  if (parent == null || parent.children().length != 1) {
    return null;
  }
  String value=S0.value();
  if (!enclosingS0.value().equals(value)) {
    while (true) {
      enclosingS0=parent;
      parent=parents.get(enclosingS0);
      if (enclosingS0.value().equals(value)) {
        if (parent == null || parent.children().length > 1) {
          return null;
        }
 else {
          break;
        }
      }
 else       if (parent == null) {
        parent=enclosingS0;
        break;
      }
 else       if (parent.children().length > 1) {
        parent=enclosingS0;
        break;
      }
    }
  }
  if (compoundUnaries) {
    List<String> labels=Generics.newArrayList();
    while (parent != null && parent.children().length == 1) {
      labels.add(parent.value());
      parent=parents.get(parent);
    }
    Collections.reverse(labels);
    return new OracleTransition(new CompoundUnaryTransition(labels),false,false,false);
  }
 else {
    return new OracleTransition(new UnaryTransition(parent.value()),false,false,false);
  }
}
