{
  String word=token.get(CoreAnnotations.TextAnnotation.class);
  if (word == null) {
    word=token.get(CoreAnnotations.ValueAnnotation.class);
  }
  if (word != null) {
    word=word.replaceAll("\\s+",SPACE_HOLDER);
    pw.print(word);
  }
  pw.print("\t");
  String lemma=token.get(CoreAnnotations.LemmaAnnotation.class);
  if (lemma != null) {
    lemma=lemma.replaceAll("\\s+",SPACE_HOLDER);
    pw.print(lemma);
  }
  pw.print("\t");
  String pos=token.get(CoreAnnotations.PartOfSpeechAnnotation.class);
  if (pos != null)   pw.print(pos);
  pw.print("\t");
  String ner=token.get(CoreAnnotations.NamedEntityTagAnnotation.class);
  if (ner != null)   pw.print(ner);
  pw.print("\t");
  String normNer=token.get(CoreAnnotations.NormalizedNamedEntityTagAnnotation.class);
  if (normNer != null)   pw.print(normNer);
  pw.print("\t");
  Integer charBegin=token.get(CoreAnnotations.CharacterOffsetBeginAnnotation.class);
  if (charBegin != null)   pw.print(charBegin);
  pw.print("\t");
  Integer charEnd=token.get(CoreAnnotations.CharacterOffsetEndAnnotation.class);
  if (charEnd != null)   pw.print(charEnd);
  if (haveExplicitAntecedent) {
    String aa=token.get(CoreAnnotations.AntecedentAnnotation.class);
    if (aa != null) {
      pw.print("\t");
      aa=aa.replaceAll("\\s+",SPACE_HOLDER);
      pw.print(aa);
    }
  }
}
