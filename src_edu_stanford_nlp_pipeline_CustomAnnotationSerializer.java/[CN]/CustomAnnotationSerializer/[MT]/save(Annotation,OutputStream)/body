{
  os=new BufferedOutputStream(os);
  if (compress)   os=new GZIPOutputStream(os);
  PrintWriter pw=new PrintWriter(os);
  Map<Integer,CorefChain> chains=corpus.get(CorefCoreAnnotations.CorefChainAnnotation.class);
  saveCorefChains(chains,pw);
  List<Pair<IntTuple,IntTuple>> corefGraph=corpus.get(CorefGraphAnnotation.class);
  if (corefGraph != null) {
    boolean first=true;
    for (    Pair<IntTuple,IntTuple> arc : corefGraph) {
      if (!first)       pw.print(" ");
      pw.printf("%d %d %d %d",arc.first.get(0),arc.first.get(1),arc.second.get(0),arc.second.get(1));
      first=false;
    }
  }
  pw.println();
  List<CoreMap> sentences=corpus.get(SentencesAnnotation.class);
  for (  CoreMap sent : sentences) {
    Tree tree=sent.get(TreeAnnotation.class);
    if (tree != null) {
      String treeString=tree.toString();
      treeString=treeString.replaceAll("\n"," ");
      pw.println(treeString);
    }
 else     pw.println();
    SemanticGraph collapsedDeps=sent.get(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class);
    saveDependencyGraph(collapsedDeps,pw);
    SemanticGraph uncollapsedDeps=sent.get(BasicDependenciesAnnotation.class);
    saveDependencyGraph(uncollapsedDeps,pw);
    SemanticGraph ccDeps=sent.get(SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation.class);
    saveDependencyGraph(ccDeps,pw);
    List<CoreLabel> tokens=sent.get(TokensAnnotation.class);
    if (tokens != null) {
      for (      CoreLabel token : tokens) {
        saveToken(token,haveExplicitAntecedent,pw);
        pw.println();
      }
    }
    pw.println();
  }
  pw.close();
}
