{
  is=new BufferedInputStream(is);
  if (compress)   is=new GZIPInputStream(is);
  BufferedReader reader=new BufferedReader(new InputStreamReader(is));
  Annotation doc=new Annotation("");
  String line;
  Map<Integer,CorefChain> chains=loadCorefChains(reader);
  if (chains != null)   doc.set(CorefCoreAnnotations.CorefChainAnnotation.class,chains);
  line=reader.readLine().trim();
  if (line.length() > 0) {
    String[] bits=line.split(" ");
    if (bits.length % 4 != 0) {
      throw new RuntimeIOException("ERROR: Incorrect format for the serialized coref graph: " + line);
    }
    List<Pair<IntTuple,IntTuple>> corefGraph=new ArrayList<Pair<IntTuple,IntTuple>>();
    for (int i=0; i < bits.length; i+=4) {
      IntTuple src=new IntTuple(2);
      IntTuple dst=new IntTuple(2);
      src.set(0,Integer.parseInt(bits[i]));
      src.set(1,Integer.parseInt(bits[i + 1]));
      dst.set(0,Integer.parseInt(bits[i + 2]));
      dst.set(1,Integer.parseInt(bits[i + 3]));
      corefGraph.add(new Pair<IntTuple,IntTuple>(src,dst));
    }
    doc.set(CorefCoreAnnotations.CorefGraphAnnotation.class,corefGraph);
  }
  List<CoreMap> sentences=new ArrayList<CoreMap>();
  while ((line=reader.readLine()) != null) {
    CoreMap sentence=new Annotation("");
    Tree tree=new PennTreeReader(new StringReader(line),new LabeledScoredTreeFactory(CoreLabel.factory())).readTree();
    sentence.set(TreeCoreAnnotations.TreeAnnotation.class,tree);
    IntermediateSemanticGraph intermCollapsedDeps=loadDependencyGraph(reader);
    IntermediateSemanticGraph intermUncollapsedDeps=loadDependencyGraph(reader);
    IntermediateSemanticGraph intermCcDeps=loadDependencyGraph(reader);
    List<CoreLabel> tokens=new ArrayList<CoreLabel>();
    while ((line=reader.readLine()) != null) {
      if (line.length() == 0)       break;
      CoreLabel token=loadToken(line,haveExplicitAntecedent);
      tokens.add(token);
    }
    sentence.set(CoreAnnotations.TokensAnnotation.class,tokens);
    SemanticGraph collapsedDeps=convertIntermediateGraph(intermCollapsedDeps,tokens);
    sentence.set(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class,collapsedDeps);
    SemanticGraph uncollapsedDeps=convertIntermediateGraph(intermUncollapsedDeps,tokens);
    sentence.set(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class,uncollapsedDeps);
    SemanticGraph ccDeps=convertIntermediateGraph(intermCcDeps,tokens);
    sentence.set(SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation.class,ccDeps);
    sentences.add(sentence);
  }
  doc.set(CoreAnnotations.SentencesAnnotation.class,sentences);
  reader.close();
  return doc;
}
