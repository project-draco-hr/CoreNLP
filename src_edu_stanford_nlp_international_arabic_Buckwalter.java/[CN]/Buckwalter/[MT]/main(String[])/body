{
  boolean unicodeToBuck=false;
  boolean outputUnicodeValues=false;
  File inputFile=null;
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith("-")) {
switch (args[i]) {
case "-u2b":
        unicodeToBuck=true;
      break;
case "-o":
    outputUnicodeValues=false;
  break;
case "-d":
DEBUG=true;
break;
default :
System.out.println(usage.toString());
return;
}
}
 else if (i != args.length) {
inputFile=new File(args[i]);
break;
}
}
final Buckwalter b=new Buckwalter(unicodeToBuck);
b.outputUnicodeValues=outputUnicodeValues;
int j=(b.outputUnicodeValues ? 2 : Integer.MAX_VALUE);
if (j < args.length) {
for (; j < args.length; j++) EncodingPrintWriter.out.println(args[j] + " -> " + b.apply(args[j]),"utf-8");
}
 else {
int numLines=0;
try {
final BufferedReader br=(inputFile == null) ? new BufferedReader(new InputStreamReader(System.in,"utf-8")) : new BufferedReader(new InputStreamReader(new FileInputStream(inputFile),"utf-8"));
System.err.printf("Reading input...");
String line;
while ((line=br.readLine()) != null) {
EncodingPrintWriter.out.println(b.apply(line),"utf-8");
numLines++;
}
br.close();
System.err.printf("done.\nConverted %d lines from %s.\n",numLines,(unicodeToBuck ? "UTF-8 to Buckwalter" : "Buckwalter to UTF-8"));
}
 catch (UnsupportedEncodingException e) {
System.err.println("ERROR: File system does not support UTF-8 encoding.");
}
catch (FileNotFoundException e) {
System.err.println("ERROR: File does not exist: " + inputFile.getPath());
}
catch (IOException e) {
System.err.printf("ERROR: IO exception while reading file (line %d).\n",numLines);
}
}
if (DEBUG) {
if (!b.unmappable.keySet().isEmpty()) {
EncodingPrintWriter.err.println("Characters that could not be converted [passed through!]:","utf-8");
EncodingPrintWriter.err.println(b.unmappable.toString(),"utf-8");
}
 else {
EncodingPrintWriter.err.println("All characters successfully converted!","utf-8");
}
}
}
