{
  value=0.0;
  if (derivativeNumerator == null) {
    derivativeNumerator=new double[x.length];
    for (int d=0; d < data.length; d++) {
      int[] features=data[d];
      for (int f=0; f < features.length; f++) {
        int i=indexOf(features[f],labels[d]);
        if (dataweights == null) {
          derivativeNumerator[i]-=1;
        }
 else {
          derivativeNumerator[i]-=dataweights[d];
        }
      }
    }
  }
  copy(derivative,derivativeNumerator);
  double[] sums=new double[numClasses];
  double[] probs=new double[numClasses];
  for (int d=0; d < data.length; d++) {
    int[] features=data[d];
    Arrays.fill(sums,0.0);
    for (int c=0; c < numClasses; c++) {
      for (int f=0; f < features.length; f++) {
        int i=indexOf(features[f],c);
        sums[c]+=x[i];
      }
    }
    double total=ArrayMath.logSum(sums);
    for (int c=0; c < numClasses; c++) {
      probs[c]=Math.exp(sums[c] - total);
      if (dataweights != null) {
        probs[c]*=dataweights[d];
      }
      for (int f=0; f < features.length; f++) {
        int i=indexOf(features[f],c);
        derivative[i]+=probs[c];
      }
    }
    double dV=sums[labels[d]] - total;
    if (dataweights != null) {
      dV*=dataweights[d];
    }
    value-=dV;
  }
  double[] newX=ArrayMath.pairwiseSubtract(x,weights);
  value+=prior.compute(newX,derivative);
}
