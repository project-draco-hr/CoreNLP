{
  CoreLabelTokenFactory tf=new CoreLabelTokenFactory(false);
  BufferedReader reader=null;
  try {
    reader=IOUtils.readerFromString(inFile);
    List<CoreLabel> sentenceTokens=new ArrayList<>();
    DependencyTree tree=new DependencyTree();
    for (    String line : IOUtils.getLineIterable(reader,false)) {
      String[] splits=line.split("\t");
      if (splits.length < 10) {
        if (sentenceTokens.size() > 0) {
          trees.add(tree);
          CoreMap sentence=new CoreLabel();
          sentence.set(CoreAnnotations.TokensAnnotation.class,sentenceTokens);
          sents.add(sentence);
          tree=new DependencyTree();
          sentenceTokens=new ArrayList<>();
        }
      }
 else {
        String word=splits[1], pos=cPOS ? splits[3] : splits[4], depType=splits[7];
        int head=-1;
        try {
          head=Integer.parseInt(splits[6]);
        }
 catch (        NumberFormatException e) {
          continue;
        }
        CoreLabel token=tf.makeToken(word,0,0);
        token.setTag(pos);
        token.set(CoreAnnotations.CoNLLDepParentIndexAnnotation.class,head);
        token.set(CoreAnnotations.CoNLLDepTypeAnnotation.class,depType);
        sentenceTokens.add(token);
        if (!unlabeled)         tree.add(head,depType);
 else         tree.add(head,Config.UNKNOWN);
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeIOException(e);
  }
 finally {
    IOUtils.closeIgnoringExceptions(reader);
  }
}
