{
  log.info(Config.SEPARATOR + " " + str);
  int nTrees=trees.size();
  int nonTree=0;
  int multiRoot=0;
  int nonProjective=0;
  for (  DependencyTree tree : trees) {
    if (!tree.isTree())     ++nonTree;
 else {
      if (!tree.isProjective())       ++nonProjective;
      if (!tree.isSingleRoot())       ++multiRoot;
    }
  }
  System.err.printf("#Trees: %d%n",nTrees);
  System.err.printf("%d tree(s) are illegal (%.2f%%).%n",nonTree,nonTree * 100.0 / nTrees);
  System.err.printf("%d tree(s) are legal but have multiple roots (%.2f%%).%n",multiRoot,multiRoot * 100.0 / nTrees);
  System.err.printf("%d tree(s) are legal but not projective (%.2f%%).%n",nonProjective,nonProjective * 100.0 / nTrees);
}
