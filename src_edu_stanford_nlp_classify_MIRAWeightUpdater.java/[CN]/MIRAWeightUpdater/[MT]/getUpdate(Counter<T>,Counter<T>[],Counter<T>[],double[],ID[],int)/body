{
  if (lastWeights == null) {
    keyIndex.addAll(weights.keySet());
  }
  for (  Counter<T> guessVector : guessedVectors) {
    keyIndex.addAll(guessVector.keySet());
  }
  for (  Counter<T> goldVector : goldVectors) {
    keyIndex.addAll(goldVector.keySet());
  }
  int useSize=Integer.highestOneBit(keyIndex.size()) << 1;
  RealVector weightsVec;
  if (weights != null) {
    weightsVec=CountersRealVectors.toRealVector(weights,keyIndex,useSize);
  }
 else {
    if (lastWeights == null) {
      weightsVec=new ArrayRealVector(useSize);
    }
 else     if (lastWeights.getDimension() != useSize) {
      weightsVec=lastWeights.append(new double[useSize - lastWeights.getDimension()]);
    }
 else {
      weightsVec=lastWeights;
    }
  }
  RealVector[] guessVec=new RealVector[guessedVectors.length];
  RealVector[] goldVec=new RealVector[goldVectors.length];
  for (int i=0; i < guessVec.length; i++) {
    guessVec[i]=CountersRealVectors.toSparseRealVector(guessedVectors[i],keyIndex,useSize);
    goldVec[i]=CountersRealVectors.toSparseRealVector(goldVectors[i],keyIndex,useSize);
  }
  RealVector delta=getUpdate(weightsVec,goldVec,guessVec,losses,datumIDs,iterSinceLastUpdate);
  return CountersRealVectors.fromRealVector(delta,keyIndex);
}
