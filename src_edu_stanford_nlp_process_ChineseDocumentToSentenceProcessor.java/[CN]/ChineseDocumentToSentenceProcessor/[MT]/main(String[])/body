{
  Properties props=StringUtils.argsToProperties(args);
  boolean alwaysAddS=props.containsKey("alwaysAddS");
  ChineseDocumentToSentenceProcessor cp;
  if (!props.containsKey("file")) {
    log.info("usage: java ChineseDocumentToSentenceProcessor [-segmentIBM] -file filename [-encoding encoding]");
    return;
  }
  cp=new ChineseDocumentToSentenceProcessor();
  if (props.containsKey("encoding")) {
    log.info("WARNING: for now the default encoding is " + cp.encoding + ". It's not changeable for now");
  }
  String input=IOUtils.slurpFileNoExceptions(props.getProperty("file"),cp.encoding);
  if (props.containsKey("segmentIBM")) {
    Tokenizer<Word> tok=WhitespaceTokenizer.newWordWhitespaceTokenizer(new StringReader(input),true);
    String parseInside=props.getProperty("parseInside");
    if (parseInside == null)     parseInside="";
    Pattern p1, p2, p3, p4;
    PrintWriter pw=new PrintWriter(new OutputStreamWriter(System.out,cp.encoding),true);
    StringBuilder buff=new StringBuilder();
    StringBuilder sgmlbuff=new StringBuilder();
    String lastSgml="";
    try {
      p1=Pattern.compile("<.*>");
      p2=Pattern.compile("\uFEFF?<[\\p{Alpha}]+");
      p3=Pattern.compile("[A-Za-z0-9=\"]+>");
      p4=Pattern.compile("<(?:" + parseInside + ")[ >]");
    }
 catch (    Exception e) {
      e.printStackTrace();
      return;
    }
    boolean inSGML=false;
    int splitItems=0;
    int numAdded=0;
    while (tok.hasNext()) {
      String s=tok.next().word();
      if (p2.matcher(s).matches()) {
        inSGML=true;
        sgmlbuff.append(s).append(" ");
      }
 else       if (p1.matcher(s).matches() || inSGML && p3.matcher(s).matches() || "\n".equals(s)) {
        inSGML=false;
        if (buff.toString().trim().length() > 0) {
          boolean processIt=false;
          if (parseInside.equals("")) {
            processIt=true;
          }
 else           if (p4.matcher(lastSgml).find()) {
            processIt=true;
          }
          if (processIt) {
            List<String> sents=ChineseDocumentToSentenceProcessor.fromPlainText(buff.toString(),true);
            if (alwaysAddS || sents.size() > 1) {
              int i=1;
              for (              String str : sents) {
                pw.print("<s id=\"" + i + "\">");
                pw.print(str);
                pw.println("</s>");
                i++;
              }
              if (sents.size() > 1) {
                splitItems++;
                numAdded+=sents.size() - 1;
              }
            }
 else             if (sents.size() == 1) {
              pw.print(sents.get(0));
            }
          }
 else {
            pw.print(buff);
          }
          buff=new StringBuilder();
        }
        sgmlbuff.append(s);
        pw.print(sgmlbuff);
        lastSgml=sgmlbuff.toString();
        sgmlbuff=new StringBuilder();
      }
 else {
        if (inSGML) {
          sgmlbuff.append(s).append(" ");
        }
 else {
          buff.append(s).append(" ");
        }
      }
    }
    pw.flush();
    pw.close();
    log.info("Split " + splitItems + " segments, adding "+ numAdded+ " sentences.");
  }
 else {
    List<String> sent=cp.fromHTML(input);
    PrintWriter pw=new PrintWriter(new OutputStreamWriter(System.err,cp.encoding),true);
    for (    String a : sent) {
      pw.println(a);
    }
  }
}
