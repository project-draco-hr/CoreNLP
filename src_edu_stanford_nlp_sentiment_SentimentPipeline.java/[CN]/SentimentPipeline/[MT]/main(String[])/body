{
  String parserModel=null;
  String sentimentModel=null;
  String filename=null;
  boolean stdin=false;
  Output output=Output.ROOT;
  for (int argIndex=0; argIndex < args.length; ) {
    if (args[argIndex].equalsIgnoreCase("-sentimentModel")) {
      sentimentModel=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-parserModel")) {
      parserModel=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-file")) {
      filename=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-stdin")) {
      stdin=true;
      argIndex++;
    }
 else     if (args[argIndex].equalsIgnoreCase("-output")) {
      String format=args[argIndex + 1];
      output=Output.valueOf(format.toUpperCase());
      argIndex+=2;
    }
 else {
      System.err.println("Unknown argument " + args[argIndex + 1]);
      throw new IllegalArgumentException("Unknown argument " + args[argIndex + 1]);
    }
  }
  Properties props=new Properties();
  props.setProperty("annotators","tokenize, ssplit, parse, sentiment");
  if (sentimentModel != null) {
    props.setProperty("sentiment.model",sentimentModel);
  }
  if (parserModel != null) {
    props.setProperty("parse.model",parserModel);
  }
  if (filename != null && stdin) {
    throw new IllegalArgumentException("Please only specify one of -file or -stdin");
  }
  if (filename == null && !stdin) {
    throw new IllegalArgumentException("Please specify either -file or -stdin");
  }
  if (stdin) {
    props.setProperty("ssplit.eolonly","true");
  }
  StanfordCoreNLP pipeline=new StanfordCoreNLP(props);
  if (filename != null) {
    String text=IOUtils.slurpFileNoExceptions(filename);
    Annotation annotation=new Annotation(text);
    pipeline.annotate(annotation);
    for (    CoreMap sentence : annotation.get(CoreAnnotations.SentencesAnnotation.class)) {
      Tree tree=sentence.get(SentimentCoreAnnotations.AnnotatedTree.class);
      System.out.println(sentence);
      outputTree(tree,output);
    }
  }
 else {
    System.err.println("Reading in text from stdin.");
    System.err.println("Please enter one sentence per line.");
    System.err.println("Processing will end when EOF is reached.");
    BufferedReader reader=new BufferedReader(IOUtils.encodedInputStreamReader(System.in,"utf-8"));
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        break;
      }
      line=line.trim();
      if (line.length() > 0) {
        Annotation annotation=pipeline.process(line);
        for (        CoreMap sentence : annotation.get(CoreAnnotations.SentencesAnnotation.class)) {
          Tree tree=sentence.get(SentimentCoreAnnotations.AnnotatedTree.class);
          outputTree(tree,output);
        }
      }
 else {
        System.out.println("");
      }
    }
  }
}
