{
  Collection<String> features=new ArrayList<String>();
  char[] c=new char[flags.charHalfWindow + 1];
  char[] pc=new char[flags.charHalfWindow + 1];
  char[] r=new char[flags.charHalfWindow + 1];
  char[] pr=new char[flags.charHalfWindow + 1];
  for (int i=1; i <= flags.charHalfWindow; i++) {
    CoreLabel wi=cInfo.get(loc + i - 1);
    CoreLabel wmi=cInfo.get(loc - i);
    c[i]=getCharFromWordInfo(wi);
    pc[i]=getCharFromWordInfo(wmi);
    r[i]=RadicalMap.getRadical(c[i]);
    pr[i]=RadicalMap.getRadical(pc[i]);
  }
  for (boolean rad=false; ; ) {
    for (int pos=-flags.charHalfWindow; pos <= flags.charHalfWindow; pos++) {
      if (pos == 0) {
        continue;
      }
      char ch, ra;
      if (pos < 0) {
        ch=pc[-pos];
        ra=pr[-pos];
      }
 else {
        ch=c[pos];
        ra=r[pos];
      }
      StringBuilder featBuffer=new StringBuilder();
      if (rad) {
        featBuffer.append(ra);
        featBuffer.append('R');
      }
 else {
        featBuffer.append(ch);
        featBuffer.append('C');
      }
      featBuffer.append(pos);
      features.add(featBuffer.toString());
    }
    if (flags.useRadical && !rad) {
      rad=true;
    }
 else {
      break;
    }
  }
  if (bigram) {
    short radBits=0;
    do {
      for (int pos1=-flags.charHalfWindow; pos1 < flags.charHalfWindow; pos1++) {
        if (pos1 == 0) {
          continue;
        }
        int pos2=(pos1 == -1) ? 1 : pos1 + 1;
        StringBuilder featBuffer=new StringBuilder();
        if ((radBits & 1) > 0) {
          if (pos1 < 0) {
            featBuffer.append(pr[-pos1]);
          }
 else {
            featBuffer.append(r[pos1]);
          }
          featBuffer.append('R');
        }
 else {
          if (pos1 < 0) {
            featBuffer.append(pc[-pos1]);
          }
 else {
            featBuffer.append(c[pos1]);
          }
          featBuffer.append('C');
        }
        featBuffer.append(pos1);
        if ((radBits & 2) > 0) {
          if (pos2 < 0) {
            featBuffer.append(pr[-pos2]);
          }
 else {
            featBuffer.append(r[pos2]);
          }
          featBuffer.append('R');
        }
 else {
          if (pos2 < 0) {
            featBuffer.append(pc[-pos2]);
          }
 else {
            featBuffer.append(c[pos2]);
          }
          featBuffer.append('C');
        }
        featBuffer.append(pos2);
        features.add(featBuffer.toString());
      }
      radBits++;
    }
 while (flags.useRadical && radBits < 4);
  }
  features.add("PRIOR");
  return features;
}
