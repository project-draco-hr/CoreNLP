{
  int[] indexMap=new int[nodeTimes.length];
  indexMap[0]=0;
  int prevNode=0;
  int prevTime=nodeTimes[0];
  if (DEBUG) {
    log.info(0 + " (" + nodeTimes[0]+ ")"+ "-->"+ 0+ " ("+ nodeTimes[0]+ ") ++");
  }
  for (int i=1; i < nodeTimes.length; i++) {
    if (prevTime == nodeTimes[i]) {
      indexMap[i]=prevNode;
      if (DEBUG) {
        log.info(i + " (" + nodeTimes[i]+ ")"+ "-->"+ prevNode+ " ("+ nodeTimes[prevNode]+ ") **");
      }
    }
 else {
      indexMap[i]=prevNode=i;
      prevTime=nodeTimes[i];
      if (DEBUG) {
        log.info(i + " (" + nodeTimes[i]+ ")"+ "-->"+ prevNode+ " ("+ nodeTimes[prevNode]+ ") ++");
      }
    }
  }
  for (  LatticeWord lw : latticeWords) {
    lw.startNode=indexMap[lw.startNode];
    lw.endNode=indexMap[lw.endNode];
    if (DEBUG) {
      log.info(lw);
    }
  }
}
