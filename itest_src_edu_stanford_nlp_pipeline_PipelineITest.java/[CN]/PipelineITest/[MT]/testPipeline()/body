{
  AnnotationPipeline pipeline=new AnnotationPipeline();
  pipeline.addAnnotator(new PTBTokenizerAnnotator(false));
  pipeline.addAnnotator(new WordsToSentencesAnnotator(false));
  pipeline.addAnnotator(new POSTaggerAnnotator(false));
  pipeline.addAnnotator(new MorphaAnnotator(false));
  pipeline.addAnnotator(new NERCombinerAnnotator(false));
  pipeline.addAnnotator(new ParserAnnotator(false,-1));
  String text="Dan Ramage is working for\nMicrosoft. He's in Seattle! \n";
  Annotation document=new Annotation(text);
  Assert.assertEquals(text,document.toString());
  Assert.assertEquals(text,document.get(TextAnnotation.class));
  pipeline.annotate(document);
  for (  CoreMap sentence : document.get(CoreAnnotations.SentencesAnnotation.class)) {
    Tree tree=sentence.get(TreeAnnotation.class);
    for (    CoreLabel token : sentence.get(CoreAnnotations.TokensAnnotation.class)) {
      String tokenText=token.get(TextAnnotation.class);
      String tokenPOS=token.get(PartOfSpeechAnnotation.class);
      String tokenLemma=token.get(LemmaAnnotation.class);
      String tokenNE=token.get(NamedEntityTagAnnotation.class);
      Assert.assertNotNull(tokenText);
      Assert.assertNotNull(tokenPOS);
      Assert.assertNotNull(tokenLemma);
      Assert.assertNotNull(tokenNE);
    }
    Assert.assertNotNull(tree);
  }
  List<CoreLabel> tokens=document.get(CoreAnnotations.TokensAnnotation.class);
  String tokensText="Dan Ramage is working for Microsoft . He 's in Seattle !";
  Assert.assertNotNull(tokens);
  Assert.assertEquals(12,tokens.size());
  Assert.assertEquals(tokensText,join(tokens));
  Assert.assertEquals(0,(int)tokens.get(0).get(CharacterOffsetBeginAnnotation.class));
  Assert.assertEquals(3,(int)tokens.get(0).get(CharacterOffsetEndAnnotation.class));
  Assert.assertEquals("NNP",tokens.get(0).get(PartOfSpeechAnnotation.class));
  Assert.assertEquals("VBZ",tokens.get(2).get(PartOfSpeechAnnotation.class));
  Assert.assertEquals(".",tokens.get(11).get(PartOfSpeechAnnotation.class));
  Assert.assertEquals("Ramage",tokens.get(1).get(LemmaAnnotation.class));
  Assert.assertEquals("be",tokens.get(2).get(LemmaAnnotation.class));
  Assert.assertEquals("PERSON",tokens.get(0).get(NamedEntityTagAnnotation.class));
  Assert.assertEquals("PERSON",tokens.get(1).get(NamedEntityTagAnnotation.class));
  Assert.assertEquals("LOCATION",tokens.get(10).get(NamedEntityTagAnnotation.class));
  List<CoreMap> sentences=document.get(CoreAnnotations.SentencesAnnotation.class);
  Assert.assertNotNull(sentences);
  Assert.assertEquals(2,sentences.size());
  String text1="Dan Ramage is working for\nMicrosoft.";
  CoreMap sentence1=sentences.get(0);
  Assert.assertEquals(text1,sentence1.toString());
  Assert.assertEquals(text1,sentence1.get(TextAnnotation.class));
  Assert.assertEquals(0,(int)sentence1.get(CharacterOffsetBeginAnnotation.class));
  Assert.assertEquals(36,(int)sentence1.get(CharacterOffsetEndAnnotation.class));
  Assert.assertEquals(0,(int)sentence1.get(TokenBeginAnnotation.class));
  Assert.assertEquals(7,(int)sentence1.get(TokenEndAnnotation.class));
  Tree tree1=Tree.valueOf("(ROOT (S (NP (NNP Dan) (NNP Ramage)) (VP (VBZ is) " + "(VP (VBG working) (PP (IN for) (NP (NNP Microsoft))))) (. .)))");
  Assert.assertEquals(tree1,sentence1.get(TreeAnnotation.class));
  String tokenText1="Dan Ramage is working for Microsoft .";
  List<CoreLabel> tokens1=sentence1.get(CoreAnnotations.TokensAnnotation.class);
  Assert.assertNotNull(tokens1);
  Assert.assertEquals(7,tokens1.size());
  Assert.assertEquals(tokenText1,join(tokens1));
  Assert.assertEquals(4,(int)tokens1.get(1).get(CharacterOffsetBeginAnnotation.class));
  Assert.assertEquals(10,(int)tokens1.get(1).get(CharacterOffsetEndAnnotation.class));
  Assert.assertEquals("IN",tokens1.get(4).get(PartOfSpeechAnnotation.class));
  Assert.assertEquals("NNP",tokens1.get(5).get(PartOfSpeechAnnotation.class));
  Assert.assertEquals("work",tokens1.get(3).get(LemmaAnnotation.class));
  Assert.assertEquals(".",tokens1.get(6).get(LemmaAnnotation.class));
  Assert.assertEquals("ORGANIZATION",tokens1.get(5).get(NamedEntityTagAnnotation.class));
  String text2="He's in Seattle!";
  CoreMap sentence2=sentences.get(1);
  Assert.assertEquals(text2,sentence2.toString());
  Assert.assertEquals(text2,sentence2.get(TextAnnotation.class));
  Assert.assertEquals(37,(int)sentence2.get(CharacterOffsetBeginAnnotation.class));
  Assert.assertEquals(53,(int)sentence2.get(CharacterOffsetEndAnnotation.class));
  Assert.assertEquals(7,(int)sentence2.get(TokenBeginAnnotation.class));
  Assert.assertEquals(12,(int)sentence2.get(TokenEndAnnotation.class));
  Tree tree2=Tree.valueOf("(ROOT (S (NP (PRP He)) (VP (VBZ 's) (PP (IN in) " + "(NP (NNP Seattle)))) (. !)))");
  Assert.assertEquals(tree2,sentence2.get(TreeAnnotation.class));
  String tokenText2="He 's in Seattle !";
  List<CoreLabel> tokens2=sentence2.get(CoreAnnotations.TokensAnnotation.class);
  Assert.assertNotNull(tokens2);
  Assert.assertEquals(5,tokens2.size());
  Assert.assertEquals(tokenText2,join(tokens2));
  Assert.assertEquals(39,(int)tokens2.get(1).get(CharacterOffsetBeginAnnotation.class));
  Assert.assertEquals(41,(int)tokens2.get(1).get(CharacterOffsetEndAnnotation.class));
  Assert.assertEquals("VBZ",tokens2.get(1).get(PartOfSpeechAnnotation.class));
  Assert.assertEquals("be",tokens2.get(1).get(LemmaAnnotation.class));
  Assert.assertEquals("LOCATION",tokens2.get(3).get(NamedEntityTagAnnotation.class));
}
