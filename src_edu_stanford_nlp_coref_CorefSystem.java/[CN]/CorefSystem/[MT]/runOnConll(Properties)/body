{
  String baseName=CorefProperties.conllOutputPath(props) + Calendar.getInstance().getTime().toString().replaceAll("\\s","-").replaceAll(":","-");
  String goldOutput=baseName + ".gold.txt";
  String beforeCorefOutput=baseName + ".predicted.txt";
  String afterCorefOutput=baseName + ".coref.predicted.txt";
  PrintWriter writerGold=new PrintWriter(new FileOutputStream(goldOutput));
  PrintWriter writerBeforeCoref=new PrintWriter(new FileOutputStream(beforeCorefOutput));
  PrintWriter writerAfterCoref=new PrintWriter(new FileOutputStream(afterCorefOutput));
  (new CorefDocumentProcessor(){
    @Override public void process(    int id,    Document document){
      writerGold.print(CorefPrinter.printConllOutput(document,true));
      writerBeforeCoref.print(CorefPrinter.printConllOutput(document,false));
      long time=System.currentTimeMillis();
      corefAlgorithm.runCoref(document);
      if (verbose) {
        Redwood.log(getName(),"Coref took " + (System.currentTimeMillis() - time) / 1000.0 + "s");
      }
      CorefUtils.removeSingletonClusters(document);
      writerAfterCoref.print(CorefPrinter.printConllOutput(document,false,true));
    }
    @Override public void finish() throws Exception {
    }
    @Override public String getName(){
      return corefAlgorithm.getClass().getName();
    }
  }
).run(docMaker);
  Logger logger=Logger.getLogger(CorefSystem.class.getName());
  String summary=CorefScorer.getEvalSummary(CorefProperties.getScorerPath(props),goldOutput,beforeCorefOutput);
  CorefScorer.printScoreSummary(summary,logger,false);
  summary=CorefScorer.getEvalSummary(CorefProperties.getScorerPath(props),goldOutput,afterCorefOutput);
  CorefScorer.printScoreSummary(summary,logger,true);
  CorefScorer.printFinalConllScore(summary);
  writerGold.close();
  writerBeforeCoref.close();
  writerAfterCoref.close();
}
