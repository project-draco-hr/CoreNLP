{
  double[] derivative=logLikelihood.gradient(x);
  ArrayMath.multiplyInPlace(derivative,-1);
  if (prior == QUADRATIC_PRIOR) {
    for (int i=0; i < x.length; i++) {
      double k=1.0;
      double w=x[i];
      double sigmaSq=priors.sigmaSq(i);
      double mean=priors.mean(i);
      derivative[i]+=k * (w - mean) / sigmaSq;
    }
  }
 else   if (prior == HUBER_PRIOR) {
    double sigmaSq=sigma * sigma;
    for (int i=0; i < x.length; i++) {
      double w=x[i];
      double wabs=Math.abs(w);
      if (wabs < epsilon) {
        derivative[i]+=w / epsilon / sigmaSq;
      }
 else {
        derivative[i]+=((w < 0.0) ? -1.0 : 1.0) / sigmaSq;
      }
    }
  }
 else   if (prior == QUARTIC_PRIOR) {
    double sigmaQu=sigma * sigma * sigma* sigma;
    for (int i=0; i < x.length; i++) {
      double k=1.0;
      double w=x[i];
      derivative[i]+=k * w / sigmaQu;
    }
  }
  return derivative;
}
