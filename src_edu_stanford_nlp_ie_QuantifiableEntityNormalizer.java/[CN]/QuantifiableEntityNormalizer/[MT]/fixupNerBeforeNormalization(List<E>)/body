{
  String prevNerTag=BACKGROUND_SYMBOL;
  String prevNumericType=null;
  Timex prevTimex=null;
  for (int i=0, sz=list.size(); i < sz; i++) {
    E wi=list.get(i);
    Timex timex=wi.get(TimeAnnotations.TimexAnnotation.class);
    String numericType=wi.get(CoreAnnotations.NumericCompositeTypeAnnotation.class);
    String curWord=(wi.get(CoreAnnotations.TextAnnotation.class) != null ? wi.get(CoreAnnotations.TextAnnotation.class) : "");
    String currNerTag=wi.get(CoreAnnotations.NamedEntityTagAnnotation.class);
    if (DEBUG) {
      log.info("fixupNerBeforeNormalization: wi is " + wi);
    }
    if (timex == null && numericType == null) {
      if ((i + 1) < sz && ",".equals(wi.get(CoreAnnotations.TextAnnotation.class)) && "DATE".equals(prevNerTag)) {
        if (prevTimex == null && prevNumericType == null) {
          E nextToken=list.get(i + 1);
          String nextNER=nextToken.get(CoreAnnotations.NamedEntityTagAnnotation.class);
          if (nextNER != null && nextNER.equals("DATE")) {
            wi.set(CoreAnnotations.NamedEntityTagAnnotation.class,"DATE");
          }
        }
      }
      if (!curWord.equals("") && (moneyMultipliers.containsKey(curWord) || (getOneSubstitutionMatch(curWord,moneyMultipliers.keySet()) != null)) && prevNerTag != null && (prevNerTag.equals("MONEY") || prevNerTag.equals("NUMBER"))) {
        wi.set(CoreAnnotations.NamedEntityTagAnnotation.class,prevNerTag);
      }
      if (curWord.contains("-")) {
        String[] sides=curWord.split("-");
        if (sides.length == 2) {
          try {
            int first=Integer.parseInt(sides[0]);
            int second=Integer.parseInt(sides[1]);
            if (1000 <= first && first <= 3000 && 1000 <= second && second <= 3000) {
              wi.set(CoreAnnotations.NamedEntityTagAnnotation.class,"DATE");
              String dateStr=new ISODateInstance(new ISODateInstance(sides[0]),new ISODateInstance(sides[1])).getDateString();
              if (DEBUG) {
                log.info("#5: Changing normalized NER from " + wi.get(CoreAnnotations.NormalizedNamedEntityTagAnnotation.class) + " to "+ dateStr+ " at index "+ i);
              }
              wi.set(CoreAnnotations.NormalizedNamedEntityTagAnnotation.class,dateStr);
              continue;
            }
          }
 catch (          Exception e) {
          }
        }
      }
      if (timeUnitWords.contains(curWord) && (currNerTag == null || !"DURATION".equals(currNerTag)) && ("NUMBER".equals(prevNerTag))) {
        wi.set(CoreAnnotations.NamedEntityTagAnnotation.class,"DURATION");
        for (int j=i - 1; j > 0; j--) {
          E prev=list.get(j);
          if ("NUMBER".equals(prev.get(CoreAnnotations.NamedEntityTagAnnotation.class))) {
            prev.set(CoreAnnotations.NamedEntityTagAnnotation.class,"DURATION");
          }
        }
      }
    }
 else {
      if ("DURATION".equals(currNerTag) && ordinalsToValues.containsKey(curWord) && curWord.endsWith("second")&& timex.text().equals(curWord)) {
        wi.set(CoreAnnotations.NamedEntityTagAnnotation.class,"ORDINAL");
      }
    }
    prevNerTag=currNerTag;
    prevNumericType=numericType;
    prevTimex=timex;
  }
}
