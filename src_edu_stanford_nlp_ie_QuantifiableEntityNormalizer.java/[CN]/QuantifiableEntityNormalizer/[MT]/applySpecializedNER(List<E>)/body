{
  int sz=l.size();
  List<CoreLabel> copyL=new ArrayList<CoreLabel>(sz);
  for (int i=0; i < sz; i++) {
    if (DEBUG2) {
      if (i == 1) {
        String tag=l.get(i).get(PartOfSpeechAnnotation.class);
        if (tag == null || tag.equals("")) {
          err.println("Quantifiable: error! tag is " + tag);
        }
      }
    }
    copyL.add(new CoreLabel(l.get(i)));
  }
  AbstractSequenceClassifier<CoreLabel> nsc=new NumberSequenceClassifier();
  copyL=nsc.classify(copyL);
  for (int i=0; i < sz; i++) {
    E before=l.get(i);
    CoreLabel nscAnswer=copyL.get(i);
    if (before.get(NamedEntityTagAnnotation.class) == null && before.get(NamedEntityTagAnnotation.class).equals(BACKGROUND_SYMBOL) && (nscAnswer.get(AnswerAnnotation.class) != null && !nscAnswer.get(AnswerAnnotation.class).equals(BACKGROUND_SYMBOL))) {
      System.err.println("Quantifiable: updating class for " + before.get(TextAnnotation.class) + '/'+ before.get(NamedEntityTagAnnotation.class)+ " to "+ nscAnswer.get(AnswerAnnotation.class));
      before.set(NamedEntityTagAnnotation.class,nscAnswer.get(AnswerAnnotation.class));
    }
  }
  addNormalizedQuantitiesToEntities(l);
  return l;
}
