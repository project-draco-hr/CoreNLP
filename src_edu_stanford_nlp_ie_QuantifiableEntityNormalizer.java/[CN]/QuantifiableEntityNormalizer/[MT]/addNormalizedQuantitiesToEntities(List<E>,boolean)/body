{
  List<E> toRemove=new ArrayList<E>();
  String lastEntity=BACKGROUND_SYMBOL;
  String timeModifier="";
  int beforeIndex=-1;
  ArrayList<E> collector=new ArrayList<E>();
  for (int i=0, sz=list.size(); i < sz; i++) {
    E wi=list.get(i);
    if (DEBUG) {
      System.err.println("addNormalizedQuantitiesToEntities: wi is " + wi + "; collector is "+ collector);
    }
    if ((i + 1) < sz && ",".equals(wi.get(TextAnnotation.class)) && "DATE".equals(lastEntity)) {
      E nextWord=list.get(i + 1);
      String nextNER=nextWord.get(NamedEntityTagAnnotation.class);
      if (nextNER != null && nextNER.equals("DATE")) {
        wi.set(NamedEntityTagAnnotation.class,"DATE");
      }
    }
    String curWord=(wi.get(TextAnnotation.class) != null ? wi.get(TextAnnotation.class) : "");
    String nextWord="";
    if ((i + 1) < sz) {
      nextWord=list.get(i + 1).get(TextAnnotation.class);
      if (nextWord == null)       nextWord="";
    }
    if (!curWord.equals("") && (moneyMultipliers.containsKey(curWord) || (getOneSubstitutionMatch(curWord,moneyMultipliers.keySet()) != null)) && lastEntity != null && (lastEntity.equals("MONEY") || lastEntity.equals("NUMBER"))) {
      wi.set(NamedEntityTagAnnotation.class,lastEntity);
    }
    if (curWord.contains("-")) {
      String[] sides=curWord.split("-");
      if (sides.length == 2) {
        try {
          int first=Integer.parseInt(sides[0]);
          int second=Integer.parseInt(sides[1]);
          if (1000 <= first && first <= 3000 && 1000 <= second && second <= 3000) {
            wi.set(NamedEntityTagAnnotation.class,"DATE");
            String dateStr=new ISODateInstance(new ISODateInstance(sides[0]),new ISODateInstance(sides[1])).getDateString();
            if (DEBUG) {
              System.err.println("#5: Changing normalized NER from " + wi.get(NormalizedNamedEntityTagAnnotation.class) + " to "+ dateStr+ " at index "+ i);
            }
            wi.set(NormalizedNamedEntityTagAnnotation.class,dateStr);
            continue;
          }
        }
 catch (        Exception e) {
        }
      }
    }
    String prevTag=(i - 1 > 0 ? list.get(i - 1).get(PartOfSpeechAnnotation.class) : null);
    if (timeUnitWords.contains(curWord) && (wi.get(NamedEntityTagAnnotation.class) == null || !wi.get(NamedEntityTagAnnotation.class).equals("DATE")) && (prevTag != null && prevTag.equals("CD"))) {
      wi.set(NamedEntityTagAnnotation.class,"NUMBER");
    }
    String currEntity=wi.get(NamedEntityTagAnnotation.class);
    if (currEntity != null && currEntity.equals("TIME")) {
      if (timeModifier.equals("")) {
        timeModifier=detectTimeOfDayModifier(list,i - 1,i + 1);
      }
    }
    if ((currEntity == null || !currEntity.equals(lastEntity)) && quantifiable.contains(lastEntity)) {
      String compModifier=null;
      if (lastEntity.equals("TIME")) {
        processEntity(collector,lastEntity,timeModifier,nextWord);
      }
 else       if (lastEntity.equals(("DATE"))) {
        compModifier=detectDateRangeModifier(collector,list,beforeIndex,i);
        if (!compModifier.equals(ISODateInstance.BOUNDED_RANGE))         processEntity(collector,lastEntity,compModifier,nextWord);
        if (concatenate)         concatenateNumericString(collector,toRemove);
      }
 else {
        if (lastEntity.equals("MONEY") || lastEntity.equals("NUMBER") || lastEntity.equals("PERCENT")) {
          compModifier=detectQuantityModifier(list,beforeIndex,i);
        }
        processEntity(collector,lastEntity,compModifier,nextWord);
        if (concatenate) {
          concatenateNumericString(collector,toRemove);
        }
      }
      collector=new ArrayList<E>();
      timeModifier="";
    }
    if (quantifiable.contains(currEntity)) {
      if (collector.isEmpty()) {
        beforeIndex=i - 1;
      }
      collector.add(wi);
    }
    lastEntity=currEntity;
  }
  if (quantifiable.contains(lastEntity)) {
    String compModifier=null;
    if (lastEntity.equals("TIME")) {
      processEntity(collector,lastEntity,timeModifier,"");
    }
 else     if (lastEntity.equals(("DATE"))) {
      compModifier=detectDateRangeModifier(collector,list,beforeIndex,list.size());
      processEntity(collector,lastEntity,compModifier,"");
      if (concatenate) {
        concatenateNumericString(collector,toRemove);
      }
    }
 else {
      if (lastEntity.equals("MONEY") || lastEntity.equals("NUMBER") || lastEntity.equals("PERCENT")) {
        compModifier=detectQuantityModifier(list,beforeIndex,list.size());
      }
      processEntity(collector,lastEntity,compModifier,"");
      if (concatenate) {
        concatenateNumericString(collector,toRemove);
      }
    }
  }
  if (concatenate) {
    list.removeAll(toRemove);
  }
  List<E> moreRemoves=new ArrayList<E>();
  for (int i=0, sz=list.size(); i < sz; i++) {
    E wi=list.get(i);
    moreRemoves.addAll(detectTwoSidedRangeModifier(wi,list,i - 1,i + 1,concatenate));
  }
  if (concatenate) {
    list.removeAll(moreRemoves);
  }
}
