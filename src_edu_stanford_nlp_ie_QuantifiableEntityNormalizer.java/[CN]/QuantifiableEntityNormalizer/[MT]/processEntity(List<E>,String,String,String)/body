{
  assert(quantifiable.contains(entityType));
  if (DEBUG) {
    log.info("Quantifiable.processEntity: " + l);
  }
  String s;
  if (entityType.equals("TIME")) {
    s=timeEntityToString(l);
  }
 else {
    s=singleEntityToString(l);
  }
  Number numberFromSUTime=fetchNumberFromSUTime(l);
  Timex timexFromSUTime=fetchTimexFromSUTime(l);
  if (DEBUG)   log.info("Quantifiable: working on " + s);
  String p=null;
switch (entityType) {
case "NUMBER":
{
      p="";
      if (compModifier != null) {
        p=compModifier;
      }
      String q=normalizedNumberString(s,nextWord,numberFromSUTime);
      if (q != null) {
        p=p.concat(q);
      }
 else {
        p=null;
      }
      break;
    }
case "ORDINAL":
  p=normalizedOrdinalString(s,numberFromSUTime);
break;
case "DURATION":
p=normalizedDurationString(s,timexFromSUTime);
break;
case "MONEY":
{
p="";
if (compModifier != null) {
p=compModifier;
}
String q=normalizedMoneyString(s,numberFromSUTime);
if (q != null) {
p=p.concat(q);
}
 else {
p=null;
}
break;
}
case "DATE":
p=normalizedDateString(s,timexFromSUTime);
break;
case "TIME":
{
p="";
if (compModifier != null && !compModifier.matches("am|pm")) {
p=compModifier;
}
String q=normalizedTimeString(s,compModifier != null ? compModifier : "",timexFromSUTime);
if (q != null && q.length() == 1 && !q.equals("D")) {
p=p.concat(q);
}
 else {
p=q;
}
break;
}
case "PERCENT":
{
p="";
if (compModifier != null) {
p=compModifier;
}
String q=normalizedPercentString(s,numberFromSUTime);
if (q != null) {
p=p.concat(q);
}
 else {
p=null;
}
break;
}
}
if (DEBUG) {
err.println("Quantifiable: Processed '" + s + "' as '"+ p+ '\'');
}
int i=0;
for (E wi : l) {
if (p != null) {
if (DEBUG) {
log.info("#4: Changing normalized NER from " + wi.get(CoreAnnotations.NormalizedNamedEntityTagAnnotation.class) + " to "+ p+ " at index "+ i);
}
wi.set(CoreAnnotations.NormalizedNamedEntityTagAnnotation.class,p);
}
i++;
}
return l;
}
