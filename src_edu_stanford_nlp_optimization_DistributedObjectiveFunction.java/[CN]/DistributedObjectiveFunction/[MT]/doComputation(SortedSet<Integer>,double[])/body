{
  Output output=new Output();
  freeServices=new ConcurrentLinkedQueue(allServices);
  output.awaitingContributionFrom=new LinkedList<Integer>(toBeAssigned);
  output.value=0.0;
  output.derivative=derivative;
  Arrays.fill(derivative,0.0);
  while (true) {
    try {
      output.semaphore.acquire();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
    if (output.awaitingContributionFrom.isEmpty()) {
      output.semaphore.release();
      break;
    }
    if (!freeServices.isEmpty()) {
      int index=output.awaitingContributionFrom.poll();
      output.awaitingContributionFrom.offer(index);
      output.semaphore.release();
      Function service=freeServices.poll();
      Pair<Integer,double[]> input=new Pair<Integer,double[]>(index,x);
      ServiceThread serviceThread=new ServiceThread(service,input,output);
      serviceThread.start();
    }
 else {
      output.semaphore.release();
      try {
        Thread.sleep(10);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
  value=output.value;
  derivative=output.derivative;
}
