{
  String baseName=StatisticalCorefTrainer.logsPath + Calendar.getInstance().getTime().toString().replaceAll("\\s","-").replaceAll(":","-");
  String goldOutput=baseName + ".gold.txt";
  String beforeCorefOutput=baseName + ".predicted.txt";
  String afterCorefOutput=baseName + ".coref.predicted.txt";
  PrintWriter writerGold=new PrintWriter(new FileOutputStream(goldOutput));
  PrintWriter writerBeforeCoref=new PrintWriter(new FileOutputStream(beforeCorefOutput));
  PrintWriter writerAfterCoref=new PrintWriter(new FileOutputStream(afterCorefOutput));
  new DocumentProcessorRunner(props,dictionaries,new DocumentProcessor(){
    @Override public void process(    int id,    Document document){
      writerGold.print(CorefPrinter.printConllOutput(document,true));
      writerBeforeCoref.print(CorefPrinter.printConllOutput(document,false));
      runCoref(document);
      StatisticalCorefUtils.removeSingletonClusters(document);
      writerAfterCoref.print(CorefPrinter.printConllOutput(document,false,true));
    }
    @Override public void finish() throws Exception {
    }
  }
).run();
  if (CorefProperties.doScore(props)) {
    Logger logger=Logger.getLogger(CorefSystem.class.getName());
    String summary=Scorer.getEvalSummary(CorefProperties.getPathScorer(props),goldOutput,beforeCorefOutput);
    CorefPrinter.printScoreSummary(summary,logger,false);
    summary=Scorer.getEvalSummary(CorefProperties.getPathScorer(props),goldOutput,afterCorefOutput);
    CorefPrinter.printScoreSummary(summary,logger,true);
    CorefPrinter.printFinalConllScore(summary);
  }
  writerGold.close();
  writerBeforeCoref.close();
  writerAfterCoref.close();
}
