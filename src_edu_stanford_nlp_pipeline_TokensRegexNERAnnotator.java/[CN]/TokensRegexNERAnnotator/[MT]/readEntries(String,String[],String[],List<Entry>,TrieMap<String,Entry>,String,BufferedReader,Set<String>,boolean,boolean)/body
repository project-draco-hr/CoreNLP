{
  int origEntriesSize=entries.size();
  int isTokensRegex=0;
  int lineCount=0;
  Map<String,Integer> headerIndexMap=getHeaderIndexMap(headerFields);
  int iPattern=getIndex(headerIndexMap,PATTERN_FIELD);
  if (iPattern < 0) {
    throw new IllegalArgumentException("TokensRegexNERAnnotator " + annotatorName + " ERROR: Header does not contain 'pattern': "+ StringUtils.join(headerFields));
  }
  int iOverwrite=getIndex(headerIndexMap,OVERWRITE_FIELD);
  int iPriority=getIndex(headerIndexMap,PRIORITY_FIELD);
  int iWeight=getIndex(headerIndexMap,WEIGHT_FIELD);
  int iGroup=getIndex(headerIndexMap,GROUP_FIELD);
  int[] annotationCols=new int[annotationFieldnames.length];
  int iLastAnnotationField=-1;
  for (int i=0; i < annotationFieldnames.length; i++) {
    annotationCols[i]=getIndex(headerIndexMap,annotationFieldnames[i]);
    if (annotationCols[i] < 0) {
      throw new IllegalArgumentException("TokensRegexNERAnnotator " + annotatorName + " ERROR: Header does not contain annotation field '"+ annotationFieldnames[i]+ "': "+ StringUtils.join(headerFields));
    }
    if (annotationCols[i] > iLastAnnotationField) {
      iLastAnnotationField=annotationCols[i];
    }
  }
  int minFields=Math.min(iPattern,iLastAnnotationField);
  int maxFields=headerFields.length;
  for (String line; (line=mapping.readLine()) != null; ) {
    lineCount++;
    String[] split=line.split("\t");
    if (split.length < minFields || split.length > maxFields) {
      throw new IllegalArgumentException("TokensRegexNERAnnotator " + annotatorName + " ERROR: Provided mapping file is in wrong format. Line "+ lineCount+ " is bad: "+ line);
    }
    String regex=split[iPattern].trim();
    String tokensRegex=null;
    String[] regexes=null;
    if (regex.startsWith("( ") && regex.endsWith(" )")) {
      tokensRegex=regex.substring(1,regex.length() - 1).trim();
    }
 else {
      regexes=regex.split("\\s+");
    }
    String[] key=(regexes != null) ? regexes : new String[]{tokensRegex};
    if (ignoreCase) {
      String[] norm=new String[key.length];
      for (int i=0; i < key.length; i++) {
        norm[i]=key[i].toLowerCase();
      }
      key=norm;
    }
    String[] types=new String[annotationCols.length];
    for (int i=0; i < annotationCols.length; i++) {
      types[i]=split[annotationCols[i]].trim();
    }
    Set<String> overwritableTypes=Generics.newHashSet();
    double priority=0.0;
    if (iOverwrite >= 0 && split.length > iOverwrite) {
      overwritableTypes.addAll(Arrays.asList(split[iOverwrite].trim().split("\\s*,\\s*")));
    }
    if (iPriority >= 0 && split.length > iPriority) {
      try {
        priority=Double.parseDouble(split[iPriority].trim());
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException("TokensRegexNERAnnotator " + annotatorName + " ERROR: Invalid priority in line "+ lineCount+ " in regexner file "+ mappingFilename+ ": \""+ line+ "\"!",e);
      }
    }
    double weight=0.0;
    if (iWeight >= 0 && split.length > iWeight) {
      try {
        weight=Double.parseDouble(split[iWeight].trim());
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException("TokensRegexNERAnnotator " + annotatorName + " ERROR: Invalid weight in line "+ lineCount+ " in regexner file "+ mappingFilename+ ": \""+ line+ "\"!",e);
      }
    }
    int annotateGroup=0;
    if (iGroup >= 0 && split.length > iGroup) {
      String context=split[iGroup].trim();
      try {
        annotateGroup=Integer.parseInt(context);
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException("TokensRegexNERAnnotator " + annotatorName + " ERROR: Invalid group in line "+ lineCount+ " in regexner file "+ mappingFilename+ ": \""+ line+ "\"!",e);
      }
    }
    for (int i=0; i < types.length; i++) {
      String type=types[i];
      int commaPos=type.indexOf(',');
      if (commaPos > 0) {
        String newType=type.substring(0,commaPos).trim();
        logger.warn("TokensRegexNERAnnotator " + annotatorName + ": Entry has multiple types for "+ annotationFieldnames[i]+ ": "+ line+ ".  Taking type to be "+ newType);
        types[i]=newType;
      }
    }
    Entry entry=new Entry(tokensRegex,regexes,types,overwritableTypes,priority,weight,annotateGroup);
    if (seenRegexes.containsKey(key)) {
      Entry oldEntry=seenRegexes.get(key);
      if (priority > oldEntry.priority) {
        logger.warn("TokensRegexNERAnnotator " + annotatorName + ": Replace duplicate entry (higher priority): old="+ oldEntry+ ", new="+ entry);
      }
 else {
        String oldTypeDesc=oldEntry.getTypeDescription();
        String newTypeDesc=entry.getTypeDescription();
        if (!oldTypeDesc.equals(newTypeDesc)) {
          if (verbose) {
            logger.warn("TokensRegexNERAnnotator " + annotatorName + ": Ignoring duplicate entry: "+ split[0]+ ", old type = "+ oldTypeDesc+ ", new type = "+ newTypeDesc);
          }
        }
        continue;
      }
    }
    if (entry.overwritableTypes.isEmpty() && hasNoOverwritableType(noDefaultOverwriteLabels,entry.types)) {
      logger.warn("TokensRegexNERAnnotator " + annotatorName + ": Entry doesn't have overwriteable types "+ entry+ ", but entry type is in noDefaultOverwriteLabels");
    }
    entries.add(entry);
    seenRegexes.put(key,entry);
    if (entry.tokensRegex != null)     isTokensRegex++;
  }
  logger.log("TokensRegexNERAnnotator " + annotatorName + ": Read "+ (entries.size() - origEntriesSize)+ " unique entries out of "+ lineCount+ " from "+ mappingFilename+ ", "+ isTokensRegex+ " TokensRegex patterns.");
  return entries;
}
