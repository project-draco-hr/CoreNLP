{
  List<TokenSequencePattern> patterns=new ArrayList<>(entries.size());
  for (  Entry entry : entries) {
    TokenSequencePattern pattern;
    Boolean ignoreCaseEntry=ignoreCaseList.get(entryToMappingFileNumber.get(entry));
    int patternFlags=ignoreCaseEntry ? Pattern.CASE_INSENSITIVE : 0;
    int stringMatchFlags=ignoreCaseEntry ? NodePattern.CASE_INSENSITIVE : 0;
    Env env=TokenSequencePattern.getNewEnv();
    env.setDefaultStringPatternFlags(patternFlags);
    env.setDefaultStringMatchFlags(stringMatchFlags);
    NodePattern<String> posTagPattern=(validPosPatternList.get(entryToMappingFileNumber.get(entry)) != null && PosMatchType.MATCH_ALL_TOKENS.equals(posMatchType)) ? new CoreMapNodePattern.StringAnnotationRegexPattern(validPosPatternList.get(entryToMappingFileNumber.get(entry))) : null;
    if (entry.tokensRegex != null) {
      pattern=TokenSequencePattern.compile(env,entry.tokensRegex);
    }
 else {
      List<SequencePattern.PatternExpr> nodePatterns=new ArrayList<>();
      for (      String p : entry.regex) {
        CoreMapNodePattern c=CoreMapNodePattern.valueOf(p,patternFlags);
        if (posTagPattern != null) {
          c.add(CoreAnnotations.PartOfSpeechAnnotation.class,posTagPattern);
        }
        nodePatterns.add(new SequencePattern.NodePatternExpr(c));
      }
      pattern=TokenSequencePattern.compile(new SequencePattern.SequencePatternExpr(nodePatterns));
    }
    if (entry.annotateGroup < 0 || entry.annotateGroup > pattern.getTotalGroups()) {
      throw new RuntimeException("Invalid match group for entry " + entry);
    }
    pattern.setPriority(entry.priority);
    pattern.setWeight(entry.weight);
    patterns.add(pattern);
    patternToEntry.put(pattern,entry);
  }
  return TokenSequencePattern.getMultiPatternMatcher(patterns);
}
