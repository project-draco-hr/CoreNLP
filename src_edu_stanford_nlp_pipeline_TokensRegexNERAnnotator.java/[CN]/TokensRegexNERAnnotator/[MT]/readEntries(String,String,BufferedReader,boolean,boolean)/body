{
  List<Entry> entries=new ArrayList<Entry>();
  TrieMap<String,Entry> seenRegexes=new TrieMap<String,Entry>();
  int lineCount=0;
  for (String line; (line=mapping.readLine()) != null; ) {
    lineCount++;
    String[] split=line.split("\t");
    if (split.length < 2 || split.length > 4)     throw new IllegalArgumentException("Provided mapping file is in wrong format");
    String[] regexes=split[0].trim().split("\\s+");
    String[] key=regexes;
    if (ignoreCase) {
      key=new String[regexes.length];
      for (int i=0; i < regexes.length; i++) {
        key[i]=regexes[i].toLowerCase();
      }
    }
    if (seenRegexes.containsKey(key)) {
      if (verbose) {
        System.err.println("Ignoring duplicate entry: " + split[0]);
      }
      continue;
    }
    String type=split[1].trim();
    Set<String> overwritableTypes=Generics.newHashSet();
    double priority=0.0;
    if (split.length >= 3) {
      overwritableTypes.addAll(Arrays.asList(split[2].trim().split(",")));
    }
    if (split.length == 4) {
      try {
        priority=Double.parseDouble(split[3].trim());
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException("ERROR: Invalid line " + lineCount + " in regexner file "+ mappingFilename+ ": \""+ line+ "\"!",e);
      }
    }
    entries.add(new Entry(regexes,type,overwritableTypes,priority));
    seenRegexes.put(key,entries.get(entries.size() - 1));
  }
  System.err.println("TokensRegexAnnotator " + annotatorName + ": Read "+ entries.size()+ " unique entries out of "+ lineCount+ " from "+ mappingFilename);
  return entries;
}
