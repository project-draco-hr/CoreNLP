{
  validateTraining();
  List<Example> examples=Util.getRandomSubList(dataset.examples,batchSize);
  smallMap=makeSmallMap(examples);
  preCompute(smallMap);
  FeedforwardParams params=new FeedforwardParams(batchSize,dropOutProb);
  int numChunks=config.trainingThreads;
  List<Collection<Example>> chunks=CollectionUtils.partitionIntoFolds(examples,numChunks);
  for (  Collection<Example> chunk : chunks)   jobHandler.put(new Pair<>(chunk,params));
  jobHandler.join(false);
  Cost cost=null;
  while (jobHandler.peek()) {
    Cost otherCost=jobHandler.poll();
    if (cost == null)     cost=otherCost;
 else     cost.merge(otherCost);
  }
  if (cost == null)   return null;
  cost.backpropSaved(smallMap);
  cost.addL2Regularization(regParameter);
  return cost;
}
