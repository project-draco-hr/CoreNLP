{
  validateTraining();
  double[][] gradW1=cost.getGradW1(), gradW2=cost.getGradW2(), gradE=cost.getGradE();
  double[] gradb1=cost.getGradb1();
  for (int i=0; i < W1.length; ++i) {
    for (int j=0; j < W1[i].length; ++j) {
      eg2W1[i][j]+=gradW1[i][j] * gradW1[i][j];
      W1[i][j]-=adaAlpha * gradW1[i][j] / Math.sqrt(eg2W1[i][j] + adaEps);
    }
  }
  for (int i=0; i < b1.length; ++i) {
    eg2b1[i]+=gradb1[i] * gradb1[i];
    b1[i]-=adaAlpha * gradb1[i] / Math.sqrt(eg2b1[i] + adaEps);
  }
  for (int i=0; i < W2.length; ++i) {
    for (int j=0; j < W2[i].length; ++j) {
      eg2W2[i][j]+=gradW2[i][j] * gradW2[i][j];
      W2[i][j]-=adaAlpha * gradW2[i][j] / Math.sqrt(eg2W2[i][j] + adaEps);
    }
  }
  if (config.doWordEmbeddingGradUpdate) {
    for (int i=0; i < E.length; ++i) {
      for (int j=0; j < E[i].length; ++j) {
        eg2E[i][j]+=gradE[i][j] * gradE[i][j];
        E[i][j]-=adaAlpha * gradE[i][j] / Math.sqrt(eg2E[i][j] + adaEps);
      }
    }
  }
}
