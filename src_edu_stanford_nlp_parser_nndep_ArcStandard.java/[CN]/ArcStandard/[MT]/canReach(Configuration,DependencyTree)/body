{
  int n=c.sentence.get(CoreAnnotations.TokensAnnotation.class).size();
  for (int i=1; i <= n; ++i)   if (c.getHead(i) != CONST.NONEXIST && c.getHead(i) != dTree.getHead(i))   return false;
  boolean[] inBuffer=new boolean[n + 1];
  boolean[] depInList=new boolean[n + 1];
  int[] leftL=new int[n + 2];
  int[] rightL=new int[n + 2];
  for (int i=0; i < c.getBufferSize(); ++i)   inBuffer[c.buffer.get(i)]=true;
  int nLeft=c.getStackSize();
  for (int i=0; i < nLeft; ++i) {
    int x=c.stack.get(i);
    leftL[nLeft - i]=x;
    if (x > 0)     depInList[dTree.getHead(x)]=true;
  }
  int nRight=1;
  rightL[nRight]=leftL[1];
  for (int i=0; i < c.getBufferSize(); ++i) {
    boolean inList=false;
    int x=c.buffer.get(i);
    if (!inBuffer[dTree.getHead(x)] || depInList[x]) {
      rightL[++nRight]=x;
      depInList[dTree.getHead(x)]=true;
    }
  }
  int[][] g=new int[nLeft + 1][nRight + 1];
  for (int i=1; i <= nLeft; ++i)   for (int j=1; j <= nRight; ++j)   g[i][j]=-1;
  g[1][1]=leftL[1];
  for (int i=1; i <= nLeft; ++i)   for (int j=1; j <= nRight; ++j)   if (g[i][j] != -1) {
    int x=g[i][j];
    if (j < nRight && dTree.getHead(rightL[j + 1]) == x)     g[i][j + 1]=x;
    if (j < nRight && dTree.getHead(x) == rightL[j + 1])     g[i][j + 1]=rightL[j + 1];
    if (i < nLeft && dTree.getHead(leftL[i + 1]) == x)     g[i + 1][j]=x;
    if (i < nLeft && dTree.getHead(x) == leftL[i + 1])     g[i + 1][j]=leftL[i + 1];
  }
  return g[nLeft][nRight] != -1;
}
