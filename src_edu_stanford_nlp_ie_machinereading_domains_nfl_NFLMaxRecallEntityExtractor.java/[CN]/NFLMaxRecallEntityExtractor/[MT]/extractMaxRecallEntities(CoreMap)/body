{
  List<CoreLabel> words=sentence.get(CoreAnnotations.TokensAnnotation.class);
  List<EntityMention> mentions=new ArrayList<EntityMention>();
  Tree tree=sentence.get(TreeAnnotation.class);
  if (tree == null) {
    throw new RuntimeException("Syntactic analysis is required for the NFL domain!");
  }
  GenericDataSetReader.convertToCoreLabels(tree);
  CoreLabel l=(CoreLabel)tree.label();
  if (!l.containsKey(BeginIndexAnnotation.class) && !l.containsKey(EndIndexAnnotation.class)) {
    tree.indexSpans(0);
  }
  Set<Integer> npHeads=new HashSet<Integer>();
  HeadFinder hf=new SemanticHeadFinder();
  extractNpHeads(tree,npHeads,hf);
  logger.info("SENTENCE TO TAG:");
  StringBuffer os=new StringBuffer();
  for (  CoreLabel word : words) {
    os.append(word.word());
    String tag=word.getString(NamedEntityTagAnnotation.class);
    if (tag != null && !tag.equals("O"))     os.append("/" + tag);
    os.append(" ");
  }
  logger.info(os.toString());
  for (int start=0; start < words.size(); start++) {
    String label=null;
    int end=-1;
    for (end=Math.min(start + NFLGazetteer.MAX_MENTION_LENGTH,words.size()); end > start; end--) {
      String text=join(words,start,end);
      String gazTag=gazetteer.get(text);
      String nerTag=findUniqueNerTag(words,start,end);
      Matcher m=SCORE.matcher(text);
      if (gazTag != null && isNpHead(start,end,npHeads)) {
        logger.info("Found entity mention candidate from gazetteer: " + text);
        if (start > 0 && gazTag.equalsIgnoreCase(NFL_GAME) && words.get(start - 1).word().equalsIgnoreCase("playoff")) {
          logger.info("\tFound playoff!");
          label=NFL_PLAYOFF_GAME;
        }
 else {
          label=gazTag;
        }
        break;
      }
 else       if (m.matches() && "NUMBER".equals(nerTag) && validScoreValue(text)&& !nflMeasure(words,end)) {
        logger.info("Found score mention candidate: " + text);
        label=FINAL_SCORE;
        break;
      }
    }
    if (label != null) {
      EntityMention m=entityMentionFactory.constructEntityMention(EntityMention.makeUniqueId(),sentence,new Span(start,end),new Span(start,end),label,null,null);
      logger.info("Created NFL entity mention: " + m);
      start=end - 1;
      mentions.add(m);
    }
 else {
      for (end=start; end < words.size(); end++) {
        String ne=words.get(end).get(NamedEntityTagAnnotation.class);
        if (!ne.equals("DATE")) {
          break;
        }
      }
      if (end > start) {
        EntityMention m=entityMentionFactory.constructEntityMention(EntityMention.makeUniqueId(),sentence,new Span(start,end),new Span(start,end),DATE,null,null);
        logger.info("Created DATE entity mention: " + m);
        start=end - 1;
        mentions.add(m);
      }
    }
  }
  sentence.set(MachineReadingAnnotations.EntityMentionsAnnotation.class,mentions);
}
