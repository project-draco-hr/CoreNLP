{
  int[] nextStates;
  int startsAt=0;
  jjnewStateCnt=7;
  int i=1;
  jjstateSet[0]=startState;
  int j, kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff) {
      ReInitRounds();
    }
    if (curChar < 64) {
      long l=1L << curChar;
      MatchLoop:       do {
switch (jjstateSet[--i]) {
case 0:
          if ((0xafffff7bffffffffL & l) != 0L) {
            if (kind > 10) {
              kind=10;
            }
          }
 else           if (curChar == 39) {
            jjCheckNAddTwoStates(5,6);
          }
 else           if (curChar == 34) {
            jjCheckNAddTwoStates(2,3);
          }
        break;
case 1:
      if (curChar == 34) {
        jjCheckNAddTwoStates(2,3);
      }
    break;
case 2:
  if ((0xfffffffbffffffffL & l) != 0L) {
    jjCheckNAddTwoStates(2,3);
  }
break;
case 3:
if (curChar == 34 && kind > 11) {
kind=11;
}
break;
case 4:
if (curChar == 39) {
jjCheckNAddTwoStates(5,6);
}
break;
case 5:
if ((0xffffff7fffffffffL & l) != 0L) {
jjCheckNAddTwoStates(5,6);
}
break;
case 6:
if (curChar == 39 && kind > 11) {
kind=11;
}
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if (kind > 10) {
kind=10;
}
break;
case 2:
jjAddStates(235,236);
break;
case 5:
jjAddStates(237,238);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
MatchLoop: do {
switch (jjstateSet[--i]) {
case 0:
if ((jjbitVec0[i2] & l2) != 0L && kind > 10) {
kind=10;
}
break;
case 2:
if ((jjbitVec0[i2] & l2) != 0L) {
jjAddStates(235,236);
}
break;
case 5:
if ((jjbitVec0[i2] & l2) != 0L) {
jjAddStates(237,238);
}
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=7 - (jjnewStateCnt=startsAt))) {
return curPos;
}
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
