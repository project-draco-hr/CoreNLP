{
  TsurgeonPattern tsurgeon=Tsurgeon.parseOperation("createSubtree FOO left right");
  TregexPattern tregex=TregexPattern.compile("A < B=left < C=right");
  runTest(tregex,tsurgeon,"(A (B 1) (C 2))","(A (FOO (B 1) (C 2)))");
  runTest(tregex,tsurgeon,"(A (C 1) (B 2))","(A (FOO (C 1) (B 2)))");
  runTest(tregex,tsurgeon,"(A (B 1) (D 3) (C 2))","(A (FOO (B 1) (D 3) (C 2)))");
  runTest(tregex,tsurgeon,"(A (D 3) (B 1) (C 2))","(A (D 3) (FOO (B 1) (C 2)))");
  runTest(tregex,tsurgeon,"(A (B 1) (C 2) (D 3))","(A (FOO (B 1) (C 2)) (D 3))");
  runTest(tregex,tsurgeon,"(A (D 3) (B 1) (C 2) (E 4))","(A (D 3) (FOO (B 1) (C 2)) (E 4))");
  tregex=TregexPattern.compile("A < B=left < B=right");
  runTest(tregex,tsurgeon,"(A (B 1) (C 2))","(A (FOO (B 1)) (C 2))");
  runTest(tregex,tsurgeon,"(A (B 1) (B 2))","(A (FOO (B 1)) (FOO (B 2)))");
  tsurgeon=Tsurgeon.parseOperation("createSubtree FOO child");
  tregex=TregexPattern.compile("A < B=child");
  runTest(tregex,tsurgeon,"(A (B 1) (C 2))","(A (FOO (B 1)) (C 2))");
  runTest(tregex,tsurgeon,"(A (B 1) (B 2))","(A (FOO (B 1)) (FOO (B 2)))");
  try {
    tsurgeon=Tsurgeon.parseOperation("createSubtree FOO");
    throw new AssertionError("Expected to fail parsing");
  }
 catch (  TsurgeonParseException e) {
  }
  try {
    tsurgeon=Tsurgeon.parseOperation("createSubtree FOO a b c");
    throw new AssertionError("Expected to fail parsing");
  }
 catch (  TsurgeonParseException e) {
  }
}
