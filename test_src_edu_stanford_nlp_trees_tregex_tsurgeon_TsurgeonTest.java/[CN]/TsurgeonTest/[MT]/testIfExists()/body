{
  TregexPattern tregex=TregexPattern.compile("A=foo [ << B=bar | << C=baz ]");
  TsurgeonPattern tsurgeon=Tsurgeon.parseOperation("if exists bar relabel bar BAR");
  runTest(tregex,tsurgeon,"(A (B foo))","(A (BAR foo))");
  tsurgeon=Tsurgeon.parseOperation("[if exists bar relabel bar BAR] [if exists baz relabel baz BAZ]");
  runTest(tregex,tsurgeon,"(A (B foo))","(A (BAR foo))");
  runTest(tregex,tsurgeon,"(A (C foo))","(A (BAZ foo))");
  runTest(tregex,tsurgeon,"(A (B foo) (C foo))","(A (BAR foo) (BAZ foo))");
  String tree=new String("(ROOT (INTJ (CC But) (S (NP (DT the) (NNP RTC)) (ADVP (RB also)) (VP (VBZ requires) (`` ``) (S (FRAG (VBG working) ('' '') (NP (NP (NN capital)) (S (VP (TO to) (VP (VB maintain) (SBAR (S (NP (NP (DT the) (JJ bad) (NNS assets)) (PP (IN of) (NP (NP (NNS thrifts)) (SBAR (WHNP (WDT that)) (S (VP (VBP are) (VBN sold) (, ,) (PP (IN until) (NP (DT the) (NNS assets))))))))) (VP (MD can) (VP (VB be) (VP (VBN sold) (ADVP (RB separately))))))))))))))) (S (VP (. .)))))");
  String expected=new String("(ROOT (INTJ (CC But) (S (NP (DT the) (NNP RTC)) (ADVP (RB also)) (VP (VBZ requires) (`` ``) (S (FRAG (VBG working) ('' '') (NP (NP (NN capital)) (S (VP (TO to) (VP (VB maintain) (SBAR (S (NP (NP (DT the) (JJ bad) (NNS assets)) (PP (IN of) (NP (NP (NNS thrifts)) (SBAR (WHNP (WDT that)) (S (VP (VBP are) (VBN sold) (, ,) (PP (IN until) (NP (DT the) (NNS assets))))))))) (VP (MD can) (VP (VB be) (VP (VBN sold) (ADVP (RB separately))))))))))))))) (. .)))");
  tregex=TregexPattern.compile("__ !> __ <- (__=top <- (__ <<- (/[.]|PU/=punc < /[.!??????????]/ ?> (__=single <: =punc))))");
  tsurgeon=Tsurgeon.parseOperation("[move punc >-1 top] [if exists single prune single]");
  runTest(tregex,tsurgeon,tree,expected);
}
