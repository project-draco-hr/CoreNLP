{
  int length=ts.length();
  int leftWindow=ts.leftWindow();
  int rightWindow=ts.rightWindow();
  int padLength=length + leftWindow + rightWindow;
  if (linearConstraints != null && linearConstraints.length != padLength)   throw new RuntimeException("linearConstraints.length (" + linearConstraints.length + ") does not match padLength ("+ padLength+ ") of SequenceModel"+ ", length=="+ length+ ", leftW="+ leftWindow+ ", rightW="+ rightWindow);
  int[][] tags=new int[padLength][];
  int[] tagNum=new int[padLength];
  if (DEBUG) {
    log.info("Doing bestSequence length " + length + "; leftWin "+ leftWindow+ "; rightWin "+ rightWindow+ "; padLength "+ padLength);
  }
  for (int pos=0; pos < padLength; pos++) {
    if (Thread.interrupted()) {
      throw new RuntimeInterruptedException();
    }
    tags[pos]=ts.getPossibleValues(pos);
    tagNum[pos]=tags[pos].length;
    if (DEBUG) {
      log.info("There are " + tagNum[pos] + " values at position "+ pos+ ": "+ Arrays.toString(tags[pos]));
    }
  }
  int[] tempTags=new int[padLength];
  int[] productSizes=new int[padLength];
  int curProduct=1;
  for (int i=0; i < leftWindow + rightWindow; i++) {
    curProduct*=tagNum[i];
  }
  for (int pos=leftWindow + rightWindow; pos < padLength; pos++) {
    if (Thread.interrupted()) {
      throw new RuntimeInterruptedException();
    }
    if (pos > leftWindow + rightWindow) {
      curProduct/=tagNum[pos - leftWindow - rightWindow- 1];
    }
    curProduct*=tagNum[pos];
    productSizes[pos - rightWindow]=curProduct;
  }
  double[][] windowScore=new double[padLength][];
  for (int pos=leftWindow; pos < leftWindow + length; pos++) {
    if (Thread.interrupted()) {
      throw new RuntimeInterruptedException();
    }
    if (DEBUG) {
      log.info("scoring word " + pos + " / "+ (leftWindow + length)+ ", productSizes =  "+ productSizes[pos]+ ", tagNum = "+ tagNum[pos]+ "...");
    }
    windowScore[pos]=new double[productSizes[pos]];
    Arrays.fill(tempTags,tags[0][0]);
    if (DEBUG) {
      log.info("windowScore[" + pos + "] has size (productSizes[pos]) "+ windowScore[pos].length);
    }
    for (int product=0; product < productSizes[pos]; product++) {
      if (Thread.interrupted()) {
        throw new RuntimeInterruptedException();
      }
      int p=product;
      int shift=1;
      for (int curPos=pos + rightWindow; curPos >= pos - leftWindow; curPos--) {
        tempTags[curPos]=tags[curPos][p % tagNum[curPos]];
        p/=tagNum[curPos];
        if (curPos > pos) {
          shift*=tagNum[curPos];
        }
      }
      if (tempTags[pos] == tags[pos][0]) {
        double[] scores=ts.scoresOf(tempTags,pos);
        if (DEBUG) {
          log.info("Matched at array index [product] " + product + "; tempTags[pos] == tags[pos][0] == "+ tempTags[pos]);
        }
        if (DEBUG) {
          log.info("For pos " + pos + " scores.length is "+ scores.length+ "; tagNum[pos] = "+ tagNum[pos]+ "; windowScore[pos].length = "+ windowScore[pos].length);
        }
        if (DEBUG) {
          log.info("scores: " + Arrays.toString(scores));
        }
        for (int t=0; t < tagNum[pos]; t++) {
          if (DEBUG) {
            log.info("Setting value of windowScore[" + pos + "]["+ product+ "+"+ t+ "*"+ shift+ "] = "+ scores[t]);
          }
          windowScore[pos][product + t * shift]=scores[t];
        }
      }
    }
  }
  double[][] score=new double[padLength][];
  int[][] trace=new int[padLength][];
  for (int pos=0; pos < padLength; pos++) {
    if (Thread.interrupted()) {
      throw new RuntimeInterruptedException();
    }
    score[pos]=new double[productSizes[pos]];
    trace[pos]=new int[productSizes[pos]];
  }
  for (int pos=leftWindow; pos < length + leftWindow; pos++) {
    for (int product=0; product < productSizes[pos]; product++) {
      if (Thread.interrupted()) {
        throw new RuntimeInterruptedException();
      }
      if (pos == leftWindow) {
        score[pos][product]=windowScore[pos][product];
        if (linearConstraints != null) {
          if (DEBUG) {
            if (linearConstraints[pos][product % tagNum[pos]] != 0) {
              log.info("Applying linear constraints=" + linearConstraints[pos][product % tagNum[pos]] + " to preScore="+ windowScore[pos][product]+ " at pos="+ pos+ " for tag="+ (product % tagNum[pos]));
            }
          }
          score[pos][product]+=linearConstraints[pos][product % tagNum[pos]];
        }
        trace[pos][product]=-1;
      }
 else {
        score[pos][product]=Double.NEGATIVE_INFINITY;
        trace[pos][product]=-1;
        int sharedProduct=product / tagNum[pos + rightWindow];
        int factor=productSizes[pos] / tagNum[pos + rightWindow];
        for (int newTagNum=0; newTagNum < tagNum[pos - leftWindow - 1]; newTagNum++) {
          int predProduct=newTagNum * factor + sharedProduct;
          double predScore=score[pos - 1][predProduct] + windowScore[pos][product];
          if (linearConstraints != null) {
            if (DEBUG) {
              if (pos == 2 && linearConstraints[pos][product % tagNum[pos]] != 0) {
                log.info("Applying linear constraints=" + linearConstraints[pos][product % tagNum[pos]] + " to preScore="+ predScore+ " at pos="+ pos+ " for tag="+ (product % tagNum[pos]));
                log.info("predScore:" + predScore + " = score["+ (pos - 1)+ "]["+ predProduct+ "]:"+ score[pos - 1][predProduct]+ " + windowScore["+ pos+ "]["+ product+ "]:"+ windowScore[pos][product]);
              }
            }
            predScore+=linearConstraints[pos][product % tagNum[pos]];
          }
          if (predScore > score[pos][product]) {
            score[pos][product]=predScore;
            trace[pos][product]=predProduct;
          }
        }
      }
    }
  }
  double bestFinalScore=Double.NEGATIVE_INFINITY;
  int bestCurrentProduct=-1;
  for (int product=0; product < productSizes[leftWindow + length - 1]; product++) {
    if (score[leftWindow + length - 1][product] > bestFinalScore) {
      bestCurrentProduct=product;
      bestFinalScore=score[leftWindow + length - 1][product];
    }
  }
  int lastProduct=bestCurrentProduct;
  for (int last=padLength - 1; last >= length - 1 && last >= 0; last--) {
    tempTags[last]=tags[last][lastProduct % tagNum[last]];
    lastProduct/=tagNum[last];
  }
  for (int pos=leftWindow + length - 2; pos >= leftWindow; pos--) {
    int bestNextProduct=bestCurrentProduct;
    bestCurrentProduct=trace[pos + 1][bestNextProduct];
    tempTags[pos - leftWindow]=tags[pos - leftWindow][bestCurrentProduct / (productSizes[pos] / tagNum[pos - leftWindow])];
  }
  return new Pair<>(tempTags,bestFinalScore);
}
