{
  if (args.length < 2) {
    System.err.print("Usage: ");
    System.err.print("java ");
    System.err.print(UniversalDependenciesFeatureAnnotator.class.getCanonicalName());
    System.err.println(" CoNLL-U_file tree_file [-addUPOS -escapeParenthesis]");
    return;
  }
  String coNLLUFile=args[0];
  String treeFile=args[1];
  boolean addUPOS=false;
  boolean escapeParens=false;
  for (int i=2; i < args.length; i++) {
    if (args[i].equals("-addUPOS")) {
      addUPOS=true;
    }
 else     if (args[i].equals("-escapeParenthesis")) {
      escapeParens=true;
    }
  }
  UniversalDependenciesFeatureAnnotator featureAnnotator=new UniversalDependenciesFeatureAnnotator();
  Reader r=IOUtils.readerFromString(coNLLUFile);
  CoNLLUDocumentReader depReader=new CoNLLUDocumentReader();
  CoNLLUDocumentWriter depWriter=new CoNLLUDocumentWriter();
  Iterator<SemanticGraph> it=depReader.getIterator(r);
  Iterator<Tree> treeIt=treebankIterator(treeFile);
  while (it.hasNext()) {
    SemanticGraph sg=it.next();
    Tree t=treeIt.next();
    if (t == null || t.yield().size() != sg.size()) {
      StringBuffer sentenceSb=new StringBuffer();
      for (      IndexedWord word : sg.vertexListSorted()) {
        sentenceSb.append(word.get(CoreAnnotations.TextAnnotation.class));
        sentenceSb.append(" ");
      }
      throw new RuntimeException("CoNLL-U file and tree file are not aligned. \n" + "Sentence: " + sentenceSb.toString() + "\n"+ "Tree: "+ t.pennString());
    }
    featureAnnotator.addFeatures(sg,t,true,addUPOS);
    System.out.print(depWriter.printSemanticGraph(sg,!escapeParens));
  }
}
