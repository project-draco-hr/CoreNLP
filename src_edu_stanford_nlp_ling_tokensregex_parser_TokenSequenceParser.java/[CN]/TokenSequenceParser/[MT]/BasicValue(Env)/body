{
  Token tok=null;
  SequencePattern.PatternExpr seqRegex=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case REGEX:
    tok=jj_consume_token(REGEX);
{
    if (true)     return new Expressions.RegexValue(tok.image.substring(1,tok.image.length() - 1));
  }
break;
case STR:
tok=jj_consume_token(STR);
{
if (true) return new Expressions.PrimitiveValue<String>("STRING",tok.image.substring(1,tok.image.length() - 1));
}
break;
case NONNEGINT:
case INT:
tok=IntegerToken();
{
if (true) return new Expressions.PrimitiveValue<Number>("INTEGER",parseInteger(tok.image));
}
break;
case LONGINT:
tok=jj_consume_token(LONGINT);
{
if (true) return new Expressions.PrimitiveValue<Number>("INTEGER",parseLongInteger(tok.image));
}
break;
case REAL:
tok=jj_consume_token(REAL);
{
if (true) return new Expressions.PrimitiveValue<Number>("REAL",Double.valueOf(tok.image));
}
break;
case 24:
jj_consume_token(24);
seqRegex=SeqRegex(env);
jj_consume_token(25);
TokenSequencePattern seqPattern=new TokenSequencePattern(null,seqRegex);
{
if (true) return new Expressions.PrimitiveValue<TokenSequencePattern>("TOKEN_REGEX",seqPattern);
}
break;
default :
jj_la1[7]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error("Missing return statement in function");
}
