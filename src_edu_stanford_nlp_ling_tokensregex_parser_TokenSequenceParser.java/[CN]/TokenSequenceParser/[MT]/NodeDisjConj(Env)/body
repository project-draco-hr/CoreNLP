{
  NodePattern child;
  List<NodePattern> disjChildren=new ArrayList<>();
  List<NodePattern> conjChildren=new ArrayList<>();
  Token op;
  child=NodeGroup(env);
  conjChildren.add(child);
  label_17:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 36:
case 37:
case 45:
case 46:
      ;
    break;
default :
  jj_la1[46]=jj_gen;
break label_17;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 46:
op=jj_consume_token(46);
break;
case 45:
op=jj_consume_token(45);
break;
case 36:
op=jj_consume_token(36);
break;
case 37:
op=jj_consume_token(37);
break;
default :
jj_la1[47]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
child=NodeGroup(env);
if ("&".equals(op.image) || "&&".equals(op.image)) {
conjChildren.add(child);
}
 else if ("|".equals(op.image) || ("||".equals(op.image))) {
if (conjChildren.size() > 1) {
disjChildren.add(new NodePattern.ConjNodePattern(conjChildren));
}
 else {
disjChildren.add(conjChildren.get(0));
}
conjChildren=new ArrayList<>();
conjChildren.add(child);
}
}
if (conjChildren.size() > 1) {
disjChildren.add(new NodePattern.ConjNodePattern(conjChildren));
}
 else {
disjChildren.add(conjChildren.get(0));
}
if (disjChildren.size() == 1) {
if (true) return disjChildren.get(0);
}
 else {
if (true) return new NodePattern.DisjNodePattern(disjChildren);
}
throw new Error("Missing return statement in function");
}
