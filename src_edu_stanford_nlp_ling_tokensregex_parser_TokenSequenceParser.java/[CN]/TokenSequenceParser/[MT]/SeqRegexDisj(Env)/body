{
  List<SequencePattern.PatternExpr> children=new ArrayList<SequencePattern.PatternExpr>();
  SequencePattern.PatternExpr expr;
  expr=SeqRegexBasic(env);
  children.add(expr);
  label_13:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 37:
case 43:
      ;
    break;
default :
  jj_la1[32]=jj_gen;
break label_13;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 43:
jj_consume_token(43);
break;
case 37:
jj_consume_token(37);
break;
default :
jj_la1[33]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
expr=SeqRegexBasic(env);
children.add(expr);
}
if (children.size() == 1) {
{
if (true) return children.get(0);
}
}
 else {
{
if (true) return new SequencePattern.OrPatternExpr(children);
}
}
throw new Error("Missing return statement in function");
}
