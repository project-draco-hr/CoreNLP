{
  Expression child;
  List<Expression> disjChildren=new ArrayList<Expression>();
  List<Expression> conjChildren=new ArrayList<Expression>();
  Token op;
  child=CondGroup(env);
  conjChildren.add(child);
  label_9:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 36:
case 37:
      ;
    break;
default :
  jj_la1[18]=jj_gen;
break label_9;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 36:
op=jj_consume_token(36);
break;
case 37:
op=jj_consume_token(37);
break;
default :
jj_la1[19]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
child=CondGroup(env);
if ("&&".equals(op.image)) {
conjChildren.add(child);
}
 else if ("||".equals(op.image)) {
if (conjChildren.size() > 1) {
disjChildren.add(new Expressions.AndExpression(conjChildren));
}
 else {
disjChildren.add(conjChildren.get(0));
}
conjChildren=new ArrayList<Expression>();
conjChildren.add(child);
}
}
if (conjChildren.size() > 1) {
disjChildren.add(new Expressions.AndExpression(conjChildren));
}
 else {
disjChildren.add(conjChildren.get(0));
}
if (disjChildren.size() == 1) {
if (true) return disjChildren.get(0);
}
 else {
if (true) return new Expressions.OrExpression(disjChildren);
}
throw new Error("Missing return statement in function");
}
