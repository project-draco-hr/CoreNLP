{
  SequencePattern.PatternExpr expr;
  String stringRegex;
  Expression result;
  Token ruleTypeToken;
  if (jj_2_4(2)) {
    jj_consume_token(21);
    stringRegex=StringRegex(env);
    jj_consume_token(22);
    result=Expression(env);
    jj_consume_token(23);
{
      if (true)       return SequenceMatchRules.createExtractionRule(env,null,stringRegex,result);
    }
  }
 else   if (jj_2_5(2)) {
    jj_consume_token(21);
    jj_consume_token(24);
    expr=SeqRegex(env);
    jj_consume_token(25);
    jj_consume_token(22);
    result=Expression(env);
    jj_consume_token(23);
{
      if (true)       return SequenceMatchRules.createExtractionRule(env,null,TokenSequencePattern.compile(expr),result);
    }
  }
 else   if (jj_2_6(2)) {
    jj_consume_token(21);
    jj_consume_token(26);
    jj_consume_token(24);
    expr=SeqRegex(env);
    jj_consume_token(25);
    jj_consume_token(22);
    result=Expression(env);
    jj_consume_token(23);
{
      if (true)       return SequenceMatchRules.createTokenPatternRule(env,expr,result);
    }
  }
 else   if (jj_2_7(2)) {
    jj_consume_token(21);
    jj_consume_token(27);
    stringRegex=StringRegex(env);
    jj_consume_token(22);
    result=Expression(env);
    jj_consume_token(23);
{
      if (true)       return SequenceMatchRules.createTextPatternRule(env,stringRegex,result);
    }
  }
 else {
    jj_consume_token(-1);
    throw new ParseException();
  }
  throw new Error("Missing return statement in function");
}
