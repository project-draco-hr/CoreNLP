{
  List<SequencePattern.PatternExpr> children=new ArrayList<>();
  NodePattern node;
  MultiNodePattern multiNode;
  SequencePattern.PatternExpr expr;
  Object value=null;
  label_12:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 31:
      node=BracketedNode(env);
    expr=new SequencePattern.NodePatternExpr(node);
  break;
case IDENTIFIER:
case NONNEGINT:
case INT:
case LONGINT:
case REAL:
case REGEX:
case STR:
case STRSIMPLE:
node=CoreMapWordPattern(env);
expr=new SequencePattern.NodePatternExpr(node);
break;
case 52:
multiNode=MultiNodePattern(env);
expr=new SequencePattern.MultiNodePatternExpr(multiNode);
break;
case 25:
expr=SeqRegexGroup(env);
break;
case REGEXVAR:
expr=SeqVar(env);
break;
case BACKREF:
expr=SeqBackRef(env);
break;
default :
jj_la1[27]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 22:
case 42:
case 43:
case 44:
expr=SeqRegexRepeatTimes(env,expr);
break;
default :
jj_la1[28]=jj_gen;
;
}
children.add(expr);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENTIFIER:
case REGEXVAR:
case BACKREF:
case NONNEGINT:
case INT:
case LONGINT:
case REAL:
case REGEX:
case STR:
case STRSIMPLE:
case 25:
case 31:
case 52:
;
break;
default :
jj_la1[29]=jj_gen;
break label_12;
}
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 23:
jj_consume_token(23);
value=Expression(env);
break;
default :
jj_la1[30]=jj_gen;
;
}
if (children.size() != 1) {
expr=new SequencePattern.SequencePatternExpr(children);
}
if (value != null) {
expr=new SequencePattern.ValuePatternExpr(expr,value);
}
{
if (true) return expr;
}
throw new Error("Missing return statement in function");
}
