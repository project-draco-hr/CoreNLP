{
  AssignableExpression expr;
  Expression fieldExpr;
  String s;
  Token tok;
  int i;
  expr=AssignableVar(env);
  label_5:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case 31:
case 35:
{
        ;
        break;
      }
default :
    jj_la1[12]=jj_gen;
  break label_5;
}
if (jj_2_13(2)) {
i=Index();
expr=new Expressions.IndexedExpression(expr,i);
}
 else if (jj_2_14(2)) {
jj_consume_token(31);
fieldExpr=Expression(env);
expr=new Expressions.FieldExpression(expr,fieldExpr);
jj_consume_token(32);
}
 else if (jj_2_15(2)) {
jj_consume_token(35);
s=RelaxedString();
expr=new Expressions.FieldExpression(expr,s);
}
 else {
jj_consume_token(-1);
throw new ParseException();
}
}
{
if ("" != null) return expr;
}
throw new Error("Missing return statement in function");
}
