{
  List<NodePattern> children=new ArrayList<NodePattern>();
  NodePattern child;
  child=NodeGroup(env);
  children.add(child);
  label_13:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 36:
case 42:
      ;
    break;
default :
  jj_la1[38]=jj_gen;
break label_13;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 42:
jj_consume_token(42);
break;
case 36:
jj_consume_token(36);
break;
default :
jj_la1[39]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
child=NodeGroup(env);
children.add(child);
}
if (children.size() == 1) {
if (true) return child;
}
 else {
if (true) return new NodePattern.DisjNodePattern(children);
}
throw new Error("Missing return statement in function");
}
