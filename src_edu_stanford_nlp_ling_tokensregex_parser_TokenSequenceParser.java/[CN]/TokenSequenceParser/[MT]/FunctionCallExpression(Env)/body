{
  Token typeToken;
  Expression param;
  List<Expression> params=new ArrayList<Expression>();
  typeToken=jj_consume_token(IDENTIFIER);
  jj_consume_token(25);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENTIFIER:
case REGEXVAR:
case REGEXGROUP:
case REGEXMRVAR:
case REGEXMRGROUP:
case NONNEGINT:
case INT:
case LONGINT:
case REAL:
case REGEX:
case STR:
case 22:
case 25:
case 38:
    param=Expression(env);
  params.add(param);
label_2: while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 33:
    ;
  break;
default :
jj_la1[2]=jj_gen;
break label_2;
}
jj_consume_token(33);
param=Expression(env);
params.add(param);
}
break;
default :
jj_la1[3]=jj_gen;
;
}
jj_consume_token(26);
{
if (true) return new Expressions.FunctionCallExpression(typeToken.image,params);
}
throw new Error("Missing return statement in function");
}
