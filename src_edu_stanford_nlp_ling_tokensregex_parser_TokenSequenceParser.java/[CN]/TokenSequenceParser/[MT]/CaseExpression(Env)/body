{
  Expression cond=null;
  Expression expr=null;
  List<Pair<Expression,Expression>> cases=new ArrayList<Pair<Expression,Expression>>();
  Expression elseExpr=null;
  jj_consume_token(37);
  jj_consume_token(21);
  label_9:   while (true) {
    cond=CondExpression(env);
    jj_consume_token(22);
    expr=Expression(env);
    cases.add(new Pair<Expression,Expression>(cond,expr));
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 32:
      jj_consume_token(32);
    break;
case 29:
  jj_consume_token(29);
break;
default :
jj_la1[19]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENTIFIER:
case REGEXVAR:
case REGEXGROUP:
case REGEXMRVAR:
case REGEXMRGROUP:
case 24:
;
break;
default :
jj_la1[20]=jj_gen;
break label_9;
}
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 38:
jj_consume_token(38);
jj_consume_token(22);
elseExpr=Expression(env);
break;
default :
jj_la1[21]=jj_gen;
;
}
jj_consume_token(23);
{
if (true) return new Expressions.CaseExpression(cases,elseExpr);
}
throw new Error("Missing return statement in function");
}
