{
  Map<String,String> attributes=new ArrayMap<String,String>();
  NodePattern pat;
  Token value=null;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENTIFIER:
case REGEX:
case STR:
case 21:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 21:
      jj_consume_token(21);
    AttrValue(env,attributes);
  label_16:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 29:
case 32:
      ;
    break;
default :
  jj_la1[45]=jj_gen;
break label_16;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 32:
jj_consume_token(32);
break;
case 29:
jj_consume_token(29);
break;
default :
jj_la1[46]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
AttrValue(env,attributes);
}
jj_consume_token(23);
break;
case IDENTIFIER:
case REGEX:
case STR:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case IDENTIFIER:
case STR:
value=RelaxedStringToken();
break;
case REGEX:
value=jj_consume_token(REGEX);
break;
default :
jj_la1[47]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
attributes.put("word",value.image);
break;
default :
jj_la1[48]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
pat=CoreMapNodePattern.valueOf(env,attributes);
{
if (true) return pat;
}
break;
case REGEXVAR:
pat=CoreMapVarNodePattern(env);
{
if (true) return pat;
}
break;
case 46:
jj_consume_token(46);
pat=CoreMapExprNodePattern(env);
jj_consume_token(47);
{
if (true) return pat;
}
break;
default :
jj_la1[49]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error("Missing return statement in function");
}
