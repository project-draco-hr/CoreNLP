{
  Map<String,String> attributes=new ArrayMap<String,String>();
  NodePattern pat;
  Token value=null;
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case IDENTIFIER:
case REGEX:
case STR:
case 22:
{
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case 22:
{
          jj_consume_token(22);
          AttrValue(env,attributes);
          label_16:           while (true) {
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case 30:
case 33:
{
                ;
                break;
              }
default :
            jj_la1[45]=jj_gen;
          break label_16;
      }
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case 33:
{
          jj_consume_token(33);
          break;
        }
case 30:
{
        jj_consume_token(30);
        break;
      }
default :
    jj_la1[46]=jj_gen;
  jj_consume_token(-1);
throw new ParseException();
}
AttrValue(env,attributes);
}
jj_consume_token(24);
break;
}
case IDENTIFIER:
case REGEX:
case STR:
{
switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
case IDENTIFIER:
case STR:
{
value=RelaxedStringToken();
break;
}
case REGEX:
{
value=jj_consume_token(REGEX);
break;
}
default :
jj_la1[47]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
attributes.put("word",value.image);
break;
}
default :
jj_la1[48]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
pat=CoreMapNodePattern.valueOf(env,attributes);
{
if ("" != null) return pat;
}
break;
}
case REGEXVAR:
{
pat=CoreMapVarNodePattern(env);
{
if ("" != null) return pat;
}
break;
}
case 47:
{
jj_consume_token(47);
pat=CoreMapExprNodePattern(env);
jj_consume_token(48);
{
if ("" != null) return pat;
}
break;
}
default :
jj_la1[49]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
throw new Error("Missing return statement in function");
}
