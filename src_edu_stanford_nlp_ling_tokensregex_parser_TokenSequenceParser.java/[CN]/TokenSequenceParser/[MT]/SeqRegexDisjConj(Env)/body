{
  SequencePattern.PatternExpr child;
  List<SequencePattern.PatternExpr> disjChildren=new ArrayList<SequencePattern.PatternExpr>();
  List<SequencePattern.PatternExpr> conjChildren=new ArrayList<SequencePattern.PatternExpr>();
  Token op;
  child=SeqRegexBasic(env);
  conjChildren.add(child);
  label_12:   while (true) {
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 35:
case 36:
case 42:
case 43:
      ;
    break;
default :
  jj_la1[32]=jj_gen;
break label_12;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 43:
op=jj_consume_token(43);
break;
case 42:
op=jj_consume_token(42);
break;
case 35:
op=jj_consume_token(35);
break;
case 36:
op=jj_consume_token(36);
break;
default :
jj_la1[33]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
child=SeqRegexBasic(env);
if ("&".equals(op.image) | "&&".equals(op.image)) {
conjChildren.add(child);
}
 else if ("|".equals(op.image) | "||".equals(op.image)) {
if (conjChildren.size() > 1) {
disjChildren.add(new SequencePattern.AndPatternExpr(conjChildren));
}
 else {
disjChildren.add(conjChildren.get(0));
}
conjChildren=new ArrayList<SequencePattern.PatternExpr>();
conjChildren.add(child);
}
}
if (conjChildren.size() > 1) {
disjChildren.add(new SequencePattern.AndPatternExpr(conjChildren));
}
 else {
disjChildren.add(conjChildren.get(0));
}
if (disjChildren.size() == 1) {
if (true) return disjChildren.get(0);
}
 else {
if (true) return new SequencePattern.OrPatternExpr(disjChildren);
}
throw new Error("Missing return statement in function");
}
