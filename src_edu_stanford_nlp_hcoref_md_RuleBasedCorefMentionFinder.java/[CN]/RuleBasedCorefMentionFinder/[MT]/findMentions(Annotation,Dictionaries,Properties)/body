{
  List<List<Mention>> predictedMentions=new ArrayList<>();
  Set<String> neStrings=Generics.newHashSet();
  List<Set<IntPair>> mentionSpanSetList=Generics.newArrayList();
  List<CoreMap> sentences=doc.get(CoreAnnotations.SentencesAnnotation.class);
  for (  CoreMap s : sentences) {
    List<Mention> mentions=new ArrayList<>();
    predictedMentions.add(mentions);
    Set<IntPair> mentionSpanSet=Generics.newHashSet();
    Set<IntPair> namedEntitySpanSet=Generics.newHashSet();
    extractPremarkedEntityMentions(s,mentions,mentionSpanSet,namedEntitySpanSet);
    extractNamedEntityMentions(s,mentions,mentionSpanSet,namedEntitySpanSet);
    extractNPorPRP(s,mentions,mentionSpanSet,namedEntitySpanSet);
    extractEnumerations(s,mentions,mentionSpanSet,namedEntitySpanSet);
    addNamedEntityStrings(s,neStrings,namedEntitySpanSet);
    mentionSpanSetList.add(mentionSpanSet);
  }
  for (int i=0, sz=sentences.size(); i < sz; i++) {
    findHead(sentences.get(i),predictedMentions.get(i));
    setBarePlural(predictedMentions.get(i));
  }
  removeSpuriousMentions(doc,predictedMentions,dict,CorefProperties.removeNested(props),lang);
  return predictedMentions;
}
