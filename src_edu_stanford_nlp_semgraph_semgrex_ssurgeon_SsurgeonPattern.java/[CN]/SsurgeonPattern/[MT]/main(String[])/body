{
  if (args.length == 0) {
    System.out.println("Usage: SsurgeonPattern FILEPATH [\"COMPACT_SEMANTIC_GRAPH\"], FILEPATH=path to ssurgeon pattern to parse and print., SENTENCE=test sentence (in quotes)");
    System.exit(-1);
  }
  File tgtFile=new File(args[0]);
  try {
    Ssurgeon.inst().initLog(new File("./ssurgeon.log"));
    Ssurgeon.inst().setLogPrefix("SsurgeonPattern test");
    List<SsurgeonPattern> patterns=Ssurgeon.inst().readFromFile(tgtFile);
    for (    SsurgeonPattern pattern : patterns) {
      System.out.println("- - - - -");
      System.out.println(pattern);
    }
    if (args.length > 1) {
      for (int i=1; i < args.length; i++) {
        String text=args[i];
        SemanticGraph sg=SemanticGraph.valueOf(text);
        Collection<SemanticGraph> generated=Ssurgeon.inst().exhaustFromPatterns(patterns,sg);
        System.out.println("\n= = = = = = = = = =\nSrc text = " + text);
        System.out.println(sg.toCompactString());
        System.out.println("# generated  = " + generated.size());
        for (        SemanticGraph genSg : generated) {
          System.out.println(genSg);
          System.out.println(". . . . .");
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
