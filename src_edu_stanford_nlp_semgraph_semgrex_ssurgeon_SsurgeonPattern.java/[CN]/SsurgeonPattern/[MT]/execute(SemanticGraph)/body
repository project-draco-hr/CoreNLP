{
  Collection<SemanticGraph> generated=new ArrayList<SemanticGraph>();
  SemgrexMatcher matcher=semgrexPattern.matcher(sg);
  nextMatch:   while (matcher.find()) {
    Set<String> nodeNames=matcher.getNodeNames();
    Set<IndexedWord> seen=new HashSet<IndexedWord>();
    for (    String name : nodeNames) {
      IndexedWord curr=matcher.getNode(name);
      if (seen.contains(curr))       break nextMatch;
      seen.add(curr);
    }
    if (predicateTest != null) {
      if (!predicateTest.test(matcher))       continue;
    }
    SemanticGraph tgt=SemanticGraphFactory.duplicateKeepNodes(sg);
    nodeMap=new HashMap<String,IndexedWord>();
    for (    SsurgeonEdit edit : editScript) {
      edit.evaluate(tgt,matcher);
    }
    generated.add(tgt);
  }
  return generated;
}
