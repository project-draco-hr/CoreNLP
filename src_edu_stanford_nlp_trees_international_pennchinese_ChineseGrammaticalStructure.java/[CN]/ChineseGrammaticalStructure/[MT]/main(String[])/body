{
  Treebank tb=new MemoryTreebank();
  Properties props=StringUtils.argsToProperties(args);
  String treeFileName=props.getProperty("treeFile");
  String treeDirname=props.getProperty("treeDir");
  String sentFileName=props.getProperty("sentFile");
  String encoding=props.getProperty("encoding","GB18030");
  String hf=props.getProperty("hf");
  String parserModel=props.getProperty("parserModel","/u/nlp/data/lexparser/chineseFactored.ser.gz");
  try {
    if (hf != null) {
      shf=(HeadFinder)Class.forName(hf).newInstance();
      System.err.println("Using " + hf);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException("Fail to use HeadFinder: " + hf);
  }
  if (args.length == 0) {
    System.err.println("Please provide -treeFile treeFile or -sentFile sentFile");
  }
 else {
    if (treeDirname != null && treeFileName != null) {
      throw new RuntimeException("Only one of treeDirname or treeFileName should be set");
    }
    if (treeDirname != null) {
      File dir=new File(treeDirname);
      String[] files=dir.list();
      for (      String file : files) {
        AddTreesFromFile(treeDirname + "/" + file,encoding,tb);
      }
    }
 else     if (treeFileName != null) {
      AddTreesFromFile(treeFileName,encoding,tb);
    }
 else     if (sentFileName != null) {
      ViterbiParserWithOptions lp;
      try {
        Class<?>[] classes=new Class<?>[]{String.class};
        Constructor<?> constr=Class.forName("edu.stanford.nlp.parser.lexparser.LexicalizedParser").getConstructor(classes);
        String[] opts={"-retainTmpSubcategories"};
        lp=(ViterbiParserWithOptions)constr.newInstance(parserModel);
        lp.setOptionFlags(opts);
      }
 catch (      Exception cnfe) {
        cnfe.printStackTrace();
        return;
      }
      BufferedReader reader=null;
      try {
        reader=new BufferedReader(new FileReader(sentFileName));
      }
 catch (      FileNotFoundException e) {
        System.err.println("Cannot find " + sentFileName);
        System.exit(1);
      }
      try {
        System.out.println("Processing sentence file " + sentFileName);
        String line;
        while ((line=reader.readLine()) != null) {
          CHTBTokenizer chtb=new CHTBTokenizer(new StringReader(line));
          List words=chtb.tokenize();
          lp.parse(words);
          Tree parseTree=lp.getBestParse();
          tb.add(parseTree);
        }
        reader.close();
      }
 catch (      Exception e) {
        throw new RuntimeException("Exception reading key file " + sentFileName,e);
      }
    }
  }
  System.out.println("Phrase structure tree, then dependencies, then collapsed dependencies");
  for (  Tree t : tb) {
    System.out.println("==================================================");
    GrammaticalStructure gs=new ChineseGrammaticalStructure(t);
    t.pennPrint();
    System.out.println("----------------------------");
    System.out.println(StringUtils.join(gs.typedDependencies(true),"\n"));
    System.out.println("----------------------------");
    System.out.println(StringUtils.join(gs.typedDependenciesCollapsed(true),"\n"));
  }
}
