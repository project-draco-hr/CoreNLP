{
  DeltaIndex<String> deltaWordIndex=new DeltaIndex<String>(wordIndex);
  int length=s.length();
  double[][] scores=new double[length][length + 1];
  int[][] splitBacktrace=new int[length][length + 1];
  int[][] POSbacktrace=new int[length][length + 1];
  for (int i=0; i < length; i++) {
    Arrays.fill(scores[i],Double.NEGATIVE_INFINITY);
  }
  for (int diff=1; diff <= 10; diff++) {
    for (int start=0; start + diff <= length; start++) {
      int end=start + diff;
      StringBuilder wordBuf=new StringBuilder();
      for (int pos=start; pos < end; pos++) {
        wordBuf.append(s.charAt(pos));
      }
      String word=wordBuf.toString();
      for (Iterator<String> iter=POSes.iterator(); iter.hasNext(); ) {
        String tag=iter.next();
        IntTaggedWord itw=new IntTaggedWord(word,tag,deltaWordIndex,tagIndex);
        double newScore=lex.score(itw,0,word,null) + Math.log(lex.getPOSDistribution().probabilityOf(tag));
        if (newScore > scores[start][end]) {
          scores[start][end]=newScore;
          splitBacktrace[start][end]=end;
          POSbacktrace[start][end]=itw.tag();
        }
      }
    }
  }
  for (int diff=2; diff <= length; diff++) {
    for (int start=0; start + diff <= length; start++) {
      int end=start + diff;
      for (int split=start + 1; split < end && split - start <= 10; split++) {
        if (splitBacktrace[start][split] != split) {
          continue;
        }
        double newScore=scores[start][split] + scores[split][end];
        if (newScore > scores[start][end]) {
          scores[start][end]=newScore;
          splitBacktrace[start][end]=split;
        }
      }
    }
  }
  List<TaggedWord> words=new ArrayList<TaggedWord>();
  int start=0;
  while (start < length) {
    int end=splitBacktrace[start][length];
    StringBuilder wordBuf=new StringBuilder();
    for (int pos=start; pos < end; pos++) {
      wordBuf.append(s.charAt(pos));
    }
    String word=wordBuf.toString();
    String tag=tagIndex.get(POSbacktrace[start][end]);
    words.add(new TaggedWord(word,tag));
    start=end;
  }
  return new ArrayList<TaggedWord>(words);
}
