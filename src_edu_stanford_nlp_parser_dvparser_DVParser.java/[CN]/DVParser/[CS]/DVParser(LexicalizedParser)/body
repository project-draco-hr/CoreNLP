{
  this.parser=parser;
  this.op=parser.getOp();
  if (op.trainOptions.dvSeed == 0) {
    op.trainOptions.dvSeed=(new Random()).nextLong();
    System.err.println("Random seed not set, using randomly chosen seed of " + op.trainOptions.dvSeed);
  }
 else {
    System.err.println("Random seed set to " + op.trainOptions.dvSeed);
  }
  System.err.println("Word vector file: " + op.lexOptions.wordVectorFile);
  System.err.println("Size of word vectors: " + op.lexOptions.numHid);
  System.err.println("Number of hypothesis trees to train against: " + op.trainOptions.dvKBest);
  System.err.println("Number of trees in one batch: " + op.trainOptions.dvBatchSize);
  System.err.println("Number of iterations of trees: " + op.trainOptions.dvIterations);
  System.err.println("Number of qn iterations per batch: " + op.trainOptions.qnIterationsPerBatch);
  System.err.println("Learning rate: " + op.trainOptions.learningRate);
  System.err.println("Delta margin: " + op.trainOptions.deltaMargin);
  System.err.println("regCost: " + op.trainOptions.regCost);
  System.err.println("Using unknown word vector for numbers: " + op.trainOptions.unknownNumberVector);
  System.err.println("Using unknown dashed word vector heuristics: " + op.trainOptions.unknownDashedWordVectors);
  System.err.println("Using unknown word vector for capitalized words: " + op.trainOptions.unknownCapsVector);
  System.err.println("Using unknown number vector for Chinese words: " + op.trainOptions.unknownChineseNumberVector);
  System.err.println("Using unknown year vector for Chinese words: " + op.trainOptions.unknownChineseYearVector);
  System.err.println("Using unknown percent vector for Chinese words: " + op.trainOptions.unknownChinesePercentVector);
  System.err.println("Initial matrices scaled by: " + op.trainOptions.scalingForInit);
  System.err.println("Training will use " + op.trainOptions.trainingThreads + " thread(s)");
  System.err.println("Context words are " + ((op.trainOptions.useContextWords) ? "on" : "off"));
  System.err.println("Model will " + ((op.trainOptions.dvSimplifiedModel) ? "" : "not ") + "be simplified");
  this.dvModel=new DVModel(op,parser.stateIndex,parser.ug,parser.bg);
  if (dvModel.unaryTransform.size() != dvModel.unaryScore.size()) {
    throw new AssertionError("Unary transform and score size not the same");
  }
  if (dvModel.binaryTransform.size() != dvModel.binaryScore.size()) {
    throw new AssertionError("Binary transform and score size not the same");
  }
}
