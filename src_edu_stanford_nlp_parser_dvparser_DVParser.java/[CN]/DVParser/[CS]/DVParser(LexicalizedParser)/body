{
  this.parser=parser;
  this.op=parser.getOp();
  if (op.trainOptions.randomSeed == 0) {
    op.trainOptions.randomSeed=System.nanoTime();
    log.info("Random seed not set, using randomly chosen seed of " + op.trainOptions.randomSeed);
  }
 else {
    log.info("Random seed set to " + op.trainOptions.randomSeed);
  }
  log.info("Word vector file: " + op.lexOptions.wordVectorFile);
  log.info("Size of word vectors: " + op.lexOptions.numHid);
  log.info("Number of hypothesis trees to train against: " + op.trainOptions.dvKBest);
  log.info("Number of trees in one batch: " + op.trainOptions.batchSize);
  log.info("Number of iterations of trees: " + op.trainOptions.trainingIterations);
  log.info("Number of qn iterations per batch: " + op.trainOptions.qnIterationsPerBatch);
  log.info("Learning rate: " + op.trainOptions.learningRate);
  log.info("Delta margin: " + op.trainOptions.deltaMargin);
  log.info("regCost: " + op.trainOptions.regCost);
  log.info("Using unknown word vector for numbers: " + op.trainOptions.unknownNumberVector);
  log.info("Using unknown dashed word vector heuristics: " + op.trainOptions.unknownDashedWordVectors);
  log.info("Using unknown word vector for capitalized words: " + op.trainOptions.unknownCapsVector);
  log.info("Using unknown number vector for Chinese words: " + op.trainOptions.unknownChineseNumberVector);
  log.info("Using unknown year vector for Chinese words: " + op.trainOptions.unknownChineseYearVector);
  log.info("Using unknown percent vector for Chinese words: " + op.trainOptions.unknownChinesePercentVector);
  log.info("Initial matrices scaled by: " + op.trainOptions.scalingForInit);
  log.info("Training will use " + op.trainOptions.trainingThreads + " thread(s)");
  log.info("Context words are " + ((op.trainOptions.useContextWords) ? "on" : "off"));
  log.info("Model will " + ((op.trainOptions.dvSimplifiedModel) ? "" : "not ") + "be simplified");
  this.dvModel=new DVModel(op,parser.stateIndex,parser.ug,parser.bg);
  if (dvModel.unaryTransform.size() != dvModel.unaryScore.size()) {
    throw new AssertionError("Unary transform and score size not the same");
  }
  if (dvModel.binaryTransform.size() != dvModel.binaryScore.size()) {
    throw new AssertionError("Binary transform and score size not the same");
  }
}
