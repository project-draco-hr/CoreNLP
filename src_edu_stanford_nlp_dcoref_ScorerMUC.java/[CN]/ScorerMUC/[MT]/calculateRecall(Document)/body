{
  int rDen=0;
  int rNum=0;
  Map<Integer,Mention> predictedMentions=doc.allPredictedMentions;
  for (  CorefCluster g : doc.goldCorefClusters.values()) {
    if (g.corefMentions.size() == 0) {
      SieveCoreferenceSystem.logger.warning("NO MENTIONS for cluster " + g.getClusterID());
      continue;
    }
    rDen+=g.corefMentions.size() - 1;
    rNum+=g.corefMentions.size();
    Set<CorefCluster> partitions=Generics.newHashSet();
    for (    Mention goldMention : g.corefMentions) {
      if (!predictedMentions.containsKey(goldMention.mentionID)) {
        rNum--;
      }
 else {
        partitions.add(doc.corefClusters.get(predictedMentions.get(goldMention.mentionID).corefClusterID));
      }
    }
    rNum-=partitions.size();
  }
  if (rDen != doc.allGoldMentions.size() - doc.goldCorefClusters.values().size()) {
    System.err.println("rDen is " + rDen);
    System.err.println("doc.allGoldMentions.size() is " + doc.allGoldMentions.size());
    System.err.println("doc.goldCorefClusters.values().size() is " + doc.goldCorefClusters.values().size());
  }
  assert(rDen == (doc.allGoldMentions.size() - doc.goldCorefClusters.values().size()));
  recallNumSum+=rNum;
  recallDenSum+=rDen;
}
