{
  Random r=new Random(42);
  int constraintComponent=r.nextInt(initialWeights.getNumberOfComponents());
  double constraintValue=r.nextDouble();
  if (r.nextBoolean()) {
    optimizer.addSparseConstraint(constraintComponent,0,constraintValue);
  }
 else {
    optimizer.addDenseConstraint(constraintComponent,new double[]{constraintValue});
  }
  AbstractDifferentiableFunction<GraphicalModel> ll=new LogLikelihoodDifferentiableFunction();
  ConcatVector finalWeights=optimizer.optimize(dataset,ll,initialWeights,l2regularization,1.0e-9,false);
  System.err.println("Finished optimizing");
  assertEquals(constraintValue,finalWeights.getValueAt(constraintComponent,0),1.0e-9);
  double logLikelihood=getValueSum(dataset,finalWeights,ll,l2regularization);
  for (int i=0; i < 1000; i++) {
    int size=finalWeights.getNumberOfComponents();
    ConcatVector randomDirection=new ConcatVector(size);
    for (int j=0; j < size; j++) {
      if (j == constraintComponent)       continue;
      double[] dense=new double[finalWeights.isComponentSparse(j) ? finalWeights.getSparseIndex(j) + 1 : finalWeights.getDenseComponent(j).length];
      for (int k=0; k < dense.length; k++) {
        dense[k]=(r.nextDouble() - 0.5) * 1.0e-3;
      }
      randomDirection.setDenseComponent(j,dense);
    }
    ConcatVector randomPerturbation=finalWeights.deepClone();
    randomPerturbation.addVectorInPlace(randomDirection,1.0);
    double randomPerturbedLogLikelihood=getValueSum(dataset,randomPerturbation,ll,l2regularization);
    if (logLikelihood < randomPerturbedLogLikelihood - (1.0e-7 * Math.max(1.0e-1,Math.abs(logLikelihood)))) {
      System.err.println("Thought optimal point was: " + logLikelihood);
      System.err.println("Discovered better point: " + randomPerturbedLogLikelihood);
    }
    assertTrue(logLikelihood >= randomPerturbedLogLikelihood - (1.0e-7 * Math.max(1.0e-1,Math.abs(logLikelihood))));
  }
}
