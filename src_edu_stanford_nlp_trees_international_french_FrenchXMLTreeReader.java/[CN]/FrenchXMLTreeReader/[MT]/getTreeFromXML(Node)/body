{
  final Element eRoot=(Element)root;
  if (eRoot.getNodeName().equals(NODE_WORD) && eRoot.getElementsByTagName(NODE_WORD).getLength() == 0) {
    String posStr=getPOS(eRoot);
    posStr=treeNormalizer.normalizeNonterminal(posStr);
    List<String> lemmas=getLemma(eRoot);
    String morph=getMorph(eRoot);
    List<String> leafToks=getWordString(eRoot.getTextContent().trim());
    String subcat=getSubcat(eRoot);
    if (lemmas != null && lemmas.size() != leafToks.size()) {
      System.err.println("Lemmas don't match tokens, ignoring lemmas: " + "lemmas " + lemmas + ", tokens "+ leafToks);
      lemmas=null;
    }
    Tree t=null;
    List<Tree> kids=new ArrayList<>();
    if (leafToks.size() > 1) {
      for (int i=0; i < leafToks.size(); ++i) {
        String tok=leafToks.get(i);
        String s=treeNormalizer.normalizeTerminal(tok);
        List<Tree> leafList=new ArrayList<>();
        Tree leafNode=treeFactory.newLeaf(s);
        if (leafNode.label() instanceof HasWord)         ((HasWord)leafNode.label()).setWord(s);
        if (leafNode.label() instanceof CoreLabel && lemmas != null) {
          ((CoreLabel)leafNode.label()).setLemma(lemmas.get(i));
        }
        if (leafNode.label() instanceof HasContext) {
          ((HasContext)leafNode.label()).setOriginalText(morph);
        }
        if (leafNode.label() instanceof HasCategory) {
          ((HasCategory)leafNode.label()).setCategory(subcat);
        }
        leafList.add(leafNode);
        Tree posNode=treeFactory.newTreeNode(MISSING_POS,leafList);
        if (posNode.label() instanceof HasTag)         ((HasTag)posNode.label()).setTag(MISSING_POS);
        kids.add(posNode);
      }
      t=treeFactory.newTreeNode(MISSING_PHRASAL,kids);
    }
 else {
      String leafStr=treeNormalizer.normalizeTerminal(leafToks.get(0));
      Tree leafNode=treeFactory.newLeaf(leafStr);
      if (leafNode.label() instanceof HasWord)       ((HasWord)leafNode.label()).setWord(leafStr);
      if (leafNode.label() instanceof CoreLabel && lemmas != null) {
        ((CoreLabel)leafNode.label()).setLemma(lemmas.get(0));
      }
      if (leafNode.label() instanceof HasContext) {
        ((HasContext)leafNode.label()).setOriginalText(morph);
      }
      if (leafNode.label() instanceof HasCategory) {
        ((HasCategory)leafNode.label()).setCategory(subcat);
      }
      kids.add(leafNode);
      t=treeFactory.newTreeNode(posStr,kids);
      if (t.label() instanceof HasTag)       ((HasTag)t.label()).setTag(posStr);
    }
    return t;
  }
  List<Tree> kids=new ArrayList<>();
  for (Node childNode=eRoot.getFirstChild(); childNode != null; childNode=childNode.getNextSibling()) {
    if (childNode.getNodeType() != Node.ELEMENT_NODE)     continue;
    Tree t=getTreeFromXML(childNode);
    if (t == null) {
      System.err.printf("%s: Discarding empty tree (root: %s)%n",this.getClass().getName(),childNode.getNodeName());
    }
 else {
      kids.add(t);
    }
  }
  String rootLabel=eRoot.getNodeName().trim();
  boolean isMWE=rootLabel.equals("w") && eRoot.hasAttribute(ATTR_POS);
  if (isMWE)   rootLabel=eRoot.getAttribute(ATTR_POS).trim();
  Tree t=(kids.size() == 0) ? null : treeFactory.newTreeNode(treeNormalizer.normalizeNonterminal(rootLabel),kids);
  if (t != null && isMWE)   t=postProcessMWE(t);
  return t;
}
