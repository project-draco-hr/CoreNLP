{
  if (wordList == null || rootTree == null)   return null;
  Map<String,Object> tree=rootTree;
  for (int i=0; i < wordList.size(); i++) {
    String word=wordList.getWord(i);
    Object node=tree.get(word);
    if (node == null) {
      return null;
    }
 else     if (node instanceof Phrase) {
      Phrase phrase=(Phrase)node;
      int matchedTokenEnd=checkWordListMatch(phrase,wordList,0,wordList.size(),i,true);
      if (matchedTokenEnd >= 0) {
        return phrase;
      }
    }
 else     if (node instanceof Map) {
      tree=(Map<String,Object>)node;
    }
 else     if (node instanceof List) {
      List lookupList=(List)node;
      int nMaps=0;
      for (      Object obj : lookupList) {
        if (obj instanceof Phrase) {
          Phrase phrase=(Phrase)obj;
          int matchedTokenEnd=checkWordListMatch(phrase,wordList,0,wordList.size(),i,true);
          if (matchedTokenEnd >= 0) {
            return phrase;
          }
        }
 else         if (obj instanceof Map) {
          if (nMaps == 1) {
            throw new RuntimeException("More than one map in list while looking up word " + i + "("+ word+ ") in phrase "+ wordList.toString());
          }
          tree=(Map<String,Object>)obj;
          nMaps++;
        }
 else {
          throw new RuntimeException("Unexpected class in list " + obj.getClass() + " while looking up word "+ i+ "("+ word+ ") in phrase "+ wordList.toString());
        }
      }
      if (nMaps == 0) {
        return null;
      }
    }
 else {
      throw new RuntimeException("Unexpected class in list " + node.getClass() + " while looking up word "+ i+ "("+ word+ ") in phrase "+ wordList.toString());
    }
  }
  Phrase phrase=(Phrase)tree.get(PHRASE_END);
  if (phrase != null) {
    int matchedTokenEnd=checkWordListMatch(phrase,wordList,0,wordList.size(),wordList.size(),true);
    return (matchedTokenEnd >= 0) ? phrase : null;
  }
 else {
    return null;
  }
}
