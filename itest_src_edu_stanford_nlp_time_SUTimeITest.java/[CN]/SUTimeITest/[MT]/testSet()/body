{
  String[] refModifiers={"every","every other","each","alternate","every 3rd","every fourth"};
  String[] refExprs={"week","weekend","fortnight","month","year","decade","century","millenium","spring","summer","autumn","fall","winter","monday","tuesday","wednesday","thursday","friday","saturday","sunday","january","february","march","april","May","june","july","august","september","october","november","december"};
  String[][] expectedValuesEvery={{"P1W","P1W"},{"XXXX-WE","P1W"},{"P2W","P2W"},{"P1M","P1M"},{"P1Y","P1Y"},{"P10Y","P10Y"},{"P100Y","P100Y"},{"P1000Y","P1000Y"},{"XXXX-SP","P1Y"},{"XXXX-SU","P1Y"},{"XXXX-FA","P1Y"},{"XXXX-FA","P1Y"},{"XXXX-WI","P1Y"},{"XXXX-WXX-1","P1W"},{"XXXX-WXX-2","P1W"},{"XXXX-WXX-3","P1W"},{"XXXX-WXX-4","P1W"},{"XXXX-WXX-5","P1W"},{"XXXX-WXX-6","P1W"},{"XXXX-WXX-7","P1W"},{"XXXX-01","P1Y"},{"XXXX-02","P1Y"},{"XXXX-03","P1Y"},{"XXXX-04","P1Y"},{"XXXX-05","P1Y"},{"XXXX-06","P1Y"},{"XXXX-07","P1Y"},{"XXXX-08","P1Y"},{"XXXX-09","P1Y"},{"XXXX-10","P1Y"},{"XXXX-11","P1Y"},{"XXXX-12","P1Y"}};
  int[] expectedMultiples={1,2,1,2,3,4};
  final Pattern p=Pattern.compile("(\\D+)(\\d+)(\\D+)");
  for (int j=0; j < refModifiers.length; j++) {
    String refTime=null;
    String refMod=refModifiers[j];
    StringBuilder sb=new StringBuilder();
    for (    String s : refExprs) {
      sb.append("It happens " + refMod + " "+ s+ ". ");
    }
    String testText=sb.toString();
    Timex[] expectedTimexes=new Timex[refExprs.length];
    int m=expectedMultiples[j];
    for (int k=0; k < refExprs.length; k++) {
      String v=expectedValuesEvery[k][0];
      String g=expectedValuesEvery[k][1];
      Matcher matcher=p.matcher(g);
      if (matcher.matches()) {
        int mg=Integer.parseInt(matcher.group(2));
        mg=mg * m;
        g=matcher.group(1) + mg + matcher.group(3);
      }
      String expr=refMod + " " + refExprs[k];
      expectedTimexes[k]=Timex.fromXml("<TIMEX3 tid=\"t" + (k + 1) + "\" value=\""+ v+ "\" type=\"SET\" quant=\""+ refMod+ "\" periodicity=\""+ g+ "\">"+ expr+ "</TIMEX3>");
    }
    Annotation documentWithRefTime=createDocument(testText,refTime);
    TimeAnnotator sutime=getTimeAnnotator();
    sutime.annotate(documentWithRefTime);
    int k=0;
    for (    CoreMap timexAnn : documentWithRefTime.get(TimeAnnotations.TimexAnnotations.class)) {
      Timex expectedTimex=expectedTimexes[k];
      testTimex(testText,expectedTimex.text(),expectedTimex,timexAnn);
      k++;
    }
    assertEquals(expectedTimexes.length,k);
  }
}
