{
  Filter<Tree> spliceOutFilter=new RegexFilter(spliceOut);
  Filter<Tree> lengthPruneFilter=new RegexFilter(lengthPrune);
  ClassicCounter bestWeightedPrecision=new ClassicCounter();
  ClassicCounter bestWeightedRecall=new ClassicCounter();
  ClassicCounter bestGuessedCorrect=new ClassicCounter();
  ClassicCounter bestNumGuesses=new ClassicCounter();
  ClassicCounter bestGoldsCorrect=new ClassicCounter();
  ClassicCounter numGolds=new ClassicCounter();
  int numEvaluations=0;
  ClassicCounter numNonzeroGuesses=new ClassicCounter();
  ClassicCounter numNonzeroGolds=new ClassicCounter();
  int setNum=0;
  int numGoldItems=0;
  int numGuessItems=0;
  for (  CandidateParses c : parseSets) {
    setNum++;
    if (verbose) {
      System.err.println("true tree number " + setNum + ':');
      c.trueTree().pennPrint(System.err);
    }
    if (c.trueTree().prune(lengthPruneFilter).yield().size() > maxLength)     continue;
    EquivalenceClassEval eval=new EquivalenceClassEval(equiv,eq);
    eval.setBagEval(bagEval);
    Tallier tallier=tf.tallier(eval);
    Collection golds=objectifier.objectify(spliceOut(c.trueTree(),spliceOutFilter));
    numGoldItems+=golds.size();
    if (golds.size() == 0) {
      continue;
    }
    if (c.candidates().size() < 1) {
      throw new UnsupportedOperationException("Sorry, zero candidates for gold " + c.trueTree());
    }
    for (    Tree t : c.candidates()) {
      Collection guesses=objectifier.objectify(spliceOut(t,spliceOutFilter));
      numGuessItems+=guesses.size();
      tallier.tally(golds,guesses);
    }
    Counters.addInPlace(bestWeightedPrecision,tallier.resultPrecision());
    Counters.addInPlace(bestWeightedRecall,tallier.resultRecall());
    Counters.addInPlace(bestNumGuesses,tallier.resultNumGuesses());
    Counters.addInPlace(bestGuessedCorrect,Counters.product(tallier.resultNumGuesses(),tallier.resultPrecision()));
    Counters.addInPlace(numGolds,tallier.resultNumGolds());
    Counters.addInPlace(bestGoldsCorrect,Counters.product(tallier.resultNumGolds(),tallier.resultRecall()));
    numEvaluations++;
    for (    Object o : tallier.resultNumGuesses().keySet()) {
      numNonzeroGuesses.incrementCount(o);
    }
    for (    Object o : tallier.resultNumGolds().keySet()) {
      numNonzeroGolds.incrementCount(o);
    }
  }
  Counter rawPrecision=Counters.division(bestGuessedCorrect,bestNumGuesses);
  Counter rawRecall=Counters.division(bestGoldsCorrect,numGolds);
  Counter weightedPrecision=Counters.division(bestWeightedPrecision,numNonzeroGuesses);
  Counter weightedRecall=Counters.division(bestWeightedRecall,numNonzeroGuesses);
  System.err.println("total golds/guesses: " + numGoldItems + '\t'+ numGuessItems);
  return new Counter[]{rawPrecision,bestNumGuesses,rawRecall,numGolds,EquivalenceClassEval.f1(rawPrecision,rawRecall),weightedPrecision,weightedRecall,EquivalenceClassEval.f1(weightedPrecision,weightedRecall)};
}
