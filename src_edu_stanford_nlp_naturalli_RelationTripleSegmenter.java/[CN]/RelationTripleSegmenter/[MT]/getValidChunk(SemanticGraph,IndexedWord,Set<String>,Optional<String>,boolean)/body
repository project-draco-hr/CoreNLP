{
  PriorityQueue<CoreLabel> chunk=new FixedPrioritiesPriorityQueue<>();
  Queue<IndexedWord> fringe=new LinkedList<>();
  IndexedWord root=originalRoot;
  fringe.add(root);
  boolean isCopula=false;
  for (  SemanticGraphEdge edge : parse.outgoingEdgeIterable(originalRoot)) {
    String shortName=edge.getRelation().getShortName();
    if (shortName.equals("cop") || shortName.equals("auxpass")) {
      isCopula=true;
    }
  }
  while (!fringe.isEmpty()) {
    root=fringe.poll();
    chunk.add(root.backingLabel(),-root.index());
    for (    SemanticGraphEdge edge : parse.incomingEdgeIterable(root)) {
      if (edge.getDependent() != originalRoot) {
        String relStr=edge.getRelation().toString();
        if ((relStr.startsWith("nmod:") && !"nmod:poss".equals(relStr) && !"nmod:npmod".equals(relStr)) || relStr.startsWith("acl:") || relStr.startsWith("advcl:")) {
          chunk.add(mockNode(edge.getGovernor().backingLabel(),1,edge.getRelation().toString().substring(edge.getRelation().toString().indexOf(":") + 1).replace("tmod","at_time"),"PP"),-(((double)edge.getGovernor().index()) + 0.9));
        }
        if (edge.getRelation().getShortName().equals("conj")) {
          chunk.add(mockNode(root.backingLabel(),-1,edge.getRelation().getSpecific(),"CC"),-(((double)root.index()) - 0.9));
        }
      }
    }
    for (    SemanticGraphEdge edge : parse.getOutEdgesSorted(root)) {
      String shortName=edge.getRelation().getShortName();
      String name=edge.getRelation().toString();
      if (isCopula && (shortName.equals("cop") || shortName.contains("subj") || shortName.equals("auxpass"))) {
      }
 else       if (ignoredArc.isPresent() && ignoredArc.get().equals(name)) {
      }
 else       if (!validArcs.contains(edge.getRelation().getShortName()) && !validArcs.contains(edge.getRelation().getShortName().replaceAll(":.*",":*"))) {
        if (!allowExtraArcs) {
          return Optional.empty();
        }
 else {
        }
      }
 else {
        fringe.add(edge.getDependent());
      }
    }
  }
  return Optional.of(chunk.toSortedList());
}
