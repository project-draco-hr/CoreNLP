{
  PriorityQueue<CoreLabel> chunk=new FixedPrioritiesPriorityQueue<>();
  Queue<IndexedWord> fringe=new LinkedList<>();
  IndexedWord root=originalRoot;
  fringe.add(root);
  boolean isCopula=false;
  IndexedWord primaryCase=null;
  for (  SemanticGraphEdge edge : parse.outgoingEdgeIterable(originalRoot)) {
    String shortName=edge.getRelation().getShortName();
    if (shortName.equals("cop") || shortName.equals("auxpass")) {
      isCopula=true;
    }
    if (shortName.equals("case")) {
      primaryCase=edge.getDependent();
    }
  }
  while (!fringe.isEmpty()) {
    root=fringe.poll();
    chunk.add(root.backingLabel(),-root.index());
    for (    SemanticGraphEdge edge : parse.incomingEdgeIterable(root)) {
      if (edge.getDependent() != originalRoot) {
        String relStr=edge.getRelation().toString();
        if ((relStr.startsWith("nmod:") && !"nmod:poss".equals(relStr) && !"nmod:npmod".equals(relStr)) || relStr.startsWith("acl:") || relStr.startsWith("advcl:")) {
        }
      }
    }
    boolean hasConj=false;
    boolean hasCC=false;
    for (    SemanticGraphEdge edge : parse.getOutEdgesSorted(root)) {
      String shortName=edge.getRelation().getShortName();
      String name=edge.getRelation().toString();
      if (shortName.startsWith("conj")) {
        hasConj=true;
      }
      if (shortName.equals("cc")) {
        hasCC=true;
      }
      if (isCopula && (shortName.equals("cop") || shortName.contains("subj") || shortName.equals("auxpass"))) {
      }
 else       if (edge.getDependent() == primaryCase) {
      }
 else       if (ignoredArc.isPresent() && (ignoredArc.get().equals(name) || ignoredArc.get().startsWith("conj") && name.equals("cc"))) {
      }
 else       if (!validArcs.contains(edge.getRelation().getShortName()) && !validArcs.contains(edge.getRelation().getShortName().replaceAll(":.*",":*"))) {
        if (!allowExtraArcs) {
          return Optional.empty();
        }
 else {
        }
      }
 else {
        fringe.add(edge.getDependent());
      }
    }
    if (Boolean.logicalXor(hasConj,hasCC)) {
      return Optional.empty();
    }
  }
  return Optional.of(chunk.toSortedList());
}
