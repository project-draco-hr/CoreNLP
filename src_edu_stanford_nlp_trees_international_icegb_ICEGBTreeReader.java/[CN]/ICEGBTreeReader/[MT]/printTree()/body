{
  boolean ignore=false;
  boolean start=false;
  boolean inSquareBracket=false;
  StringBuilder treeBuffer=new StringBuilder();
  StringBuilder lineBuffer=new StringBuilder();
  if (!tok.hasNext()) {
    return null;
  }
  while (tok.hasNext()) {
    ICEGBToken token=tok.next();
    if (token.type == ICEGBLexer.SEPARATE) {
      String line=lineBuffer.toString();
      line=line.replaceAll("[\\n\\r]","");
      if (line.length() > 0) {
        treeBuffer.append(line);
        treeBuffer.append("\n");
      }
      break;
    }
    if (token.type == ICEGBLexer.YYEOF) {
      return null;
    }
switch (token.type) {
case ICEGBLexer.LSB:
      if (current == null || (current.type != ICEGBLexer.LBR || tok.peek().type != ICEGBLexer.RBR)) {
        inSquareBracket=true;
      }
    if (start && !inSquareBracket) {
      lineBuffer.append(token.text);
    }
  break;
case ICEGBLexer.RSB:
if (start && !inSquareBracket) {
  lineBuffer.append(token.text);
}
if (current.type != ICEGBLexer.LBR || tok.peek().type != ICEGBLexer.RBR) {
inSquareBracket=false;
}
break;
case ICEGBLexer.TAG:
if (token.text.startsWith("<#X")) {
ignore=true;
}
if (start && !inSquareBracket) {
lineBuffer.append(token.text);
}
break;
case ICEGBLexer.STRING:
if (token.text.equals("PU")) {
start=true;
}
if (start && !inSquareBracket) {
lineBuffer.append(token.text);
}
break;
default :
if (start && !inSquareBracket) {
lineBuffer.append(token.text);
}
}
if (token.type == ICEGBLexer.LINEEND) {
String line=lineBuffer.toString();
line=line.replaceAll("[\\n\\r]","");
if (line.length() > 0) {
treeBuffer.append(line);
treeBuffer.append("\n");
}
lineBuffer=new StringBuilder();
}
current=token;
}
if (ignore) {
return printTree();
}
if (!start && treeBuffer.length() == 0) {
return printTree();
}
return treeBuffer.toString();
}
