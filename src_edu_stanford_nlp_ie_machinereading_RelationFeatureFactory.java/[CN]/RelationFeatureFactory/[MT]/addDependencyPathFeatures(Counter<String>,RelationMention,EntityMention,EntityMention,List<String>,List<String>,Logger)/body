{
  SemanticGraph graph=null;
  if (dependencyType == null)   dependencyType=DEPENDENCY_TYPE.COLLAPSED_CCPROCESSED;
  if (dependencyType == DEPENDENCY_TYPE.COLLAPSED_CCPROCESSED)   graph=rel.getSentence().get(SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation.class);
 else   if (dependencyType == DEPENDENCY_TYPE.COLLAPSED)   graph=rel.getSentence().get(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class);
 else   if (dependencyType == DEPENDENCY_TYPE.BASIC)   graph=rel.getSentence().get(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class);
 else   throw new RuntimeException("ERROR: unknown dependency type: " + dependencyType);
  if (graph == null) {
    Tree tree=rel.getSentence().get(TreeAnnotation.class);
    if (tree == null) {
      System.err.println("WARNING: found sentence without TreeAnnotation. Skipped dependency-path features.");
      return;
    }
    try {
      graph=SemanticGraphFactory.generateCollapsedDependencies(tree);
    }
 catch (    Exception e) {
      System.err.println("WARNING: failed to generate dependencies from tree " + tree.toString());
      e.printStackTrace();
      System.err.println("Skipped dependency-path features.");
      return;
    }
  }
  IndexedWord node0=graph.getNodeByIndexSafe(arg0.getSyntacticHeadTokenPosition() + 1);
  IndexedWord node1=graph.getNodeByIndexSafe(arg1.getSyntacticHeadTokenPosition() + 1);
  if (node0 == null) {
    checklist.removeAll(dependencyFeatures);
    return;
  }
  if (node1 == null) {
    checklist.removeAll(dependencyFeatures);
    return;
  }
  List<SemanticGraphEdge> edgePath=graph.getShortestUndirectedPathEdges(node0,node1);
  List<IndexedWord> pathNodes=graph.getShortestUndirectedPathNodes(node0,node1);
  if (edgePath == null) {
    checklist.removeAll(dependencyFeatures);
    return;
  }
  if (pathNodes == null || pathNodes.size() <= 1) {
    checklist.removeAll(dependencyFeatures);
    return;
  }
  if (usingFeature(types,checklist,"dependency_path")) {
    features.setCount(generalizedDependencyPath(edgePath,node0),1.0);
  }
  if (usingFeature(types,checklist,"dependency_path_lowlevel")) {
    String depLowLevel=dependencyPath(edgePath,node0);
    if (logger != null && !rel.getType().equals(RelationMention.UNRELATED))     logger.info("dependency_path_lowlevel: " + depLowLevel);
    features.setCount(depLowLevel,1.0);
  }
  List<String> pathLemmas=new ArrayList<String>();
  List<String> noArgPathLemmas=new ArrayList<String>();
  Set<Integer> indecesToSkip=new HashSet<Integer>();
  for (int i=arg0.getExtentTokenStart(); i < arg0.getExtentTokenEnd(); i++)   indecesToSkip.add(i + 1);
  for (int i=arg1.getExtentTokenStart(); i < arg1.getExtentTokenEnd(); i++)   indecesToSkip.add(i + 1);
  for (  IndexedWord node : pathNodes) {
    pathLemmas.add(Morphology.lemmaStatic(node.value(),node.tag(),true));
    if (!indecesToSkip.contains(node.index()))     noArgPathLemmas.add(Morphology.lemmaStatic(node.value(),node.tag(),true));
  }
  if (usingFeature(types,checklist,"dependency_paths_to_verb")) {
    for (    IndexedWord node : pathNodes) {
      if (node.tag().contains("VB")) {
        if (node.equals(node0) || node.equals(node1)) {
          continue;
        }
        String lemma=Morphology.lemmaStatic(node.value(),node.tag(),true);
        String node1Path=generalizedDependencyPath(graph.getShortestUndirectedPathEdges(node,node1),node);
        String node0Path=generalizedDependencyPath(graph.getShortestUndirectedPathEdges(node0,node),node0);
        features.setCount(node0Path + " " + lemma,1.0);
        features.setCount(lemma + " " + node1Path,1.0);
        features.setCount(node0Path + " " + lemma+ " "+ node1Path,1.0);
      }
    }
  }
  if (usingFeature(types,checklist,"dependency_path_stubs_to_verb")) {
    for (    IndexedWord node : pathNodes) {
      SemanticGraphEdge edge0=edgePath.get(0);
      SemanticGraphEdge edge1=edgePath.get(edgePath.size() - 1);
      if (node.tag().contains("VB")) {
        if (node.equals(node0) || node.equals(node1)) {
          continue;
        }
        String lemma=Morphology.lemmaStatic(node.value(),node.tag(),true);
        String edge0str, edge1str;
        if (node0.equals(edge0.getGovernor())) {
          edge0str="<-" + generalizeRelation(edge0.getRelation());
        }
 else {
          edge0str=generalizeRelation(edge0.getRelation()) + "->";
        }
        if (node1.equals(edge1.getGovernor())) {
          edge1str=generalizeRelation(edge1.getRelation()) + "->";
        }
 else {
          edge1str="<-" + generalizeRelation(edge1.getRelation());
        }
        features.setCount("stub: " + edge0str + " "+ lemma,1.0);
        features.setCount("stub: " + lemma + edge1str,1.0);
        features.setCount("stub: " + edge0str + " "+ lemma+ " "+ edge1str,1.0);
      }
    }
  }
  if (usingFeature(types,checklist,"verb_in_dependency_path")) {
    for (    IndexedWord node : pathNodes) {
      if (node.tag().contains("VB")) {
        if (node.equals(node0) || node.equals(node1)) {
          continue;
        }
        SemanticGraphEdge rightEdge=graph.getShortestUndirectedPathEdges(node,node1).get(0);
        SemanticGraphEdge leftEdge=graph.getShortestUndirectedPathEdges(node,node0).get(0);
        String rightRelation, leftRelation;
        boolean governsLeft=false, governsRight=false;
        if (node.equals(rightEdge.getGovernor())) {
          rightRelation=" <-" + generalizeRelation(rightEdge.getRelation());
          governsRight=true;
        }
 else {
          rightRelation=generalizeRelation(rightEdge.getRelation()) + "-> ";
        }
        if (node.equals(leftEdge.getGovernor())) {
          leftRelation=generalizeRelation(leftEdge.getRelation()) + "-> ";
          governsLeft=true;
        }
 else {
          leftRelation=" <-" + generalizeRelation(leftEdge.getRelation());
        }
        String lemma=Morphology.lemmaStatic(node.value(),node.tag(),true);
        if (governsLeft || governsRight) {
        }
        if (governsLeft) {
          features.setCount("verb: " + leftRelation + lemma,1.0);
        }
        if (governsRight) {
          features.setCount("verb: " + lemma + rightRelation,1.0);
        }
        if (governsLeft && governsRight) {
          features.setCount("verb: " + leftRelation + lemma+ rightRelation,1.0);
        }
      }
    }
  }
  if (usingFeature(types,checklist,"dependency_path_words")) {
    for (    String lemma : noArgPathLemmas)     features.setCount("word_in_dependency_path:" + lemma,1.0);
  }
  if (usingFeature(types,checklist,"dependency_path_POS_unigrams")) {
    for (    IndexedWord node : pathNodes)     if (!node.equals(node0) && !node.equals(node1))     features.setCount("POS_in_dependency_path: " + node.tag(),1.0);
  }
  for (int node=0; node < pathNodes.size(); node++) {
    for (int n=2; n <= 4; n++) {
      if (node + n > pathNodes.size())       break;
      StringBuilder sb=new StringBuilder();
      StringBuilder sbPOS=new StringBuilder();
      for (int elt=node; elt < node + n; elt++) {
        sb.append(pathLemmas.get(elt));
        sb.append("_");
        sbPOS.append(pathNodes.get(elt).tag());
        sbPOS.append("_");
      }
      if (usingFeature(types,checklist,"dependency_path_word_n_grams"))       features.setCount("dependency_path_" + n + "-gram: "+ sb,1.0);
      if (usingFeature(types,checklist,"dependency_path_POS_n_grams"))       features.setCount("dependency_path_POS_" + n + "-gram: "+ sbPOS,1.0);
    }
  }
  for (int edge=0; edge < edgePath.size(); edge++) {
    if (usingFeature(types,checklist,"dependency_path_edge_n_grams") || usingFeature(types,checklist,"dependency_path_edge_lowlevel_n_grams")) {
      for (int n=2; n <= 4; n++) {
        if (edge + n > edgePath.size())         break;
        StringBuilder sbRelsHi=new StringBuilder();
        StringBuilder sbRelsLo=new StringBuilder();
        for (int elt=edge; elt < edge + n; elt++) {
          GrammaticalRelation gr=edgePath.get(elt).getRelation();
          sbRelsHi.append(generalizeRelation(gr));
          sbRelsHi.append("_");
          sbRelsLo.append(gr);
          sbRelsLo.append("_");
        }
        if (usingFeature(types,checklist,"dependency_path_edge_n_grams"))         features.setCount("dependency_path_edge_" + n + "-gram: "+ sbRelsHi,1.0);
        if (usingFeature(types,checklist,"dependency_path_edge_lowlevel_n_grams"))         features.setCount("dependency_path_edge_lowlevel_" + n + "-gram: "+ sbRelsLo,1.0);
      }
    }
    if (usingFeature(types,checklist,"dependency_path_node-edge-node-grams"))     features.setCount("dependency_path_node-edge-node-gram: " + pathLemmas.get(edge) + " -- "+ generalizeRelation(edgePath.get(edge).getRelation())+ " -- "+ pathLemmas.get(edge + 1),1.0);
    if (usingFeature(types,checklist,"dependency_path_node-edge-node-grams_lowlevel"))     features.setCount("dependency_path_node-edge-node-gram_lowlevel: " + pathLemmas.get(edge) + " -- "+ edgePath.get(edge).getRelation()+ " -- "+ pathLemmas.get(edge + 1),1.0);
    if (usingFeature(types,checklist,"dependency_path_edge-node-edge-grams") && edge > 0)     features.setCount("dependency_path_edge-node-edge-gram: " + generalizeRelation(edgePath.get(edge - 1).getRelation()) + " -- "+ pathLemmas.get(edge)+ " -- "+ generalizeRelation(edgePath.get(edge).getRelation()),1.0);
    if (usingFeature(types,checklist,"dependency_path_edge-node-edge-grams_lowlevel") && edge > 0)     features.setCount("dependency_path_edge-node-edge-gram_lowlevel: " + edgePath.get(edge - 1).getRelation() + " -- "+ pathLemmas.get(edge)+ " -- "+ edgePath.get(edge).getRelation(),1.0);
    String dir=pathNodes.get(edge).equals(edgePath.get(edge).getDependent()) ? " -> " : " <- ";
    if (usingFeature(types,checklist,"dependency_path_directed_bigrams"))     features.setCount("dependency_path_directed_bigram: " + pathLemmas.get(edge) + dir+ pathLemmas.get(edge + 1),1.0);
    if (usingFeature(types,checklist,"dependency_path_edge_unigrams"))     features.setCount("dependency_path_edge_unigram: " + edgePath.get(edge).getRelation() + dir+ (edge == 0 ? " - leftmost" : edge == edgePath.size() - 1 ? " - rightmost" : " - interior"),1.0);
  }
  if (usingFeature(types,checklist,"dependency_path_length")) {
    features.setCount("dependency_path_length",edgePath.size());
  }
  if (usingFeature(types,checklist,"dependency_path_length_binary")) {
    features.setCount("dependency_path_length_" + new DecimalFormat("00").format(edgePath.size()),1.0);
  }
  if (usingFeature(types,checklist,"dependency_path_trigger")) {
    List<CoreLabel> tokens=rel.getSentence().get(TokensAnnotation.class);
    for (    IndexedWord node : pathNodes) {
      int index=node.index();
      if (indecesToSkip.contains(index))       continue;
      String trigger=tokens.get(index - 1).get(TriggerAnnotation.class);
      if (trigger != null && trigger.startsWith("B-"))       features.incrementCount("dependency_path_trigger=" + trigger.substring(2));
    }
  }
}
