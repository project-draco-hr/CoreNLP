{
  super.clear();
  tokenOffsetBegin_=0;
  bitField0_=(bitField0_ & ~0x00000001);
  tokenOffsetEnd_=0;
  bitField0_=(bitField0_ & ~0x00000002);
  sentenceIndex_=0;
  bitField0_=(bitField0_ & ~0x00000004);
  characterOffsetBegin_=0;
  bitField0_=(bitField0_ & ~0x00000008);
  characterOffsetEnd_=0;
  bitField0_=(bitField0_ & ~0x00000010);
  if (parseTreeBuilder_ == null) {
    parseTree_=edu.stanford.nlp.pipeline.CoreMapProtos.ParseTree.getDefaultInstance();
  }
 else {
    parseTreeBuilder_.clear();
  }
  bitField0_=(bitField0_ & ~0x00000020);
  if (basicDependenciesBuilder_ == null) {
    basicDependencies_=edu.stanford.nlp.pipeline.CoreMapProtos.DependencyGraph.getDefaultInstance();
  }
 else {
    basicDependenciesBuilder_.clear();
  }
  bitField0_=(bitField0_ & ~0x00000040);
  if (collapsedDependenciesBuilder_ == null) {
    collapsedDependencies_=edu.stanford.nlp.pipeline.CoreMapProtos.DependencyGraph.getDefaultInstance();
  }
 else {
    collapsedDependenciesBuilder_.clear();
  }
  bitField0_=(bitField0_ & ~0x00000080);
  if (collapsedCCProcessedDependenciesBuilder_ == null) {
    collapsedCCProcessedDependencies_=edu.stanford.nlp.pipeline.CoreMapProtos.DependencyGraph.getDefaultInstance();
  }
 else {
    collapsedCCProcessedDependenciesBuilder_.clear();
  }
  bitField0_=(bitField0_ & ~0x00000100);
  paragraph_=0;
  bitField0_=(bitField0_ & ~0x00000200);
  return this;
}
