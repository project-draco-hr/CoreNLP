{
{
    Partial p=refTime.getJodaTimePartial();
    if (p != null) {
      DateTimeFieldType[] dtFieldTypes=getDateTimeFields();
      if (dtFieldTypes != null) {
        Time t=null;
        for (        DateTimeFieldType dtft : dtFieldTypes) {
          if (p.isSupported(dtft)) {
            t=new PartialTime(JodaTimeUtils.discardMoreSpecificFields(p,dtft));
          }
        }
        if (t == null) {
          Instant instant=refTime.getJodaTimeInstant();
          if (instant != null) {
            for (            DateTimeFieldType dtft : dtFieldTypes) {
              if (instant.isSupported(dtft)) {
                Partial p2=JodaTimeUtils.getPartial(instant,p.with(dtft,1));
                t=new PartialTime(JodaTimeUtils.discardMoreSpecificFields(p2,dtft));
              }
            }
          }
        }
        if (t != null) {
          if ((flags & RESOLVE_TO_PAST) != 0) {
            if (t.compareTo(refTime) >= 0) {
              return t.subtract(this);
            }
          }
 else           if ((flags & RESOLVE_TO_FUTURE) != 0) {
            if (t.compareTo(refTime) <= 0) {
              return t.add(this);
            }
          }
        }
        return t;
      }
    }
  }
  Time minTime=refTime.subtract(this);
  Time maxTime=refTime.add(this);
  Range likelyRange=null;
  if ((flags & (DUR_RESOLVE_FROM_AS_REF | RESOLVE_TO_FUTURE)) != 0) {
    likelyRange=new Range(refTime,maxTime,this);
  }
 else   if ((flags & (DUR_RESOLVE_TO_AS_REF | RESOLVE_TO_PAST)) != 0) {
    likelyRange=new Range(minTime,refTime,this);
  }
 else {
    Duration halfDuration=this.divideBy(2);
    likelyRange=new Range(refTime.subtract(halfDuration),refTime.add(halfDuration),this);
  }
  if ((flags & (RESOLVE_TO_FUTURE | RESOLVE_TO_PAST)) != 0) {
    return new TimeWithRange(likelyRange);
  }
  Range r=new Range(minTime,maxTime,this.multiplyBy(2));
  return new InexactTime(new TimeWithRange(likelyRange),this,r);
}
