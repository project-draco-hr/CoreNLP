{
  if (m == 1 || period == null) {
    return this;
  }
 else {
    MutablePeriod p=new MutablePeriod();
    for (int i=0; i < period.size(); i++) {
      int oldVal=period.getValue(i);
      DurationFieldType field=period.getFieldType(i);
      int remainder=oldVal % m;
      p.add(field,oldVal - remainder);
      if (remainder != 0) {
        DurationFieldType f;
        int standardUnit=1;
        if (DurationFieldType.centuries().equals(field)) {
          f=DurationFieldType.years();
          standardUnit=100;
        }
 else         if (DurationFieldType.years().equals(field)) {
          f=DurationFieldType.months();
          standardUnit=12;
        }
 else         if (DurationFieldType.halfdays().equals(field)) {
          f=DurationFieldType.hours();
          standardUnit=12;
        }
 else         if (DurationFieldType.days().equals(field)) {
          f=DurationFieldType.hours();
          standardUnit=24;
        }
 else         if (DurationFieldType.hours().equals(field)) {
          f=DurationFieldType.minutes();
          standardUnit=60;
        }
 else         if (DurationFieldType.minutes().equals(field)) {
          f=DurationFieldType.seconds();
          standardUnit=60;
        }
 else         if (DurationFieldType.seconds().equals(field)) {
          f=DurationFieldType.millis();
          standardUnit=1000;
        }
 else         if (DurationFieldType.months().equals(field)) {
          f=DurationFieldType.days();
          standardUnit=30;
        }
 else         if (DurationFieldType.weeks().equals(field)) {
          f=DurationFieldType.days();
          standardUnit=7;
        }
 else         if (DurationFieldType.millis().equals(field)) {
          f=DurationFieldType.millis();
          standardUnit=0;
        }
 else {
          throw new UnsupportedOperationException("Unsupported duration type: " + field + " when dividing");
        }
        p.add(f,standardUnit * remainder);
      }
    }
    for (int i=0; i < p.size(); i++) {
      p.setValue(i,p.getValue(i) / m);
    }
    return new DurationWithFields(p);
  }
}
