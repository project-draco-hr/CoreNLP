{
  if (t == null || t == TIME_UNKNOWN)   return this;
  if (base == null) {
    if (dateTimeZone != null) {
      return (Time)t.setTimeZone(dateTimeZone);
    }
 else {
      return t;
    }
  }
  if (t instanceof CompositePartialTime) {
    return t.intersect(this);
  }
 else   if (t instanceof PartialTime) {
    Pair<PartialTime,PartialTime> compatible=getCompatible(this,(PartialTime)t);
    if (compatible == null) {
      return null;
    }
    Partial p=JodaTimeUtils.combine(compatible.first.base,compatible.second.base);
    DateTimeZone dtz=(dateTimeZone != null) ? dateTimeZone : ((PartialTime)t).dateTimeZone;
    PartialTime res=new PartialTime(p);
    if (dtz != null)     return res.setTimeZone(dtz);
 else     return res;
  }
 else   if (t instanceof OrdinalTime) {
    return (Time)t.resolve(this);
  }
 else   if (t instanceof GroundedTime) {
    return t.intersect(this);
  }
 else   if (t instanceof RelativeTime) {
    return t.intersect(this);
  }
 else {
    Time cpt=makeComposite(this,t);
    if (cpt != null) {
      return cpt;
    }
    if (t instanceof InexactTime) {
      return t.intersect(this);
    }
  }
  return null;
}
