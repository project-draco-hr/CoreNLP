{
  if (JodaTimeUtils.hasField(base,DateTimeFieldType.year()) && JodaTimeUtils.hasField(base,DateTimeFieldType.monthOfYear()) && JodaTimeUtils.hasField(base,DateTimeFieldType.dayOfWeek())) {
    List<Temporal> list=new ArrayList<>();
    Partial pt=new Partial();
    pt=JodaTimeUtils.setField(pt,DateTimeFieldType.year(),base.get(DateTimeFieldType.year()));
    pt=JodaTimeUtils.setField(pt,DateTimeFieldType.monthOfYear(),base.get(DateTimeFieldType.monthOfYear()));
    pt=JodaTimeUtils.setField(pt,DateTimeFieldType.dayOfMonth(),1);
    Partial candidate=JodaTimeUtils.resolveDowToDay(base,pt);
    if (candidate.get(DateTimeFieldType.monthOfYear()) != base.get(DateTimeFieldType.monthOfYear())) {
      pt=JodaTimeUtils.setField(pt,DateTimeFieldType.dayOfMonth(),8);
      candidate=JodaTimeUtils.resolveDowToDay(base,pt);
      if (candidate.get(DateTimeFieldType.monthOfYear()) != base.get(DateTimeFieldType.monthOfYear())) {
        return null;
      }
    }
    try {
      while (candidate.get(DateTimeFieldType.monthOfYear()) == base.get(DateTimeFieldType.monthOfYear())) {
        list.add(new PartialTime(this,candidate));
        pt=JodaTimeUtils.setField(pt,DateTimeFieldType.dayOfMonth(),pt.get(DateTimeFieldType.dayOfMonth()) + 7);
        candidate=JodaTimeUtils.resolveDowToDay(base,pt);
      }
    }
 catch (    IllegalFieldValueException ex) {
    }
    return list;
  }
 else {
    return null;
  }
}
