{
  Timing.startTime();
  boolean treebankNormalize=false;
  boolean justWordsFlag=false;
  final boolean justWords;
  int j;
  for (j=0; j < args.length && args[j].startsWith("-"); j++) {
    if (args[j].equals("-n")) {
      treebankNormalize=true;
    }
 else     if (args[j].equals("-w")) {
      justWordsFlag=true;
    }
 else {
      System.err.println("Unknown option: " + args[j]);
    }
  }
  justWords=justWordsFlag;
  if (j >= args.length) {
    System.err.println("Usage: java edu.stanford.nlp.trees." + "DiskSentencebank [-n|-w] sentencebankPath" + " [low high]");
    System.exit(0);
  }
  final SentenceNormalizer<HasWord> sn;
  if (treebankNormalize) {
    sn=new PennSentenceMrgNormalizer<HasWord>();
  }
 else {
    sn=new PennSentenceNormalizer<HasWord>();
  }
  SentenceReaderFactory<HasWord> srf=new SentenceReaderFactory<HasWord>(){
    public SentenceReader<HasWord> newSentenceReader(    Reader in){
      return new SentenceReader<HasWord>(in,new TaggedWordFactory(),sn,new PennTagbankStreamTokenizer(in));
    }
  }
;
  Sentencebank<ArrayList<HasWord>,HasWord> sentencebank=new DiskSentencebank<HasWord>(srf);
  if (j + 2 < args.length) {
    int start=Integer.parseInt(args[j + 1]);
    int end=Integer.parseInt(args[j + 2]);
    sentencebank.loadPath(new File(args[j]),new NumberRangeFileFilter(start,end,true));
  }
 else {
    sentencebank.loadPath(args[j]);
  }
  sentencebank.apply(new SentenceVisitor<HasWord>(){
    public void visitSentence(    final ArrayList<HasWord> t){
      if (justWords) {
        System.out.println(Sentence.listToString(t,true));
      }
 else {
        System.out.println(Sentence.listToString(t,false));
      }
    }
  }
);
  System.err.println();
  Timing.endTime("traversing corpus, printing sentences 1-by-1");
}
