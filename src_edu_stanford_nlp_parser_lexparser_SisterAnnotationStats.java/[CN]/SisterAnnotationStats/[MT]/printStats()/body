{
  NumberFormat nf=NumberFormat.getNumberInstance();
  nf.setMaximumFractionDigits(2);
  StringBuffer[] javaSB=new StringBuffer[CUTOFFS.length];
  for (int i=0; i < CUTOFFS.length; i++) {
    javaSB[i]=new StringBuffer("  private static String[] sisterSplit" + (i + 1) + " = new String[] {");
  }
  ArrayList topScores=new ArrayList();
  for (Iterator it=nodeRules.keySet().iterator(); it.hasNext(); ) {
    ArrayList answers=new ArrayList();
    String label=(String)it.next();
    ClassicCounter cntr=(ClassicCounter)nodeRules.get(label);
    double support=(cntr.totalCount());
    System.out.println("Node " + label + " support is "+ support);
    for (Iterator it2=((HashMap)leftRules.get(label)).keySet().iterator(); it2.hasNext(); ) {
      String sis=(String)it2.next();
      ClassicCounter cntr2=(ClassicCounter)((HashMap)leftRules.get(label)).get(sis);
      double support2=(cntr2.totalCount());
      double kl=Counters.klDivergence(cntr2,cntr);
      String annotatedLabel=label + "=l=" + sis;
      System.out.println("KL(" + annotatedLabel + "||"+ label+ ") = "+ nf.format(kl)+ "\t"+ "support("+ sis+ ") = "+ support2);
      answers.add(new Pair(annotatedLabel,new Double(kl * support2)));
      topScores.add(new Pair(annotatedLabel,new Double(kl * support2)));
    }
    for (Iterator it2=((HashMap)rightRules.get(label)).keySet().iterator(); it2.hasNext(); ) {
      String sis=(String)it2.next();
      ClassicCounter cntr2=(ClassicCounter)((HashMap)rightRules.get(label)).get(sis);
      double support2=(cntr2.totalCount());
      double kl=Counters.klDivergence(cntr2,cntr);
      String annotatedLabel=label + "=r=" + sis;
      System.out.println("KL(" + annotatedLabel + "||"+ label+ ") = "+ nf.format(kl)+ "\t"+ "support("+ sis+ ") = "+ support2);
      answers.add(new Pair(annotatedLabel,new Double(kl * support2)));
      topScores.add(new Pair(annotatedLabel,new Double(kl * support2)));
    }
    System.out.println("----");
    System.out.println("Sorted descending support * KL");
    Collections.sort(answers,new Comparator(){
      public int compare(      Object o1,      Object o2){
        Pair p1=(Pair)o1;
        Pair p2=(Pair)o2;
        Double p12=(Double)p1.second();
        Double p22=(Double)p2.second();
        return p22.compareTo(p12);
      }
    }
);
    for (int i=0, size=answers.size(); i < size; i++) {
      Pair p=(Pair)answers.get(i);
      double psd=((Double)p.second()).doubleValue();
      System.out.println(p.first() + ": " + nf.format(psd));
      if (psd >= CUTOFFS[0]) {
        String annotatedLabel=(String)p.first();
        for (int j=0; j < CUTOFFS.length; j++) {
          if (psd >= CUTOFFS[j]) {
          }
        }
      }
    }
    System.out.println();
  }
  Collections.sort(topScores,new Comparator(){
    public int compare(    Object o1,    Object o2){
      Pair p1=(Pair)o1;
      Pair p2=(Pair)o2;
      Double p12=(Double)p1.second();
      Double p22=(Double)p2.second();
      return p22.compareTo(p12);
    }
  }
);
  String outString="All enriched categories, sorted by score\n";
  for (int i=0, size=topScores.size(); i < size; i++) {
    Pair p=(Pair)topScores.get(i);
    double psd=((Double)p.second()).doubleValue();
    System.out.println(p.first() + ": " + nf.format(psd));
  }
  System.out.println();
  System.out.println("  // Automatically generated by SisterAnnotationStats -- preferably don't edit");
  int k=CUTOFFS.length - 1;
  for (int j=0; j < topScores.size(); j++) {
    Pair p=(Pair)topScores.get(j);
    double psd=((Double)p.second()).doubleValue();
    if (psd < CUTOFFS[k]) {
      if (k == 0) {
        break;
      }
 else {
        k--;
        j-=1;
        continue;
      }
    }
    javaSB[k].append("\"").append(p.first());
    javaSB[k].append("\",");
  }
  for (int i=0; i < CUTOFFS.length; i++) {
    int len=javaSB[i].length();
    javaSB[i].replace(len - 2,len,"};");
    System.out.println(javaSB[i]);
  }
  System.out.print("  public static String[] sisterSplit = ");
  for (int i=CUTOFFS.length; i > 0; i--) {
    if (i == 1) {
      System.out.print("sisterSplit1");
    }
 else {
      System.out.print("selectiveSisterSplit" + i + " ? sisterSplit"+ i+ " : (");
    }
  }
  for (int i=CUTOFFS.length; i >= 0; i--) {
    System.out.print(")");
  }
  System.out.println(";");
}
