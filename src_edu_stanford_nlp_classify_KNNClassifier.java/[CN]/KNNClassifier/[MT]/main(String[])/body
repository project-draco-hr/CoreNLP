{
  Collection<RVFDatum<String,String>> trainingInstances=new ArrayList<>();
{
    ClassicCounter<String> f1=new ClassicCounter<>();
    f1.setCount("humidity",5.0);
    f1.setCount("temperature",35.0);
    trainingInstances.add(new RVFDatum<>(f1,"rain"));
  }
{
    ClassicCounter<String> f1=new ClassicCounter<>();
    f1.setCount("humidity",4.0);
    f1.setCount("temperature",32.0);
    trainingInstances.add(new RVFDatum<>(f1,"rain"));
  }
{
    ClassicCounter<String> f1=new ClassicCounter<>();
    f1.setCount("humidity",6.0);
    f1.setCount("temperature",30.0);
    trainingInstances.add(new RVFDatum<>(f1,"rain"));
  }
{
    ClassicCounter<String> f1=new ClassicCounter<>();
    f1.setCount("humidity",2.0);
    f1.setCount("temperature",33.0);
    trainingInstances.add(new RVFDatum<>(f1,"dry"));
  }
{
    ClassicCounter<String> f1=new ClassicCounter<>();
    f1.setCount("humidity",1.0);
    f1.setCount("temperature",34.0);
    trainingInstances.add(new RVFDatum<>(f1,"dry"));
  }
  KNNClassifier<String,String> classifier=new KNNClassifierFactory<String,String>(3,false,true).train(trainingInstances);
{
    ClassicCounter<String> f1=new ClassicCounter<>();
    f1.setCount("humidity",2.0);
    f1.setCount("temperature",33.0);
    RVFDatum<String,String> testVec=new RVFDatum<>(f1);
    System.out.println(classifier.scoresOf(testVec));
    System.out.println(classifier.classOf(testVec));
  }
}
