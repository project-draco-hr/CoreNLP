{
  if (datum instanceof RVFDatum<?,?>) {
    RVFDatum<K,V> vec=(RVFDatum<K,V>)datum;
    if (l2Normalize) {
      ClassicCounter<V> featVec=new ClassicCounter<V>(vec.asFeaturesCounter());
      Counters.normalize(featVec);
      vec=new RVFDatum<K,V>(featVec);
    }
    ClassicCounter<Counter<V>> scores=new ClassicCounter<Counter<V>>();
    for (    Counter<V> instance : instances.allValues()) {
      scores.setCount(instance,Counters.cosine(vec.asFeaturesCounter(),instance));
    }
    List<Counter<V>> sorted=Counters.toSortedList(scores);
    ClassicCounter<K> classScores=new ClassicCounter<K>();
    for (int i=0; i < k && i < sorted.size(); i++) {
      K label=classLookup.get(sorted.get(i));
      double count=1.0;
      if (weightedVotes) {
        count=scores.getCount(sorted.get(i));
      }
      classScores.incrementCount(label,count);
    }
    return classScores;
  }
 else {
    return null;
  }
}
