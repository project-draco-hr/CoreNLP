{
  GeneralDataset<String,String> dataset=new Dataset<String,String>();
  Dictionaries dict=new Dictionaries(props);
  CorefDocMaker docMaker=new CorefDocMaker(props,dict);
  Document document;
  while ((document=docMaker.nextDoc()) != null) {
    setTokenIndices(document);
    document.extractGoldCorefClusters();
    Map<Integer,CorefCluster> entities=document.goldCorefClusters;
    for (    CorefCluster entity : entities.values()) {
      for (      Mention mention : entity.getCorefMentions()) {
        if (mention.headWord.tag().startsWith("V"))         continue;
        IndexedWord head=mention.collapsedDependency.getNodeByIndexSafe(mention.headWord.index());
        if (head == null)         continue;
        ArrayList<String> feats=mention.getSingletonFeatures(dict);
        dataset.add(new BasicDatum<String,String>(feats,"1"));
      }
    }
    ArrayList<CoreLabel> gold_heads=new ArrayList<CoreLabel>();
    for (    Mention gold_men : document.goldMentionsByID.values()) {
      gold_heads.add(gold_men.headWord);
    }
    for (    Mention predicted_men : document.predictedMentionsByID.values()) {
      SemanticGraph dep=predicted_men.collapsedDependency;
      IndexedWord head=dep.getNodeByIndexSafe(predicted_men.headWord.index());
      if (head == null || !dep.vertexSet().contains(head))       continue;
      if (predicted_men.headWord.tag().startsWith("V"))       continue;
      if (gold_heads.contains(predicted_men.headWord))       continue;
      dataset.add(new BasicDatum<String,String>(predicted_men.getSingletonFeatures(dict),"0"));
    }
  }
  dataset.summaryStatistics();
  return dataset;
}
