{
  int nThreads=Runtime.getRuntime().availableProcessors();
  MulticoreWrapper<Pair<DecisionTree,Counter<String>>,Double> wrapper=new MulticoreWrapper<Pair<DecisionTree,Counter<String>>,Double>(nThreads,new ThreadsafeProcessor<Pair<DecisionTree,Counter<String>>,Double>(){
    @Override public Double process(    Pair<DecisionTree,Counter<String>> input){
      try {
        return input.first.probabilityOfTrue(input.second);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override public ThreadsafeProcessor<Pair<DecisionTree,Counter<String>>,Double> newInstance(){
      return this;
    }
  }
);
  double probTrue=0;
  for (  DecisionTree tree : trees) {
    wrapper.put(Pair.makePair(tree,features));
    while (wrapper.peek()) {
      probTrue+=wrapper.poll();
    }
  }
  wrapper.join();
  while (wrapper.peek()) {
    probTrue+=wrapper.poll();
  }
  return probTrue / trees.length;
}
