{
  int tID=threadIDAndDocIndices.first();
  if (tID < 0 || tID >= multiThreadGrad)   throw new IllegalArgumentException("threadID must be with in range 0 <= tID < multiThreadGrad(=" + multiThreadGrad + ")");
  List<Integer> docIDs=threadIDAndDocIndices.second();
  double[][] partE;
  double[][] partEhat=null;
  if (multiThreadGrad == 1) {
    partE=E;
    if (calculateEmpirical)     partEhat=Ehat;
  }
 else {
    partE=parallelE[tID];
    clear2D(partE);
    if (calculateEmpirical) {
      partEhat=parallelEhat[tID];
      clear2D(partEhat);
    }
  }
  double probSum=0;
  for (  int docIndex : docIDs) {
    if (calculateEmpirical)     probSum+=expectedAndEmpiricalCountsAndValueForADoc(partE,partEhat,docIndex);
 else     probSum+=expectedCountsAndValueForADoc(partE,docIndex);
  }
  return new Pair<Integer,Double>(tID,probSum);
}
