{
  double objective=0.0;
  if (multiThreadGrad > 1) {
    if (parallelE == null) {
      parallelE=new double[multiThreadGrad][][];
      for (int i=0; i < multiThreadGrad; i++)       parallelE[i]=empty2D();
    }
    if (calculateEmpirical) {
      if (parallelEhat == null) {
        parallelEhat=new double[multiThreadGrad][][];
        for (int i=0; i < multiThreadGrad; i++)         parallelEhat[i]=empty2D();
      }
    }
  }
  MulticoreWrapper<Pair<Integer,List<Integer>>,Pair<Integer,Double>> wrapper=new MulticoreWrapper<Pair<Integer,List<Integer>>,Pair<Integer,Double>>(multiThreadGrad,(calculateEmpirical ? expectedAndEmpiricalThreadProcessor : expectedThreadProcessor));
  int totalLen=docIDs.size();
  int partLen=totalLen / multiThreadGrad;
  int currIndex=0;
  for (int part=0; part < multiThreadGrad; part++) {
    int endIndex=currIndex + partLen;
    if (part == multiThreadGrad - 1)     endIndex=totalLen;
    List<Integer> subList=docIDs.subList(currIndex,endIndex);
    wrapper.put(new Pair<Integer,List<Integer>>(part,subList));
    currIndex=endIndex;
  }
  wrapper.join();
  while (wrapper.peek()) {
    Pair<Integer,Double> result=wrapper.poll();
    int tID=result.first();
    objective+=result.second();
    if (multiThreadGrad > 1) {
      combine2DArr(E,parallelE[tID]);
      if (calculateEmpirical)       combine2DArr(Ehat,parallelEhat[tID]);
    }
  }
  return objective;
}
