{
  to2D(x,weights);
  setWeights(weights);
  double batchScale=((double)batch.length) / ((double)this.dataDimension());
  List<Integer> docIDs=new ArrayList<Integer>(batch.length);
  for (  int item : batch) {
    docIDs.add(item);
  }
  double prob=multiThreadGradient(docIDs,false);
  if (Double.isNaN(prob)) {
    throw new RuntimeException("Got NaN for prob in CRFLogConditionalObjectiveFunction.calculate()");
  }
  value=-prob;
  int index=0;
  for (int i=0; i < E.length; i++) {
    for (int j=0; j < E[i].length; j++) {
      derivative[index++]=(E[i][j] - batchScale * Ehat[i][j]);
      if (VERBOSE) {
        System.err.println("deriv(" + i + ","+ j+ ") = "+ E[i][j]+ " - "+ Ehat[i][j]+ " = "+ derivative[index - 1]);
      }
    }
  }
  applyPrior(x,batchScale);
}
