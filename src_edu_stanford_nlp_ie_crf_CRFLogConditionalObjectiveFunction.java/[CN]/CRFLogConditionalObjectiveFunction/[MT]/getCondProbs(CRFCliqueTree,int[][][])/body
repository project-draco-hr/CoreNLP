{
  double[][][] prevGivenCurr=new double[docData.length][][];
  double[][][] nextGivenCurr=new double[docData.length][][];
  for (int i=0; i < docData.length; i++) {
    prevGivenCurr[i]=new double[numClasses][];
    nextGivenCurr[i]=new double[numClasses][];
    for (int j=0; j < numClasses; j++) {
      prevGivenCurr[i][j]=new double[numClasses];
      nextGivenCurr[i][j]=new double[numClasses];
    }
  }
  for (int i=0; i < docData.length; i++) {
    int[] labelPair=new int[2];
    for (int l1=0; l1 < numClasses; l1++) {
      labelPair[0]=l1;
      for (int l2=0; l2 < numClasses; l2++) {
        labelPair[1]=l2;
        double prob=cTree.logProb(i,labelPair);
        if (i - 1 >= 0)         nextGivenCurr[i - 1][l1][l2]=prob;
        prevGivenCurr[i][l2][l1]=prob;
      }
    }
    if (DEBUG2) {
      System.err.println("unnormalized conditionals:");
      if (i > 0) {
        System.err.println("nextGivenCurr[" + (i - 1) + "]:");
        for (int a=0; a < nextGivenCurr[i - 1].length; a++) {
          for (int b=0; b < nextGivenCurr[i - 1][a].length; b++)           System.err.print((nextGivenCurr[i - 1][a][b]) + "\t");
          System.err.println();
        }
      }
      System.err.println("prevGivenCurr[" + (i) + "]:");
      for (int a=0; a < prevGivenCurr[i].length; a++) {
        for (int b=0; b < prevGivenCurr[i][a].length; b++)         System.err.print((prevGivenCurr[i][a][b]) + "\t");
        System.err.println();
      }
    }
    for (int j=0; j < numClasses; j++) {
      if (i - 1 >= 0) {
        ArrayMath.logNormalize(nextGivenCurr[i - 1][j]);
        for (int k=0; k < nextGivenCurr[i - 1][j].length; k++)         nextGivenCurr[i - 1][j][k]=Math.exp(nextGivenCurr[i - 1][j][k]);
      }
      ArrayMath.logNormalize(prevGivenCurr[i][j]);
      for (int k=0; k < prevGivenCurr[i][j].length; k++)       prevGivenCurr[i][j][k]=Math.exp(prevGivenCurr[i][j][k]);
    }
    if (DEBUG2) {
      System.err.println("normalized conditionals:");
      if (i > 0) {
        System.err.println("nextGivenCurr[" + (i - 1) + "]:");
        for (int a=0; a < nextGivenCurr[i - 1].length; a++) {
          for (int b=0; b < nextGivenCurr[i - 1][a].length; b++)           System.err.print((nextGivenCurr[i - 1][a][b]) + "\t");
          System.err.println();
        }
      }
      System.err.println("prevGivenCurr[" + (i) + "]:");
      for (int a=0; a < prevGivenCurr[i].length; a++) {
        for (int b=0; b < prevGivenCurr[i][a].length; b++)         System.err.print((prevGivenCurr[i][a][b]) + "\t");
        System.err.println();
      }
    }
  }
  return new Pair<double[][][],double[][][]>(prevGivenCurr,nextGivenCurr);
}
