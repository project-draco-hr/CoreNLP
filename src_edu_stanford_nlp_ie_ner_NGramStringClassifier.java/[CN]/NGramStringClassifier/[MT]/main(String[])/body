{
  System.err.print("NGramStringClassifier invoked at " + new Date() + " with arguments:");
  for (int i=0; i < args.length; i++) {
    System.err.print(" " + args[i]);
  }
  System.err.println();
  String trainFile=null;
  String testFile=null;
  List<String> gazettes=new ArrayList<String>();
  for (int i=0; i < args.length; i++) {
    if (args[i].equalsIgnoreCase("-left3")) {
      maxLeft=3;
      continue;
    }
    if (args[i].equalsIgnoreCase("-normalize")) {
      normalize=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-noNormalize")) {
      normalize=false;
      continue;
    }
    if (args[i].equalsIgnoreCase("-symTags")) {
      useSymTags=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-selfTest")) {
      selfTest=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-zippy")) {
      zippy=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-sloppy")) {
      sloppyGazette=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-clean")) {
      cleanGazette=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-ends")) {
      useEnds=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-tagSeqs")) {
      useTaggySequences=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-intern")) {
      intern=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-ngrams")) {
      useNGrams=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-printFeatures")) {
      printFeatures=args[++i];
      continue;
    }
    if (args[i].equalsIgnoreCase("-prev")) {
      usePrev=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-next")) {
      useNext=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-tags")) {
      useTags=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-wordPairs")) {
      useWordPairs=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-sequences")) {
      useSequences=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-pSeqs")) {
      useSequences=true;
      usePrevSequences=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-nSeqs")) {
      useSequences=true;
      useNextSequences=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-train")) {
      trainFile=args[i + 1];
      i++;
      continue;
    }
    if (args[i].equalsIgnoreCase("-test")) {
      testFile=args[i + 1];
      i++;
      continue;
    }
    if (args[i].equalsIgnoreCase("-gazette")) {
      useGazettes=true;
      gazettes.add(args[i + 1]);
      i++;
      continue;
    }
    if (args[i].equalsIgnoreCase("-scl")) {
      useSum=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-submit")) {
      useTaggySequences=true;
      useNGrams=true;
      usePrev=true;
      useNext=true;
      useTags=true;
      useWordPairs=true;
      useWordTypes=true;
      useSequences=true;
      usePrevSequences=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-noMidNGrams")) {
      noMidNGrams=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-midNGrams")) {
      noMidNGrams=false;
      continue;
    }
    if (args[i].equalsIgnoreCase("-symWordPairs")) {
      useSymWordPairs=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-reverse")) {
      useReverse=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-huber")) {
      useHuber=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-smooth")) {
      sigma=Double.parseDouble(args[i + 1]);
      i++;
      continue;
    }
    if (args[i].equalsIgnoreCase("-epsilon")) {
      epsilon=Double.parseDouble(args[i + 1]);
      i++;
      continue;
    }
    if (args[i].equalsIgnoreCase("-beam")) {
      beamSize=Integer.parseInt(args[i + 1]);
      i++;
      continue;
    }
    if (args[i].equalsIgnoreCase("-retainEntitySubclassification")) {
      noDeEndify=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-lemmas")) {
      useLemmas=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-nb")) {
      useNB=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-wordtypes")) {
      useWordTypes=true;
      useBetterWordTypes=false;
      useChrisWordTypes=false;
      continue;
    }
    if (args[i].equalsIgnoreCase("-wordtypes2")) {
      useWordTypes=true;
      useBetterWordTypes=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-chrisWordTypes")) {
      useWordTypes=true;
      useBetterWordTypes=false;
      useChrisWordTypes=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-typeseqs")) {
      useTypeSeqs=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-typeseqs2")) {
      useTypeSeqs=true;
      useTypeSeqs2=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-typeseqs3")) {
      useTypeSeqs=true;
      useTypeSeqs2=true;
      useTypeySequences=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-realword")) {
      useLastRealWord=true;
      useNextRealWord=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-justify")) {
      justify=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-occurence")) {
      useOccurencePatterns=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-known")) {
      useKnownLC=true;
      continue;
    }
    if (args[i].equalsIgnoreCase("-macro")) {
      useTaggySequences=true;
      useNGrams=true;
      usePrev=true;
      useNext=true;
      useTags=true;
      useWordPairs=true;
      useWordTypes=true;
      useSequences=true;
      usePrevSequences=true;
      noMidNGrams=true;
      useReverse=true;
      useTypeSeqs=true;
      useTypeSeqs2=true;
      useTypeySequences=true;
      useWordTypes=true;
      useBetterWordTypes=true;
      useOccurencePatterns=true;
      useLastRealWord=true;
      useNextRealWord=true;
      useKnownLC=true;
      sigma=3.0;
      normalize=true;
      continue;
    }
    System.err.println("ERROR: Unknown option: " + args[i]);
    System.exit(0);
  }
  if (trainFile == null || testFile == null) {
    System.err.println("usage: java edu.stanford.nlp.ie.ner.NGramStringClassifier -train trainFile -test testFile [-submit|-macro|-smooth sigma|...]");
    System.exit(0);
  }
  for (Iterator<String> gI=gazettes.iterator(); gI.hasNext(); ) {
    String gazetteFile=gI.next();
    readGazette(new BufferedReader(new FileReader(gazetteFile)));
  }
  if (useKnownLC) {
    mineLCWords(readLines(new BufferedReader(new FileReader(trainFile))));
    mineLCWords(readLines(new BufferedReader(new FileReader(testFile))));
  }
  List<Datum<String,String>> train=readExamples(new BufferedReader(new FileReader(trainFile)));
  Reference<List<Datum<String,String>>> ref=new WeakReference<List<Datum<String,String>>>(train);
  train=null;
  LinearClassifier<String,String> classifier=makeClassifier(ref);
  System.err.println("Built the following classifier: " + classifier);
  if (selfTest) {
    List<Datum<String,String>> test=readExamples(new BufferedReader(new FileReader(testFile)));
    List<String> trueLabels=toLabels(test);
    List<String> guessLabels=test(classifier,test);
    display(guessLabels,trueLabels);
  }
 else {
    if (!useSequences) {
      readAndTestExamples(classifier,new BufferedReader(new FileReader(testFile)));
    }
 else {
      readAndTestExampleSeq(classifier,new BufferedReader(new FileReader(testFile)));
    }
  }
}
