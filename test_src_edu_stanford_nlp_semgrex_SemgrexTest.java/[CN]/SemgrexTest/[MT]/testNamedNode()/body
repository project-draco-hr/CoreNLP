{
  SemanticGraph graph=makeComplicatedGraph();
  runTest("{} >dobj ({} >expl {})",graph,"A");
  SemgrexPattern pattern=SemgrexPattern.compile("{} >dobj ({} >expl {}=foo)");
  SemgrexMatcher matcher=pattern.matcher(graph);
  assertTrue(matcher.find());
  assertEquals(1,matcher.getNodeNames().size());
  assertEquals("E",matcher.getNode("foo").toString());
  assertEquals("A",matcher.getMatch().toString());
  assertFalse(matcher.find());
  pattern=SemgrexPattern.compile("{} >dobj ({} >expl {}=foo) >mod {}");
  matcher=pattern.matcher(graph);
  assertTrue(matcher.find());
  assertEquals(1,matcher.getNodeNames().size());
  assertEquals("E",matcher.getNode("foo").toString());
  assertEquals("A",matcher.getMatch().toString());
  assertFalse(matcher.find());
  pattern=SemgrexPattern.compile("{} >dobj ({} >expl {}=foo) >mod ({} >mark {})");
  matcher=pattern.matcher(graph);
  assertTrue(matcher.find());
  assertEquals(1,matcher.getNodeNames().size());
  assertEquals("E",matcher.getNode("foo").toString());
  assertEquals("A",matcher.getMatch().toString());
  assertFalse(matcher.find());
  pattern=SemgrexPattern.compile("{} >dobj ({} >expl {}=foo) >mod ({} > {})");
  matcher=pattern.matcher(graph);
  assertTrue(matcher.find());
  assertEquals(1,matcher.getNodeNames().size());
  assertEquals("E",matcher.getNode("foo").toString());
  assertEquals("A",matcher.getMatch().toString());
  assertFalse(matcher.find());
  pattern=SemgrexPattern.compile("{} >dobj ({} >expl {}=foo) >mod ({} > {}=foo)");
  matcher=pattern.matcher(graph);
  assertTrue(matcher.find());
  assertEquals(1,matcher.getNodeNames().size());
  assertEquals("E",matcher.getNode("foo").toString());
  assertEquals("A",matcher.getMatch().toString());
  assertFalse(matcher.find());
  pattern=SemgrexPattern.compile("{} >dobj ({} >expl {}=foo) >mod ({}=foo > {})");
  matcher=pattern.matcher(graph);
  assertFalse(matcher.find());
}
