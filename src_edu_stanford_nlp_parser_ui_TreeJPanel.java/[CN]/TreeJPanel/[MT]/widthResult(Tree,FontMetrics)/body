{
  if (tree == null) {
    return new WidthResult(0.0,0.0,0.0,0.0);
  }
  double local=fM.stringWidth(nodeToString(tree));
  if (tree.isLeaf()) {
    return new WidthResult(local,0.0,local / 2.0,0.0);
  }
  double sub=0.0;
  double nodeCenter=0.0;
  for (int i=0, numKids=tree.numChildren(); i < numKids; i++) {
    WidthResult subWR=widthResult(tree.getChild(i),fM);
    if (i == 0) {
      nodeCenter+=(sub + subWR.nodeCenter) / 2.0;
    }
    if (i == numKids - 1) {
      nodeCenter+=(sub + subWR.nodeCenter) / 2.0;
    }
    sub+=subWR.width;
    if (i < numKids - 1) {
      sub+=sisterSkip * fM.stringWidth(" ");
    }
  }
  double localLeft=local / 2.0;
  double subLeft=nodeCenter;
  double totalLeft=Math.max(localLeft,subLeft);
  double localRight=local / 2.0;
  double subRight=sub - nodeCenter;
  double totalRight=Math.max(localRight,subRight);
  return new WidthResult(totalLeft + totalRight,totalLeft - localLeft,nodeCenter + totalLeft - subLeft,totalLeft - subLeft);
}
