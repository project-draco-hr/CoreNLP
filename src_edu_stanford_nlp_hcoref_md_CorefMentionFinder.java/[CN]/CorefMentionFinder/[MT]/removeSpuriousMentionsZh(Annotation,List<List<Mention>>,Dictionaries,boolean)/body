{
  List<CoreMap> sentences=doc.get(CoreAnnotations.SentencesAnnotation.class);
  for (int i=0, sz=predictedMentions.size(); i < sz; i++) {
    List<Mention> mentions=predictedMentions.get(i);
    List<CoreLabel> sent=sentences.get(i).get(CoreAnnotations.TokensAnnotation.class);
    Set<Mention> remove=Generics.newHashSet();
    for (    Mention m : mentions) {
      if (m.headWord.ner().matches("PERCENT|MONEY|QUANTITY|CARDINAL")) {
        remove.add(m);
        if (VERBOSE)         log.info("MENTION FILTERING number NER: " + m.spanToString());
      }
 else       if (m.originalSpan.size() == 1 && m.headWord.tag().equals("CD")) {
        remove.add(m);
        if (VERBOSE)         log.info("MENTION FILTERING number: " + m.spanToString());
      }
 else       if (dict.removeWords.contains(m.spanToString())) {
        remove.add(m);
        if (VERBOSE)         log.info("MENTION FILTERING removeWord: " + m.spanToString());
      }
 else       if (mentionContainsRemoveChars(m,dict.removeChars)) {
        remove.add(m);
        if (VERBOSE)         log.info("MENTION FILTERING removeChars: " + m.spanToString());
      }
 else       if (m.headWord.tag().equals("PU")) {
        remove.add(m);
        if (VERBOSE)         log.info("MENTION FILTERING Punctuation only mention: " + m.spanToString());
      }
 else       if (mentionIsDemonym(m,dict.countries)) {
        remove.add(m);
        if (VERBOSE)         log.info("MENTION FILTERING Removed demonym: " + m.spanToString());
      }
 else       if (m.spanToString().equals("??????") && m.startIndex > 0 && sent.get(m.startIndex - 1).word().endsWith("???")) {
        remove.add(m);
        if (VERBOSE)         log.info("MENTION FILTERING Removed meiyou: " + m.spanToString());
      }
 else       if (mentionIsRangren(m,sent)) {
        remove.add(m);
        if (VERBOSE)         log.info("MENTION FILTERING Removed rangren: " + m.spanToString());
      }
 else       if (m.spanToString().equals("???") && m.startIndex < sent.size() - 1 && sent.get(m.startIndex + 1).word().startsWith("??????")) {
        remove.add(m);
        if (VERBOSE)         log.info("MENTION FILTERING Removed nizhidao: " + m.spanToString());
      }
 else       if (m.spanToString().endsWith("???")) {
        remove.add(m);
        if (VERBOSE)         log.info("MENTION FILTERING Removed de ending mention: " + m.spanToString());
      }
    }
    if (removeNested) {
      for (      Mention m1 : mentions) {
        for (        Mention m2 : mentions) {
          if (m1 == m2 || remove.contains(m1) || remove.contains(m2))           continue;
          if (m1.sentNum == m2.sentNum && m1.headWord == m2.headWord && m2.insideIn(m1)) {
            if (m2.endIndex < sent.size() && (sent.get(m2.endIndex).get(CoreAnnotations.PartOfSpeechAnnotation.class).equals(",") || sent.get(m2.endIndex).get(CoreAnnotations.PartOfSpeechAnnotation.class).equals("CC"))) {
              continue;
            }
            remove.add(m2);
          }
        }
      }
    }
    mentions.removeAll(remove);
  }
}
