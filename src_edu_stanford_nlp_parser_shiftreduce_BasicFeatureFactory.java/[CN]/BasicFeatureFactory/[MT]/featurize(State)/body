{
  Set<String> features=Generics.newHashSet();
  final TreeShapedStack<Tree> stack=state.stack;
  final List<Tree> sentence=state.sentence;
  final int tokenPosition=state.tokenPosition;
  CoreLabel s0Label=getStackLabel(stack,0);
  CoreLabel s1Label=getStackLabel(stack,1);
  CoreLabel s2Label=getStackLabel(stack,2);
  CoreLabel s3Label=getStackLabel(stack,3);
  CoreLabel s0LLabel=getStackLabel(stack,0,Transition.LEFT);
  CoreLabel s0RLabel=getStackLabel(stack,0,Transition.RIGHT);
  CoreLabel s0ULabel=getStackLabel(stack,0,Transition.UNARY);
  CoreLabel s1LLabel=getStackLabel(stack,1,Transition.LEFT);
  CoreLabel s1RLabel=getStackLabel(stack,1,Transition.RIGHT);
  CoreLabel s1ULabel=getStackLabel(stack,1,Transition.UNARY);
  CoreLabel q0Label=getQueueLabel(sentence,tokenPosition,0);
  CoreLabel q1Label=getQueueLabel(sentence,tokenPosition,1);
  CoreLabel q2Label=getQueueLabel(sentence,tokenPosition,2);
  CoreLabel q3Label=getQueueLabel(sentence,tokenPosition,3);
  CoreLabel qP1Label=getQueueLabel(sentence,tokenPosition,-1);
  CoreLabel qP2Label=getQueueLabel(sentence,tokenPosition,-2);
  addUnaryStackFeatures(features,s0Label,"S0C-","S0WT-","S0T-","S0WC-","S0TC-");
  addUnaryStackFeatures(features,s1Label,"S1C-","S1WT-","S1T-","S1WC-","S1TC-");
  addUnaryStackFeatures(features,s2Label,"S2C-","S2WT-","S2T-","S2WC-","S2TC-");
  addUnaryStackFeatures(features,s3Label,"S3C-","S3WT-","S3T-","S3WC-","S3TC-");
  addUnaryStackFeatures(features,s0LLabel,"S0LC-","S0LWT-","S0LT-","S0LWC-","S0LTC-");
  addUnaryStackFeatures(features,s0RLabel,"S0RC-","S0RWT-","S0RT-","S0RWC-","S0RTC-");
  addUnaryStackFeatures(features,s0ULabel,"S0UC-","S0UWT-","S0UT-","S0UWC-","S0UTC-");
  addUnaryStackFeatures(features,s1LLabel,"S1LC-","S1LWT-","S1LT-","S1LWC-","S1LTC-");
  addUnaryStackFeatures(features,s1RLabel,"S1RC-","S1RWT-","S1RT-","S1RWC-","S1RTC-");
  addUnaryStackFeatures(features,s1ULabel,"S1UC-","S1UWT-","S1UT-","S1UWC-","S1UTC-");
  addUnaryQueueFeatures(features,q0Label,"Q0WT-");
  addUnaryQueueFeatures(features,q1Label,"Q1WT-");
  addUnaryQueueFeatures(features,q2Label,"Q2WT-");
  addUnaryQueueFeatures(features,q3Label,"Q3WT-");
  addUnaryQueueFeatures(features,qP1Label,"QP1WT-");
  addUnaryQueueFeatures(features,qP2Label,"QP2WT-");
  addBinaryFeature(features,"S0WS1W-",s0Label,FeatureComponent.HEADWORD,s1Label,FeatureComponent.HEADWORD);
  addBinaryFeature(features,"S0WS1C-",s0Label,FeatureComponent.HEADWORD,s1Label,FeatureComponent.VALUE);
  addBinaryFeature(features,"S0CS1W-",s0Label,FeatureComponent.VALUE,s1Label,FeatureComponent.HEADWORD);
  addBinaryFeature(features,"S0CS1C-",s0Label,FeatureComponent.VALUE,s1Label,FeatureComponent.VALUE);
  addBinaryFeature(features,"S0WQ0W-",s0Label,FeatureComponent.HEADWORD,q0Label,FeatureComponent.HEADWORD);
  addBinaryFeature(features,"S0WQ0T-",s0Label,FeatureComponent.HEADWORD,q0Label,FeatureComponent.HEADTAG);
  addBinaryFeature(features,"S0CQ0W-",s0Label,FeatureComponent.VALUE,q0Label,FeatureComponent.HEADWORD);
  addBinaryFeature(features,"S0CQ0T-",s0Label,FeatureComponent.VALUE,q0Label,FeatureComponent.HEADTAG);
  addBinaryFeature(features,"Q0WQ1W-",q0Label,FeatureComponent.HEADWORD,q1Label,FeatureComponent.HEADWORD);
  addBinaryFeature(features,"Q0WQ1T-",q0Label,FeatureComponent.HEADWORD,q1Label,FeatureComponent.HEADTAG);
  addBinaryFeature(features,"Q0TQ1W-",q0Label,FeatureComponent.HEADTAG,q1Label,FeatureComponent.HEADWORD);
  addBinaryFeature(features,"Q0TQ1T-",q0Label,FeatureComponent.HEADTAG,q1Label,FeatureComponent.HEADTAG);
  addBinaryFeature(features,"S1WQ0W-",s1Label,FeatureComponent.HEADWORD,q0Label,FeatureComponent.HEADWORD);
  addBinaryFeature(features,"S1WQ0T-",s1Label,FeatureComponent.HEADWORD,q0Label,FeatureComponent.HEADTAG);
  addBinaryFeature(features,"S1CQ0W-",s1Label,FeatureComponent.VALUE,q0Label,FeatureComponent.HEADWORD);
  addBinaryFeature(features,"S1CQ0T-",s1Label,FeatureComponent.VALUE,q0Label,FeatureComponent.HEADTAG);
  addTrigramFeature(features,"S0cS1cS2c-",s0Label,FeatureComponent.VALUE,s1Label,FeatureComponent.VALUE,s2Label,FeatureComponent.VALUE);
  addTrigramFeature(features,"S0wS1cS2c-",s0Label,FeatureComponent.HEADWORD,s1Label,FeatureComponent.VALUE,s2Label,FeatureComponent.VALUE);
  addTrigramFeature(features,"S0cS1wS2c-",s0Label,FeatureComponent.VALUE,s1Label,FeatureComponent.HEADWORD,s2Label,FeatureComponent.VALUE);
  addTrigramFeature(features,"S0cS1cS2w-",s0Label,FeatureComponent.VALUE,s1Label,FeatureComponent.VALUE,s2Label,FeatureComponent.HEADWORD);
  addTrigramFeature(features,"S0cS1cQ0t-",s0Label,FeatureComponent.VALUE,s1Label,FeatureComponent.VALUE,q0Label,FeatureComponent.HEADTAG);
  addTrigramFeature(features,"S0wS1cQ0t-",s0Label,FeatureComponent.HEADWORD,s1Label,FeatureComponent.VALUE,q0Label,FeatureComponent.HEADTAG);
  addTrigramFeature(features,"S0cS1wQ0t-",s0Label,FeatureComponent.VALUE,s1Label,FeatureComponent.HEADWORD,q0Label,FeatureComponent.HEADTAG);
  addTrigramFeature(features,"S0cS1cQ0w-",s0Label,FeatureComponent.VALUE,s1Label,FeatureComponent.VALUE,q0Label,FeatureComponent.HEADWORD);
  addPositionFeatures(features,state);
  State.HeadPosition s0Separator=getSeparator(state.separators,0);
  State.HeadPosition s1Separator=getSeparator(state.separators,1);
  addSeparatorFeatures(features,s0Label,s1Label,s0Separator,s1Separator);
  return features;
}
