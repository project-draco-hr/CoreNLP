{
  if (flags == null) {
    return;
  }
  if (flags.filename) {
    cWord=IOUtils.slurpFileNoExceptions(cWord);
  }
  if (flags.lowercase) {
    cWord=cWord.toLowerCase(Locale.ENGLISH);
  }
  if (flags.useString) {
    addFeature(featuresC,"S-" + cWord,DEFAULT_VALUE);
  }
  if (flags.binnedLengths != null) {
    int len=cWord.length();
    String featureName=null;
    for (int i=0; i <= flags.binnedLengths.length; i++) {
      if (i == flags.binnedLengths.length || len <= flags.binnedLengths[i]) {
        featureName="Len-" + ((i == 0) ? 0 : (flags.binnedLengths[i - 1] + 1)) + '-'+ ((i == flags.binnedLengths.length) ? "Inf" : Integer.toString(flags.binnedLengths[i]));
        if (flags.binnedLengthsCounter != null) {
          flags.binnedLengthsCounter.incrementCount(featureName,goldAns);
        }
        break;
      }
    }
    addFeature(featuresC,featureName,DEFAULT_VALUE);
  }
  if (flags.binnedValues != null) {
    double val=flags.binnedValuesNaN;
    try {
      val=Double.parseDouble(cWord);
    }
 catch (    NumberFormatException nfe) {
    }
    String featureName=null;
    for (int i=0; i <= flags.binnedValues.length; i++) {
      if (i == flags.binnedValues.length || val <= flags.binnedValues[i]) {
        featureName="Val-(" + ((i == 0) ? "-Inf" : Double.toString(flags.binnedValues[i - 1])) + ','+ ((i == flags.binnedValues.length) ? "Inf" : Double.toString(flags.binnedValues[i]))+ ']';
        if (flags.binnedValuesCounter != null) {
          flags.binnedValuesCounter.incrementCount(featureName,goldAns);
        }
        break;
      }
    }
    addFeature(featuresC,featureName,DEFAULT_VALUE);
  }
  if (flags.countChars != null) {
    int[] cnts=new int[flags.countChars.length];
    for (int i=0; i < cnts.length; i++) {
      cnts[i]=0;
    }
    for (int i=0, len=cWord.length(); i < len; i++) {
      char ch=cWord.charAt(i);
      for (int j=0; j < cnts.length; j++) {
        if (ch == flags.countChars[j]) {
          cnts[j]++;
        }
      }
    }
    for (int j=0; j < cnts.length; j++) {
      String featureName=null;
      for (int i=0; i <= flags.countCharsBins.length; i++) {
        if (i == flags.countCharsBins.length || cnts[j] <= flags.countCharsBins[i]) {
          featureName="Char-" + flags.countChars[j] + '-'+ ((i == 0) ? 0 : (flags.countCharsBins[i - 1] + 1))+ '-'+ ((i == flags.countCharsBins.length) ? "Inf" : Integer.toString(flags.countCharsBins[i]));
          break;
        }
      }
      addFeature(featuresC,featureName,DEFAULT_VALUE);
    }
  }
  if (flags.splitWordsPattern != null || flags.splitWordsTokenizerPattern != null || flags.splitWordsWithPTBTokenizer) {
    String[] bits;
    if (flags.splitWordsTokenizerPattern != null) {
      bits=regexpTokenize(flags.splitWordsTokenizerPattern,flags.splitWordsIgnorePattern,cWord);
    }
 else     if (flags.splitWordsPattern != null) {
      bits=splitTokenize(flags.splitWordsPattern,flags.splitWordsIgnorePattern,cWord);
    }
 else {
      bits=ptbTokenize(cWord);
    }
    if (flags.showTokenization) {
      logger.info("Tokenization: " + Arrays.toString(bits));
    }
    if (flags.splitWordCount) {
      addFeature(featuresC,"SWNUM",bits.length);
    }
    if (flags.logSplitWordCount) {
      addFeature(featuresC,"LSWNUM",Math.log(bits.length));
    }
    if (flags.binnedSplitWordCounts != null) {
      String featureName=null;
      for (int i=0; i <= flags.binnedSplitWordCounts.length; i++) {
        if (i == flags.binnedSplitWordCounts.length || bits.length <= flags.binnedSplitWordCounts[i]) {
          featureName="SWNUMBIN-" + ((i == 0) ? 0 : (flags.binnedSplitWordCounts[i - 1] + 1)) + '-'+ ((i == flags.binnedSplitWordCounts.length) ? "Inf" : Integer.toString(flags.binnedSplitWordCounts[i]));
          break;
        }
      }
      addFeature(featuresC,featureName,DEFAULT_VALUE);
    }
    for (int i=0; i < bits.length; i++) {
      if (flags.useSplitWords) {
        addFeature(featuresC,"SW-" + bits[i],DEFAULT_VALUE);
      }
      if (flags.useLowercaseSplitWords) {
        addFeature(featuresC,"LSW-" + bits[i].toLowerCase(),DEFAULT_VALUE);
      }
      if (flags.useSplitWordPairs) {
        if (i + 1 < bits.length) {
          addFeature(featuresC,"SWP-" + bits[i] + '-'+ bits[i + 1],DEFAULT_VALUE);
        }
      }
      if (flags.useLowercaseSplitWordPairs) {
        if (i + 1 < bits.length) {
          addFeature(featuresC,"LSWP-" + bits[i].toLowerCase() + '-'+ bits[i + 1].toLowerCase(),DEFAULT_VALUE);
        }
      }
      if (flags.useAllSplitWordPairs) {
        for (int j=i + 1; j < bits.length; j++) {
          if (bits[i].compareTo(bits[j]) < 0) {
            addFeature(featuresC,"ASWP-" + bits[i] + '-'+ bits[j],DEFAULT_VALUE);
          }
 else {
            addFeature(featuresC,"ASWP-" + bits[j] + '-'+ bits[i],DEFAULT_VALUE);
          }
        }
      }
      if (flags.useAllSplitWordTriples) {
        for (int j=i + 1; j < bits.length; j++) {
          for (int k=j + 1; k < bits.length; k++) {
            String[] triple=new String[3];
            triple[0]=bits[i];
            triple[1]=bits[j];
            triple[2]=bits[k];
            Arrays.sort(triple);
            addFeature(featuresC,"ASWT-" + triple[0] + '-'+ triple[1]+ '-'+ triple[2],DEFAULT_VALUE);
          }
        }
      }
      if (flags.useSplitWordNGrams) {
        StringBuilder sb=new StringBuilder("SW#");
        for (int j=i; j < i + flags.minWordNGramLeng - 1 && j < bits.length; j++) {
          sb.append('-');
          sb.append(bits[j]);
        }
        int maxIndex=(flags.maxWordNGramLeng > 0) ? Math.min(bits.length,i + flags.maxWordNGramLeng) : bits.length;
        for (int j=i + flags.minWordNGramLeng - 1; j < maxIndex; j++) {
          if (flags.wordNGramBoundaryRegexp != null) {
            if (flags.wordNGramBoundaryPattern.matcher(bits[j]).matches()) {
              break;
            }
          }
          sb.append('-');
          sb.append(bits[j]);
          addFeature(featuresC,sb.toString(),DEFAULT_VALUE);
        }
      }
      if (flags.useSplitFirstLastWords) {
        if (i == 0) {
          addFeature(featuresC,"SFW-" + bits[i],DEFAULT_VALUE);
        }
 else         if (i == bits.length - 1) {
          addFeature(featuresC,"SLW-" + bits[i],DEFAULT_VALUE);
        }
      }
      if (flags.useLowercaseSplitFirstLastWords) {
        if (i == 0) {
          addFeature(featuresC,"LSFW-" + bits[i].toLowerCase(),DEFAULT_VALUE);
        }
 else         if (i == bits.length - 1) {
          addFeature(featuresC,"SLW-" + bits[i].toLowerCase(),DEFAULT_VALUE);
        }
      }
      if (flags.useSplitNGrams || flags.useSplitPrefixSuffixNGrams) {
        Collection<String> featureNames=makeNGramFeatures(bits[i],flags,true,"S#");
        for (        String featureName : featureNames)         addFeature(featuresC,featureName,DEFAULT_VALUE);
      }
      if (flags.splitWordShape > edu.stanford.nlp.process.WordShapeClassifier.NOWORDSHAPE) {
        String shape=edu.stanford.nlp.process.WordShapeClassifier.wordShape(bits[i],flags.splitWordShape);
        addFeature(featuresC,"SSHAPE-" + shape,DEFAULT_VALUE);
      }
    }
    if (flags.wordVectors != null) {
      double[] averages=null;
      for (      String bit : bits) {
        float[] wv=flags.wordVectors.get(bit);
        if (wv != null) {
          if (averages == null) {
            averages=new double[wv.length];
            for (int j=0; j < wv.length; j++) {
              averages[j]+=wv[j];
            }
          }
        }
      }
      if (averages != null) {
        for (int j=0; j < averages.length; j++) {
          averages[j]/=bits.length;
          addFeature(featuresC,"SWV-" + j,averages[j]);
        }
      }
    }
  }
  if (flags.wordShape > WordShapeClassifier.NOWORDSHAPE) {
    String shape=edu.stanford.nlp.process.WordShapeClassifier.wordShape(cWord,flags.wordShape);
    addFeature(featuresC,"SHAPE-" + shape,DEFAULT_VALUE);
  }
  if (flags.useNGrams || flags.usePrefixSuffixNGrams) {
    Collection<String> featureNames=makeNGramFeatures(cWord,flags,false,"#");
    for (    String featureName : featureNames)     addFeature(featuresC,featureName,DEFAULT_VALUE);
  }
  if (flags.isRealValued || flags.logTransform || flags.logitTransform|| flags.sqrtTransform) {
    addFeatureValue(cWord,flags,featuresC);
  }
}
