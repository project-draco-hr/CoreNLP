{
  if (globalFlags.printFeatures != null) {
    newFeaturePrinter(globalFlags.printFeatures,"test");
  }
  Counter<String> contingency=new ClassicCounter<String>();
  Pair<GeneralDataset<String,String>,List<String[]>> testInfo=readTestExamples(filename);
  GeneralDataset<String,String> test=testInfo.first();
  List<String[]> lineInfos=testInfo.second();
  for (int i=0; i < test.size; i++) {
    String[] simpleLineInfo=lineInfos.get(i);
    Datum<String,String> d;
    if (globalFlags.usesRealValues) {
      d=test.getRVFDatum(i);
    }
 else {
      d=test.getDatum(i);
    }
    if (globalFlags.justify) {
      System.err.println("### Test item " + i);
      for (      String field : simpleLineInfo) {
        System.err.print(field);
        System.err.print('\t');
      }
      System.err.println();
      if (cl instanceof LinearClassifier) {
        ((LinearClassifier<String,String>)cl).justificationOf(d);
      }
      System.err.println();
    }
    Counter<String> logScores;
    if (globalFlags.usesRealValues) {
      logScores=ErasureUtils.<RVFClassifier<String,String>>uncheckedCast(cl).scoresOf((RVFDatum<String,String>)d);
    }
 else {
      logScores=cl.scoresOf(d);
    }
    Distribution<String> dist=Distribution.distributionFromLogisticCounter(logScores);
    String answer=null;
    if (globalFlags.biasedHyperplane != null) {
      List<String> biggestKeys=new ArrayList<String>(logScores.keySet());
      Collections.sort(biggestKeys,Counters.toComparatorDescending(logScores));
      for (      String key : biggestKeys) {
        double prob=dist.probabilityOf(key);
        double threshold=globalFlags.biasedHyperplane.getCount(key);
        if (prob > threshold) {
          answer=key;
          break;
        }
      }
    }
    if (answer == null) {
      if (globalFlags.usesRealValues) {
        answer=ErasureUtils.<RVFClassifier<String,String>>uncheckedCast(cl).classOf((RVFDatum<String,String>)d);
      }
 else {
        answer=cl.classOf(d);
      }
    }
    double sim=0.0;
    if (globalFlags.rankingScoreColumn >= 0) {
      try {
        sim=Double.parseDouble(simpleLineInfo[globalFlags.rankingScoreColumn]);
      }
 catch (      NumberFormatException nfe) {
      }
    }
    writeAnswer(simpleLineInfo,answer,dist,contingency,cl,sim);
  }
  if (globalFlags.groupingColumn >= 0 && globalFlags.rankingAccuracyClass != null)   finishRanking(contingency,bestSim);
  if (globalFlags.printFeatures != null) {
    closeFeaturePrinter();
  }
  writeResultsSummary(test.size,contingency,cl.labels());
}
