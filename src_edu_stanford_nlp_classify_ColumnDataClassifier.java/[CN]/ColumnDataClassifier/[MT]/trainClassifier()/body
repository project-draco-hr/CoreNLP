{
  Pair<GeneralDataset<String,String>,List<String[]>> dataInfo=readAndReturnTrainingExamples(Flags.trainFile);
  GeneralDataset<String,String> train=dataInfo.first();
  List<String[]> lineInfos=dataInfo.second();
  if (globalFlags.shuffleTrainingData) {
    long seed;
    if (globalFlags.shuffleSeed != 0) {
      seed=globalFlags.shuffleSeed;
    }
 else {
      seed=System.nanoTime();
    }
    train.shuffleWithSideInformation(seed,lineInfos);
  }
  for (int i=0; i < flags.length; i++) {
    if (flags[i] != null && flags[i].binnedValuesCounter != null) {
      System.err.println("BinnedValuesStatistics for column " + i);
      System.err.println(flags[i].binnedValuesCounter.toString());
    }
  }
  for (int i=0; i < flags.length; i++) {
    if (flags[i] != null && flags[i].binnedLengthsCounter != null) {
      System.err.println("BinnedLengthsStatistics for column " + i);
      System.err.println(flags[i].binnedLengthsCounter.toString());
    }
  }
  if (Flags.printSVMLightFormatTo != null) {
    PrintWriter pw=IOUtils.getPrintWriter(Flags.printSVMLightFormatTo,Flags.encoding);
    train.printSVMLightFormat(pw);
    IOUtils.closeIgnoringExceptions(pw);
    train.featureIndex().saveToFilename(Flags.printSVMLightFormatTo + ".featureIndex");
    train.labelIndex().saveToFilename(Flags.printSVMLightFormatTo + ".labelIndex");
  }
  if (globalFlags.crossValidationFolds > 1) {
    crossValidate(train,lineInfos);
  }
  if (globalFlags.exitAfterTrainingFeaturization) {
    return false;
  }
  classifier=makeClassifier(train);
  printClassifier(classifier);
  String serializeTo=Flags.serializeTo;
  if (serializeTo != null) {
    System.err.println("Serializing classifier to " + serializeTo + "...");
    ObjectOutputStream oos=IOUtils.writeStreamFromString(serializeTo);
    oos.writeObject(classifier);
    String testFile=globalFlags.testFile;
    globalFlags.testFile=null;
    oos.writeObject(flags);
    globalFlags.testFile=testFile;
    oos.close();
    System.err.println("Done.");
  }
  return true;
}
