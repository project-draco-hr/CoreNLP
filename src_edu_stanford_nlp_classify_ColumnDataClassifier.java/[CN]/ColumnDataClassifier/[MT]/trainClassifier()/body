{
  String trainFile=Flags.trainFile;
  String testFile=globalFlags.testFile;
  String serializeTo=Flags.serializeTo;
  if ((testFile == null && serializeTo == null) || trainFile == null) {
    System.err.println("usage: java edu.stanford.nlp.classify.ColumnDataClassifier -prop propFile");
    System.err.println("  and/or: -trainFile trainFile -testFile testFile|-serializeTo modelFile [-useNGrams|-sigma sigma|...]");
    return false;
  }
  GeneralDataset<String,String> train=readTrainingExamples(trainFile);
  for (int i=0; i < flags.length; i++) {
    if (flags[i] != null && flags[i].binnedValuesCounter != null) {
      System.err.println("BinnedValuesStatistics for column " + i);
      System.err.println(flags[i].binnedValuesCounter.toString());
    }
  }
  for (int i=0; i < flags.length; i++) {
    if (flags[i] != null && flags[i].binnedLengthsCounter != null) {
      System.err.println("BinnedLengthsStatistics for column " + i);
      System.err.println(flags[i].binnedLengthsCounter.toString());
    }
  }
  if (globalFlags.exitAfterTrainingFeaturization) {
    return false;
  }
  classifier=makeClassifier(train);
  String classString=null;
  if (classifier instanceof LinearClassifier<?,?>) {
    classString=((LinearClassifier<?,?>)classifier).toString(globalFlags.printClassifier,globalFlags.printClassifierParam);
  }
 else   if (classifier instanceof LogisticClassifier<?,?>) {
    classString=classifier.toString();
  }
  if (Flags.printTo != null) {
    PrintWriter fw=null;
    try {
      fw=IOUtils.getPrintWriter(Flags.printTo,Flags.encoding);
      fw.write(classString);
      fw.println();
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
 finally {
      IOUtils.closeIgnoringExceptions(fw);
    }
    System.err.println("Built classifier described in file " + Flags.printTo);
  }
 else {
    System.err.print("Built this classifier: ");
    System.err.println(classString);
  }
  if (serializeTo != null) {
    System.err.println("Serializing classifier to " + serializeTo + "...");
    ObjectOutputStream oos=new ObjectOutputStream(new BufferedOutputStream(IOUtils.getFileOutputStream(serializeTo)));
    oos.writeObject(classifier);
    globalFlags.testFile=null;
    oos.writeObject(flags);
    globalFlags.testFile=testFile;
    oos.close();
    System.err.println("Done.");
  }
  return true;
}
