{
  assert(globalFlags.useAdaptL1 && globalFlags.limitFeatures > 0);
  Classifier<String,String> lc=null;
  double l1reg=globalFlags.l1reg;
  double l1regmax=globalFlags.l1regmax;
  double l1regmin=globalFlags.l1regmin;
  if (globalFlags.l1reg <= 0.0) {
    logger.info("WARNING: useAdaptL1 set and limitFeatures to " + globalFlags.limitFeatures + ", but invalid value of l1reg="+ globalFlags.l1reg+ ", defaulting to "+ globalFlags.l1regmax);
    l1reg=l1regmax;
  }
 else {
    logger.info("TRAIN: useAdaptL1 set and limitFeatures to " + globalFlags.limitFeatures + ", l1reg="+ globalFlags.l1reg+ ", l1regmax="+ globalFlags.l1regmax+ ", l1regmin="+ globalFlags.l1regmin);
  }
  Set<String> limitFeatureLabels=null;
  if (globalFlags.limitFeaturesLabels != null) {
    String[] labels=globalFlags.limitFeaturesLabels.split(",");
    limitFeatureLabels=Generics.newHashSet();
    for (    String label : labels) {
      limitFeatureLabels.add(label.trim());
    }
  }
  double l1regtop=l1regmax;
  double l1regbottom=l1regmin;
  int limitFeatureTol=5;
  double l1regminchange=0.05;
  while (true) {
    logger.info("Training: l1reg=" + l1reg + ", threshold="+ globalFlags.featureWeightThreshold+ ", target="+ globalFlags.limitFeatures);
    LinearClassifierFactory<String,String> lcf;
    Minimizer<DiffFunction> minim=ReflectionLoading.loadByReflection("edu.stanford.nlp.optimization.OWLQNMinimizer",l1reg);
    lcf=new LinearClassifierFactory<>(minim,globalFlags.tolerance,globalFlags.useSum,globalFlags.prior,globalFlags.sigma,globalFlags.epsilon);
    int featureCount=-1;
    try {
      LinearClassifier<String,String> c=lcf.trainClassifier(train);
      lc=c;
      featureCount=c.getFeatureCount(limitFeatureLabels,globalFlags.featureWeightThreshold,false);
      logger.info("Training Done: l1reg=" + l1reg + ", threshold="+ globalFlags.featureWeightThreshold+ ", features="+ featureCount+ ", target="+ globalFlags.limitFeatures);
      List<Triple<String,String,Double>> topFeatures=c.getTopFeatures(limitFeatureLabels,globalFlags.featureWeightThreshold,false,globalFlags.limitFeatures,true);
      String classifierDesc=c.topFeaturesToString(topFeatures);
      logger.info("Printing top " + globalFlags.limitFeatures + " features with weights above "+ globalFlags.featureWeightThreshold);
      if (globalFlags.limitFeaturesLabels != null) {
        logger.info("  Limited to labels: " + globalFlags.limitFeaturesLabels);
      }
      logger.info(classifierDesc);
    }
 catch (    RuntimeException ex) {
      if (ex.getMessage() != null && ex.getMessage().startsWith("L-BFGS chose a non-descent direction")) {
        logger.info("Error in optimization, will try again with different l1reg");
        ex.printStackTrace(System.err);
      }
 else {
        throw ex;
      }
    }
    if (featureCount < 0 || featureCount < globalFlags.limitFeatures - limitFeatureTol) {
      l1regtop=l1reg;
      l1reg=0.5 * (l1reg + l1regbottom);
      if (l1regtop - l1reg < l1regminchange) {
        logger.info("Stopping: old l1reg  " + l1regtop + "- new l1reg "+ l1reg+ ", difference less than "+ l1regminchange);
        break;
      }
    }
 else     if (featureCount > globalFlags.limitFeatures + limitFeatureTol) {
      l1regbottom=l1reg;
      l1reg=0.5 * (l1reg + l1regtop);
      if (l1reg - l1regbottom < l1regminchange) {
        logger.info("Stopping: new l1reg  " + l1reg + "- old l1reg "+ l1regbottom+ ", difference less than "+ l1regminchange);
        break;
      }
    }
 else {
      logger.info("Stopping: # of features within " + limitFeatureTol + " of target");
      break;
    }
  }
  globalFlags.l1reg=l1reg;
  return lc;
}
