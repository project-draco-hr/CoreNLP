{
  Classifier<String,String> lc;
  if (globalFlags.useClassifierFactory != null) {
    ClassifierFactory<String,String,Classifier<String,String>> cf;
    if (globalFlags.classifierFactoryArgs != null) {
      cf=ReflectionLoading.loadByReflection(globalFlags.useClassifierFactory,globalFlags.classifierFactoryArgs);
    }
 else {
      cf=ReflectionLoading.loadByReflection(globalFlags.useClassifierFactory);
    }
    lc=cf.trainClassifier(train);
  }
 else   if (globalFlags.useNB) {
    double sigma=(globalFlags.prior == 0) ? 0.0 : globalFlags.sigma;
    lc=new NBLinearClassifierFactory<String,String>(sigma,globalFlags.useClassFeature).trainClassifier(train);
  }
 else   if (globalFlags.useBinary) {
    LogisticClassifierFactory<String,String> lcf=new LogisticClassifierFactory<>();
    LogPrior prior=new LogPrior(globalFlags.prior,globalFlags.sigma,globalFlags.epsilon);
    lc=lcf.trainClassifier(train,globalFlags.l1reg,globalFlags.tolerance,prior,globalFlags.biased);
  }
 else   if (globalFlags.biased) {
    LogisticClassifierFactory<String,String> lcf=new LogisticClassifierFactory<>();
    LogPrior prior=new LogPrior(globalFlags.prior,globalFlags.sigma,globalFlags.epsilon);
    lc=lcf.trainClassifier(train,prior,true);
  }
 else   if (globalFlags.useAdaptL1 && globalFlags.limitFeatures > 0) {
    lc=makeClassifierAdaptL1(train);
  }
 else {
    LinearClassifierFactory<String,String> lcf;
    if (globalFlags.l1reg > 0.0) {
      Minimizer<DiffFunction> minim=ReflectionLoading.loadByReflection("edu.stanford.nlp.optimization.OWLQNMinimizer",globalFlags.l1reg);
      lcf=new LinearClassifierFactory<>(minim,globalFlags.tolerance,globalFlags.useSum,globalFlags.prior,globalFlags.sigma,globalFlags.epsilon);
    }
 else {
      lcf=new LinearClassifierFactory<>(globalFlags.tolerance,globalFlags.useSum,globalFlags.prior,globalFlags.sigma,globalFlags.epsilon,globalFlags.QNsize);
    }
    lcf.setVerbose(globalFlags.verboseOptimization);
    if (!globalFlags.useQN) {
      lcf.useConjugateGradientAscent();
    }
    lc=lcf.trainClassifier(train);
  }
  return lc;
}
