{
  final int numFolds=globalFlags.crossValidationFolds;
  double accuracySum=0.0;
  double macroF1Sum=0.0;
  for (int fold=0; fold < numFolds; fold++) {
    logger.info("");
    logger.info("### Fold " + fold);
    Pair<GeneralDataset<String,String>,GeneralDataset<String,String>> split=dataset.splitOutFold(fold,numFolds);
    GeneralDataset<String,String> devTrain=split.first();
    GeneralDataset<String,String> devTest=split.second();
    Classifier<String,String> cl=makeClassifier(devTrain);
    printClassifier(cl);
    int normalFoldSize=lineInfos.size() / numFolds;
    int start=normalFoldSize * fold;
    int end=start + normalFoldSize;
    if (fold == (numFolds - 1)) {
      end=lineInfos.size();
    }
    List<String[]> devTestLineInfos=lineInfos.subList(start,end);
    Pair<Double,Double> accuracies=testExamples(cl,devTest,devTestLineInfos);
    accuracySum+=accuracies.first();
    macroF1Sum+=accuracies.second();
  }
  double averageAccuracy=accuracySum / numFolds;
  double averageMacroF1=macroF1Sum / numFolds;
  NumberFormat nf2=new DecimalFormat("0.00000");
  logger.info("Average accuracy/micro-averaged F1: " + nf2.format(averageAccuracy));
  logger.info("Average macro-averaged F1: " + nf2.format(averageMacroF1));
  logger.info("");
  return new Pair<>(averageAccuracy,averageMacroF1);
}
