{
  TwoDimensionalMap<String,String,String> map=new TwoDimensionalMap<String,String,String>(MapFactory.<String,Map<String,String>>treeMapFactory(),MapFactory.<String,String>treeMapFactory());
  map.put("A","B","C");
  map.put("Z","Y","X");
  map.put("Z","B","C");
  map.put("A","Y","X");
  map.put("D","D","D");
  map.put("D","F","E");
  map.put("K","G","B");
  map.put("G","F","E");
  map.put("D","D","E");
  assertEquals(8,map.size());
  Iterator<TwoDimensionalMap.Entry<String,String,String>> mapIterator=map.iterator();
  TwoDimensionalMap.Entry<String,String,String> entry=mapIterator.next();
  assertEquals("A",entry.getFirstKey());
  assertEquals("B",entry.getSecondKey());
  assertEquals("C",entry.getValue());
  entry=mapIterator.next();
  assertEquals("A",entry.getFirstKey());
  assertEquals("Y",entry.getSecondKey());
  assertEquals("X",entry.getValue());
  entry=mapIterator.next();
  assertEquals("D",entry.getFirstKey());
  assertEquals("D",entry.getSecondKey());
  assertEquals("E",entry.getValue());
  entry=mapIterator.next();
  assertEquals("D",entry.getFirstKey());
  assertEquals("F",entry.getSecondKey());
  assertEquals("E",entry.getValue());
  entry=mapIterator.next();
  assertEquals("G",entry.getFirstKey());
  assertEquals("F",entry.getSecondKey());
  assertEquals("E",entry.getValue());
  entry=mapIterator.next();
  assertEquals("K",entry.getFirstKey());
  assertEquals("G",entry.getSecondKey());
  assertEquals("B",entry.getValue());
  entry=mapIterator.next();
  assertEquals("Z",entry.getFirstKey());
  assertEquals("B",entry.getSecondKey());
  assertEquals("C",entry.getValue());
  entry=mapIterator.next();
  assertEquals("Z",entry.getFirstKey());
  assertEquals("Y",entry.getSecondKey());
  assertEquals("X",entry.getValue());
  assertFalse(mapIterator.hasNext());
  Iterator<String> valueIterator=map.valueIterator();
  assertTrue(valueIterator.hasNext());
  assertEquals("C",valueIterator.next());
  assertEquals("X",valueIterator.next());
  assertEquals("E",valueIterator.next());
  assertEquals("E",valueIterator.next());
  assertEquals("E",valueIterator.next());
  assertEquals("B",valueIterator.next());
  assertEquals("C",valueIterator.next());
  assertEquals("X",valueIterator.next());
  assertFalse(valueIterator.hasNext());
}
