{
  if (system == null)   throw new IllegalStateException("Parser has not been properly " + "initialized; first load a model and call .initialize()");
  DependencyTree result=predictInner(sentence);
  List<CoreLabel> tokens=sentence.get(CoreAnnotations.TokensAnnotation.class);
  List<TypedDependency> dependencies=new ArrayList<>();
  IndexedWord root=new IndexedWord(new Word("ROOT-" + (tokens.size() + 1)));
  root.set(CoreAnnotations.IndexAnnotation.class,-1);
  for (int i=1; i < result.n; i++) {
    int head=result.getHead(i);
    String label=result.getLabel(i);
    IndexedWord thisWord=new IndexedWord(tokens.get(i - 1));
    IndexedWord headWord=head == 0 ? root : new IndexedWord(tokens.get(head - 1));
    GrammaticalRelation relation=head == 0 ? GrammaticalRelation.ROOT : new GrammaticalRelation(GrammaticalRelation.Language.Any,label,null,GrammaticalRelation.DEPENDENT);
    dependencies.add(new TypedDependency(relation,headWord,thisWord));
  }
  TreeGraphNode rootNode=new TreeGraphNode(root);
  return new EnglishGrammaticalStructure(dependencies,rootNode);
}
