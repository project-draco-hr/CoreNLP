{
  String outputFile=null;
  String sentencesFile=null;
  String labelsFile=null;
  String parserFile=LexicalizedParser.DEFAULT_PARSER_LOC;
  String taggerFile=null;
  MissingLabels missing=MissingLabels.DEFAULT;
  String defaultLabel="-1";
  String separator="\\t+";
  String saveUnknownsFile=null;
  String remapLabels=null;
  int argIndex=0;
  boolean binarize=true;
  boolean useLabelKeys=false;
  while (argIndex < args.length) {
    if (args[argIndex].equalsIgnoreCase("-output")) {
      outputFile=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-sentences")) {
      sentencesFile=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-labels")) {
      labelsFile=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-parser")) {
      parserFile=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-tagger")) {
      taggerFile=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-missing")) {
      missing=MissingLabels.valueOf(args[argIndex + 1]);
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-separator")) {
      separator=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-default")) {
      defaultLabel=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-saveUnknowns")) {
      saveUnknownsFile=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-remapLabels")) {
      remapLabels=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-binarize")) {
      binarize=true;
      argIndex+=1;
    }
 else     if (args[argIndex].equalsIgnoreCase("-nobinarize")) {
      binarize=false;
      argIndex+=1;
    }
 else     if (args[argIndex].equalsIgnoreCase("-useLabelKeys")) {
      useLabelKeys=true;
      argIndex+=1;
    }
 else     if (args[argIndex].equalsIgnoreCase("-nouseLabelKeys")) {
      useLabelKeys=false;
      argIndex+=1;
    }
 else {
      throw new IllegalArgumentException("Unknown argument " + args[argIndex]);
    }
  }
  if (outputFile == null) {
    throw new IllegalArgumentException("-output is required");
  }
  if (sentencesFile == null && !useLabelKeys) {
    throw new IllegalArgumentException("-sentences or -useLabelKeys is required");
  }
  if (sentencesFile != null && useLabelKeys) {
    throw new IllegalArgumentException("Use only one of -sentences or -useLabelKeys");
  }
  if (labelsFile == null) {
    throw new IllegalArgumentException("-labels is required");
  }
  ParserGrammar parser=loadParser(parserFile,taggerFile);
  TreeBinarizer binarizer=null;
  if (binarize) {
    binarizer=TreeBinarizer.simpleTreeBinarizer(parser.getTLPParams().headFinder(),parser.treebankLanguagePack());
  }
  Map<String,String> labelMap=readLabelMap(labelsFile,separator,remapLabels);
  List<String> sentences;
  if (sentencesFile == null) {
    sentences=readSentences(sentencesFile);
  }
 else {
    sentences=new ArrayList<String>(labelMap.keySet());
  }
  List<Tree> trees=parseSentences(sentences,parser,binarizer);
  Set<String> unknowns=setLabels(trees,labelMap,missing,defaultLabel);
  writeTrees(trees,outputFile);
}
