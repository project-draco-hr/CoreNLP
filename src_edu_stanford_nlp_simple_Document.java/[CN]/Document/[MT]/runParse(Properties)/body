{
  if (this.sentences != null && this.sentences.size() > 0 && this.sentences.get(0).rawSentence().hasParseTree()) {
    return this;
  }
  Annotator parse=props == EMPTY_PROPS ? defaultParse.get() : getOrCreate(AnnotatorFactories.parse(props,backend));
  if (parse.requires().contains(CoreAnnotations.PartOfSpeechAnnotation.class)) {
    runPOS(props);
  }
 else {
    sentences();
  }
  Annotation ann=asAnnotation();
  parse.annotate(ann);
synchronized (serializer) {
    for (int i=0; i < sentences.size(); ++i) {
      CoreMap sentence=ann.get(CoreAnnotations.SentencesAnnotation.class).get(i);
      Tree tree=sentence.get(TreeCoreAnnotations.TreeAnnotation.class);
      sentences.get(i).updateParse(serializer.toProto(tree));
      sentences.get(i).updateDependencies(ProtobufAnnotationSerializer.toProto(sentence.get(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class)),ProtobufAnnotationSerializer.toProto(sentence.get(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class)),ProtobufAnnotationSerializer.toProto(sentence.get(SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation.class)));
    }
  }
  return this;
}
