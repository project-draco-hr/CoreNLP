{
  Collection<TypedDependency> golds=objectifier.objectify(addSpecialRoot(goldTree));
  Collection<TypedDependency> guesses=objectifier.objectify(addSpecialRoot(guessTree));
  for (  TypedDependency gold : golds) {
    TypedDependency guess=null;
    for (    TypedDependency candidateGuess : guesses) {
      if (gold.depIndex == candidateGuess.depIndex) {
        guess=candidateGuess;
        break;
      }
    }
    if (guess == null) {
      System.err.println("Warning -- the following gold dependency has no corresponding guess dependency, and is ignored.");
      System.err.println(gold);
      continue;
    }
    if (printConfusionsFilter.accept(new Pair<TypedDependency,TypedDependency>(gold,guess))) {
      System.out.println("Captured confusion: gold " + gold + " guess "+ guess);
      goldTree.pennPrint();
      guessTree.pennPrint();
    }
    Pair<String,String> guessDep=Generics.newPair(groupType.depGroupType(guess),groupType.governorGroupType(guess));
    Pair<String,String> goldDep=Generics.newPair(groupType.depGroupType(gold),groupType.governorGroupType(gold));
    boolean areEqual=eq.areEqual(guess,gold);
    confusion.incrementCount(Arrays.asList(new Object[]{goldDep,areEqual,guessDep}));
    if (!areEqual) {
      Pair<Pair<String,String>,Pair<String,String>> thisConfusion=Generics.newPair(guessDep,goldDep);
      Collection<Pair<Tree,Tree>> thisConfs=confusionCollection.get(thisConfusion);
      if (thisConfs == null) {
        thisConfs=new ArrayList<Pair<Tree,Tree>>();
        confusionCollection.put(thisConfusion,thisConfs);
      }
      Tree goldTree1=markTree(goldTree,gold.depIndex + (punctuationGetsPruned ? punctBetween(goldTree,gold.depIndex) : 0));
      Tree guessTree1=markTree(guessTree,guess.depIndex + (punctuationGetsPruned ? punctBetween(guessTree,guess.depIndex) : 0));
      thisConfs.add(new Pair<Tree,Tree>(goldTree1,guessTree1));
    }
  }
}
