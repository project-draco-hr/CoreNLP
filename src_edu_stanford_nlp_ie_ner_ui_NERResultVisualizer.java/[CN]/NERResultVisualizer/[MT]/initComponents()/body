{
  splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,jPanel1,resultViewer);
  jPanel1=new javax.swing.JPanel();
  jScrollPane1=new javax.swing.JScrollPane();
  resultsTable=new javax.swing.JTable();
  jPanel2=new javax.swing.JPanel();
  statusLabel=new javax.swing.JLabel();
  jMenuBar1=new javax.swing.JMenuBar();
  fileMenu=new javax.swing.JMenu();
  openTestFileItem=new javax.swing.JMenuItem();
  openEvalFileItem=new javax.swing.JMenuItem();
  jSeparator1=new javax.swing.JSeparator();
  exitItem=new javax.swing.JMenuItem();
  searchMenu=new javax.swing.JMenu();
  gotoItem=new javax.swing.JMenuItem();
  filterMenu=new javax.swing.JMenu();
  allFilterItem=new javax.swing.JCheckBoxMenuItem();
  tpFilterItem=new javax.swing.JCheckBoxMenuItem();
  fpFilterItem=new javax.swing.JCheckBoxMenuItem();
  fnFilterItem=new javax.swing.JCheckBoxMenuItem();
  errorFilterItem=new javax.swing.JCheckBoxMenuItem();
  nzFilterItem=new javax.swing.JCheckBoxMenuItem();
  setTitle("NER Result Visualization Tool");
  addWindowListener(new java.awt.event.WindowAdapter(){
    @Override public void windowClosing(    java.awt.event.WindowEvent evt){
      exitForm(evt);
    }
  }
);
  splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
  jPanel1.setLayout(new java.awt.BorderLayout());
  jPanel1.setBorder(new javax.swing.border.TitledBorder("Results"));
  resultsTable.setModel(resultsTableModel);
  resultsTable.addMouseListener(new java.awt.event.MouseAdapter(){
    @Override public void mouseClicked(    java.awt.event.MouseEvent evt){
      resultsTableMouseClicked(evt);
    }
  }
);
  jScrollPane1.setViewportView(resultsTable);
  jPanel1.add(jScrollPane1,java.awt.BorderLayout.CENTER);
  splitPane.setLeftComponent(jPanel1);
  getContentPane().add(splitPane,java.awt.BorderLayout.CENTER);
  jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
  statusLabel.setText("To start, open test file.");
  jPanel2.add(statusLabel);
  getContentPane().add(jPanel2,java.awt.BorderLayout.SOUTH);
  fileMenu.setMnemonic('F');
  fileMenu.setText("File");
  fileMenu.setToolTipText("Open file menu");
  openTestFileItem.setMnemonic('O');
  openTestFileItem.setText("Open Test File");
  openTestFileItem.setToolTipText("Load file containing test documents");
  openTestFileItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      openTestFileItemActionPerformed(evt);
    }
  }
);
  fileMenu.add(openTestFileItem);
  openEvalFileItem.setMnemonic('E');
  openEvalFileItem.setText("Open Eval File");
  openEvalFileItem.setToolTipText("Load evaluation output file");
  openEvalFileItem.setEnabled(false);
  openEvalFileItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      openEvalFileItemActionPerformed(evt);
    }
  }
);
  fileMenu.add(openEvalFileItem);
  fileMenu.add(jSeparator1);
  exitItem.setMnemonic('X');
  exitItem.setText("Exit");
  exitItem.setToolTipText("Exit program");
  exitItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      exitItemActionPerformed(evt);
    }
  }
);
  fileMenu.add(exitItem);
  jMenuBar1.add(fileMenu);
  searchMenu.setMnemonic('S');
  searchMenu.setText("Search");
  searchMenu.setToolTipText("Open search menu");
  gotoItem.setMnemonic('G');
  gotoItem.setText("Go to");
  gotoItem.setToolTipText("Find a document by ID");
  gotoItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      gotoItemActionPerformed(evt);
    }
  }
);
  searchMenu.add(gotoItem);
  jMenuBar1.add(searchMenu);
  filterMenu.setMnemonic('F');
  filterMenu.setText("Filter");
  filterMenu.setToolTipText("Set filters for results");
  allFilterItem.setMnemonic('a');
  allFilterItem.setSelected(true);
  allFilterItem.setText("Show all");
  allFilterItem.setToolTipText("Show all documents");
  allFilterItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      allFilterItemActionPerformed(evt);
    }
  }
);
  filterMenu.add(allFilterItem);
  tpFilterItem.setMnemonic('t');
  tpFilterItem.setText("Show true positives");
  tpFilterItem.setToolTipText("Only show documents that contain at least one true positive");
  tpFilterItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tpFilterItemActionPerformed(evt);
    }
  }
);
  filterMenu.add(tpFilterItem);
  fpFilterItem.setMnemonic('f');
  fpFilterItem.setText("Show false positives");
  fpFilterItem.setToolTipText("Only show documents that contain at least one false positive");
  fpFilterItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      fpFilterItemActionPerformed(evt);
    }
  }
);
  filterMenu.add(fpFilterItem);
  fnFilterItem.setMnemonic('n');
  fnFilterItem.setText("Show false negatives");
  fnFilterItem.setToolTipText("Only show documents that contain at least one false negative");
  fnFilterItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      fnFilterItemActionPerformed(evt);
    }
  }
);
  filterMenu.add(fnFilterItem);
  errorFilterItem.setMnemonic('e');
  errorFilterItem.setText("Show errors");
  errorFilterItem.setToolTipText("Only show documents that contain at least one false positive or one false negative");
  errorFilterItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      errorFilterItemActionPerformed(evt);
    }
  }
);
  filterMenu.add(errorFilterItem);
  nzFilterItem.setMnemonic('z');
  nzFilterItem.setText("Show non-zero");
  nzFilterItem.setToolTipText("Only shows documents containg at least one TP, FP, or FN.");
  nzFilterItem.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      nzFilterItemActionPerformed(evt);
    }
  }
);
  filterMenu.add(nzFilterItem);
  jMenuBar1.add(filterMenu);
  setJMenuBar(jMenuBar1);
  pack();
}
