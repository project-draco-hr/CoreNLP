{
  Timing t=new Timing();
  t.start();
  System.err.println("Loading in PetrovLexicon from file...");
  int numSeenWords=0;
  int numUnseenWords=0;
  wordCounter=new ClassicCounter<Integer>();
  tagCounter=new ClassicCounter<Integer>();
  unseenTagCounter=new ClassicCounter<Integer>();
  tagAndWordCounter=new ClassicCounter<IntTaggedWord>();
  unseenTagAndSignatureCounter=new ClassicCounter<IntTaggedWord>();
  String line=in.readLine();
  int WC=0;
  int TC=1;
  int UTC=2;
  int TWC=3;
  int UTSC=4;
  int status=-1;
  while (line != null) {
    if (line.startsWith("-------")) {
      status=-1;
    }
 else     if (status == -1) {
      if (line.startsWith("WORD-COUNTER"))       status=WC;
 else       if (line.startsWith("TAG-COUNTER"))       status=TC;
 else       if (line.startsWith("UNSEEN-TAG-COUNTER"))       status=UTC;
 else       if (line.startsWith("TAG-AND-WORD-COUNTER"))       status=TWC;
 else       if (line.startsWith("UNSEEN-TAG-AND-SIGNATURE-COUNTER"))       status=UTSC;
 else       throw new RuntimeException("Unrecognized header: " + line);
    }
 else     if (status == WC) {
      int space=line.indexOf(' ');
      String wordString=new String(line.substring(0,space));
      if (wordString.startsWith("UNK")) {
        numUnseenWords++;
      }
 else {
        numSeenWords++;
      }
      int word=wordIndex.indexOf(wordString,true);
      double count=Double.parseDouble(line.substring(space + 1));
      wordCounter.setCount(word,count);
    }
 else     if (status == TC) {
      int space=line.indexOf(' ');
      int tag=tagIndex.indexOf(new String(line.substring(0,space)),true);
      double count=Double.parseDouble(line.substring(space + 1));
      tagCounter.setCount(tag,count);
    }
 else     if (status == UTC) {
      int space=line.indexOf(' ');
      int tag=tagIndex.indexOf(new String(line.substring(0,space)),true);
      double count=Double.parseDouble(line.substring(space + 1));
      unseenTagCounter.setCount(tag,count);
    }
 else     if (status == TWC) {
      int space=line.indexOf(' ');
      int bracket=line.indexOf('[');
      String baseTag=line.substring(0,space);
      String word=new String(line.substring(space + 1,bracket - 1));
      String[] fields=line.substring(bracket + 1,line.length() - 1).split(" ,");
      for (int i=0; i < fields.length; i++) {
        String tag=baseTag + "_" + i;
        IntTaggedWord itw=new IntTaggedWord(word,tag,wordIndex,tagIndex);
        double count=Double.parseDouble(fields[i]);
        tagAndWordCounter.setCount(itw,count);
      }
    }
 else     if (status == UTSC) {
      int space=line.indexOf(' ');
      int bracket=line.indexOf('[');
      String baseTag=new String(line.substring(0,space));
      String word=new String(line.substring(space + 1,bracket - 1));
      String[] fields=line.substring(bracket + 1,line.length() - 1).split(" ,");
      for (int i=0; i < fields.length; i++) {
        String tag=baseTag + "_" + i;
        IntTaggedWord itw=new IntTaggedWord(word,tag,wordIndex,tagIndex);
        double count=Double.parseDouble(fields[i]);
        unseenTagAndSignatureCounter.setCount(itw,count);
      }
    }
    line=in.readLine();
  }
  t.stop("Done loading.");
  System.err.println("numSeenWords: " + numSeenWords);
  System.err.println("numUnseenWords: " + numUnseenWords);
  System.err.println("wordCounter: " + wordCounter.size() + " keys and "+ wordCounter.totalCount()+ " total count.");
  System.err.println("tagCounter: " + tagCounter.size() + " keys and "+ tagCounter.totalCount()+ " total count.");
  System.err.println("unseenTagCounter: " + unseenTagCounter.size() + " keys and "+ unseenTagCounter.totalCount()+ " total count.");
  System.err.println("tagAndWordCounter: " + tagAndWordCounter.size() + " keys and "+ tagAndWordCounter.totalCount()+ " total count.");
  System.err.println("unseenTagAndSignatureCounter: " + unseenTagAndSignatureCounter.size() + " keys and "+ unseenTagAndSignatureCounter.totalCount()+ " total count.");
}
