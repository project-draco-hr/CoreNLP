{
  try {
    CoreNLPProtos.Document unannotatedProto=serializer.toProto(annotation);
    int protoSize=unannotatedProto.getSerializedSize();
    String queryParams=String.format("properties=%s",URLEncoder.encode(this.propsAsJSON,"utf-8"));
    URL serverURL=new URL(this.protocol,this.host,this.port,this.path + "?" + queryParams);
    URLConnection connection=serverURL.openConnection();
    connection.setDoInput(true);
    connection.setRequestProperty("Content-Type","application/x-protobuf");
    connection.setRequestProperty("Content-Length",Integer.toString(protoSize));
    connection.setRequestProperty("Accept-Charset","utf-8");
    connection.setRequestProperty("User-Agent",CoreNLPWebClient.class.getName());
switch (this.protocol) {
case "http":
      ((HttpURLConnection)connection).setRequestMethod("POST");
    break;
default :
  throw new IllegalStateException("Haven't implemented protocol: " + this.protocol);
}
OutputStream os=connection.getOutputStream();
os.write(unannotatedProto.toByteArray());
System.err.println("Wrote " + protoSize + " bytes to "+ this.host+ ":"+ this.port);
InputStream input=connection.getInputStream();
CoreNLPProtos.Document annotatedProto=CoreNLPProtos.Document.parseFrom(input);
Annotation response=serializer.fromProto(annotatedProto);
for (Class key : response.keySet()) {
annotation.set(key,response.get(key));
}
callback.apply(annotation);
}
 catch (IOException e) {
throw new RuntimeIOException("Could not connect to server: " + host + ":"+ port,e);
}
}
