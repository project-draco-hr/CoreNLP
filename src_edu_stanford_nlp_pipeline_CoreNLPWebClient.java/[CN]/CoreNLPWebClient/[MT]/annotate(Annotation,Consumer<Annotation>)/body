{
  new Thread(){
    @Override public void run(){
      try {
        CoreNLPProtos.Document unannotatedProto=serializer.toProto(annotation);
        int protoSize=unannotatedProto.getSerializedSize();
        String queryParams=String.format("properties=%s",URLEncoder.encode(CoreNLPWebClient.this.propsAsJSON,"utf-8"));
        URL serverURL=new URL(CoreNLPWebClient.this.protocol,CoreNLPWebClient.this.host,CoreNLPWebClient.this.port,CoreNLPWebClient.this.path + "?" + queryParams);
        URLConnection connection=serverURL.openConnection();
        connection.setDoInput(true);
        connection.setRequestProperty("Content-Type","application/x-protobuf");
        connection.setRequestProperty("Content-Length",Integer.toString(protoSize));
        connection.setRequestProperty("Accept-Charset","utf-8");
        connection.setRequestProperty("User-Agent",CoreNLPWebClient.class.getName());
switch (CoreNLPWebClient.this.protocol) {
case "http":
          ((HttpURLConnection)connection).setRequestMethod("POST");
        break;
default :
      throw new IllegalStateException("Haven't implemented protocol: " + CoreNLPWebClient.this.protocol);
  }
  OutputStream os=connection.getOutputStream();
  os.write(unannotatedProto.toByteArray());
  System.err.println("Wrote " + protoSize + " bytes to "+ CoreNLPWebClient.this.host+ ":"+ CoreNLPWebClient.this.port);
  InputStream input=connection.getInputStream();
  CoreNLPProtos.Document annotatedProto=CoreNLPProtos.Document.parseFrom(input);
  Annotation response=serializer.fromProto(annotatedProto);
  for (  Class key : response.keySet()) {
    annotation.set(key,response.get(key));
  }
  callback.accept(annotation);
}
 catch (IOException e) {
  throw new RuntimeIOException("Could not connect to server: " + host + ":"+ port,e);
}
}
}
.start();
}
