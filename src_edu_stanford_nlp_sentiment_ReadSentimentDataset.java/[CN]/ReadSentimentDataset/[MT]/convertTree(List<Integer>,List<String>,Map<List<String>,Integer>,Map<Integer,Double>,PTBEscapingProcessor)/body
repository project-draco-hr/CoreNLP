{
  int maxNode=0;
  for (  Integer parent : parentPointers) {
    maxNode=Math.max(maxNode,parent);
  }
  Tree[] subtrees=new Tree[maxNode + 1];
  for (int i=0; i < sentence.size(); ++i) {
    CoreLabel word=new CoreLabel();
    word.setValue(sentence.get(i));
    Tree leaf=new LabeledScoredTreeNode(word);
    subtrees[i]=new LabeledScoredTreeNode(new CoreLabel());
    subtrees[i].addChild(leaf);
  }
  for (int i=sentence.size(); i <= maxNode; ++i) {
    subtrees[i]=new LabeledScoredTreeNode(new CoreLabel());
  }
  boolean[] connected=new boolean[maxNode + 1];
  Tree root=null;
  for (int index=0; index < parentPointers.size(); ++index) {
    if (parentPointers.get(index) == -1) {
      if (root != null) {
        throw new RuntimeException("Found two roots for sentence " + sentence);
      }
      root=subtrees[index];
    }
 else {
      connect(parentPointers,subtrees,connected,index);
    }
  }
  for (int i=0; i <= maxNode; ++i) {
    List<Tree> leaves=subtrees[i].getLeaves();
    List<String> words=CollectionUtils.transformAsList(leaves,new Function<Tree,String>(){
      public String apply(      Tree tree){
        return tree.label().value();
      }
    }
);
    Integer phraseId=phraseIds.get(words);
    if (phraseId == null) {
      throw new RuntimeException("Could not find phrase id for phrase " + sentence);
    }
    Double score=sentimentScores.get(phraseId);
    if (score == null) {
      throw new RuntimeException("Could not find sentiment score for phrase id " + phraseId);
    }
    int classLabel=Math.round((float)Math.floor(score * 5.0));
    if (classLabel > 4) {
      classLabel=4;
    }
    subtrees[i].label().setValue(Integer.toString(classLabel));
  }
  for (int i=0; i < sentence.size(); ++i) {
    Tree leaf=subtrees[i].children()[0];
    leaf.label().setValue(escaper.escapeString(leaf.label().value()));
  }
  return root;
}
