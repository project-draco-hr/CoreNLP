{
  String dictionaryFilename=null;
  String sentimentFilename=null;
  String tokensFilename=null;
  String parseFilename=null;
  String splitFilename=null;
  String trainFilename=null;
  String devFilename=null;
  String testFilename=null;
  int argIndex=0;
  while (argIndex < args.length) {
    if (args[argIndex].equalsIgnoreCase("-dictionary")) {
      dictionaryFilename=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-sentiment")) {
      sentimentFilename=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-tokens")) {
      tokensFilename=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-parse")) {
      parseFilename=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-split")) {
      splitFilename=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-train")) {
      trainFilename=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-dev")) {
      devFilename=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-test")) {
      testFilename=args[argIndex + 1];
      argIndex+=2;
    }
 else {
      System.err.println("Unknown argument " + args[argIndex]);
      System.exit(2);
    }
  }
  List<List<String>> sentences=Generics.newArrayList();
  for (  String line : IOUtils.readLines(tokensFilename,"utf-8")) {
    String[] sentence=line.split("\\|");
    sentences.add(Arrays.asList(sentence));
  }
  Map<List<String>,Integer> phraseIds=Generics.newHashMap();
  for (  String line : IOUtils.readLines(dictionaryFilename)) {
    String[] pieces=line.split("\\|");
    String[] sentence=pieces[0].split(" ");
    Integer id=Integer.valueOf(pieces[1]);
    phraseIds.put(Arrays.asList(sentence),id);
  }
  Map<Integer,Double> sentimentScores=Generics.newHashMap();
  for (  String line : IOUtils.readLines(sentimentFilename)) {
    if (line.startsWith("phrase")) {
      continue;
    }
    String[] pieces=line.split("\\|");
    Integer id=Integer.valueOf(pieces[0]);
    Double score=Double.valueOf(pieces[1]);
    sentimentScores.put(id,score);
  }
  int index=0;
  PTBEscapingProcessor escaper=new PTBEscapingProcessor();
  List<Tree> trees=Generics.newArrayList();
  for (  String line : IOUtils.readLines(parseFilename)) {
    String[] pieces=line.split("\\|");
    List<Integer> parentPointers=CollectionUtils.transformAsList(Arrays.asList(pieces),new Function<String,Integer>(){
      public Integer apply(      String arg){
        return Integer.valueOf(arg) - 1;
      }
    }
);
    Tree tree=convertTree(parentPointers,sentences.get(index),phraseIds,sentimentScores,escaper);
    ++index;
    trees.add(tree);
  }
  Map<Integer,List<Integer>> splits=Generics.newHashMap();
  splits.put(1,Generics.<Integer>newArrayList());
  splits.put(2,Generics.<Integer>newArrayList());
  splits.put(3,Generics.<Integer>newArrayList());
  for (  String line : IOUtils.readLines(splitFilename)) {
    if (line.startsWith("sentence_index")) {
      continue;
    }
    String[] pieces=line.split(",");
    Integer treeId=Integer.valueOf(pieces[0]) - 1;
    Integer fileId=Integer.valueOf(pieces[1]);
    splits.get(fileId).add(treeId);
  }
  writeTrees(trainFilename,trees,splits.get(1));
  writeTrees(testFilename,trees,splits.get(2));
  writeTrees(devFilename,trees,splits.get(3));
}
