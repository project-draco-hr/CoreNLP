{
  addSelfLoops();
  double[][] t=initializedTransitions;
  for (int i=0; i < stateTypes.size(); i++) {
    int type=stateTypes.get(i).intValue();
    if (type > 0) {
      t[State.STARTIDX][i]=0.05;
    }
    if (type == PREFIX_TYPE) {
      t[State.STARTIDX][i]=0.05;
    }
    List<Double> curTransitions=transitions.get(i);
switch (type) {
case START_TYPE:
case END_TYPE:
      for (int j=0; j < curTransitions.size(); j++) {
        t[i][j]=curTransitions.get(j).doubleValue();
      }
    break;
case BACKGROUND_TYPE:
  for (int j=0; j < curTransitions.size(); j++) {
    Double weight=curTransitions.get(j);
    if (j == State.FINISHIDX) {
      t[i][j]=0.05;
    }
    int curType=stateTypes.get(j).intValue();
    if (weight.doubleValue() != 0.0) {
      if (curType == BACKGROUND_TYPE) {
        t[i][j]=0.2;
      }
      if (curType == PREFIX_TYPE) {
        t[i][j]=0.02;
      }
 else {
        t[i][j]=0.01;
      }
    }
  }
break;
case PREFIX_TYPE:
for (int j=0; j < curTransitions.size(); j++) {
Double weight=curTransitions.get(j);
if (weight.doubleValue() != 0.0) {
  int curType=stateTypes.get(j).intValue();
  if (curType == PREFIX_TYPE) {
    t[i][j]=0.6;
    List<Integer> outgoing=getOutgoing(j);
    for (int k=0; k < outgoing.size(); k++) {
      int curOutgoing=outgoing.get(k).intValue();
      int curOutType=stateTypes.get(curOutgoing).intValue();
      if (curOutType == PREFIX_TYPE && curOutgoing != j) {
        t[i][curOutgoing]=0.15;
      }
    }
  }
 else   if (curType > 0) {
    t[i][j]=0.8;
  }
 else {
    t[i][j]=0.01;
  }
}
}
break;
case SUFFIX_TYPE:
for (int j=0; j < curTransitions.size(); j++) {
Double weight=curTransitions.get(j);
if (j == State.FINISHIDX) {
t[i][j]=0.05;
}
int curType=stateTypes.get(j).intValue();
if (weight.doubleValue() != 0.0) {
if (type == SUFFIX_TYPE) {
if (i == j) {
  t[i][j]=0.2;
}
 else {
  t[i][j]=0.6;
}
List<Integer> outgoing=getOutgoing(j);
for (int k=0; k < outgoing.size(); k++) {
  int curOutgoing=outgoing.get(k).intValue();
  int curOutType=stateTypes.get(curOutgoing).intValue();
  if (curOutType == SUFFIX_TYPE && curOutgoing != j) {
    t[i][curOutgoing]=0.15;
  }
}
}
 else {
t[i][j]=0.01;
}
}
if (curType == BACKGROUND_TYPE) {
t[i][j]=0.8;
}
}
break;
}
if (type > 0) {
for (int j=0; j < curTransitions.size(); j++) {
Double weight=curTransitions.get(j);
if (j == State.FINISHIDX) {
t[i][j]=0.05;
}
if (weight.doubleValue() != 0.0) {
int curType=stateTypes.get(j).intValue();
if (curType > 0) {
t[i][j]=0.6;
}
if (curType == type) {
List<Integer> outgoing=getOutgoing(j);
for (int k=0; k < outgoing.size(); k++) {
int curOutgoing=outgoing.get(k).intValue();
int curOutType=stateTypes.get(curOutgoing).intValue();
if (curOutType == type && curOutgoing != j) {
t[i][curOutgoing]=0.15;
}
}
}
 else if (type == SUFFIX_TYPE) {
t[i][j]=0.88;
}
 else {
t[i][j]=0.01;
}
}
}
}
}
for (int i=0; i < t.length; i++) {
ArrayMath.normalize(t[i]);
}
perturbTransitions(t);
}
