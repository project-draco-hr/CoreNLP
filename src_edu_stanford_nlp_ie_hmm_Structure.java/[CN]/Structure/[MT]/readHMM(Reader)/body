{
  String line;
  Index<String> typeNames=new HashIndex<String>();
  BufferedReader br=new BufferedReader(r);
  line=br.readLine();
  if (!line.equalsIgnoreCase("HMM version 1")) {
    throw new IOException("File format error");
  }
  line=br.readLine();
  if (!line.matches("States ([0-9]+)")) {
    throw new IOException("File format error");
  }
  String[] fields=line.split("\\s");
  int numStates=Integer.parseInt(fields[1]);
  State[] st=new State[numStates];
  ClassicCounter<String> vocab=new ClassicCounter<String>();
  int stateNum=-1;
  while ((line=br.readLine()) != null) {
    fields=line.split("\\s");
    if (fields[0].equalsIgnoreCase("State")) {
      stateNum=Integer.parseInt(fields[1]);
      int typeNum=0;
      if (fields.length > 3) {
        String typeStr=fields[3];
        typeNames.add(typeStr);
        typeNum=typeNames.indexOf(typeStr);
      }
      EmitMap emit=new PlainEmitMap();
      st[stateNum]=new State(typeNum,emit,numStates);
    }
 else     if (fields[0].equalsIgnoreCase("Transition")) {
      int toState=Integer.parseInt(fields[1]);
      double prob=Double.parseDouble(fields[3]);
      st[stateNum].transition[toState]=prob;
    }
 else     if (fields[0].equalsIgnoreCase("Emission")) {
      String emission=fields[1];
      double prob=Double.parseDouble(fields[3]);
      st[stateNum].emit.set(emission,prob);
      vocab.incrementCount(emission);
    }
 else {
      throw new IOException("File format error: " + line);
    }
  }
  return new HMM(st,HMM.REGULAR_HMM,typeNames.toArray(new String[0]),vocab);
}
