{
  Class<?> clazz;
  if (type instanceof Class) {
    clazz=(Class<?>)type;
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType pt=(ParameterizedType)type;
    clazz=(Class<?>)pt.getRawType();
  }
 else {
    throw new IllegalArgumentException("Cannot cast to type (unhandled type): " + type);
  }
  if (String.class.isAssignableFrom(clazz)) {
    return (E)value;
  }
 else   if (Boolean.class.isAssignableFrom(clazz) || boolean.class.isAssignableFrom(clazz)) {
    if ("1".equals(value)) {
      return (E)Boolean.TRUE;
    }
    return (E)Boolean.valueOf(Boolean.parseBoolean(value));
  }
 else   if (Integer.class.isAssignableFrom(clazz) || int.class.isAssignableFrom(clazz)) {
    try {
      return (E)new Integer(Integer.parseInt(value));
    }
 catch (    NumberFormatException e) {
      return (E)new Integer((int)Double.parseDouble(value));
    }
  }
 else   if (Long.class.isAssignableFrom(clazz) || long.class.isAssignableFrom(clazz)) {
    try {
      return (E)new Long(Long.parseLong(value));
    }
 catch (    NumberFormatException e) {
      return (E)new Long((long)Double.parseDouble(value));
    }
  }
 else   if (Float.class.isAssignableFrom(clazz) || float.class.isAssignableFrom(clazz)) {
    if (value == null) {
      return (E)new Float(Float.NaN);
    }
    return (E)new Float(Float.parseFloat(value));
  }
 else   if (Double.class.isAssignableFrom(clazz) || double.class.isAssignableFrom(clazz)) {
    if (value == null) {
      return (E)new Double(Double.NaN);
    }
    return (E)new Double(Double.parseDouble(value));
  }
 else   if (Short.class.isAssignableFrom(clazz) || short.class.isAssignableFrom(clazz)) {
    try {
      return (E)new Short(Short.parseShort(value));
    }
 catch (    NumberFormatException e) {
      return (E)new Short((short)Double.parseDouble(value));
    }
  }
 else   if (Byte.class.isAssignableFrom(clazz) || byte.class.isAssignableFrom(clazz)) {
    try {
      return (E)new Byte(Byte.parseByte(value));
    }
 catch (    NumberFormatException e) {
      return (E)new Byte((byte)Double.parseDouble(value));
    }
  }
 else   if (Character.class.isAssignableFrom(clazz) || char.class.isAssignableFrom(clazz)) {
    return (E)new Character((char)Integer.parseInt(value));
  }
 else   if (Optional.class.isAssignableFrom(clazz)) {
    return (E)((value == null || "null".equals(value.toLowerCase()) || "empty".equals(value.toLowerCase()) || "none".equals(value.toLowerCase())) ? Optional.empty() : Optional.of(castWithoutKnowingType(value)));
  }
 else   if (java.util.Date.class.isAssignableFrom(clazz)) {
    try {
      return (E)new Date(Long.parseLong(value));
    }
 catch (    NumberFormatException e) {
      return null;
    }
  }
 else   if (java.util.Calendar.class.isAssignableFrom(clazz)) {
    try {
      Date d=new Date(Long.parseLong(value));
      GregorianCalendar cal=new GregorianCalendar();
      cal.setTime(d);
      return (E)cal;
    }
 catch (    NumberFormatException e) {
      return null;
    }
  }
 else   if (File.class.isAssignableFrom(clazz)) {
    return (E)new File(value);
  }
 else   if (Class.class.isAssignableFrom(clazz)) {
    try {
      return (E)Class.forName(value);
    }
 catch (    ClassNotFoundException e) {
      return null;
    }
  }
 else   if (clazz.isArray()) {
    if (value == null) {
      return null;
    }
    Class<?> subType=clazz.getComponentType();
    String[] strings=decodeArray(value);
    Object[] array=(Object[])Array.newInstance(clazz.getComponentType(),strings.length);
    for (int i=0; i < strings.length; i++) {
      array[i]=cast(strings[i],subType);
    }
    return (E)array;
  }
 else   if (Map.class.isAssignableFrom(clazz)) {
    return (E)decodeMap(value);
  }
 else   if (clazz.isEnum()) {
    Class c=(Class)clazz;
    if (value == null) {
      return null;
    }
    if (value.charAt(0) == '"')     value=value.substring(1);
    if (value.charAt(value.length() - 1) == '"')     value=value.substring(0,value.length() - 1);
    try {
      return (E)Enum.valueOf(c,value);
    }
 catch (    Exception e) {
      try {
        return (E)Enum.valueOf(c,value.toLowerCase());
      }
 catch (      Exception e2) {
        try {
          return (E)Enum.valueOf(c,value.toUpperCase());
        }
 catch (        Exception e3) {
          return (E)Enum.valueOf(c,(Character.isUpperCase(value.charAt(0)) ? Character.toLowerCase(value.charAt(0)) : Character.toUpperCase(value.charAt(0))) + value.substring(1));
        }
      }
    }
  }
 else   if (ObjectOutputStream.class.isAssignableFrom(clazz)) {
    try {
      return (E)new ObjectOutputStream((OutputStream)cast(value,OutputStream.class));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (ObjectInputStream.class.isAssignableFrom(clazz)) {
    try {
      return (E)new ObjectInputStream((InputStream)cast(value,InputStream.class));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (OutputStream.class.isAssignableFrom(clazz)) {
    if (value.equalsIgnoreCase("stdout") || value.equalsIgnoreCase("out")) {
      return (E)System.out;
    }
    if (value.equalsIgnoreCase("stderr") || value.equalsIgnoreCase("err")) {
      return (E)System.err;
    }
    File toWriteTo=cast(value,File.class);
    try {
      if (!toWriteTo.exists() && !toWriteTo.createNewFile()) {
        throw new IllegalStateException("Could not create output stream (cannot write file): " + value);
      }
      return (E)new FileOutputStream((File)cast(value,File.class));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (InputStream.class.isAssignableFrom(clazz)) {
    if (value.equalsIgnoreCase("stdin") || value.equalsIgnoreCase("in")) {
      return (E)System.in;
    }
    File toReadFrom=cast(value,File.class);
    try {
      if (!toReadFrom.exists() || !toReadFrom.canRead()) {
        throw new IllegalStateException("Could not create input stream (cannot read file): " + value);
      }
      return (E)new FileInputStream((File)cast(value,File.class));
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
  }
 else {
    try {
      Method decode=clazz.getMethod("fromString",String.class);
      return (E)decode.invoke(MetaClass.create(clazz),value);
    }
 catch (    NoSuchMethodException e) {
    }
catch (    InvocationTargetException e) {
    }
catch (    IllegalAccessException e) {
    }
catch (    ClassCastException e) {
    }
    if (Tree.class.isAssignableFrom(clazz)) {
      try {
        return (E)new PennTreeReader(new StringReader(value),new LabeledScoredTreeFactory(CoreLabel.factory())).readTree();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
 else     if (Collection.class.isAssignableFrom(clazz)) {
      Collection rtn;
      if (Modifier.isAbstract(clazz.getModifiers())) {
        rtn=abstractToConcreteCollectionMap.get(clazz).createInstance();
      }
 else {
        rtn=MetaClass.create(clazz).createInstance();
      }
      Class<?> subType=clazz.getComponentType();
      String[] strings=decodeArray(value);
      for (      String string : strings) {
        if (subType == null) {
          rtn.add(castWithoutKnowingType(string));
        }
 else {
          rtn.add(cast(string,subType));
        }
      }
      return (E)rtn;
    }
 else {
      return null;
    }
  }
}
