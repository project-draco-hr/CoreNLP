{
  if (tSource.isAccepting() && tSource.continuingInputs().size() == 0) {
    tSource.addTransition(new DFSATransition<String,Integer>("",tSource,new DFSAState<String,Integer>(-1,null),"1","",0));
  }
  CoreLabel curLabel=(pos < docArray.length) ? docArray[pos] : null;
  String curChr=null, origSpace=null;
  if (curLabel != null) {
    curChr=curLabel.get(CoreAnnotations.OriginalCharAnnotation.class);
    assert(curChr.length() == 1);
    origSpace=curLabel.get(CoreAnnotations.SpaceBeforeAnnotation.class);
  }
  Set<String> inputs=tSource.continuingInputs();
  String answerConstraint=null;
  if (pos == 0) {
    double minCost=Double.POSITIVE_INFINITY;
    DFSATransition<String,Integer> bestTransition=null;
    for (Iterator<String> iter=inputs.iterator(); iter.hasNext(); ) {
      String predictSpace=iter.next();
      DFSATransition<String,Integer> transition=tSource.transition(predictSpace);
      double transitionCost=transition.score();
      if (transitionCost < minCost) {
        if (predictSpace != null) {
          System.err.printf("mincost (%s): %e -> %e\n",predictSpace.toString(),minCost,transitionCost);
          minCost=transitionCost;
          answerConstraint=predictSpace;
        }
      }
    }
  }
  for (  String predictSpace : inputs) {
    DFSATransition<String,Integer> transition=tSource.transition(predictSpace);
    DFSAState<String,Integer> tDest=transition.target();
    DFSAState<String,Integer> newASource=aSource;
    StringBuilder newAnswer=new StringBuilder(answer.toString());
    int answerLen=newAnswer.length();
    String prevChr=(answerLen > 0) ? newAnswer.substring(answerLen - 1) : null;
    double newCost=cost;
    if (answerConstraint != null && !answerConstraint.equals(predictSpace)) {
      System.err.printf("Skipping transition %s at pos 0.\n",predictSpace.toString());
      continue;
    }
    if (flags.keepAllWhitespaces && "0".equals(predictSpace) && "1".equals(origSpace)) {
      System.err.printf("Skipping non-boundary at pos %d, since space in the input.\n",pos);
      continue;
    }
    if ("1".equals(predictSpace) && "0".equals(origSpace) && prevChr != null && curChr != null) {
      char p=prevChr.charAt(0), c=curChr.charAt(0);
      if (ChineseStringUtils.isLetterASCII(p) && ChineseStringUtils.isLetterASCII(c)) {
        System.err.printf("Not hypothesizing a boundary at pos %d, since between two ASCII letters (%s and %s).\n",pos,prevChr,curChr);
        continue;
      }
      if (ChineseUtils.isNumber(p) && ChineseUtils.isNumber(c)) {
        System.err.printf("Not hypothesizing a boundary at pos %d, since between two numeral characters (%s and %s).\n",pos,prevChr,curChr);
        continue;
      }
    }
    if ("1".equals(predictSpace)) {
      if (newAnswer.toString().length() > 0) {
        if (stateLinks.containsKey(tSource)) {
          DFSAState<String,Integer> aDest=stateLinks.get(tSource);
          newASource.addTransition(new DFSATransition<String,Integer>("",newASource,aDest,newAnswer.toString(),"",newCost));
          continue;
        }
        nodeId.incValue(1);
        DFSAState<String,Integer> aDest=new DFSAState<String,Integer>(nodeId.intValue(),answerLattice,0.0);
        stateLinks.put(tSource,aDest);
        newASource.addTransition(new DFSATransition<String,Integer>("",newASource,aDest,newAnswer.toString(),"",newCost));
        if (tSource.isAccepting()) {
          aDest.setAccepting(true);
          continue;
        }
        newASource=aDest;
        newAnswer=new StringBuilder();
        newCost=0.0;
      }
    }
    assert(curChr != null);
    newAnswer.append(curChr);
    newCost+=transition.score();
    if (newCost < flags.searchGraphPrune || ChineseStringUtils.isLetterASCII(curChr.charAt(0)))     tagLatticeToAnswerLattice(tDest,newASource,newAnswer,nodeId,pos + 1,newCost,stateLinks,answerLattice,docArray);
  }
}
