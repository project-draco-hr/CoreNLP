{
  System.err.println("Testing on treebank");
  Timing treebankTotalTimer=new Timing();
  TreePrint treePrint=op.testOptions.treePrint(op.tlpParams);
  TreebankLangParserParams tlpParams=op.tlpParams;
  TreebankLanguagePack tlp=op.langpack();
  PrintWriter pwOut, pwErr;
  if (op.testOptions.quietEvaluation) {
    NullOutputStream quiet=new NullOutputStream();
    pwOut=tlpParams.pw(quiet);
    pwErr=tlpParams.pw(quiet);
  }
 else {
    pwOut=tlpParams.pw();
    pwErr=tlpParams.pw(System.err);
  }
  if (op.testOptions.verbose) {
    pwErr.print("Testing ");
    pwErr.println(testTreebank.textualSummary(tlp));
  }
  if (op.testOptions.evalb) {
    EvalbFormatWriter.initEVALBfiles(tlpParams);
  }
  PrintWriter pwFileOut=null;
  if (op.testOptions.writeOutputFiles) {
    String fname=op.testOptions.outputFilesPrefix + "." + op.testOptions.outputFilesExtension;
    try {
      pwFileOut=op.tlpParams.pw(new FileOutputStream(fname));
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
  }
  PrintWriter pwStats=null;
  if (op.testOptions.outputkBestEquivocation != null) {
    try {
      pwStats=op.tlpParams.pw(new FileOutputStream(op.testOptions.outputkBestEquivocation));
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
  }
  if (op.testOptions.testingThreads != 1) {
    MulticoreWrapper<List<? extends HasWord>,ParserQuery> wrapper=new MulticoreWrapper<>(op.testOptions.testingThreads,new ParsingThreadsafeProcessor(pqFactory,pwErr));
    LinkedList<Tree> goldTrees=new LinkedList<>();
    for (    Tree goldTree : testTreebank) {
      List<? extends HasWord> sentence=getInputSentence(goldTree);
      goldTrees.add(goldTree);
      pwErr.println("Parsing [len. " + sentence.size() + "]: "+ Sentence.listToString(sentence));
      wrapper.put(sentence);
      while (wrapper.peek()) {
        ParserQuery pq=wrapper.poll();
        goldTree=goldTrees.poll();
        processResults(pq,goldTree,pwErr,pwOut,pwFileOut,pwStats,treePrint);
      }
    }
    wrapper.join();
    while (wrapper.peek()) {
      ParserQuery pq=wrapper.poll();
      Tree goldTree=goldTrees.poll();
      processResults(pq,goldTree,pwErr,pwOut,pwFileOut,pwStats,treePrint);
    }
  }
 else {
    ParserQuery pq=pqFactory.parserQuery();
    for (    Tree goldTree : testTreebank) {
      final List<CoreLabel> sentence=getInputSentence(goldTree);
      pwErr.println("Parsing [len. " + sentence.size() + "]: "+ Sentence.listToString(sentence));
      pq.parseAndReport(sentence,pwErr);
      processResults(pq,goldTree,pwErr,pwOut,pwFileOut,pwStats,treePrint);
    }
  }
  treebankTotalTimer.done("Testing on treebank");
  if (op.testOptions.quietEvaluation) {
    pwErr=tlpParams.pw(System.err);
  }
  if (saidMemMessage) {
    ParserUtils.printOutOfMemory(pwErr);
  }
  if (op.testOptions.evalb) {
    EvalbFormatWriter.closeEVALBfiles();
  }
  if (numSkippedEvals != 0) {
    pwErr.printf("Unable to evaluate %d parser hypotheses due to yield mismatch\n",numSkippedEvals);
  }
  ParserQuery pq=pqFactory.parserQuery();
  if (summary) {
    if (pcfgLB != null)     pcfgLB.display(false,pwErr);
    if (pcfgChildSpecific != null)     pcfgChildSpecific.display(false,pwErr);
    if (pcfgLA != null)     pcfgLA.display(false,pwErr);
    if (pcfgCB != null)     pcfgCB.display(false,pwErr);
    if (pcfgDA != null)     pcfgDA.display(false,pwErr);
    if (pcfgTA != null)     pcfgTA.display(false,pwErr);
    if (pcfgLL != null && pq.getPCFGParser() != null)     pcfgLL.display(false,pwErr);
    if (depDA != null)     depDA.display(false,pwErr);
    if (depTA != null)     depTA.display(false,pwErr);
    if (depLL != null && pq.getDependencyParser() != null)     depLL.display(false,pwErr);
    if (factLB != null)     factLB.display(false,pwErr);
    if (factChildSpecific != null)     factChildSpecific.display(false,pwErr);
    if (factLA != null)     factLA.display(false,pwErr);
    if (factCB != null)     factCB.display(false,pwErr);
    if (factDA != null)     factDA.display(false,pwErr);
    if (factTA != null)     factTA.display(false,pwErr);
    if (factLL != null && pq.getFactoredParser() != null)     factLL.display(false,pwErr);
    if (pcfgCatE != null)     pcfgCatE.display(false,pwErr);
    for (    Eval eval : evals) {
      eval.display(false,pwErr);
    }
    for (    BestOfTopKEval eval : topKEvals) {
      eval.display(false,pwErr);
    }
  }
  if (pcfgRUO != null)   pcfgRUO.display(true,pwErr);
  if (pcfgCUO != null)   pcfgCUO.display(true,pwErr);
  if (tsv) {
    NumberFormat nf=new DecimalFormat("0.00");
    pwErr.println("factF1\tfactDA\tfactEx\tpcfgF1\tdepDA\tfactTA\tnum");
    if (factLB != null)     pwErr.print(nf.format(factLB.getEvalbF1Percent()));
    pwErr.print("\t");
    if (pq.getDependencyParser() != null && factDA != null)     pwErr.print(nf.format(factDA.getEvalbF1Percent()));
    pwErr.print("\t");
    if (factLB != null)     pwErr.print(nf.format(factLB.getExactPercent()));
    pwErr.print("\t");
    if (pcfgLB != null)     pwErr.print(nf.format(pcfgLB.getEvalbF1Percent()));
    pwErr.print("\t");
    if (pq.getDependencyParser() != null && depDA != null)     pwErr.print(nf.format(depDA.getEvalbF1Percent()));
    pwErr.print("\t");
    if (pq.getPCFGParser() != null && factTA != null)     pwErr.print(nf.format(factTA.getEvalbF1Percent()));
    pwErr.print("\t");
    if (factLB != null)     pwErr.print(factLB.getNum());
    pwErr.println();
  }
  double f1=0.0;
  if (factLB != null) {
    f1=factLB.getEvalbF1();
  }
  if (pwFileOut != null)   pwFileOut.close();
  if (pwStats != null)   pwStats.close();
  if (parserQueryEvals != null) {
    for (    ParserQueryEval parserQueryEval : parserQueryEvals) {
      parserQueryEval.display(false,pwErr);
    }
  }
  return f1;
}
