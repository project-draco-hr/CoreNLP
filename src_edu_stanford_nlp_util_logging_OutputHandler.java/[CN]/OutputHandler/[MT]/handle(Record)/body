{
  StringBuilder b=new StringBuilder(1024);
  String[] content;
  if (record.content instanceof Throwable) {
    List<String> lines=new ArrayList<>();
    Throwable exception=(Throwable)record.content;
    lines.add(record.content.toString());
    StackTraceElement[] trace=exception.getStackTrace();
    StackTraceElement topTraceElement=trace.length > 0 ? trace[0] : null;
    for (    StackTraceElement e : exception.getStackTrace()) {
      lines.add(tab + e.toString());
    }
    while (exception.getCause() != null) {
      System.out.println("TOP ELEMENT: " + topTraceElement);
      exception=exception.getCause();
      trace=exception.getStackTrace();
      lines.add("Caused by: " + exception.getClass() + ": "+ exception.getMessage());
      for (int i=0; i < trace.length; i++) {
        StackTraceElement e=trace[i];
        lines.add(tab + e.toString());
        if (topTraceElement != null && e.getClassName().equals(topTraceElement.getClassName()) && e.getMethodName().equals(topTraceElement.getMethodName())) {
          lines.add(tab + "..." + (trace.length - i - 1)+ " more");
          break;
        }
      }
      topTraceElement=trace.length > 0 ? trace[0] : null;
    }
    content=new String[lines.size()];
    content=lines.toArray(content);
  }
 else   if (record.content == null) {
    content=new String[]{"null"};
  }
 else {
    String toStr;
    if (record.content instanceof Supplier) {
      toStr=((Supplier<Object>)record.content).get().toString();
    }
 else {
      toStr=record.content.toString();
    }
    if (toStr == null) {
      content=new String[]{"<null toString()>"};
    }
 else {
      content=toStr.split("\n");
    }
  }
  updateTracks(record.depth);
  if (this.missingOpenBracket) {
    this.style(b,"{\n",trackColor,trackStyle);
    this.missingOpenBracket=false;
  }
  int cursorPos=0;
  int contentLinesPrinted=0;
  Color color=Color.NONE;
  Style style=Style.NONE;
  ArrayList<Object> printableChannels=new ArrayList<>();
  for (  Object chan : record.channels()) {
    if (chan instanceof Color) {
      color=(Color)chan;
    }
 else     if (chan instanceof Style) {
      style=(Style)chan;
    }
 else     if (chan != Redwood.FORCE) {
      printableChannels.add(chan);
    }
  }
  if (leftMargin > 2) {
    b.append("[");
    cursorPos+=1;
    Object lastChan=null;
    boolean wasAnyChannelPrinted=false;
    for (int i=0; i < printableChannels.size(); i++) {
      Object chan=printableChannels.get(i);
      if (chan.equals(lastChan)) {
        continue;
      }
      lastChan=chan;
      String toPrint=chan.toString();
      if (toPrint.length() > leftMargin - 1) {
        toPrint=toPrint.substring(0,leftMargin - 2);
      }
      if (cursorPos + toPrint.length() >= leftMargin) {
        while (cursorPos < leftMargin) {
          b.append(" ");
          cursorPos+=1;
        }
        if (contentLinesPrinted < content.length) {
          writeContent(record.depth,style(new StringBuilder(),content[contentLinesPrinted],color,style).toString(),b);
          contentLinesPrinted+=1;
        }
        b.append("\n ");
        cursorPos=1;
      }
      boolean wasChannelPrinted=formatChannel(b,toPrint,chan);
      wasAnyChannelPrinted=wasAnyChannelPrinted || wasChannelPrinted;
      if (wasChannelPrinted && i < printableChannels.size() - 1) {
        b.append(channelSeparatorChar);
        cursorPos+=1;
      }
      cursorPos+=toPrint.length();
    }
    if (wasAnyChannelPrinted) {
      b.append("]");
      cursorPos+=1;
    }
 else {
      b.setLength(b.length() - 1);
      cursorPos-=1;
    }
  }
  while (contentLinesPrinted < content.length) {
    while (cursorPos < leftMargin) {
      b.append(" ");
      cursorPos+=1;
    }
    writeContent(record.depth,style(new StringBuilder(),content[contentLinesPrinted],color,style).toString(),b);
    contentLinesPrinted+=1;
    if (contentLinesPrinted < content.length) {
      b.append("\n");
      cursorPos=0;
    }
  }
  if (b.length() == 0 || b.charAt(b.length() - 1) != '\n') {
    b.append("\n");
  }
  print(record.channels(),b.toString());
  if (info != null) {
    info.numElementsPrinted+=1;
  }
  ArrayList<Record> rtn=new ArrayList<>();
  rtn.add(record);
  return rtn;
}
