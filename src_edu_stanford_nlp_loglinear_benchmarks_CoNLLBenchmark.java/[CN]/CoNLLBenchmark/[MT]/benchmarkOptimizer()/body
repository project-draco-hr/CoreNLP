{
  List<CoNLLSentence> train=getSentences(DATA_PATH + "conll.iob.4class.train");
  List<CoNLLSentence> testA=getSentences(DATA_PATH + "conll.iob.4class.testa");
  List<CoNLLSentence> testB=getSentences(DATA_PATH + "conll.iob.4class.testb");
  List<CoNLLSentence> allData=new ArrayList<>();
  allData.addAll(train);
  allData.addAll(testA);
  allData.addAll(testB);
  Set<String> tagsSet=new HashSet<>();
  for (  CoNLLSentence sentence : allData)   for (  String nerTag : sentence.ner)   tagsSet.add(nerTag);
  List<String> tags=new ArrayList<>();
  tags.addAll(tagsSet);
  embeddings=getEmbeddings(DATA_PATH + "google-300-trimmed.ser.gz",allData);
  System.err.println("Making the training set...");
  ConcatVectorNamespace namespace=new ConcatVectorNamespace();
  int trainSize=train.size();
  GraphicalModel[] trainingSet=new GraphicalModel[trainSize];
  for (int i=0; i < trainSize; i++) {
    if (i % 10 == 0) {
      System.err.println(i + "/" + trainSize);
    }
    trainingSet[i]=generateSentenceModel(namespace,train.get(i),tags);
  }
  System.err.println("Training system...");
  AbstractBatchOptimizer opt=new BacktrackingAdaGradOptimizer();
  ConcatVector weights=opt.optimize(trainingSet,new LogLikelihoodDifferentiableFunction(),namespace.newWeightsVector(),0.01,1.0e-5,false);
  System.err.println("Testing system...");
  Map<String,Double> correctChunk=new HashMap<>();
  Map<String,Double> foundCorrect=new HashMap<>();
  Map<String,Double> foundGuessed=new HashMap<>();
  double correct=0.0;
  double total=0.0;
  for (  CoNLLSentence sentence : testA) {
    GraphicalModel model=generateSentenceModel(namespace,sentence,tags);
    int[] guesses=new CliqueTree(model,weights).calculateMAP();
    String[] nerGuesses=new String[guesses.length];
    for (int i=0; i < guesses.length; i++) {
      nerGuesses[i]=tags.get(guesses[i]);
      if (nerGuesses[i].equals(sentence.ner.get(i))) {
        correct++;
        correctChunk.put(nerGuesses[i],correctChunk.getOrDefault(nerGuesses[i],0.) + 1);
      }
      total++;
      foundCorrect.put(sentence.ner.get(i),foundCorrect.getOrDefault(sentence.ner.get(i),0.) + 1);
      foundGuessed.put(nerGuesses[i],foundGuessed.getOrDefault(nerGuesses[i],0.) + 1);
    }
  }
  System.err.println("\nSystem results:\n");
  System.err.println("Accuracy: " + (correct / total) + "\n");
  for (  String tag : tags) {
    double precision=foundGuessed.getOrDefault(tag,0.0) == 0 ? 0.0 : correctChunk.getOrDefault(tag,0.0) / foundGuessed.get(tag);
    double recall=foundCorrect.getOrDefault(tag,0.0) == 0 ? 0.0 : correctChunk.getOrDefault(tag,0.0) / foundCorrect.get(tag);
    double f1=(precision + recall == 0.0) ? 0.0 : (precision * recall * 2) / (precision + recall);
    System.err.println(tag + " (" + foundCorrect.getOrDefault(tag,0.0).intValue()+ ")");
    System.err.println("\tP:" + precision + " ("+ correctChunk.getOrDefault(tag,0.0).intValue()+ "/"+ foundGuessed.getOrDefault(tag,0.0).intValue()+ ")");
    System.err.println("\tR:" + recall + " ("+ correctChunk.getOrDefault(tag,0.0).intValue()+ "/"+ foundCorrect.getOrDefault(tag,0.0).intValue()+ ")");
    System.err.println("\tF1:" + f1);
  }
}
