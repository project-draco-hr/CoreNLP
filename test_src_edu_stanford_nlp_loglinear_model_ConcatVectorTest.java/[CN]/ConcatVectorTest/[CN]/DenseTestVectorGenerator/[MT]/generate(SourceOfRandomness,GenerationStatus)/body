{
  int length=sourceOfRandomness.nextInt(10);
  double[][] trueValues=new double[length][];
  boolean[] sparse=new boolean[length];
  int[] sizes=new int[length];
  for (int i=0; i < length; i++) {
    boolean isSparse=sourceOfRandomness.nextBoolean();
    sparse[i]=isSparse;
    if (isSparse) {
      sizes[i]=-1;
    }
 else {
      int componentLength=sourceOfRandomness.nextInt(SPARSE_VECTOR_LENGTH);
      sizes[i]=componentLength;
    }
  }
  ConcatVector mv=new ConcatVector(length);
  for (int i=0; i < length; i++) {
    if (sparse[i]) {
      trueValues[i]=new double[SPARSE_VECTOR_LENGTH];
      int sparseIndex=sourceOfRandomness.nextInt(SPARSE_VECTOR_LENGTH);
      double sparseValue=sourceOfRandomness.nextDouble();
      trueValues[i][sparseIndex]=sparseValue;
      mv.setSparseComponent(i,sparseIndex,sparseValue);
    }
 else {
      trueValues[i]=new double[sizes[i]];
      if (sizes[i] > 0) {
        for (int j=0; j < sizes[i]; j++) {
          trueValues[i][j]=sourceOfRandomness.nextDouble();
        }
        mv.setDenseComponent(i,trueValues[i]);
      }
    }
  }
  return new DenseTestVector(trueValues,mv);
}
