{
  mLog.fine("Reading document " + prefix);
  AceDocument doc=null;
  if (usePredictedBoundaries == false) {
    doc=AceDomReader.parseDocument(new File(prefix + XML_EXT));
  }
 else {
    int lastSlash=prefix.lastIndexOf(File.separator);
    assert(lastSlash > 0 && lastSlash < prefix.length() - 1);
    String id=prefix.substring(lastSlash + 1);
    doc=new AceDocument(id);
  }
  doc.setPrefix(prefix);
  String trueCasedFileName=prefix + ORIG_EXT + ".truecase";
  if ((new File(trueCasedFileName).exists())) {
    mLog.severe("Using truecased file: " + trueCasedFileName);
    doc.readRawBytes(trueCasedFileName);
  }
 else {
    doc.readRawBytes(prefix + ORIG_EXT);
  }
  int offsetToSubtract=0;
  List<List<AceToken>> sentences=AceSentenceSegmenter.tokenizeAndSegmentSentences(prefix);
  doc.setSentences(sentences);
  for (  List<AceToken> sentence : sentences) {
    for (    AceToken token : sentence) {
      offsetToSubtract=token.adjustPhrasePositions(offsetToSubtract,token.getLiteral());
      doc.addToken(token);
    }
  }
  doc.matchCharSeqs(prefix);
  Set<String> entityKeys=doc.mEntityMentions.keySet();
  int sentence;
  for (  String key : entityKeys) {
    AceEntityMention em=doc.mEntityMentions.get(key);
    sentence=doc.mTokens.get(em.getHead().getTokenStart()).getSentence();
    while (sentence >= doc.mSentenceEntityMentions.size()) {
      doc.mSentenceEntityMentions.add(new ArrayList<AceEntityMention>());
      doc.mSentenceRelationMentions.add(new ArrayList<AceRelationMention>());
      doc.mSentenceEventMentions.add(new ArrayList<AceEventMention>());
    }
    ArrayList<AceEntityMention> sentEnts=doc.mSentenceEntityMentions.get(sentence);
    boolean added=false;
    for (int i=0; i < sentEnts.size(); i++) {
      AceEntityMention crt=sentEnts.get(i);
      if ((crt.getHead().getTokenStart() > em.getHead().getTokenStart()) || (crt.getHead().getTokenStart() == em.getHead().getTokenStart() && crt.getHead().getTokenEnd() > em.getHead().getTokenEnd())) {
        sentEnts.add(i,em);
        added=true;
        break;
      }
    }
    if (!added) {
      sentEnts.add(em);
    }
  }
  Set<String> relKeys=doc.mRelationMentions.keySet();
  for (  String key : relKeys) {
    AceRelationMention rm=doc.mRelationMentions.get(key);
    sentence=doc.mTokens.get(rm.getArg(0).getHead().getTokenStart()).getSentence();
    ArrayList<AceRelationMention> sentRels=doc.mSentenceRelationMentions.get(sentence);
    boolean added=false;
    for (int i=0; i < sentRels.size(); i++) {
      AceRelationMention crt=sentRels.get(i);
      if ((crt.getMinTokenStart() > rm.getMinTokenStart()) || (crt.getMinTokenStart() == rm.getMinTokenStart() && crt.getMaxTokenEnd() > rm.getMaxTokenEnd())) {
        sentRels.add(i,rm);
        added=true;
        break;
      }
    }
    if (!added) {
      sentRels.add(rm);
    }
  }
  Set<String> eventKeys=doc.mEventMentions.keySet();
  for (  String key : eventKeys) {
    AceEventMention em=doc.mEventMentions.get(key);
    sentence=doc.mTokens.get(em.getMinTokenStart()).getSentence();
    while (sentence >= doc.mSentenceEntityMentions.size()) {
      doc.mSentenceEntityMentions.add(new ArrayList<AceEntityMention>());
      doc.mSentenceRelationMentions.add(new ArrayList<AceRelationMention>());
      doc.mSentenceEventMentions.add(new ArrayList<AceEventMention>());
    }
    ArrayList<AceEventMention> sentEvents=doc.mSentenceEventMentions.get(sentence);
    boolean added=false;
    for (int i=0; i < sentEvents.size(); i++) {
      AceEventMention crt=sentEvents.get(i);
      if ((crt.getMinTokenStart() > em.getMinTokenStart()) || (crt.getMinTokenStart() == em.getMinTokenStart() && crt.getMaxTokenEnd() > em.getMaxTokenEnd())) {
        sentEvents.add(i,em);
        added=true;
        break;
      }
    }
    if (!added) {
      sentEvents.add(em);
    }
  }
  return doc;
}
