{
  final Properties options=StringUtils.argsToProperties(args,argOptionDefs());
  if (options.containsKey("help")) {
    System.err.println(usage());
    return;
  }
  String encoding=options.getProperty("encoding","utf-8");
  boolean printSentenceLengths=PropertiesUtils.getBool(options,"printSentenceLengths",false);
  String xmlElementDelimiter=options.getProperty("xml",null);
  DocType docType=xmlElementDelimiter == null ? DocType.Plain : DocType.XML;
  String sentenceDelimiter=options.containsKey("noTokenization") ? System.getProperty("line.separator") : null;
  String tagDelimiter=options.getProperty("tag",null);
  String[] sentenceDelims=null;
  int numFactoryFlags=0;
  boolean suppressEscaping=options.containsKey("suppressEscaping");
  if (suppressEscaping)   numFactoryFlags+=1;
  boolean customTokenizer=options.containsKey("tokenizerOptions");
  if (customTokenizer)   numFactoryFlags+=1;
  boolean printOriginalText=options.containsKey("printOriginalText");
  if (printOriginalText)   numFactoryFlags+=1;
  boolean whitespaceTokenization=options.containsKey("whitespaceTokenization");
  if (whitespaceTokenization)   numFactoryFlags+=1;
  if (numFactoryFlags > 1) {
    System.err.println("Only one tokenizer flag allowed at a time: ");
    System.err.println("  -suppressEscaping, -tokenizerOptions, -printOriginalText, -whitespaceTokenization");
    return;
  }
  TokenizerFactory<? extends HasWord> tf=null;
  if (suppressEscaping) {
    tf=PTBTokenizer.factory(new CoreLabelTokenFactory(),"ptb3Escaping=false");
  }
 else   if (customTokenizer) {
    tf=PTBTokenizer.factory(new CoreLabelTokenFactory(),options.getProperty("tokenizerOptions"));
  }
 else   if (printOriginalText) {
    tf=PTBTokenizer.factory(new CoreLabelTokenFactory(),"invertible=true");
  }
 else   if (whitespaceTokenization) {
    List<String> whitespaceDelims=new ArrayList<>(Arrays.asList(DocumentPreprocessor.DEFAULT_SENTENCE_DELIMS));
    whitespaceDelims.add(WhitespaceLexer.NEWLINE);
    sentenceDelims=whitespaceDelims.toArray(new String[whitespaceDelims.size()]);
  }
 else {
    tf=PTBTokenizer.factory(new CoreLabelTokenFactory(),"");
  }
  String fileList=options.getProperty("",null);
  String[] files=fileList == null ? new String[1] : fileList.split("\\s+");
  int numSents=0;
  PrintWriter pw=new PrintWriter(new OutputStreamWriter(System.out,encoding),true);
  for (  String file : files) {
    DocumentPreprocessor docPreprocessor;
    if (file == null || file.isEmpty()) {
      docPreprocessor=new DocumentPreprocessor(new InputStreamReader(System.in,encoding));
    }
 else {
      docPreprocessor=new DocumentPreprocessor(file,docType,encoding);
    }
    if (docType == DocType.XML) {
      docPreprocessor.setElementDelimiter(xmlElementDelimiter);
    }
    docPreprocessor.setTokenizerFactory(tf);
    if (sentenceDelimiter != null) {
      docPreprocessor.setSentenceDelimiter(sentenceDelimiter);
    }
    if (tagDelimiter != null) {
      docPreprocessor.setTagDelimiter(tagDelimiter);
    }
    if (sentenceDelims != null) {
      docPreprocessor.setSentenceFinalPuncWords(sentenceDelims);
    }
    for (    List<HasWord> sentence : docPreprocessor) {
      numSents++;
      if (printSentenceLengths) {
        System.err.printf("Length: %d%n",sentence.size());
      }
      boolean printSpace=false;
      for (      HasWord word : sentence) {
        if (printOriginalText) {
          CoreLabel cl=(CoreLabel)word;
          if (!printSpace) {
            pw.print(cl.get(CoreAnnotations.BeforeAnnotation.class));
            printSpace=true;
          }
          pw.print(cl.get(CoreAnnotations.OriginalTextAnnotation.class));
          pw.print(cl.get(CoreAnnotations.AfterAnnotation.class));
        }
 else {
          if (printSpace)           pw.print(" ");
          printSpace=true;
          pw.print(word.word());
        }
      }
      pw.println();
    }
  }
  pw.close();
  System.err.printf("Read in %d sentences.%n",numSents);
}
