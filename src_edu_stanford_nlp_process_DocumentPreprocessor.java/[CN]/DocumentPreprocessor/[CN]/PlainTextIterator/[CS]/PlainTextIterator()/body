{
  boolean eolIsSignificant=false;
  sentDelims=Generics.newHashSet();
  if (sentenceDelimiter == null) {
    if (sentenceFinalPuncWords != null) {
      sentDelims.addAll(Arrays.asList(sentenceFinalPuncWords));
    }
    delimFollowers=Generics.newHashSet(Arrays.asList(sentenceFinalFollowers));
  }
 else {
    sentDelims.add(sentenceDelimiter);
    delimFollowers=Generics.newHashSet();
    eolIsSignificant=wsPattern.matcher(sentenceDelimiter).matches();
    if (eolIsSignificant) {
      sentDelims.add(PTBLexer.NEWLINE_TOKEN);
    }
  }
  if (tokenizerFactory == null) {
    eolIsSignificant=sentDelims.contains(WhitespaceLexer.NEWLINE);
    tokenizer=WhitespaceTokenizer.newWordWhitespaceTokenizer(inputReader,eolIsSignificant);
  }
 else {
    if (eolIsSignificant) {
      tokenizer=tokenizerFactory.getTokenizer(inputReader,"tokenizeNLs");
    }
 else {
      tokenizer=tokenizerFactory.getTokenizer(inputReader);
    }
  }
  if (tagDelimiter == null) {
    splitTag=null;
  }
 else {
    splitTag=new Function<String,String[]>(){
      private final String splitRegex=String.format("%s(?!.*%s)",tagDelimiter,tagDelimiter);
      @Override public String[] apply(      String in){
        final String[] splits=in.trim().split(splitRegex);
        if (splits.length == 2)         return splits;
 else {
          String[] oldStr={in};
          return oldStr;
        }
      }
    }
;
  }
}
