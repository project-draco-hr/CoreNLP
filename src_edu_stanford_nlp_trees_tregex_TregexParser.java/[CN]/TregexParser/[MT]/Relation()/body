{
  Token t, strArg=null, numArg=null, negation=null, cat=null;
  Relation r;
  TregexPattern child;
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case RELATION:
    t=jj_consume_token(RELATION);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case NUMBER:
    numArg=jj_consume_token(NUMBER);
  break;
default :
jj_la1[16]=jj_gen;
;
}
break;
case REL_W_STR_ARG:
t=jj_consume_token(REL_W_STR_ARG);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 12:
jj_consume_token(12);
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 14:
negation=jj_consume_token(14);
break;
default :
jj_la1[17]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 15:
cat=jj_consume_token(15);
break;
default :
jj_la1[18]=jj_gen;
;
}
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case REGEX:
strArg=jj_consume_token(REGEX);
break;
case IDENTIFIER:
strArg=jj_consume_token(IDENTIFIER);
break;
case BLANK:
strArg=jj_consume_token(BLANK);
break;
default :
jj_la1[19]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
jj_consume_token(13);
break;
case REGEX:
case 14:
switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
case 14:
negation=jj_consume_token(14);
break;
default :
jj_la1[20]=jj_gen;
;
}
strArg=jj_consume_token(REGEX);
break;
default :
jj_la1[21]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
break;
default :
jj_la1[22]=jj_gen;
jj_consume_token(-1);
throw new ParseException();
}
if (strArg != null) {
String negStr=negation == null ? "" : "!";
String catStr=cat == null ? "" : "@";
r=Relation.getRelation(t.image,negStr + catStr + strArg.image,basicCatFunction,headFinder);
}
 else if (numArg != null) {
if (t.image.endsWith("-")) {
t.image=t.image.substring(0,t.image.length() - 1);
numArg.image="-" + numArg.image;
}
r=Relation.getRelation(t.image,numArg.image,basicCatFunction,headFinder);
}
 else {
r=Relation.getRelation(t.image,basicCatFunction,headFinder);
}
child=Node(r);
{
if (true) return child;
}
throw new Error("Missing return statement in function");
}
