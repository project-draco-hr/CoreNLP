{
  this.patterns=patterns;
  Function<NodePattern<CoreMap>,Triple<Class,String,Boolean>> textTriggerFilter=new Function<NodePattern<CoreMap>,Triple<Class,String,Boolean>>(){
    @Override public Triple<Class,String,Boolean> apply(    NodePattern<CoreMap> in){
      if (in instanceof CoreMapNodePattern) {
        CoreMapNodePattern p=(CoreMapNodePattern)in;
        for (        Pair<Class,NodePattern> v : p.getAnnotationPatterns()) {
          if (v.first == CoreAnnotations.TextAnnotation.class && v.second instanceof CoreMapNodePattern.StringAnnotationPattern) {
            return Triple.makeTriple(v.first,((CoreMapNodePattern.StringAnnotationPattern)v.second).target,((CoreMapNodePattern.StringAnnotationPattern)v.second).ignoreCase());
          }
        }
      }
      return null;
    }
  }
;
  for (  SequencePattern<CoreMap> pattern : patterns) {
    Triple<Class,String,Boolean> firstTextTrigger=pattern.findNodePattern(textTriggerFilter);
    if (firstTextTrigger != null) {
      if (firstTextTrigger.third) {
        lowercaseStringTriggers.add(firstTextTrigger.first,firstTextTrigger.second.toLowerCase(),pattern);
      }
 else {
        annotationTriggers.add(firstTextTrigger.first,firstTextTrigger.second,pattern);
      }
    }
 else {
      alwaysTriggered.add(pattern);
    }
  }
}
