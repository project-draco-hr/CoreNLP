{
  Pattern commaPattern=Pattern.compile("\\s*,\\s*");
  BufferedReader br=IOUtils.getBufferedFileReader(filename);
  String headerString=br.readLine();
  String[] header=commaPattern.split(headerString);
  Map<String,Integer> headerIndex=new HashMap<String,Integer>();
  for (int i=0; i < header.length; i++) {
    headerIndex.put(header[i],i);
  }
  int iName=headerIndex.get("unit");
  int iPrefix=headerIndex.get("prefix");
  int iSymbol=headerIndex.get("symbol");
  int iType=headerIndex.get("type");
  int iSystem=headerIndex.get("system");
  int iDefaultUnit=headerIndex.get("defaultUnit");
  int iDefaultUnitScale=headerIndex.get("defaultUnitScale");
  String line;
  List<Unit> list=new ArrayList<Unit>();
  Map<String,Unit> unitsByName=new HashMap<String,Unit>();
  Map<String,Pair<String,Double>> unitToDefaultUnits=new HashMap<String,Pair<String,Double>>();
  while ((line=br.readLine()) != null) {
    String[] fields=commaPattern.split(line);
    Unit unit=new Unit(fields[iName],fields[iSymbol],fields[iType].toUpperCase());
    unit.system=fields[iSystem];
    if (fields.length > iPrefix) {
      unit.prefixSystem=fields[iPrefix];
    }
    if (fields.length > iDefaultUnit) {
      double scale=1.0;
      if (fields.length > iDefaultUnitScale) {
        scale=Double.parseDouble(fields[iDefaultUnitScale]);
      }
      unitToDefaultUnits.put(unit.getName(),Pair.makePair(fields[iDefaultUnit],scale));
    }
    unitsByName.put(unit.getName(),unit);
    list.add(unit);
  }
  for (  Map.Entry<String,Pair<String,Double>> entry : unitToDefaultUnits.entrySet()) {
    Unit unit=unitsByName.get(entry.getKey());
    Unit defaultUnit=unitsByName.get(entry.getValue().first);
    if (defaultUnit != null) {
      unit.defaultUnit=defaultUnit;
      unit.defaultUnitScale=entry.getValue().second;
    }
 else {
      Redwood.Util.warn("Unknown default unit " + entry.getValue().first + " for "+ entry.getKey());
    }
  }
  br.close();
  return list;
}
