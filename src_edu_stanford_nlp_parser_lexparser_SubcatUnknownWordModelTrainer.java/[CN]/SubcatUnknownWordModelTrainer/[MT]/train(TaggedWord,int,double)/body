{
  IntTaggedWord iTW=new IntTaggedWord(tw.word(),tw.tag(),wordIndex,tagIndex);
  String tagString=tagIndex.get(iTW.tag);
  boolean isMarked=tagString.indexOf('_') >= 0;
  if (targetWords.contains(Integer.valueOf(iTW.word)) && isMarked) {
    String wordString=wordIndex.get(iTW.word);
    IntTaggedWord miTW=new IntTaggedWord(wordIndex.indexOf(wordString + "^",true),iTW.tag);
    seenCounter.incrementCount(miTW,weight);
    IntTaggedWord miT=new IntTaggedWord(nullWord,miTW.tag);
    seenCounter.incrementCount(miT,weight);
    IntTaggedWord miW=new IntTaggedWord(miTW.word,nullTag);
    seenCounter.incrementCount(miW,weight);
    IntTaggedWord mi=new IntTaggedWord(nullWord,nullTag);
    seenCounter.incrementCount(mi,weight);
  }
  if (isMarked) {
    tagString=treeExtractor.removeSubcatMarkersFromString(tagString,new ArrayList<Integer>());
    iTW=new IntTaggedWord(iTW.word,tagIndex.indexOf(tagString,true));
  }
  seenCounter.incrementCount(iTW,weight);
  IntTaggedWord iT=new IntTaggedWord(nullWord,iTW.tag);
  seenCounter.incrementCount(iT,weight);
  IntTaggedWord iW=new IntTaggedWord(iTW.word,nullTag);
  seenCounter.incrementCount(iW,weight);
  IntTaggedWord i=new IntTaggedWord(nullWord,nullTag);
  seenCounter.incrementCount(i,weight);
  if (treesRead > totalTrees / 2) {
    if (seenCounter.getCount(iW) < 2) {
      wordIndex.indexOf(Lexicon.UNKNOWN_WORD,true);
      int s=model.getSignatureIndex(iTW.word,loc,wordIndex.get(iTW.word));
      IntTaggedWord iTS=new IntTaggedWord(s,iTW.tag);
      IntTaggedWord iS=new IntTaggedWord(s,nullTag);
      unSeenCounter.incrementCount(iTS,weight);
      unSeenCounter.incrementCount(iT,weight);
      unSeenCounter.incrementCount(iS,weight);
      unSeenCounter.incrementCount(i,weight);
    }
  }
}
