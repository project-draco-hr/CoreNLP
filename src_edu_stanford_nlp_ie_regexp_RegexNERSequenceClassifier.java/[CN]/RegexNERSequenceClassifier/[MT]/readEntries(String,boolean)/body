{
  List<Entry> entries=new ArrayList<Entry>();
  try {
    InputStream is=getClass().getClassLoader().getResourceAsStream(mapping);
    if (is == null)     is=new FileInputStream(mapping);
    BufferedReader rd=new BufferedReader(new InputStreamReader(is));
    int lineCount=0;
    for (String line; (line=rd.readLine()) != null; ) {
      lineCount++;
      String[] split=line.split("\t");
      if (split.length < 2 || split.length > 4)       throw new RuntimeException("Provided mapping file is in wrong format");
      String[] regexes=split[0].trim().split("\\s+");
      String type=split[1].trim();
      Set<String> overwritableTypes=new HashSet<String>();
      overwritableTypes.add(flags.backgroundSymbol);
      overwritableTypes.add(null);
      double priority=0;
      List<Pattern> tokens=new ArrayList<Pattern>();
      try {
        if (split.length >= 3)         overwritableTypes.addAll(Arrays.asList(split[2].trim().split(",")));
        if (split.length == 4)         priority=Double.parseDouble(split[3].trim());
        for (        String str : regexes) {
          if (ignoreCase)           tokens.add(Pattern.compile(str,Pattern.CASE_INSENSITIVE));
 else           tokens.add(Pattern.compile(str));
        }
      }
 catch (      NumberFormatException e) {
        System.err.println("ERROR: Invalid line " + lineCount + " in regexner file "+ mapping+ ": \""+ line+ "\"!");
        throw e;
      }
      entries.add(new Entry(tokens,type,overwritableTypes,priority));
    }
    rd.close();
    is.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  Collections.sort(entries);
  return entries;
}
