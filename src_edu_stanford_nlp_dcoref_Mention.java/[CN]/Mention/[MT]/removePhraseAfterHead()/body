{
  String removed="";
  int posComma=-1;
  int posWH=-1;
  for (int i=0; i < this.originalSpan.size(); i++) {
    CoreLabel w=this.originalSpan.get(i);
    if (posComma == -1 && w.get(CoreAnnotations.PartOfSpeechAnnotation.class).equals(","))     posComma=this.startIndex + i;
    if (posWH == -1 && w.get(CoreAnnotations.PartOfSpeechAnnotation.class).startsWith("W"))     posWH=this.startIndex + i;
  }
  if (posComma != -1 && this.headIndex < posComma) {
    StringBuilder os=new StringBuilder();
    for (int i=0; i < posComma - this.startIndex; i++) {
      if (i > 0)       os.append(" ");
      os.append(this.originalSpan.get(i).get(CoreAnnotations.TextAnnotation.class));
    }
    removed=os.toString();
  }
  if (posComma == -1 && posWH != -1 && this.headIndex < posWH) {
    StringBuilder os=new StringBuilder();
    for (int i=0; i < posWH - this.startIndex; i++) {
      if (i > 0)       os.append(" ");
      os.append(this.originalSpan.get(i).get(CoreAnnotations.TextAnnotation.class));
    }
    removed=os.toString();
  }
  if (posComma == -1 && posWH == -1) {
    removed=this.spanToString();
  }
  return removed;
}
