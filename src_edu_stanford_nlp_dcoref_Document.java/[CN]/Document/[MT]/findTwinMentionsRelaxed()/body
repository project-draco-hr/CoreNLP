{
  for (int sentNum=0; sentNum < goldOrderedMentionsBySentence.size(); sentNum++) {
    List<Mention> golds=goldOrderedMentionsBySentence.get(sentNum);
    List<Mention> predicts=predictedOrderedMentionsBySentence.get(sentNum);
    Map<IntPair,Mention> goldMentionPositions=Generics.newHashMap();
    Map<Integer,LinkedList<Mention>> goldMentionHeadPositions=Generics.newHashMap();
    for (    Mention g : golds) {
      goldMentionPositions.put(new IntPair(g.startIndex,g.endIndex),g);
      if (!goldMentionHeadPositions.containsKey(g.headIndex)) {
        goldMentionHeadPositions.put(g.headIndex,new LinkedList<>());
      }
      goldMentionHeadPositions.get(g.headIndex).add(g);
    }
    List<Mention> remains=new ArrayList<>();
    for (    Mention p : predicts) {
      IntPair pos=new IntPair(p.startIndex,p.endIndex);
      if (goldMentionPositions.containsKey(pos)) {
        Mention g=goldMentionPositions.get(pos);
        p.mentionID=g.mentionID;
        p.twinless=false;
        g.twinless=false;
        goldMentionHeadPositions.get(g.headIndex).remove(g);
        if (goldMentionHeadPositions.get(g.headIndex).isEmpty()) {
          goldMentionHeadPositions.remove(g.headIndex);
        }
      }
 else       remains.add(p);
    }
    for (    Mention r : remains) {
      if (goldMentionHeadPositions.containsKey(r.headIndex)) {
        Mention g=goldMentionHeadPositions.get(r.headIndex).poll();
        r.mentionID=g.mentionID;
        r.twinless=false;
        g.twinless=false;
        if (goldMentionHeadPositions.get(g.headIndex).isEmpty()) {
          goldMentionHeadPositions.remove(g.headIndex);
        }
      }
    }
  }
}
