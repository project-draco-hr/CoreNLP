{
  List<CoreLabel> sent=sentences.get(sentNum).get(CoreAnnotations.TokensAnnotation.class);
  for (int i=startIndex; i < endIndex; i++) {
    if (sent.get(i).get(CoreAnnotations.UtteranceAnnotation.class) != 0)     continue;
    String lemma=sent.get(i).get(CoreAnnotations.LemmaAnnotation.class);
    String word=sent.get(i).get(CoreAnnotations.TextAnnotation.class);
    if (dict.reportVerb.contains(lemma)) {
      SemanticGraph dependency=sentences.get(sentNum).get(SemanticGraphCoreAnnotations.AlternativeDependenciesAnnotation.class);
      IndexedWord w=dependency.getNodeByWordPattern(word);
      if (w != null) {
        for (        Pair<GrammaticalRelation,IndexedWord> child : dependency.childPairs(w)) {
          if (child.first().getShortName().equals("nsubj")) {
            String subjectString=child.second().word();
            int subjectIndex=child.second().index();
            IntTuple headPosition=new IntTuple(2);
            headPosition.set(0,sentNum);
            headPosition.set(1,subjectIndex - 1);
            String speaker;
            if (mentionheadPositions.containsKey(headPosition)) {
              speaker=Integer.toString(mentionheadPositions.get(headPosition).mentionID);
            }
 else {
              speaker=subjectString;
            }
            speakers.put(utterNum,speaker);
            return true;
          }
        }
      }
 else {
        SieveCoreferenceSystem.logger.warning("Cannot find node in dependency for word " + word);
      }
    }
  }
  return false;
}
