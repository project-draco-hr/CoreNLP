{
  int devSize=(int)(percentDev * size());
  int trainSize=size() - devSize;
  int[][] devData=new int[devSize][];
  int[] devLabels=new int[devSize];
  int[][] trainData=new int[trainSize][];
  int[] trainLabels=new int[trainSize];
  System.arraycopy(data,0,devData,0,devSize);
  System.arraycopy(labels,0,devLabels,0,devSize);
  System.arraycopy(data,devSize,trainData,0,trainSize);
  System.arraycopy(labels,devSize,trainLabels,0,trainSize);
  if (this instanceof WeightedDataset<?,?>) {
    float[] trainWeights=new float[trainSize];
    float[] devWeights=new float[devSize];
    WeightedDataset<L,F> w=(WeightedDataset<L,F>)this;
    System.arraycopy(w.weights,0,devWeights,0,devSize);
    System.arraycopy(w.weights,devSize,trainWeights,0,trainSize);
    WeightedDataset<L,F> dev=new WeightedDataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize,devWeights);
    WeightedDataset<L,F> train=new WeightedDataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize,trainWeights);
    return new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);
  }
  Dataset<L,F> dev=new Dataset<L,F>(labelIndex,devLabels,featureIndex,devData,devSize);
  Dataset<L,F> train=new Dataset<L,F>(labelIndex,trainLabels,featureIndex,trainData,trainSize);
  return new Pair<GeneralDataset<L,F>,GeneralDataset<L,F>>(train,dev);
}
