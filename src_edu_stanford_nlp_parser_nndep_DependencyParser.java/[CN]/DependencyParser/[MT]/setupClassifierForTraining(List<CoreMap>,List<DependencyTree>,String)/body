{
  double[][] E=new double[knownWords.size() + knownPos.size() + knownLabels.size()][config.embeddingSize];
  double[][] W1=new double[config.hiddenSize][config.embeddingSize * config.numTokens];
  double[] b1=new double[config.hiddenSize];
  double[][] W2=new double[knownLabels.size() * 2 - 1][config.hiddenSize];
  Random random=Util.getRandom();
  for (int i=0; i < W1.length; ++i)   for (int j=0; j < W1[i].length; ++j)   W1[i][j]=random.nextDouble() * 2 * config.initRange - config.initRange;
  for (int i=0; i < b1.length; ++i)   b1[i]=random.nextDouble() * 2 * config.initRange - config.initRange;
  for (int i=0; i < W2.length; ++i)   for (int j=0; j < W2[i].length; ++j)   W2[i][j]=random.nextDouble() * 2 * config.initRange - config.initRange;
  readEmbedFile(embedFile);
  int foundEmbed=0;
  for (int i=0; i < E.length; ++i) {
    int index=-1;
    if (i < knownWords.size()) {
      String str=knownWords.get(i);
      if (embedID.containsKey(str))       index=embedID.get(str);
 else       if (embedID.containsKey(str.toLowerCase()))       index=embedID.get(str.toLowerCase());
    }
    if (index >= 0) {
      ++foundEmbed;
      for (int j=0; j < E[i].length; ++j)       E[i][j]=embeddings[index][j];
    }
 else {
      for (int j=0; j < E[i].length; ++j)       E[i][j]=random.nextDouble() * config.initRange * 2 - config.initRange;
    }
  }
  System.err.println("Found embeddings: " + foundEmbed + " / "+ knownWords.size());
  Dataset trainSet=genTrainExamples(trainSents,trainTrees);
  classifier=new Classifier(config,trainSet,E,W1,b1,W2,preComputed);
}
