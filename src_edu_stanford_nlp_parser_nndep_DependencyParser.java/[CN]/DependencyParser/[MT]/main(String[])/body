{
  Properties props=StringUtils.argsToProperties(args,numArgs);
  DependencyParser parser=new DependencyParser(props);
  if (props.containsKey("trainFile"))   parser.train(props.getProperty("trainFile"),props.getProperty("devFile"),props.getProperty("model"),props.getProperty("embedFile"));
  boolean loaded=false;
  if (props.containsKey("testFile")) {
    parser.loadModelFile(props.getProperty("model"));
    loaded=true;
    parser.testCoNLL(props.getProperty("testFile"),props.getProperty("outFile"));
  }
  if (props.containsKey("parseFile")) {
    if (!loaded) {
      parser.loadModelFile(props.getProperty("model"));
      loaded=true;
    }
    String encoding=parser.config.tlp.getEncoding();
    String inputFilename=props.getProperty("parseFile");
    BufferedReader input;
    try {
      input=inputFilename.equals("-") ? IOUtils.readerFromStdin(encoding) : IOUtils.readerFromString(inputFilename,encoding);
    }
 catch (    IOException e) {
      throw new RuntimeIOException("No input file provided (use -parseFile)",e);
    }
    String outputFilename=props.getProperty("outFile");
    PrintWriter output;
    try {
      output=outputFilename == null || outputFilename.equals("-") ? IOUtils.encodedOutputStreamPrintWriter(System.out,encoding,true) : IOUtils.getPrintWriter(outputFilename,encoding);
    }
 catch (    IOException e) {
      throw new RuntimeIOException("Error opening output file",e);
    }
    parser.parseTextFile(input,output);
  }
}
