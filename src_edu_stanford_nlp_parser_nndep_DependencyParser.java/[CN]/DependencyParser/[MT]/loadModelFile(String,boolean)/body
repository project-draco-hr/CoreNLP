{
  Timing t=new Timing();
  try {
    log.info("Loading depparse model file: " + modelFile + " ... ");
    String s;
    BufferedReader input=IOUtils.readerFromString(modelFile);
    s=input.readLine();
    int nDict=Integer.parseInt(s.substring(s.indexOf('=') + 1));
    s=input.readLine();
    int nPOS=Integer.parseInt(s.substring(s.indexOf('=') + 1));
    s=input.readLine();
    int nLabel=Integer.parseInt(s.substring(s.indexOf('=') + 1));
    s=input.readLine();
    int eSize=Integer.parseInt(s.substring(s.indexOf('=') + 1));
    s=input.readLine();
    int hSize=Integer.parseInt(s.substring(s.indexOf('=') + 1));
    s=input.readLine();
    int nTokens=Integer.parseInt(s.substring(s.indexOf('=') + 1));
    s=input.readLine();
    int nPreComputed=Integer.parseInt(s.substring(s.indexOf('=') + 1));
    knownWords=new ArrayList<>();
    knownPos=new ArrayList<>();
    knownLabels=new ArrayList<>();
    double[][] E=new double[nDict + nPOS + nLabel][eSize];
    String[] splits;
    int index=0;
    for (int k=0; k < nDict; ++k) {
      s=input.readLine();
      splits=s.split(" ");
      knownWords.add(splits[0]);
      for (int i=0; i < eSize; ++i)       E[index][i]=Double.parseDouble(splits[i + 1]);
      index=index + 1;
    }
    for (int k=0; k < nPOS; ++k) {
      s=input.readLine();
      splits=s.split(" ");
      knownPos.add(splits[0]);
      for (int i=0; i < eSize; ++i)       E[index][i]=Double.parseDouble(splits[i + 1]);
      index=index + 1;
    }
    for (int k=0; k < nLabel; ++k) {
      s=input.readLine();
      splits=s.split(" ");
      knownLabels.add(splits[0]);
      for (int i=0; i < eSize; ++i)       E[index][i]=Double.parseDouble(splits[i + 1]);
      index=index + 1;
    }
    generateIDs();
    double[][] W1=new double[hSize][eSize * nTokens];
    for (int j=0; j < W1[0].length; ++j) {
      s=input.readLine();
      splits=s.split(" ");
      for (int i=0; i < W1.length; ++i)       W1[i][j]=Double.parseDouble(splits[i]);
    }
    double[] b1=new double[hSize];
    s=input.readLine();
    splits=s.split(" ");
    for (int i=0; i < b1.length; ++i)     b1[i]=Double.parseDouble(splits[i]);
    double[][] W2=new double[nLabel * 2 - 1][hSize];
    for (int j=0; j < W2[0].length; ++j) {
      s=input.readLine();
      splits=s.split(" ");
      for (int i=0; i < W2.length; ++i)       W2[i][j]=Double.parseDouble(splits[i]);
    }
    preComputed=new ArrayList<>();
    while (preComputed.size() < nPreComputed) {
      s=input.readLine();
      splits=s.split(" ");
      for (      String split : splits) {
        preComputed.add(Integer.parseInt(split));
      }
    }
    input.close();
    classifier=new Classifier(config,E,W1,b1,W2,preComputed);
  }
 catch (  IOException e) {
    throw new RuntimeIOException(e);
  }
  initialize(verbose);
  t.done("Initializing dependency parser");
}
