{
  int numTrans=system.numTransitions();
  Dataset ret=new Dataset(config.numTokens,numTrans);
  Counter<Integer> tokPosCount=new IntCounter<>();
  log.info(Config.SEPARATOR);
  log.info("Generate training examples...");
  for (int i=0; i < sents.size(); ++i) {
    if (i > 0) {
      if (i % 1000 == 0)       log.info(i + " ");
      if (i % 10000 == 0 || i == sents.size() - 1)       log.info();
    }
    if (trees.get(i).isProjective()) {
      Configuration c=system.initialConfiguration(sents.get(i));
      while (!system.isTerminal(c)) {
        String oracle=system.getOracle(c,trees.get(i));
        List<Integer> feature=getFeatures(c);
        List<Integer> label=new ArrayList<>();
        for (int j=0; j < numTrans; ++j) {
          String str=system.transitions.get(j);
          if (str.equals(oracle))           label.add(1);
 else           if (system.canApply(c,str))           label.add(0);
 else           label.add(-1);
        }
        ret.addExample(feature,label);
        for (int j=0; j < feature.size(); ++j)         tokPosCount.incrementCount(feature.get(j) * feature.size() + j);
        system.apply(c,oracle);
      }
    }
  }
  log.info("#Train Examples: " + ret.n);
  List<Integer> sortedTokens=Counters.toSortedList(tokPosCount,false);
  preComputed=new ArrayList<>(sortedTokens.subList(0,Math.min(config.numPreComputed,sortedTokens.size())));
  return ret;
}
