{
  if (args.length < 2) {
    System.err.println("Usage:\n" + "\n" + "MakeTreebankTrainSet [treebankPath] [low] [high] [form0|form1|form2|form3|form4] [maxSentenceSize] [maxNumSentences]");
    System.exit(1);
  }
  String treebankPath=args[0];
  int testlow=Integer.parseInt(args[1]);
  int testhigh=Integer.parseInt(args[2]);
  String verbFormString=args[3];
  int maxSentenceSize=Integer.parseInt(args[4]);
  int maxNumSentences=Integer.parseInt(args[5]);
  DiskTreebank treebank=new DiskTreebank(new StringLabeledScoredTreeReaderFactory());
  treebank.loadPath(treebankPath,new NumberRangeFileFilter(testlow,testhigh,true));
  String[] verbForms=new String[5];
  StringTokenizer st=new StringTokenizer(verbFormString,"|");
  int i=0;
  while (st.hasMoreTokens() && i < 5) {
    verbForms[i++]=st.nextToken();
  }
  int numPrinted=0;
  Iterator<Tree> iter=treebank.iterator();
  while (iter.hasNext()) {
    Tree tree=iter.next();
    if (tree.children() == null || tree.children().length == 0 || tree.children()[0] == null) {
      continue;
    }
    if (containsVerb(tree,verbForms) && tree.yield().size() < maxSentenceSize) {
      tree.pennPrint();
      System.out.println();
      numPrinted++;
      if (numPrinted >= maxNumSentences) {
        System.err.println("Got " + numPrinted + " trees");
        return;
      }
    }
  }
  System.err.println("Got " + numPrinted + " trees");
}
