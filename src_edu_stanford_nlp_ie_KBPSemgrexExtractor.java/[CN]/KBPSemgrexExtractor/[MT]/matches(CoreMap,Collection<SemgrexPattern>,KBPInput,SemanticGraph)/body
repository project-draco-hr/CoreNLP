{
  if (graph == null || graph.isEmpty()) {
    return false;
  }
  List<CoreLabel> tokens=sentence.get(CoreAnnotations.TokensAnnotation.class);
  for (  int i : input.subjectSpan) {
    if ("O".equals(tokens.get(i).ner())) {
      tokens.get(i).setNER(input.subjectType.name);
    }
  }
  for (  int i : input.objectSpan) {
    if ("O".equals(tokens.get(i).ner())) {
      tokens.get(i).setNER(input.objectType.name);
    }
  }
  for (  SemgrexPattern p : rulesForRel) {
    try {
      SemgrexMatcher n=p.matcher(graph);
      while (n.find()) {
        IndexedWord entity=n.getNode("entity");
        IndexedWord slot=n.getNode("slot");
        boolean hasSubject=entity.index() >= input.subjectSpan.start() + 1 && entity.index() <= input.subjectSpan.end();
        boolean hasObject=slot.index() >= input.objectSpan.start() + 1 && slot.index() <= input.objectSpan.end();
        if (hasSubject && hasObject) {
          return true;
        }
      }
    }
 catch (    Exception e) {
      return false;
    }
  }
  return false;
}
