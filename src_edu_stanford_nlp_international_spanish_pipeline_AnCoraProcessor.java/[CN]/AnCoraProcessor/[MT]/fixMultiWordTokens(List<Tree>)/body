{
  boolean ner=PropertiesUtils.getBool(options,"ner",false);
  Factory<TreeNormalizer> tnf=new Factory<TreeNormalizer>(){
    @Override public TreeNormalizer create(){
      return new SpanishTreeNormalizer(true,false,false);
    }
  }
;
  TreeFactory tf=new LabeledScoredTreeFactory();
  ThreadsafeProcessor<Collection<Tree>,Collection<Tree>> processor=new MultiWordProcessor(tnf,tf,ner);
  int availableProcessors=Runtime.getRuntime().availableProcessors();
  MulticoreWrapper<Collection<Tree>,Collection<Tree>> wrapper=new MulticoreWrapper<>(availableProcessors,processor,false);
  int numChunks=availableProcessors * 20;
  List<List<Tree>> chunked=CollectionUtils.partitionIntoFolds(trees,numChunks);
  List<Tree> ret=new ArrayList<>();
  for (  final Collection<Tree> coll : chunked) {
    wrapper.put(coll);
    while (wrapper.peek())     ret.addAll(wrapper.poll());
  }
  wrapper.join();
  while (wrapper.peek())   ret.addAll(wrapper.poll());
  return ret;
}
