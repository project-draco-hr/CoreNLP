{
  Minimizer unconstrainedMinimizer=new CGMinimizer();
  ConstrainedMinimizer constrainedMinimizer=new PenaltyConstrainedMinimizer(unconstrainedMinimizer);
  DiffFunction objective=new SumSquaresFunction();
  DiffFunction[] eqConstraints=new DiffFunction[1];
  eqConstraints[0]=new SumToOneConstraint(4);
  DiffFunction[] ineqConstraints=new DiffFunction[2];
  ineqConstraints[0]=new ComponentMinimumConstraint(4,1,0.3);
  ineqConstraints[1]=new ComponentMinimumConstraint(4,2,0.5);
  DiffFunction[] noConstraints=new DiffFunction[0];
  double[] initial={0.5,0.5,0.5,0.5};
  double[] x=unconstrainedMinimizer.minimize(objective,1e-4,initial);
  System.out.println("Unconstrained minimum is :            " + objective.valueAt(x) + " at "+ arrayToString(x));
  double[] xEQ=constrainedMinimizer.minimize(objective,1e-4,eqConstraints,1e-8,noConstraints,0.0,initial);
  System.out.println("Equality-conconstrained minimum is :  " + objective.valueAt(xEQ) + " at "+ arrayToString(xEQ));
  double[] xINEQ=constrainedMinimizer.minimize(objective,1e-4,noConstraints,0,ineqConstraints,1e-8,initial);
  System.out.println("Inequality-conconstrained minimum is :" + objective.valueAt(xINEQ) + " at "+ arrayToString(xINEQ));
  double[] xBOTH=constrainedMinimizer.minimize(objective,1e-4,eqConstraints,1e-8,ineqConstraints,1e-8,initial);
  System.out.println("Mixed-conconstrained minimum is :     " + objective.valueAt(xBOTH) + " at "+ arrayToString(xBOTH));
}
