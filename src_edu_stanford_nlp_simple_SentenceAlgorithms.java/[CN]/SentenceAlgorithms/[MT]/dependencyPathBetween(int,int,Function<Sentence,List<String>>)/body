{
  LinkedList<Integer> rootToStart=new LinkedList<>();
  LinkedList<Integer> rootToEnd=new LinkedList<>();
  int startAncestor=start;
  List<Optional<Integer>> governors=sentence.governors();
  Set<Integer> seenVertices=new HashSet<>();
  while (startAncestor >= 0 && governors.get(startAncestor).isPresent()) {
    if (seenVertices.contains(startAncestor)) {
      return Collections.EMPTY_LIST;
    }
    seenVertices.add(startAncestor);
    rootToStart.addFirst(startAncestor);
    startAncestor=governors.get(startAncestor).get();
  }
  if (startAncestor == -1) {
    rootToStart.addFirst(-1);
  }
  int endAncestor=end;
  seenVertices.clear();
  while (endAncestor >= 0 && governors.get(endAncestor).isPresent()) {
    if (seenVertices.contains(endAncestor)) {
      return Collections.EMPTY_LIST;
    }
    seenVertices.add(endAncestor);
    rootToEnd.addFirst(endAncestor);
    endAncestor=governors.get(endAncestor).get();
  }
  if (endAncestor == -1) {
    rootToEnd.addFirst(-1);
  }
  int leastCommonNodeIndex=(rootToStart.size() == 0 || rootToEnd.size() == 0 || !rootToStart.get(0).equals(rootToEnd.get(0))) ? -1 : 0;
  for (int i=1; i < Math.min(rootToStart.size(),rootToEnd.size()); ++i) {
    if (rootToStart.get(i).equals(rootToEnd.get(i))) {
      leastCommonNodeIndex=i;
    }
  }
  if (leastCommonNodeIndex < 0) {
    return Collections.EMPTY_LIST;
  }
  List<String> path=new ArrayList<>();
  for (int i=rootToStart.size() - 1; i > leastCommonNodeIndex; --i) {
    path.add(selector.apply(sentence).get(rootToStart.get(i)));
    path.add("<-" + sentence.incomingDependencyLabel(rootToStart.get(i)).orElse("dep") + "-");
  }
  path.add(selector.apply(sentence).get(rootToStart.get(leastCommonNodeIndex)));
  for (int i=leastCommonNodeIndex + 1; i < rootToEnd.size(); ++i) {
    path.add("-" + sentence.incomingDependencyLabel(rootToEnd.get(i)).orElse("dep") + "->");
    path.add(selector.apply(sentence).get(rootToEnd.get(i)));
  }
  return path;
}
