{
  os.println("The following properties can be defined:");
  os.println("(if -props or -annotators is not passed in, default properties will be loaded via the classpath)");
  os.println("\t\"props\" - path to file with configuration properties");
  os.println("\t\"annotators\" - comma separated list of annotators");
  os.println("\tThe following annotators are supported: cleanxml, tokenize, ssplit, pos, lemma, ner, truecase, parse, coref, dcoref, nfl");
  os.println("\n\tIf annotator \"tokenize\" is defined:");
  os.println("\t\"tokenize.options\" - PTBTokenizer options (see edu.stanford.nlp.process.PTBTokenizer for details)");
  os.println("\t\"tokenize.whitespace\" - If true, just use whitespace tokenization");
  os.println("\n\tIf annotator \"cleanxml\" is defined:");
  os.println("\t\"clean.xmltags\" - regex of tags to extract text from");
  os.println("\t\"clean.sentenceendingtags\" - regex of tags which mark sentence endings");
  os.println("\t\"clean.allowflawedxml\" - if set to true, don't complain about XML errors");
  os.println("\n\tIf annotator \"pos\" is defined:");
  os.println("\t\"pos.maxlen\" - maximum length of sentence to POS tag");
  os.println("\t\"pos.model\" - path towards the POS tagger model");
  os.println("\n\tIf annotator \"ner\" is defined:");
  os.println("\t\"ner.model.3class\" - path towards the three-class NER model");
  os.println("\t\"ner.model.7class\" - path towards the seven-class NER model");
  os.println("\t\"ner.model.MISCclass\" - path towards the NER model with a MISC class");
  os.println("\n\tIf annotator \"truecase\" is defined:");
  os.println("\t\"truecase.model\" - path towards the true-casing model; default: " + DefaultPaths.DEFAULT_TRUECASE_MODEL);
  os.println("\t\"truecase.bias\" - class bias of the true case model; default: " + TrueCaseAnnotator.DEFAULT_MODEL_BIAS);
  os.println("\t\"truecase.mixedcasefile\" - path towards the mixed case file; default: " + DefaultPaths.DEFAULT_TRUECASE_DISAMBIGUATION_LIST);
  os.println("\n\tIf annotator \"nfl\" is defined:");
  os.println("\t\"nfl.gazetteer\" - path towards the gazetteer for the NFL domain");
  os.println("\t\"nfl.relation.model\" - path towards the NFL relation extraction model");
  os.println("\n\tIf annotator \"parse\" is defined:");
  os.println("\t\"parse.model\" - path towards the PCFG parser model");
  os.println("\nCommand line properties:");
  os.println("\t\"file\" - run the pipeline on the content of this file, or on the content of the files in this directory");
  os.println("\t         XML output is generated for every input file \"file\" as file.xml");
  os.println("\t\"extension\" - if -file used with a directory, process only the files with this extension");
  os.println("\t\"filelist\" - run the pipeline on the list of files given in this file");
  os.println("\t             output is generated for every input file as file.outputExtension");
  os.println("\t\"outputDirectory\" - where to put output (defaults to the current directory)");
  os.println("\t\"outputExtension\" - extension to use for the output file (defaults to \".xml\" for XML, \".ser.gz\" for serialized).  Don't forget the dot!");
  os.println("\t\"outputFormat\" - \"xml\" to output XML (default), \"serialized\" to output serialized Java objects, \"text\" to output text");
  os.println("\t\"serializer\" - Class of annotation serializer to use when outputFormat is \"serialized\".  By default, uses Java serialization.");
  os.println("\t\"replaceExtension\" - flag to chop off the last extension before adding outputExtension to file");
  os.println("\t\"noClobber\" - don't automatically override (clobber) output files that already exist");
  os.println("\t\"threads\" - multithread on this number of threads");
  os.println("\nIf none of the above are present, run the pipeline in an interactive shell (default properties will be loaded from the classpath).");
  os.println("The shell accepts input from stdin and displays the output at stdout.");
  os.println("\nRun with -help [topic] for more help on a specific topic.");
  os.println("Current topics include: parser");
  os.println();
}
