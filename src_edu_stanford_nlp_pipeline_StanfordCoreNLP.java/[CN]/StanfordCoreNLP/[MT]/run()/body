{
  Timing tim=new Timing();
  StanfordRedwoodConfiguration.minimalSetup();
  String numThreadsString=(this.properties == null) ? null : this.properties.getProperty("threads");
  int numThreads=1;
  try {
    if (numThreadsString != null) {
      numThreads=Integer.parseInt(numThreadsString);
    }
  }
 catch (  NumberFormatException e) {
    logger.err("-threads [number]: was not given a valid number: " + numThreadsString);
  }
  logger.info("");
  if (properties.containsKey("file") || properties.containsKey("textFile")) {
    String fileName=properties.getProperty("file");
    if (fileName == null) {
      fileName=properties.getProperty("textFile");
    }
    Collection<File> files=new FileSequentialCollection(new File(fileName),properties.getProperty("extension"),true);
    this.processFiles(null,files,numThreads);
  }
 else   if (properties.containsKey("filelist")) {
    String fileName=properties.getProperty("filelist");
    Collection<File> inputFiles=readFileList(fileName);
    Collection<File> files=new ArrayList<>(inputFiles.size());
    for (    File file : inputFiles) {
      if (file.isDirectory()) {
        files.addAll(new FileSequentialCollection(new File(fileName),properties.getProperty("extension"),true));
      }
 else {
        files.add(file);
      }
    }
    this.processFiles(null,files,numThreads);
  }
 else {
    shell(this);
  }
  if (TIME) {
    logger.info("");
    logger.info(this.timingInformation());
    logger.info("Pipeline setup: " + Timing.toSecondsString(pipelineSetupTime) + " sec.");
    logger.info("Total time for StanfordCoreNLP pipeline: " + Timing.toSecondsString(pipelineSetupTime + tim.report()) + " sec.");
  }
}
