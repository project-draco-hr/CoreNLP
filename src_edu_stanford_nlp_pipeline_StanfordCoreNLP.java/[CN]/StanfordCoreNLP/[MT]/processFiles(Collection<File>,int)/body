{
  List<Runnable> toRun=new LinkedList<Runnable>();
  for (  final File file : files) {
    toRun.add(new Runnable(){
      @Override public void run(){
        try {
          String outputFilename=new File(properties.getProperty("outputDirectory","."),file.getName()).getPath();
          if (properties.getProperty("replaceExtension") != null) {
            int lastDot=outputFilename.lastIndexOf('.');
            if (lastDot > 0) {
              outputFilename=outputFilename.substring(0,lastDot);
            }
          }
          String outputFormat=properties.getProperty("outputFormat",DEFAULT_OUTPUT_FORMAT);
          String defaultExtension=outputFormat.equalsIgnoreCase("xml") ? ".xml" : outputFormat.equalsIgnoreCase("text") ? ".out" : ".ser.gz";
          String extension=properties.getProperty("outputExtension",defaultExtension);
          if (!outputFilename.endsWith(extension)) {
            outputFilename+=extension;
          }
          outputFilename=new File(outputFilename).getCanonicalPath();
          if (outputFilename.equals(file.getCanonicalPath())) {
            err("Skipping " + file.getName() + ": output file "+ outputFilename+ " has the same filename as the input file -- assuming you don't actually want to do this.");
            return;
          }
          if (properties.getProperty("noClobber") != null && new File(outputFilename).exists()) {
            err("Skipping " + file.getName() + ": output file "+ outputFilename+ " as it already exists.  Don't use the noClobber option to override this.");
            return;
          }
          String encoding=getEncoding();
          forceTrack("Processing file " + file.getAbsolutePath() + " ... (writing to "+ outputFilename+ ")");
          String text=IOUtils.slurpFile(file,encoding);
          Annotation annotation=process(text);
          if (outputFormat.equalsIgnoreCase("xml")) {
            FileOutputStream fos=new FileOutputStream(outputFilename);
            xmlPrint(annotation,fos);
            fos.close();
          }
 else           if (outputFormat.equalsIgnoreCase("text")) {
            FileOutputStream fos=new FileOutputStream(outputFilename);
            prettyPrint(annotation,fos);
            fos.close();
          }
 else           if (outputFormat.equalsIgnoreCase("serialized")) {
            IOUtils.writeObjectToFile(annotation,outputFilename);
          }
 else {
            throw new IllegalArgumentException("Unknown output format " + outputFormat);
          }
          endTrack("Processing file " + file.getAbsolutePath() + " ... (writing to "+ outputFilename+ ")");
        }
 catch (        IOException e) {
          throw new RuntimeIOException(e);
        }
      }
    }
);
  }
  if (numThreads == 1) {
    for (    Runnable r : toRun) {
      r.run();
    }
  }
 else {
    Redwood.Util.threadAndRun("StanfordCoreNLP <" + numThreads + " threads>",toRun,numThreads);
  }
}
