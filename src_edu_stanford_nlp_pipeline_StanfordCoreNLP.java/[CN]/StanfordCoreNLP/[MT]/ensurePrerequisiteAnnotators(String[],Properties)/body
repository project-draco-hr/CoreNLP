{
  Set<String> unorderedAnnotators=new LinkedHashSet<>();
  Collections.addAll(unorderedAnnotators,annotators);
  for (  String annotator : annotators) {
    if (!getNamedAnnotators().containsKey(annotator.toLowerCase())) {
      throw new IllegalArgumentException("Unknown annotator: " + annotator);
    }
    unorderedAnnotators.add(annotator.toLowerCase());
    if (!Annotator.DEFAULT_REQUIREMENTS.containsKey(annotator.toLowerCase())) {
      throw new IllegalArgumentException("Cannot infer requirements for annotator: " + annotator);
    }
    Queue<String> fringe=new LinkedList<>(Annotator.DEFAULT_REQUIREMENTS.get(annotator.toLowerCase()));
    int ticks=0;
    while (!fringe.isEmpty()) {
      ticks+=1;
      if (ticks == 1000000) {
        throw new IllegalStateException("[INTERNAL ERROR] Annotators have a circular dependency.");
      }
      String prereq=fringe.poll();
      unorderedAnnotators.add(prereq);
      fringe.addAll(Annotator.DEFAULT_REQUIREMENTS.get(prereq.toLowerCase()));
    }
  }
  List<String> orderedAnnotators=new ArrayList<>();
  while (!unorderedAnnotators.isEmpty()) {
    boolean somethingAdded=false;
    Iterator<String> iter=unorderedAnnotators.iterator();
    while (iter.hasNext()) {
      String candidate=iter.next();
      boolean canAdd=true;
      for (      String prereq : Annotator.DEFAULT_REQUIREMENTS.get(candidate.toLowerCase())) {
        if (!orderedAnnotators.contains(prereq)) {
          canAdd=false;
          break;
        }
      }
      if (canAdd) {
        orderedAnnotators.add(candidate);
        iter.remove();
        somethingAdded=true;
      }
    }
    if (!somethingAdded) {
      throw new IllegalArgumentException("Unsatisfiable annotator list: " + StringUtils.join(annotators,","));
    }
  }
  if (orderedAnnotators.contains(STANFORD_PARSE) && !ArrayUtils.contains(annotators,STANFORD_DEPENDENCIES)) {
    orderedAnnotators.remove(STANFORD_DEPENDENCIES);
  }
  if (orderedAnnotators.contains(Annotator.STANFORD_MENTION) && !orderedAnnotators.contains(Annotator.STANFORD_PARSE) && !props.containsKey("coref.md.type")) {
    props.setProperty("coref.md.type","dep");
  }
  if (orderedAnnotators.contains(Annotator.STANFORD_NER) && orderedAnnotators.contains(STANFORD_REGEXNER)) {
    orderedAnnotators.remove(STANFORD_REGEXNER);
    int nerIndex=orderedAnnotators.indexOf(Annotator.STANFORD_NER);
    orderedAnnotators.add(nerIndex + 1,STANFORD_REGEXNER);
  }
  if (orderedAnnotators.contains(Annotator.STANFORD_COREF) && orderedAnnotators.contains(STANFORD_OPENIE)) {
    int maxIndex=Math.max(orderedAnnotators.indexOf(STANFORD_OPENIE),orderedAnnotators.indexOf(STANFORD_COREF));
    if (Objects.equals(orderedAnnotators.get(maxIndex),STANFORD_OPENIE)) {
      orderedAnnotators.add(maxIndex,STANFORD_COREF);
      orderedAnnotators.remove(STANFORD_COREF);
    }
 else {
      orderedAnnotators.add(maxIndex + 1,STANFORD_OPENIE);
      orderedAnnotators.remove(STANFORD_OPENIE);
    }
  }
  return StringUtils.join(orderedAnnotators,",");
}
