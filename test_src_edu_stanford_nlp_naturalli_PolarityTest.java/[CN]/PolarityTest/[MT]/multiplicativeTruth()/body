{
  assertEquals(true,multiplicative.maintainsEntailment(NaturalLogicRelation.EQUIVALENCE));
  assertEquals(true,multiplicative.maintainsEntailment(NaturalLogicRelation.FORWARD_ENTAILMENT));
  assertEquals(false,multiplicative.maintainsEntailment(NaturalLogicRelation.REVERSE_ENTAILMENT));
  assertEquals(false,multiplicative.maintainsEntailment(NaturalLogicRelation.NEGATION));
  assertEquals(false,multiplicative.maintainsEntailment(NaturalLogicRelation.ALTERNATION));
  assertEquals(false,multiplicative.maintainsEntailment(NaturalLogicRelation.COVER));
  assertEquals(false,multiplicative.maintainsEntailment(NaturalLogicRelation.INDEPENDENCE));
  assertEquals(false,multiplicative.introducesNegation(NaturalLogicRelation.EQUIVALENCE));
  assertEquals(false,multiplicative.introducesNegation(NaturalLogicRelation.FORWARD_ENTAILMENT));
  assertEquals(false,multiplicative.introducesNegation(NaturalLogicRelation.REVERSE_ENTAILMENT));
  assertEquals(true,multiplicative.introducesNegation(NaturalLogicRelation.NEGATION));
  assertEquals(true,multiplicative.introducesNegation(NaturalLogicRelation.ALTERNATION));
  assertEquals(false,multiplicative.introducesNegation(NaturalLogicRelation.COVER));
  assertEquals(false,multiplicative.introducesNegation(NaturalLogicRelation.INDEPENDENCE));
}
