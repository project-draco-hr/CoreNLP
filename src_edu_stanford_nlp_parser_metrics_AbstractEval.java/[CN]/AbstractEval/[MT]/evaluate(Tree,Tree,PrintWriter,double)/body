{
  if (DEBUG) {
    log.info("Evaluating gold tree:");
    gold.pennPrint(System.err);
    log.info("and guess tree");
    guess.pennPrint(System.err);
  }
  Set<?> dep1=makeObjects(guess);
  Set<?> dep2=makeObjects(gold);
  final double curPrecision=precision(dep1,dep2);
  final double curRecall=precision(dep2,dep1);
  curF1=(curPrecision > 0.0 && curRecall > 0.0 ? 2.0 / (1.0 / curPrecision + 1.0 / curRecall) : 0.0);
  precision+=curPrecision * weight;
  recall+=curRecall * weight;
  f1+=curF1 * weight;
  num+=weight;
  precision2+=dep1.size() * curPrecision * weight;
  pnum2+=dep1.size() * weight;
  recall2+=dep2.size() * curRecall * weight;
  rnum2+=dep2.size() * weight;
  if (curF1 > 0.9999) {
    exact+=1.0;
  }
  if (pw != null) {
    pw.print(" P: " + ((int)(curPrecision * 10000)) / 100.0);
    if (runningAverages) {
      pw.println(" (sent ave " + ((int)(precision * 10000 / num)) / 100.0 + ") (evalb " + ((int)(precision2 * 10000 / pnum2)) / 100.0 + ")");
    }
    pw.print(" R: " + ((int)(curRecall * 10000)) / 100.0);
    if (runningAverages) {
      pw.print(" (sent ave " + ((int)(recall * 10000 / num)) / 100.0 + ") (evalb " + ((int)(recall2 * 10000 / rnum2)) / 100.0 + ")");
    }
    pw.println();
    double cF1=2.0 / (rnum2 / recall2 + pnum2 / precision2);
    pw.print(str + " F1: " + ((int)(curF1 * 10000)) / 100.0);
    if (runningAverages) {
      pw.print(" (sent ave " + ((int)(10000 * f1 / num)) / 100.0 + ", evalb " + ((int)(10000 * cF1)) / 100.0 + ")   Exact: " + ((int)(10000 * exact / num)) / 100.0);
    }
    pw.println(" N: " + num);
  }
}
