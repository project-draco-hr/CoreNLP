{
  int interval=numFeatures / numLopExpert;
  featureIndicesSetArray=new ArrayList<>(numLopExpert);
  featureIndicesListArray=new ArrayList<>(numLopExpert);
  for (int i=0; i < numLopExpert; i++) {
    featureIndicesSetArray.add(Generics.<Integer>newHashSet(interval));
    featureIndicesListArray.add(Generics.<Integer>newArrayList(interval));
  }
  if (flags.randomLopFeatureSplit) {
    for (int fIndex=0; fIndex < numFeatures; fIndex++) {
      int lopIter=random.nextInt(numLopExpert);
      featureIndicesSetArray.get(lopIter).add(fIndex);
      featureIndicesListArray.get(lopIter).add(fIndex);
    }
  }
 else {
    for (int lopIter=0; lopIter < numLopExpert; lopIter++) {
      int beginIndex=lopIter * interval;
      int endIndex=(lopIter + 1) * interval;
      if (lopIter == numLopExpert - 1) {
        endIndex=numFeatures;
      }
      for (int fIndex=beginIndex; fIndex < endIndex; fIndex++) {
        featureIndicesSetArray.get(lopIter).add(fIndex);
        featureIndicesListArray.get(lopIter).add(fIndex);
      }
    }
  }
  for (int lopIter=0; lopIter < numLopExpert; lopIter++) {
    Collections.sort(featureIndicesListArray.get(lopIter));
  }
}
