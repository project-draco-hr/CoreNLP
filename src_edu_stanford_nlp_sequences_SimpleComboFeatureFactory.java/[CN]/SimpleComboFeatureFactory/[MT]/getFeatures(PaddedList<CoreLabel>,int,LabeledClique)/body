{
  ClassicCounter<String> features=new ClassicCounter<String>();
  if (lc.clique != FeatureFactory.cliqueCpC) {
    return features;
  }
  for (int i=0; i < classifiersToCombine.size(); i++) {
    SequenceClassifier sc=classifiersToCombine.get(i);
    List<CoreLabel> otherData=getData(info.getWrappedList(),sc);
    LabeledClique otherLC=getLabeledClique(lc,sc);
    if (otherLC == null) {
      continue;
    }
    if (info != cacheCheck) {
      cache=new HashMap<SequenceClassifier,QueriableSequenceModel>();
      cacheCheck=info;
    }
    QueriableSequenceModel qsm=cache.get(sc);
    if (info != cacheCheck || qsm == null) {
      qsm=sc.getSequenceModel(otherData);
      cache.put(sc,qsm);
    }
    features.incrementCount("model-" + i + "-lc-"+ lc,qsm.logProbOf(position,otherLC));
  }
  return features;
}
