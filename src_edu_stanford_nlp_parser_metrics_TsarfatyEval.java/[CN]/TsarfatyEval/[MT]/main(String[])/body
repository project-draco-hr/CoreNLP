{
  if (args.length < minArgs) {
    System.out.println(usage.toString());
    System.exit(-1);
  }
  TreebankLangParserParams tlpp=new EnglishTreebankParserParams();
  int maxGoldYield=Integer.MAX_VALUE;
  int maxGuessYield=Integer.MAX_VALUE;
  boolean VERBOSE=false;
  boolean skipGuess=false;
  boolean tagMode=false;
  String guessFile=null;
  String goldFile=null;
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith("-")) {
switch (args[i]) {
case "-l":
        Language lang=Language.valueOf(args[++i].trim());
      tlpp=lang.params;
    break;
case "-y":
  maxGoldYield=Integer.parseInt(args[++i].trim());
break;
case "-t":
tagMode=true;
break;
case "-v":
VERBOSE=true;
break;
case "-g":
maxGuessYield=Integer.parseInt(args[++i].trim());
skipGuess=true;
break;
default :
System.out.println(usage.toString());
System.exit(-1);
}
}
 else {
goldFile=args[i++];
guessFile=args[i];
break;
}
}
final PrintWriter pwOut=tlpp.pw();
final Treebank guessTreebank=tlpp.diskTreebank();
guessTreebank.loadPath(guessFile);
pwOut.println("GUESS TREEBANK:");
pwOut.println(guessTreebank.textualSummary());
final Treebank goldTreebank=tlpp.diskTreebank();
goldTreebank.loadPath(goldFile);
pwOut.println("GOLD TREEBANK:");
pwOut.println(goldTreebank.textualSummary());
final String evalName=(tagMode) ? "TsarfatyTAG" : "TsarfatySEG";
final TsarfatyEval eval=new TsarfatyEval(evalName,tagMode);
final TreeTransformer tc=tlpp.collinizer();
final Iterator<Tree> goldItr=goldTreebank.iterator();
int goldLineId=0;
int skippedGuessTrees=0;
for (final Tree guess : guessTreebank) {
final Tree evalGuess=tc.transformTree(guess);
final ArrayList<Label> guessSent=guess.yield();
final String guessChars=SentenceUtils.listToString(guessSent).replaceAll("\\s+","");
if (guessSent.size() > maxGuessYield) {
skippedGuessTrees++;
continue;
}
boolean doneEval=false;
while (goldItr.hasNext() && !doneEval) {
final Tree gold=goldItr.next();
final Tree evalGold=tc.transformTree(gold);
goldLineId++;
final ArrayList<Label> goldSent=gold.yield();
final String goldChars=SentenceUtils.listToString(goldSent).replaceAll("\\s+","");
if (goldSent.size() > maxGoldYield) {
continue;
}
 else if (goldChars.length() != guessChars.length()) {
pwOut.printf("Char level yield mismatch at line %d (guess: %d gold: %d)\n",goldLineId,guessChars.length(),goldChars.length());
skippedGuessTrees++;
break;
}
eval.evaluate(evalGuess,evalGold,((VERBOSE) ? pwOut : null));
doneEval=true;
}
}
pwOut.println("================================================================================");
if (skippedGuessTrees != 0) pwOut.printf("%s %d guess trees\n",((skipGuess) ? "Skipped" : "Unable to evaluate"),skippedGuessTrees);
eval.display(true,pwOut);
pwOut.println();
pwOut.close();
}
