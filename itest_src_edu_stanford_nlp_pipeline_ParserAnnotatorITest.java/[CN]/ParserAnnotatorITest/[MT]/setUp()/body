{
synchronized (ParserAnnotatorITest.class) {
    if (pipeline != null)     return;
    parser=new ParserAnnotator(false,-1);
    pipeline=new AnnotationPipeline();
    pipeline.addAnnotator(new PTBTokenizerAnnotator(false));
    pipeline.addAnnotator(new WordsToSentencesAnnotator(false));
    pipeline.addAnnotator(new POSTaggerAnnotator(false));
    pipeline.addAnnotator(parser);
    noPOSPipeline=new AnnotationPipeline();
    noPOSPipeline.addAnnotator(new PTBTokenizerAnnotator(false));
    noPOSPipeline.addAnnotator(new WordsToSentencesAnnotator(false));
    noPOSPipeline.addAnnotator(parser);
    noParserPipeline=new AnnotationPipeline();
    noParserPipeline.addAnnotator(new PTBTokenizerAnnotator(false));
    noParserPipeline.addAnnotator(new WordsToSentencesAnnotator(false));
    parserOnlyPipeline=new AnnotationPipeline();
    parserOnlyPipeline.addAnnotator(parser);
    Properties props=new Properties();
    props.setProperty("parse.maxtime","1");
    props.setProperty("annotators","tokenize, ssplit, parse");
    timeoutPipeline=new StanfordCoreNLP(props);
    props=new Properties();
    props.setProperty("parse.maxtime","1");
    props.setProperty("parse.nthreads","3");
    props.setProperty("annotators","tokenize, ssplit, parse");
    threadedTimeoutPipeline=new StanfordCoreNLP(props);
  }
}
