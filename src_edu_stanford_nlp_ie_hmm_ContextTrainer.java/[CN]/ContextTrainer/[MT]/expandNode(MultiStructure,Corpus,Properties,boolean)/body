{
  HMM hmm;
  HMM bestHmm;
  double max=Double.NEGATIVE_INFINITY;
  double result;
  int argmax=-1;
  MultiStructure[] children=generateChildren(parent,train,verbose);
  bestHmm=null;
  for (int k=0; k < children.length; k++) {
    children[k].initializeTransitions();
    System.err.println("operation " + k);
    hmm=new HMM(children[k],HMM.CONTEXT_HMM);
    if (verbose) {
      hmm.printTransitions();
    }
    hmm.train(train,props,verbose);
    double logLike=hmm.logLikelihood(train);
    result=hmm.mdlScore(train,logLike);
    if (verbose) {
      System.err.println("..............................");
      System.err.println("log likelihood = " + logLike);
      System.err.println("mdl score: " + result);
      System.err.println("..............................");
    }
    if (result > max) {
      max=result;
      argmax=k;
    }
  }
  if (verbose) {
    System.err.println("---------------------------------------------------");
    System.err.println("Done expanding");
    System.err.println("---------------------------------------------------");
    System.err.println("Max was " + argmax);
    System.err.println("likelihood score = " + max);
    if (argmax >= 0) {
      System.err.println("State structure (rows are sequences)");
      System.err.println(children[argmax]);
    }
    System.err.println("---------------------------------------------------");
  }
  if (argmax < 0) {
    improving=false;
    return null;
  }
 else   if (max > bestResult) {
    bestResult=max;
    argBest=children[argmax];
    oneWorse=false;
  }
 else   if (oneWorse) {
    improving=false;
  }
 else {
    oneWorse=true;
  }
  return children[argmax];
}
