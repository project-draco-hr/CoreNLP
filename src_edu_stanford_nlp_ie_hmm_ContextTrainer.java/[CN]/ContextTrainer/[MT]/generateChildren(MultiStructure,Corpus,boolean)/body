{
  System.err.println("generating children");
  int numTargets=train.getTargetFields().length - 1;
  int numOps=parent.numBaseContexts();
  numOps+=parent.numContextChains();
  numOps+=numTargets;
  numOps+=parent.numPrefixes();
  numOps+=numTargets;
  numOps+=parent.numSuffixes();
  MultiStructure[] children=new MultiStructure[numOps];
  if (verbose) {
    System.err.println();
    System.err.println("Expanding structure: " + numOps + " children to check");
    System.err.println("-------------------");
  }
  int baseIndex=0;
  for (int i=0; i < numOps; i++) {
    children[i]=new MultiStructure(parent);
  }
  for (int i=0; i < parent.numBaseContexts(); i++) {
    if (verbose) {
      System.err.println("Operation " + (baseIndex + i) + ": adding disjunction at context "+ i);
    }
    children[baseIndex + i].addContext(i);
  }
  baseIndex+=parent.numBaseContexts();
  for (int i=0; i < parent.numContextChains(); i++) {
    if (verbose) {
      System.err.println("Operation " + (baseIndex + i) + ": lengthening context "+ i);
    }
    children[baseIndex + i].lengthenContext(i);
  }
  baseIndex+=parent.numBaseContexts();
  for (int i=0; i < numTargets; i++) {
    if (verbose) {
      System.err.println("Operation " + (baseIndex + i) + ": adding prefix to target "+ i);
    }
    children[baseIndex + i].addPrefix(i);
  }
  baseIndex+=numTargets;
  for (int i=0; i < parent.numPrefixes(); i++) {
    if (verbose) {
      System.err.println("Operation " + (baseIndex + i) + ": lengthening prefix "+ i);
    }
    children[baseIndex + i].lengthenPrefix(i);
  }
  baseIndex+=parent.numPrefixes();
  for (int i=0; i < numTargets; i++) {
    if (verbose) {
      System.err.println("Operation " + (baseIndex + i) + ": adding suffix to target "+ i);
    }
    children[baseIndex + i].addSuffix(i);
  }
  baseIndex+=numTargets;
  for (int i=0; i < parent.numSuffixes(); i++) {
    if (verbose) {
      System.err.println("Operation " + (baseIndex + i) + ": lengthening suffix "+ i);
    }
    children[baseIndex + i].lengthenSuffix(i);
  }
  return children;
}
