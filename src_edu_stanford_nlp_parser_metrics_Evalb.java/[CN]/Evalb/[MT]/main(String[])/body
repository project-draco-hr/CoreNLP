{
  if (args.length < minArgs) {
    log.info(usage());
    System.exit(-1);
  }
  Properties options=StringUtils.argsToProperties(args,optionArgDefs());
  Language language=PropertiesUtils.get(options,"l",Language.English,Language.class);
  final TreebankLangParserParams tlpp=language.params;
  final int maxGoldYield=PropertiesUtils.getInt(options,"y",Integer.MAX_VALUE);
  final boolean VERBOSE=PropertiesUtils.getBool(options,"v",false);
  final boolean sortByF1=PropertiesUtils.hasProperty(options,"s");
  int worstKTreesToEmit=PropertiesUtils.getInt(options,"s",0);
  PriorityQueue<Triple<Double,Tree,Tree>> queue=sortByF1 ? new PriorityQueue<>(2000,new F1Comparator()) : null;
  boolean doCatLevel=PropertiesUtils.getBool(options,"c",false);
  String labelRegex=options.getProperty("f",null);
  String encoding=options.getProperty("e","UTF-8");
  String[] parsedArgs=options.getProperty("","").split("\\s+");
  if (parsedArgs.length != minArgs) {
    log.info(usage());
    System.exit(-1);
  }
  String goldFile=parsedArgs[0];
  String guessFile=parsedArgs[1];
  tlpp.setInputEncoding(encoding);
  final PrintWriter pwOut=tlpp.pw();
  final Treebank guessTreebank=tlpp.diskTreebank();
  guessTreebank.loadPath(guessFile);
  pwOut.println("GUESS TREEBANK:");
  pwOut.println(guessTreebank.textualSummary());
  final Treebank goldTreebank=tlpp.diskTreebank();
  goldTreebank.loadPath(goldFile);
  pwOut.println("GOLD TREEBANK:");
  pwOut.println(goldTreebank.textualSummary());
  final Evalb metric=new Evalb("Evalb LP/LR",true);
  final EvalbByCat evalbCat=(doCatLevel) ? new EvalbByCat("EvalbByCat LP/LR",true,labelRegex) : null;
  final TreeTransformer tc=tlpp.collinizer();
  final Iterator<Tree> goldItr=goldTreebank.iterator();
  final Iterator<Tree> guessItr=guessTreebank.iterator();
  int goldLineId=0;
  int guessLineId=0;
  int skippedGuessTrees=0;
  while (guessItr.hasNext() && goldItr.hasNext()) {
    Tree guessTree=guessItr.next();
    List<Label> guessYield=guessTree.yield();
    guessLineId++;
    Tree goldTree=goldItr.next();
    List<Label> goldYield=goldTree.yield();
    goldLineId++;
    if (goldYield.size() > maxGoldYield) {
      skippedGuessTrees++;
      continue;
    }
    if (goldYield.size() != guessYield.size()) {
      pwOut.printf("Yield mismatch gold: %d tokens vs. guess: %d tokens (lines: gold %d guess %d)%n",goldYield.size(),guessYield.size(),goldLineId,guessLineId);
      skippedGuessTrees++;
      continue;
    }
    final Tree evalGuess=tc.transformTree(guessTree);
    final Tree evalGold=tc.transformTree(goldTree);
    metric.evaluate(evalGuess,evalGold,((VERBOSE) ? pwOut : null));
    if (doCatLevel)     evalbCat.evaluate(evalGuess,evalGold,((VERBOSE) ? pwOut : null));
    if (sortByF1)     storeTrees(queue,guessTree,goldTree,metric.getLastF1());
  }
  if (guessItr.hasNext() || goldItr.hasNext()) {
    System.err.printf("Guess/gold files do not have equal lengths (guess: %d gold: %d)%n.",guessLineId,goldLineId);
  }
  pwOut.println("================================================================================");
  if (skippedGuessTrees != 0)   pwOut.printf("%s %d guess trees\n","Unable to evaluate",skippedGuessTrees);
  metric.display(true,pwOut);
  pwOut.println();
  if (doCatLevel) {
    evalbCat.display(true,pwOut);
    pwOut.println();
  }
  if (sortByF1)   emitSortedTrees(queue,worstKTreesToEmit,guessFile);
  pwOut.close();
}
