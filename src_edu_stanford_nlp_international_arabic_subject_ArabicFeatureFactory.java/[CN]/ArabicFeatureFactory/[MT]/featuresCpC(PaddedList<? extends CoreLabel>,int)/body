{
  Collection<String> featuresCpC=new ArrayList<String>();
  CoreLabel c=cInfo.get(loc);
  CoreLabel p=(loc - 1 >= 0) ? cInfo.get(loc - 1) : null;
  if (flags.useClassFeature)   featuresCpC.add("#CpC#");
  if (flags.useTagsCpC && p != null) {
    String cTag=c.getString(PartOfSpeechAnnotation.class);
    String pTag=p.getString(PartOfSpeechAnnotation.class);
    featuresCpC.add(cTag + "+" + pTag+ "-TAG");
  }
  if (flags.useConcord && p != null) {
    String cTag=c.getString(PartOfSpeechAnnotation.class);
    String pTag=p.getString(PartOfSpeechAnnotation.class);
    String cWord=c.getString(TextAnnotation.class);
    String pWord=p.getString(TextAnnotation.class);
    Matcher m1=concordable.matcher(cTag);
    Matcher m2=concordable.matcher(pTag);
    if (m1.find() && cWord.length() > 1 && m2.find() && pWord.length() > 1) {
      String cGender=c.getString(MorphoGenAnnotation.class);
      String cWordPrefix=(cWord.length() >= 2) ? cWord.substring(0,2) : null;
      String pWordPrefix=(pWord.length() >= 2) ? pWord.substring(0,2) : null;
      String pGender=p.getString(MorphoGenAnnotation.class);
      String c1Suff=cWord.substring(cWord.length() - 1,cWord.length());
      String p1Suff=pWord.substring(pWord.length() - 1,pWord.length());
      String p2Suff=pWord.substring(pWord.length() - 2,pWord.length());
      if (cWordPrefix.equals("????") && pWordPrefix.equals("????"))       featuresCpC.add(pTag + "-" + cTag+ "-"+ Boolean.toString(true)+ "-CpCORTHO_DEF_CONCORD");
 else       if (cTag.equals("NN|JJ") && pTag.matches("NN|NNS"))       featuresCpC.add(pTag + "-" + cTag+ "-"+ "-CpCPOS_INDEF_CONCORD");
      if (cGender.equals(pGender)) {
        featuresCpC.add(cGender + "+" + pGender+ "-CpCMADAGenMatch");
      }
      if ((c1Suff.equals("??") && p1Suff.equals("??"))) {
        featuresCpC.add(c1Suff + "+" + p1Suff+ "-CpCOrthoGenMatch");
      }
 else       if ((c1Suff.equals("??") && p2Suff.equals("????")) || (c1Suff.equals("??") && p2Suff.equals("????"))) {
        featuresCpC.add(c1Suff + "+" + p2Suff+ "-CpCOrthoGenMatch");
      }
    }
  }
  if (flags.useConjBreak && p != null) {
    String cTag=c.getString(PartOfSpeechAnnotation.class);
    String pTag=p.getString(PartOfSpeechAnnotation.class);
    String cWord=c.getString(TextAnnotation.class);
    String pWord=p.getString(TextAnnotation.class);
    if (!cTag.matches(".*NN.*|.*CD.*|.*VB.*"))     if (pTag.matches(".*CC.*"))     featuresCpC.add(cWord + "+" + pWord+ "-CBREAK");
  }
  if (flags.useInna) {
    addInna(featuresCpC,cInfo,loc);
  }
  if (flags.usePPVBPairs && p != null) {
    String cWord=c.getString(TextAnnotation.class);
    String cTag=c.getString(PartOfSpeechAnnotation.class);
    if (cTag.startsWith("IN")) {
      for (int offset=1; offset < 10 && (loc - offset) >= 0; offset++) {
        String pTag=cInfo.get(loc - offset).getString(PartOfSpeechAnnotation.class);
        if (pTag.startsWith("VB")) {
          String verbStem=cInfo.get(loc - offset).getString(StemAnnotation.class);
          if (!verbStem.equals("NA")) {
            featuresCpC.add(cWord + "+" + verbStem+ "-PPVBPair");
          }
          break;
        }
      }
    }
  }
  if (flags.useParenMatching) {
    String cWord=c.getString(TextAnnotation.class);
    if (cWord.equals("\"")) {
      for (int i=1; i <= 6 && (loc - i) >= 0; i++) {
        String pWord=cInfo.get(loc - i).getString(TextAnnotation.class);
        if (pWord.equals("\"")) {
          featuresCpC.add("-QUOTE-MATCH");
          break;
        }
      }
    }
 else     if (cWord.equals(")")) {
      for (int i=1; i <= 6 && (loc - i) >= 0; i++) {
        String pWord=cInfo.get(loc - i).getString(TextAnnotation.class);
        if (pWord.equals("(")) {
          featuresCpC.add("-PAREN-MATCH");
          break;
        }
      }
    }
  }
  if (flags.useAnnexing && p != null) {
    String cTag=c.getString(PartOfSpeechAnnotation.class);
    String pTag=p.getString(PartOfSpeechAnnotation.class);
    if ((cTag.startsWith("DTNN") || cTag.startsWith("DTJJ") || cTag.equals(adjNumTag)) && (pTag.equals("NN") || pTag.equals("NNS")))     featuresCpC.add(pTag + "-" + cTag+ "-ANNEXING");
  }
  if (flags.useTemporalNN && p != null) {
    String cWord=c.getString(TextAnnotation.class);
    String pWord=p.getString(TextAnnotation.class);
    if (temporalNouns.contains(cWord) && temporalNouns.contains(pWord))     featuresCpC.add(pWord + "-" + cWord+ "-CpCTEMPORAL_NN");
  }
  if (flags.markProperNN && p != null) {
    String cTag=c.getString(PartOfSpeechAnnotation.class);
    String pTag=p.getString(PartOfSpeechAnnotation.class);
    if (cTag.endsWith("NNP") && pTag.endsWith("NNP"))     featuresCpC.add(cTag + "-" + pTag+ "-CpCPROPERNN");
  }
  if (flags.markMasdar && p != null) {
    String cTag=c.getString(PartOfSpeechAnnotation.class);
    String pTag=p.getString(PartOfSpeechAnnotation.class);
    if (cTag.equals("PRP$") && pTag.equals("VBG"))     featuresCpC.add("-CpCMASDAR");
  }
  return featuresCpC;
}
