{
  int zzInput;
  int zzAction;
  int zzCurrentPosL;
  int zzMarkedPosL;
  int zzEndReadL=zzEndRead;
  char[] zzBufferL=zzBuffer;
  char[] zzCMapL=ZZ_CMAP;
  int[] zzTransL=ZZ_TRANS;
  int[] zzRowMapL=ZZ_ROWMAP;
  int[] zzAttrL=ZZ_ATTRIBUTE;
  while (true) {
    zzMarkedPosL=zzMarkedPos;
    yychar+=zzMarkedPosL - zzStartRead;
    zzAction=-1;
    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;
    zzState=ZZ_LEXSTATE[zzLexicalState];
    zzForAction: {
      while (true) {
        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++];
 else         if (zzAtEOF) {
          zzInput=YYEOF;
          break zzForAction;
        }
 else {
          zzCurrentPos=zzCurrentPosL;
          zzMarkedPos=zzMarkedPosL;
          boolean eof=zzRefill();
          zzCurrentPosL=zzCurrentPos;
          zzMarkedPosL=zzMarkedPos;
          zzBufferL=zzBuffer;
          zzEndReadL=zzEndRead;
          if (eof) {
            zzInput=YYEOF;
            break zzForAction;
          }
 else {
            zzInput=zzBufferL[zzCurrentPosL++];
          }
        }
        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
        if (zzNext == -1)         break zzForAction;
        zzState=zzNext;
        int zzAttributes=zzAttrL[zzState];
        if ((zzAttributes & 1) == 1) {
          zzAction=zzState;
          zzMarkedPosL=zzCurrentPosL;
          if ((zzAttributes & 8) == 8)           break zzForAction;
        }
      }
    }
    zzMarkedPos=zzMarkedPosL;
switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
case 39:
{
        String txt=yytext();
        if (escapeForwardSlashAsterisk) {
          txt=delimit(txt,'/');
        }
        if (normalizeSpace) {
          txt=txt.replace(' ','\u00A0');
        }
        return getNext(txt,yytext());
      }
case 55:
    break;
case 43:
{
    int zzFState=9;
    int zzFPos=zzStartRead;
    if (zzFin.length <= zzBufferL.length) {
      zzFin=new boolean[zzBufferL.length + 1];
    }
    boolean zzFinL[]=zzFin;
    while (zzFState != -1 && zzFPos < zzMarkedPos) {
      if ((zzAttrL[zzFState] & 1) == 1) {
        zzFinL[zzFPos]=true;
      }
      zzInput=zzBufferL[zzFPos++];
      zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
    }
    if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {
      zzFinL[zzFPos]=true;
    }
    zzFState=10;
    zzFPos=zzMarkedPos;
    while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
      zzInput=zzBufferL[--zzFPos];
      zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
    }
    ;
    zzMarkedPos=zzFPos;
  }
{
  while (yylength() > 0) {
    char last=yycharat(yylength() - 1);
    if (last == ' ' || last == '\t' || (last >= '\n' && last <= '\r' || last == '\u0085')) {
      yypushback(1);
    }
 else {
      break;
    }
  }
  return getNext();
}
case 56:
break;
case 11:
{
if (ptb3Dashes) {
return getNext(ptbmdash,yytext());
}
 else {
return getNext();
}
}
case 57:
break;
case 19:
{
if (escapeForwardSlashAsterisk) {
return getNext(delimit(yytext(),'*'),yytext());
}
 else {
return getNext();
}
}
case 58:
break;
case 36:
yypushback(1);
{
return handleQuotes(yytext(),false);
}
case 59:
break;
case 8:
{
return handleQuotes(yytext(),false);
}
case 60:
break;
case 28:
{
String txt=yytext();
String origText=txt;
if (normalizeParentheses) {
txt=LEFT_PAREN_PATTERN.matcher(txt).replaceAll(openparen);
txt=RIGHT_PAREN_PATTERN.matcher(txt).replaceAll(closeparen);
}
return getNext(txt,origText);
}
case 61:
break;
case 34:
yypushback(1);
{
String txt=yytext();
String origText=txt;
if (normalizeParentheses) {
txt=LEFT_PAREN_PATTERN.matcher(txt).replaceAll(openparen);
txt=RIGHT_PAREN_PATTERN.matcher(txt).replaceAll(closeparen);
}
return getNext(txt,origText);
}
case 62:
break;
case 49:
{
if (splitAssimilations) {
yypushback(2);
return getNext();
}
 else {
return getNext();
}
}
case 63:
break;
case 50:
yypushback(1);
{
return getNormalizedAmpNext();
}
case 64:
break;
case 37:
{
return getNormalizedAmpNext();
}
case 65:
break;
case 23:
{
if (invertible) {
prevWordAfter.append(yytext());
}
}
case 66:
break;
case 38:
{
String txt=yytext();
if (escapeForwardSlashAsterisk) {
txt=delimit(txt,'/');
}
if (normalizeSpace) {
txt=txt.replace(' ','\u00A0');
}
return getNext(txt,yytext());
}
case 67:
break;
case 53:
yypushback(4);
{
return getNext();
}
case 68:
break;
case 47:
yypushback(2);
{
return getNext();
}
case 69:
break;
case 46:
{
int zzFState=7;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length) {
zzFin=new boolean[zzBufferL.length + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
if ((zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzInput=zzBufferL[zzFPos++];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzFState=8;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=zzBufferL[--zzFPos];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
while (yylength() > 0) {
char last=yycharat(yylength() - 1);
if (last == ' ' || last == '\t' || (last >= '\n' && last <= '\r' || last == '\u0085')) {
yypushback(1);
}
 else {
break;
}
}
String s;
if (yylength() == 2) {
yypushback(1);
s=yytext();
}
 else if (strictTreebank3 && !"U.S.".equals(yytext())) {
yypushback(1);
s=yytext();
}
 else {
s=yytext();
yypushback(1);
}
return getNext(s,yytext());
}
case 70:
break;
case 42:
{
int zzFState=15;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length) {
zzFin=new boolean[zzBufferL.length + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
if ((zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzInput=zzBufferL[zzFPos++];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzFState=14;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=zzBufferL[--zzFPos];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
return getNext();
}
case 71:
break;
case 41:
{
int zzFState=16;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length) {
zzFin=new boolean[zzBufferL.length + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
if ((zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzInput=zzBufferL[zzFPos++];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzFState=17;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=zzBufferL[--zzFPos];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
return getNext();
}
case 72:
break;
case 3:
{
return getNext();
}
case 73:
break;
case 24:
{
int zzFState=13;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length) {
zzFin=new boolean[zzBufferL.length + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
if ((zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzInput=zzBufferL[zzFPos++];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzFState=14;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=zzBufferL[--zzFPos];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
return getNext();
}
case 74:
break;
case 25:
yypushback(1);
{
return getNext();
}
case 75:
break;
case 52:
{
String txt=yytext();
if (escapeForwardSlashAsterisk) {
txt=delimit(txt,'/');
}
return getNext(txt,yytext());
}
case 76:
break;
case 27:
{
final String origTxt=yytext();
String txt=origTxt;
if (normalizeSpace) {
txt=txt.replace(' ','\u00A0');
}
return getNext(txt,origTxt);
}
case 77:
break;
case 6:
{
final String origTxt=yytext();
String tmp=removeSoftHyphens(origTxt);
if (americanize) {
tmp=Americanize.americanize(tmp);
}
return getNext(tmp,origTxt);
}
case 78:
break;
case 30:
{
int zzFState=3;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length) {
zzFin=new boolean[zzBufferL.length + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
if ((zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzInput=zzBufferL[zzFPos++];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzFState=4;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=zzBufferL[--zzFPos];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
final String origTxt=yytext();
String tmp=removeSoftHyphens(origTxt);
if (americanize) {
tmp=Americanize.americanize(tmp);
}
return getNext(tmp,origTxt);
}
case 79:
break;
case 16:
{
if (normalizeOtherBrackets) {
return getNext(closebrace,yytext());
}
 else {
return getNext();
}
}
case 80:
break;
case 2:
{
return getNext("<",yytext());
}
case 81:
break;
case 31:
{
if (escapeForwardSlashAsterisk) {
return getNext(delimit(yytext(),'/'),yytext());
}
 else {
return getNext();
}
}
case 82:
break;
case 18:
{
if (normalizeParentheses) {
return getNext(closeparen,yytext());
}
 else {
return getNext();
}
}
case 83:
break;
case 54:
{
String txt=yytext();
if (normalizeSpace) {
txt=txt.replace(' ','\u00A0');
}
if (normalizeParentheses) {
txt=LEFT_PAREN_PATTERN.matcher(txt).replaceAll(openparen);
txt=RIGHT_PAREN_PATTERN.matcher(txt).replaceAll(closeparen);
}
return getNext(txt,yytext());
}
case 84:
break;
case 26:
yypushback(1);
{
return handleQuotes(yytext(),true);
}
case 85:
break;
case 40:
{
int zzFState=5;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length) {
zzFin=new boolean[zzBufferL.length + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
if ((zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzInput=zzBufferL[zzFPos++];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzFState=6;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=zzBufferL[--zzFPos];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
final String txt=yytext();
return getNext(removeSoftHyphens(txt),txt);
}
case 86:
break;
case 21:
{
if (normalizeOtherBrackets) {
return getNext(openbrace,yytext());
}
 else {
return getNext();
}
}
case 87:
break;
case 51:
{
if (splitAssimilations) {
yypushback(3);
return getNext();
}
 else {
return getNext();
}
}
case 88:
break;
case 17:
{
if (normalizeParentheses) {
return getNext(openparen,yytext());
}
 else {
return getNext();
}
}
case 89:
break;
case 13:
{
return handleEllipsis(yytext());
}
case 90:
break;
case 35:
zzMarkedPos=zzStartRead + 1;
{
return handleQuotes(yytext(),true);
}
case 91:
break;
case 14:
{
return normalizeFractions(yytext());
}
case 92:
break;
case 15:
{
if (normalizeCurrency) {
return getNext(normalizeCurrency(yytext()),yytext());
}
 else {
return getNext();
}
}
case 93:
break;
case 48:
{
int zzFState=11;
int zzFPos=zzStartRead;
if (zzFin.length <= zzBufferL.length) {
zzFin=new boolean[zzBufferL.length + 1];
}
boolean zzFinL[]=zzFin;
while (zzFState != -1 && zzFPos < zzMarkedPos) {
if ((zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzInput=zzBufferL[zzFPos++];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) {
zzFinL[zzFPos]=true;
}
zzFState=12;
zzFPos=zzMarkedPos;
while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
zzInput=zzBufferL[--zzFPos];
zzFState=zzTransL[zzRowMapL[zzFState] + zzCMapL[zzInput]];
}
;
zzMarkedPos=zzFPos;
}
{
String s;
if (strictTreebank3 && !"U.S.".equals(yytext())) {
yypushback(1);
s=yytext();
}
 else {
s=yytext();
yypushback(1);
}
return getNext(s,yytext());
}
case 94:
break;
case 7:
{
if (invertible) {
prevWordAfter.append(yytext());
}
}
case 95:
break;
case 9:
{
if (escapeForwardSlashAsterisk) {
return getNext(delimit(yytext(),'/'),yytext());
}
 else {
return getNext();
}
}
case 96:
break;
case 45:
yypushback(1);
{
return getNext(removeSoftHyphens(yytext()),yytext());
}
case 97:
break;
case 4:
{
if (yylength() >= 3 && yylength() <= 4 && ptb3Dashes) {
return getNext(ptbmdash,yytext());
}
 else {
return getNext();
}
}
case 98:
break;
case 29:
{
return getNext(removeSoftHyphens(yytext()),yytext());
}
case 99:
break;
case 20:
{
if (normalizeOtherBrackets) {
return getNext("-RSB-",yytext());
}
 else {
return getNext();
}
}
case 100:
break;
case 12:
{
return getNext(removeSoftHyphens(yytext()),yytext());
}
case 101:
break;
case 32:
yypushback(1);
{
return getNext(removeSoftHyphens(yytext()),yytext());
}
case 102:
break;
case 10:
{
return getNext(">",yytext());
}
case 103:
break;
case 33:
{
String s;
if (strictTreebank3 && !"U.S.".equals(yytext())) {
yypushback(1);
s=yytext();
}
 else {
s=yytext();
yypushback(1);
}
return getNext(s,yytext());
}
case 104:
break;
case 22:
{
if (normalizeOtherBrackets) {
return getNext("-LSB-",yytext());
}
 else {
return getNext();
}
}
case 105:
break;
case 1:
{
String str=yytext();
int first=str.charAt(0);
String msg=String.format("Untokenizable: %s (U+%s, decimal: %s)",yytext(),Integer.toHexString(first).toUpperCase(),Integer.toString(first));
switch (untokenizable) {
case NONE_DELETE:
if (invertible) {
prevWordAfter.append(str);
}
break;
case FIRST_DELETE:
if (invertible) {
prevWordAfter.append(str);
}
if (!this.seenUntokenizableCharacter) {
LOGGER.warning(msg);
this.seenUntokenizableCharacter=true;
}
break;
case ALL_DELETE:
if (invertible) {
prevWordAfter.append(str);
}
LOGGER.warning(msg);
this.seenUntokenizableCharacter=true;
break;
case NONE_KEEP:
return getNext();
case FIRST_KEEP:
if (!this.seenUntokenizableCharacter) {
LOGGER.warning(msg);
this.seenUntokenizableCharacter=true;
}
return getNext();
case ALL_KEEP:
LOGGER.warning(msg);
this.seenUntokenizableCharacter=true;
return getNext();
}
}
case 106:
break;
case 44:
{
String txt=yytext();
if (escapeForwardSlashAsterisk) {
txt=delimit(txt,'/');
txt=delimit(txt,'*');
}
return getNext(txt,yytext());
}
case 107:
break;
case 5:
{
if (tokenizeNLs) {
return getNext(NEWLINE_TOKEN,yytext());
}
 else if (invertible) {
prevWordAfter.append(yytext());
}
}
case 108:
break;
default :
if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
zzAtEOF=true;
{
if (invertible) {
prevWordAfter.append(yytext());
String str=prevWordAfter.toString();
prevWordAfter.setLength(0);
prevWord.set(CoreAnnotations.AfterAnnotation.class,str);
}
return null;
}
}
 else {
zzScanError(ZZ_NO_MATCH);
}
}
}
}
