{
  List<DependencyTree> results=parser.predict(Arrays.asList(sentence));
  List<CoreLabel> tokens=sentence.get(CoreAnnotations.TokensAnnotation.class);
  List<TypedDependency> dependencies=new ArrayList<>();
  DependencyTree result=results.get(0);
  IndexedWord root=new IndexedWord(new Word("ROOT"));
  for (int i=1; i < result.n; i++) {
    int head=result.getHead(i);
    String label=result.getLabel(i);
    IndexedWord thisWord=new IndexedWord(tokens.get(i - 1)), headWord=head == 0 ? root : new IndexedWord(tokens.get(head - 1));
    GrammaticalRelation relation=head == 0 ? GrammaticalRelation.ROOT : EnglishGrammaticalRelations.shortNameToGRel.get(label);
    dependencies.add(new TypedDependency(relation,headWord,thisWord));
  }
  GrammaticalStructureFromDependenciesFactory gsf=new EnglishGrammaticalStructure.FromDependenciesFactory();
  TreeGraphNode rootNode=new TreeGraphNode(new Word("ROOT-" + (tokens.size() + 1)));
  GrammaticalStructure gs=gsf.build(dependencies,rootNode);
  SemanticGraph deps=SemanticGraphFactory.generateCollapsedDependencies(gs), uncollapsedDeps=SemanticGraphFactory.generateUncollapsedDependencies(gs), ccDeps=SemanticGraphFactory.generateCCProcessedDependencies(gs);
  sentence.set(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class,deps);
  sentence.set(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class,uncollapsedDeps);
  sentence.set(SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation.class,ccDeps);
}
