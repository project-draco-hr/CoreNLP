{
  List<IntPair> spans=CollectionUtils.makeList();
  String lastLabel="";
  boolean inToken=false;
  int tokenStart=0;
  final int sequenceLength=labeledSequence.size();
  for (int i=0; i < sequenceLength; ++i) {
    CoreLabel labeledChar=labeledSequence.get(i);
    String token=labeledChar.get(CoreAnnotations.CharAnnotation.class);
    String label=labeledChar.get(CoreAnnotations.AnswerAnnotation.class);
    if (token.equals(BoundaryChar)) {
      if (inToken) {
        spans.add(new IntPair(tokenStart,i));
      }
      inToken=false;
    }
 else {
switch (label) {
case BeginSymbol:
        if (lastLabel.equals(ContinuationSymbol) || lastLabel.equals(BeginSymbol) || lastLabel.equals(RewriteSymbol)) {
          if (inToken) {
            spans.add(new IntPair(tokenStart,i));
          }
          inToken=true;
          tokenStart=i;
        }
 else         if (!inToken) {
          inToken=true;
          tokenStart=i;
        }
      break;
case ContinuationSymbol:
    if (!inToken) {
      inToken=true;
      tokenStart=i;
    }
  break;
case BoundarySymbol:
case NosegSymbol:
if (inToken) {
  spans.add(new IntPair(tokenStart,i));
}
inToken=true;
tokenStart=i;
break;
case RewriteSymbol:
case "REWAL":
case "REWTA":
if (token.equals("??")) {
if (inToken) {
spans.add(new IntPair(tokenStart,i));
}
inToken=true;
tokenStart=i;
}
 else if (!inToken) {
inToken=true;
tokenStart=i;
}
break;
}
}
lastLabel=label;
}
if (inToken) {
spans.add(new IntPair(tokenStart,sequenceLength));
}
return spans;
}
