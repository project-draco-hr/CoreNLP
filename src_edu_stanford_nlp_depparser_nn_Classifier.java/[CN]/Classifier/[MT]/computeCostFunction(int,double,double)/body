{
  gradW1=new double[W1.length][W1[0].length];
  gradb1=new double[b1.length];
  gradW2=new double[W2.length][W2[0].length];
  gradE=new double[E.length][E[0].length];
  List<Example> examples=Util.getRandomSubList(dataset.examples,batchSize);
  double cost=0.0;
  double correct=0.0;
  for (int ex=0; ex < examples.size(); ++ex) {
    List<Integer> feature=examples.get(ex).getFeature();
    List<Integer> label=examples.get(ex).getLabel();
    double[] scores=new double[numLabels];
    double[] hidden=new double[hiddenSize];
    double[] hidden3=new double[hiddenSize];
    boolean[] drop=new boolean[hiddenSize];
    for (int i=0; i < hiddenSize; ++i) {
      hidden[i]=b1[i];
      for (int j=0; j < numTokens; ++j) {
        int index=feature.get(j);
        for (int k=0; k < embeddingSize; ++k)         hidden[i]+=W1[i][embeddingSize * j + k] * E[index][k];
      }
      drop[i]=random.nextDouble() < dropOutProb;
      hidden3[i]=hidden[i] * hidden[i] * hidden[i];
    }
    int optLabel=-1;
    for (int i=0; i < numLabels; ++i)     if (label.get(i) >= 0) {
      for (int j=0; j < hiddenSize; ++j)       if (!drop[j])       scores[i]+=W2[i][j] * hidden3[j];
      if (optLabel < 0 || scores[i] > scores[optLabel])       optLabel=i;
    }
    double sum1=0.0;
    double sum2=0.0;
    double maxScore=scores[optLabel];
    for (int i=0; i < numLabels; ++i)     if (label.get(i) >= 0) {
      scores[i]=Math.exp(scores[i] - maxScore);
      if (label.get(i) == 1)       sum1+=scores[i];
      sum2+=scores[i];
    }
    cost+=(Math.log(sum2) - Math.log(sum1)) / examples.size();
    if (label.get(optLabel) == 1)     correct+=+1.0 / examples.size();
    double[] gradHidden3=new double[hiddenSize];
    for (int i=0; i < numLabels; ++i)     if (label.get(i) >= 0) {
      double delta=-(label.get(i) - scores[i] / sum2) / examples.size();
      for (int j=0; j < hiddenSize; ++j)       if (!drop[j]) {
        gradW2[i][j]+=delta * hidden3[j];
        gradHidden3[j]+=delta * W2[i][j];
      }
    }
    for (int i=0; i < hiddenSize; ++i)     if (!drop[i]) {
      double delta=gradHidden3[i] * 3 * hidden[i]* hidden[i];
      gradb1[i]+=delta;
      for (int j=0; j < numTokens; ++j) {
        int index=feature.get(j);
        for (int k=0; k < embeddingSize; ++k) {
          gradW1[i][embeddingSize * j + k]+=delta * E[index][k];
          gradE[index][k]+=delta * W1[i][embeddingSize * j + k];
        }
      }
    }
  }
  for (int i=0; i < W1.length; ++i)   for (int j=0; j < W1[i].length; ++j) {
    cost+=regParameter * W1[i][j] * W1[i][j] / 2;
    gradW1[i][j]+=regParameter * W1[i][j];
  }
  for (int i=0; i < b1.length; ++i) {
    cost+=regParameter * b1[i] * b1[i] / 2;
    gradb1[i]+=regParameter * b1[i];
  }
  for (int i=0; i < W2.length; ++i)   for (int j=0; j < W2[i].length; ++j) {
    cost+=regParameter * W2[i][j] * W2[i][j] / 2;
    gradW2[i][j]+=regParameter * W2[i][j];
  }
  for (int i=0; i < E.length; ++i)   for (int j=0; j < E[i].length; ++j) {
    cost+=regParameter * E[i][j] * E[i][j] / 2;
    gradE[i][j]+=regParameter * E[i][j];
  }
  System.out.println("Cost = " + cost + ", Correct(%) = "+ correct);
  return cost;
}
