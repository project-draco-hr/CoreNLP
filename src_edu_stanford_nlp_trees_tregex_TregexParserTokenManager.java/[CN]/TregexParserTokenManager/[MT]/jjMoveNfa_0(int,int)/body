{
  int startsAt=0;
  jjnewStateCnt=42;
  int i=1;
  jjstateSet[0]=startState;
  int kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x8002c84ffffdbffL & l) != 0L) {
            if (kind > 7)             kind=7;
{
              jjCheckNAdd(6);
            }
          }
 else           if ((0x3ff000000000000L & l) != 0L) {
            if (kind > 6)             kind=6;
{
              jjCheckNAdd(4);
            }
          }
 else           if ((0x5400501000000000L & l) != 0L) {
            if (kind > 4)             kind=4;
          }
 else           if (curChar == 47) {
            jjCheckNAddStates(0,2);
          }
 else           if (curChar == 61)           jjstateSet[jjnewStateCnt++]=1;
        if (curChar == 62) {
          jjCheckNAddStates(3,14);
        }
 else         if (curChar == 60) {
          jjCheckNAddStates(15,26);
        }
 else         if (curChar == 44) {
          jjCheckNAddTwoStates(20,23);
        }
 else         if (curChar == 46) {
          jjCheckNAddTwoStates(18,23);
        }
 else         if (curChar == 36) {
          jjCheckNAddStates(27,34);
        }
 else         if (curChar == 45) {
          jjCheckNAdd(4);
        }
      break;
case 1:
    if (curChar == 61 && kind > 4)     kind=4;
  break;
case 2:
if (curChar == 61) jjstateSet[jjnewStateCnt++]=1;
break;
case 3:
if (curChar == 45) {
jjCheckNAdd(4);
}
break;
case 4:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 6) kind=6;
{
jjCheckNAdd(4);
}
break;
case 5:
if ((0x8002c84ffffdbffL & l) == 0L) break;
if (kind > 7) kind=7;
{
jjCheckNAdd(6);
}
break;
case 6:
if ((0xbff2c84ffffdbffL & l) == 0L) break;
if (kind > 7) kind=7;
{
jjCheckNAdd(6);
}
break;
case 7:
case 8:
if (curChar == 47) {
jjCheckNAddStates(0,2);
}
break;
case 10:
if ((0xffff7fffffffdbffL & l) != 0L) {
jjCheckNAddStates(0,2);
}
break;
case 11:
if (curChar == 47 && kind > 9) kind=9;
break;
case 13:
if (curChar == 36) {
jjCheckNAddStates(27,34);
}
break;
case 14:
if (curChar == 43 && kind > 4) kind=4;
break;
case 15:
if (curChar == 43) {
jjCheckNAdd(14);
}
break;
case 16:
if (curChar == 45 && kind > 4) kind=4;
break;
case 17:
if (curChar == 45) {
jjCheckNAdd(16);
}
break;
case 18:
if (curChar == 46 && kind > 4) kind=4;
break;
case 19:
if (curChar == 46) {
jjCheckNAdd(18);
}
break;
case 20:
if (curChar == 44 && kind > 4) kind=4;
break;
case 21:
if (curChar == 44) {
jjCheckNAdd(20);
}
break;
case 22:
if (curChar == 46) {
jjCheckNAddTwoStates(18,23);
}
break;
case 23:
if (curChar == 43 && kind > 5) kind=5;
break;
case 24:
if (curChar == 44) {
jjCheckNAddTwoStates(20,23);
}
break;
case 25:
if (curChar == 60) {
jjCheckNAddStates(15,26);
}
break;
case 26:
if (curChar == 60 && kind > 4) kind=4;
break;
case 27:
if (curChar == 60) {
jjCheckNAdd(20);
}
break;
case 28:
if (curChar == 60) {
jjCheckNAdd(16);
}
break;
case 30:
if (curChar == 60) {
jjCheckNAdd(29);
}
break;
case 31:
if (curChar == 58 && kind > 4) kind=4;
break;
case 32:
if (curChar == 60) {
jjCheckNAdd(31);
}
break;
case 33:
if (curChar == 35 && kind > 4) kind=4;
break;
case 34:
if (curChar == 60) {
jjCheckNAdd(33);
}
break;
case 35:
if (curChar == 62) {
jjCheckNAddStates(3,14);
}
break;
case 36:
if (curChar == 62 && kind > 4) kind=4;
break;
case 37:
if (curChar == 62) {
jjCheckNAdd(20);
}
break;
case 38:
if (curChar == 62) {
jjCheckNAdd(16);
}
break;
case 39:
if (curChar == 62) {
jjCheckNAdd(29);
}
break;
case 40:
if (curChar == 62) {
jjCheckNAdd(31);
}
break;
case 41:
if (curChar == 62) {
jjCheckNAdd(33);
}
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 0:
if ((0xafffffff57fffffeL & l) != 0L) {
if (kind > 7) kind=7;
{
jjCheckNAdd(6);
}
}
if ((0x7fffffe07fffffeL & l) != 0L) {
if (kind > 10) kind=10;
{
jjCheckNAdd(12);
}
}
break;
case 5:
if ((0xafffffff57fffffeL & l) == 0L) break;
if (kind > 7) kind=7;
{
jjCheckNAdd(6);
}
break;
case 6:
if ((0xbfffffffd7fffffeL & l) == 0L) break;
if (kind > 7) kind=7;
{
jjCheckNAdd(6);
}
break;
case 9:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=8;
break;
case 10:
{
jjAddStates(0,2);
}
break;
case 12:
if ((0x7fffffe07fffffeL & l) == 0L) break;
if (kind > 10) kind=10;
{
jjCheckNAdd(12);
}
break;
case 29:
if (curChar == 96 && kind > 4) kind=4;
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 0:
case 6:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 7) kind=7;
{
jjCheckNAdd(6);
}
break;
case 10:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) {
jjAddStates(0,2);
}
break;
default :
if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
 else break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=42 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
