{
  float[][] weights=to2D(x);
  float[][] E=empty2D();
  value=0.0f;
  Arrays.fill(derivative,0.0f);
  float[][] sums=new float[labelIndices.size()][];
  float[][] probs=new float[labelIndices.size()][];
  float[][] counts=new float[labelIndices.size()][];
  for (int i=0; i < sums.length; i++) {
    int size=labelIndices.get(i).size();
    sums[i]=new float[size];
    probs[i]=new float[size];
    counts[i]=new float[size];
    Arrays.fill(counts[i],0.0f);
  }
  for (int d=0; d < data.length; d++) {
    int[] llabels=labels[d];
    for (int e=0; e < data[d].length; e++) {
      int[][] ddata=this.data[d][e];
      for (int cl=0; cl < ddata.length; cl++) {
        int[] features=ddata[cl];
        Arrays.fill(sums[cl],0.0f);
        int numClasses=labelIndices.get(cl).size();
        for (int c=0; c < numClasses; c++) {
          for (          int feature : features) {
            sums[cl][c]+=weights[feature][c];
          }
        }
      }
      for (int cl=0; cl < ddata.length; cl++) {
        int[] label=new int[cl + 1];
        Arrays.fill(label,classIndex.indexOf(backgroundSymbol));
        int index1=label.length - 1;
        for (int pos=e; pos >= 0 && index1 >= 0; pos--) {
          label[index1--]=llabels[pos];
        }
        CRFLabel crfLabel=new CRFLabel(label);
        int labelIndex=labelIndices.get(cl).indexOf(crfLabel);
        float total=ArrayMath.logSum(sums[cl]);
        int numClasses=labelIndices.get(cl).size();
        for (int c=0; c < numClasses; c++) {
          probs[cl][c]=(float)Math.exp(sums[cl][c] - total);
        }
        value-=sums[cl][labelIndex] - total;
      }
      for (int j=0; j < data[d][e].length; j++) {
        Index labelIndex=labelIndices.get(j);
        for (int k=0; k < labelIndex.size(); k++) {
          int[] label=((CRFLabel)labelIndex.get(k)).getLabel();
          float p=probs[j][k];
          for (int n=0; n < data[d][e][j].length; n++) {
            E[data[d][e][j][n]][k]+=p;
          }
        }
      }
    }
  }
  int index=0;
  for (int i=0; i < E.length; i++) {
    for (int j=0; j < E[i].length; j++) {
      derivative[index++]=(E[i][j] - Ehat[i][j]);
    }
  }
  if (prior == QUADRATIC_PRIOR) {
    float sigmaSq=sigma * sigma;
    for (int i=0; i < x.length; i++) {
      float k=1.0f;
      float w=x[i];
      value+=k * w * w / 2.0 / sigmaSq;
      derivative[i]+=k * w / sigmaSq;
    }
  }
 else   if (prior == HUBER_PRIOR) {
    float sigmaSq=sigma * sigma;
    for (int i=0; i < x.length; i++) {
      float w=x[i];
      float wabs=Math.abs(w);
      if (wabs < epsilon) {
        value+=w * w / 2.0 / epsilon / sigmaSq;
        derivative[i]+=w / epsilon / sigmaSq;
      }
 else {
        value+=(wabs - epsilon / 2) / sigmaSq;
        derivative[i]+=((w < 0.0) ? -1.0 : 1.0) / sigmaSq;
      }
    }
  }
 else   if (prior == QUARTIC_PRIOR) {
    float sigmaQu=sigma * sigma * sigma* sigma;
    for (int i=0; i < x.length; i++) {
      float k=1.0f;
      float w=x[i];
      value+=k * w * w* w* w / 2.0 / sigmaQu;
      derivative[i]+=k * w / sigmaQu;
    }
  }
}
