{
  TreebankLangParserParams tlpParams=op.tlpParams;
  TreebankLanguagePack tlp=tlpParams.treebankLanguagePack();
  if (op.testOptions.verbose) {
    PrintWriter pwErr=tlpParams.pw(System.err);
    pwErr.print("Training ");
    pwErr.println(trainTreebank.textualSummary(tlp));
    if (secondaryTreebank != null) {
      pwErr.print("Secondary training ");
      pwErr.println(secondaryTreebank.textualSummary(tlp));
    }
  }
  System.err.print("Binarizing trees...");
  TreeAnnotatorAndBinarizer binarizer=buildTrainBinarizer(op);
  CompositeTreeTransformer trainTransformer=buildTrainTransformer(op,binarizer);
  Treebank wholeTreebank;
  if (secondaryTreebank == null) {
    wholeTreebank=trainTreebank;
  }
 else {
    wholeTreebank=new CompositeTreebank(trainTreebank,secondaryTreebank);
  }
  if (op.trainOptions.selectiveSplit) {
    op.trainOptions.splitters=ParentAnnotationStats.getSplitCategories(wholeTreebank,op.trainOptions.tagSelectiveSplit,0,op.trainOptions.selectiveSplitCutOff,op.trainOptions.tagSelectiveSplitCutOff,tlp);
    removeDeleteSplittersFromSplitters(tlp,op);
    if (op.testOptions.verbose) {
      List<String> list=new ArrayList<String>(op.trainOptions.splitters);
      Collections.sort(list);
      System.err.println("Parent split categories: " + list);
    }
  }
  if (op.trainOptions.selectivePostSplit) {
    TreeTransformer myTransformer=new TreeAnnotator(tlpParams.headFinder(),tlpParams,op);
    wholeTreebank=wholeTreebank.transform(myTransformer);
    op.trainOptions.postSplitters=ParentAnnotationStats.getSplitCategories(wholeTreebank,true,0,op.trainOptions.selectivePostSplitCutOff,op.trainOptions.tagSelectivePostSplitCutOff,tlp);
    if (op.testOptions.verbose) {
      System.err.println("Parent post annotation split categories: " + op.trainOptions.postSplitters);
    }
  }
  if (op.trainOptions.hSelSplit) {
    int ptt=op.trainOptions.printTreeTransformations;
    op.trainOptions.printTreeTransformations=0;
    binarizer.setDoSelectiveSplit(false);
    for (    Tree tree : wholeTreebank) {
      trainTransformer.transformTree(tree);
    }
    binarizer.setDoSelectiveSplit(true);
    op.trainOptions.printTreeTransformations=ptt;
  }
  trainTreebank=trainTreebank.transform(trainTransformer);
  if (secondaryTreebank != null) {
    secondaryTreebank=secondaryTreebank.transform(trainTransformer);
  }
  if (op.trainOptions.printAnnotatedStateCounts) {
    binarizer.printStateCounts();
  }
  if (op.trainOptions.printAnnotatedRuleCounts) {
    binarizer.printRuleCounts();
  }
  if (tuneTreebank != null) {
    tuneTreebank=tuneTreebank.transform(trainTransformer);
  }
  Timing.tick("done.");
  if (op.testOptions.verbose) {
    binarizer.dumpStats();
  }
  return new Triple<Treebank,Treebank,Treebank>(trainTreebank,secondaryTreebank,tuneTreebank);
}
