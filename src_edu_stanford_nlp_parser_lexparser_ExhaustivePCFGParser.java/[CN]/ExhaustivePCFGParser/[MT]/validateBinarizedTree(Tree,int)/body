{
  if (tree.isLeaf()) {
    return 0.0;
  }
  float epsilon=0.0001f;
  if (tree.isPreTerminal()) {
    String wordStr=tree.children()[0].label().value();
    int tag=tagIndex.indexOf(tree.label().value());
    int word=wordIndex.indexOf(wordStr);
    IntTaggedWord iTW=new IntTaggedWord(word,tag);
    float score=lex.score(iTW,start,wordStr,null);
    float bound=iScore[start][start + 1][stateIndex.indexOf(tree.label().value())];
    if (score > bound + epsilon) {
      System.out.println("Invalid tagging:");
      System.out.println("  Tag: " + tree.label().value());
      System.out.println("  Word: " + tree.children()[0].label().value());
      System.out.println("  Score: " + score);
      System.out.println("  Bound: " + bound);
    }
    return score;
  }
  int parent=stateIndex.indexOf(tree.label().value());
  int firstChild=stateIndex.indexOf(tree.children()[0].label().value());
  if (tree.numChildren() == 1) {
    UnaryRule ur=new UnaryRule(parent,firstChild);
    double score=SloppyMath.max(ug.scoreRule(ur),-10000.0) + validateBinarizedTree(tree.children()[0],start);
    double bound=iScore[start][start + tree.yield().size()][parent];
    if (score > bound + epsilon) {
      System.out.println("Invalid unary:");
      System.out.println("  Parent: " + tree.label().value());
      System.out.println("  Child: " + tree.children()[0].label().value());
      System.out.println("  Start: " + start);
      System.out.println("  End: " + (start + tree.yield().size()));
      System.out.println("  Score: " + score);
      System.out.println("  Bound: " + bound);
    }
    return score;
  }
  int secondChild=stateIndex.indexOf(tree.children()[1].label().value());
  BinaryRule br=new BinaryRule(parent,firstChild,secondChild);
  double score=SloppyMath.max(bg.scoreRule(br),-10000.0) + validateBinarizedTree(tree.children()[0],start) + validateBinarizedTree(tree.children()[1],start + tree.children()[0].yield().size());
  double bound=iScore[start][start + tree.yield().size()][parent];
  if (score > bound + epsilon) {
    System.out.println("Invalid binary:");
    System.out.println("  Parent: " + tree.label().value());
    System.out.println("  LChild: " + tree.children()[0].label().value());
    System.out.println("  RChild: " + tree.children()[1].label().value());
    System.out.println("  Start: " + start);
    System.out.println("  End: " + (start + tree.yield().size()));
    System.out.println("  Score: " + score);
    System.out.println("  Bound: " + bound);
  }
  return score;
}
