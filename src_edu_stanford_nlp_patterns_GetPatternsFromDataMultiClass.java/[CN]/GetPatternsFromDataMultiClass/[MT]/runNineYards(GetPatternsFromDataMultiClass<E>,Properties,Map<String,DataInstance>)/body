{
  ArgumentParser.fillOptions(model,props);
  boolean loadSavedPatternsWordsDir=Boolean.parseBoolean(props.getProperty("loadSavedPatternsWordsDir"));
  if (loadSavedPatternsWordsDir)   loadFromSavedPatternsWordsDir(model,props);
  if (model.constVars.learn) {
    Map<String,E> p0=new HashMap<>();
    Map<String,Counter<CandidatePhrase>> p0Set=new HashMap<>();
    Map<String,Set<E>> ignorePatterns=new HashMap<>();
    model.iterateExtractApply(p0,p0Set,ignorePatterns);
  }
  if (model.constVars.markedOutputTextFile != null)   model.writeLabeledData(model.constVars.markedOutputTextFile);
  if (model.constVars.columnOutputFile != null)   writeColumnOutput(model.constVars.columnOutputFile,model.constVars.batchProcessSents,model.constVars.getAnswerClass());
  if (model.constVars.savePatternsWordsDir)   model.saveModel();
  boolean evaluate=Boolean.parseBoolean(props.getProperty("evaluate"));
  if (evaluate && evalsents != null) {
    model.evaluate(evalsents);
  }
  if (model.constVars.saveInvertedIndex) {
    model.constVars.invertedIndex.saveIndex(model.constVars.invertedIndexDirectory);
  }
  if (model.constVars.storePatsForEachToken.equals(ConstantsAndVariables.PatternForEachTokenWay.LUCENE)) {
    model.patsForEachToken.close();
  }
  return model;
}
