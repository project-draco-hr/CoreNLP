{
  String fileFormat=props.getProperty("fileFormat");
  Map<String,DataInstance> sents=null;
  boolean batchProcessSents=Boolean.parseBoolean(props.getProperty("batchProcessSents","false"));
  int numMaxSentencesPerBatchFile=Integer.parseInt(props.getProperty("numMaxSentencesPerBatchFile",String.valueOf(Integer.MAX_VALUE)));
  boolean preserveSentenceSequence=Boolean.parseBoolean(props.getProperty("preserveSentenceSequence","false"));
  if (!batchProcessSents) {
    if (preserveSentenceSequence)     sents=new LinkedHashMap<String,DataInstance>();
 else     sents=new HashMap<String,DataInstance>();
  }
 else {
    Data.sentsFiles=new ArrayList<File>();
    Data.sentId2File=new ConcurrentHashMap<String,File>();
  }
  String file=props.getProperty("file");
  String posModelPath=props.getProperty("posModelPath");
  boolean lowercase=Boolean.parseBoolean(props.getProperty("lowercaseText"));
  boolean useTargetNERRestriction=Boolean.parseBoolean(props.getProperty("useTargetNERRestriction"));
  boolean useTargetParserParentRestriction=Boolean.parseBoolean(props.getProperty(Flags.useTargetParserParentRestriction));
  boolean useContextNERRestriction=Boolean.parseBoolean(props.getProperty("useContextNERRestriction"));
  boolean addEvalSentsToTrain=Boolean.parseBoolean(props.getProperty("addEvalSentsToTrain","true"));
  String evalFileWithGoldLabels=props.getProperty("evalFileWithGoldLabels");
  if (file == null && (evalFileWithGoldLabels == null || addEvalSentsToTrain == false)) {
    throw new RuntimeException("No training data! file is " + file + " and evalFileWithGoldLabels is "+ evalFileWithGoldLabels+ " and addEvalSentsToTrain is "+ addEvalSentsToTrain);
  }
  if (props.getProperty(Flags.patternType) == null)   throw new RuntimeException("PattenrType not specified. Options are SURFACE and DEP");
  PatternFactory.PatternType patternType=PatternFactory.PatternType.valueOf(props.getProperty(Flags.patternType));
  File saveSentencesSerDir=null;
  File tempSaveSentencesDir=null;
  if (file != null) {
    String saveSentencesSerDirstr=props.getProperty("saveSentencesSerDir");
    if (saveSentencesSerDirstr != null) {
      saveSentencesSerDir=new File(saveSentencesSerDirstr);
      if (saveSentencesSerDir.exists() && !fileFormat.equalsIgnoreCase("ser"))       IOUtils.deleteDirRecursively(saveSentencesSerDir);
      IOUtils.ensureDir(saveSentencesSerDir);
    }
    String systemdir=System.getProperty("java.io.tmpdir");
    tempSaveSentencesDir=File.createTempFile("sents",".tmp",new File(systemdir));
    tempSaveSentencesDir.deleteOnExit();
    tempSaveSentencesDir.delete();
    tempSaveSentencesDir.mkdir();
    int numFilesTillNow=0;
    if (fileFormat == null || fileFormat.equalsIgnoreCase("text") || fileFormat.equalsIgnoreCase("txt")) {
      Map<String,DataInstance> sentsthis;
      if (preserveSentenceSequence)       sentsthis=new LinkedHashMap<String,DataInstance>();
 else       sentsthis=new HashMap<String,DataInstance>();
      for (      File f : GetPatternsFromDataMultiClass.getAllFiles(file)) {
        Redwood.log(Redwood.DBG,"Annotating text in " + f);
        Iterator<String> reader=IOUtils.readLines(f).iterator();
        while (reader.hasNext()) {
          numFilesTillNow=tokenize(reader,posModelPath,lowercase,useTargetNERRestriction || useContextNERRestriction,f.getName() + "-" + numFilesTillNow+ "-",useTargetParserParentRestriction,props.getProperty(Flags.numThreads),batchProcessSents,numMaxSentencesPerBatchFile,saveSentencesSerDir == null ? tempSaveSentencesDir : saveSentencesSerDir,sentsthis,numFilesTillNow,patternType);
        }
        if (!batchProcessSents) {
          sents.putAll(sentsthis);
        }
      }
      if (!batchProcessSents) {
        for (        Map.Entry<String,DataInstance> d : sents.entrySet()) {
          for (          CoreLabel l : d.getValue().getTokens()) {
            for (            String label : labels) {
              if (l.containsKey(PatternsAnnotations.LongestMatchedPhraseForEachLabel.class)) {
                CandidatePhrase p=l.get(PatternsAnnotations.LongestMatchedPhraseForEachLabel.class).get(label);
              }
            }
          }
        }
        String outfilename=(saveSentencesSerDir == null ? tempSaveSentencesDir : saveSentencesSerDir) + "/sents_" + numFilesTillNow;
        Redwood.log("Saving sentences in " + outfilename);
        IOUtils.writeObjectToFile(sents,outfilename);
      }
    }
 else     if (fileFormat.equalsIgnoreCase("ser")) {
      for (      File f : GetPatternsFromDataMultiClass.getAllFiles(file)) {
        Redwood.log(Redwood.DBG,"reading from ser file " + f);
        if (!batchProcessSents)         sents.putAll((Map<String,DataInstance>)IOUtils.readObjectFromFile(f));
 else {
          File newf=new File(tempSaveSentencesDir.getAbsolutePath() + "/" + f.getAbsolutePath().replaceAll(java.util.regex.Pattern.quote("/"),"_"));
          IOUtils.cp(f,newf);
          Data.sentsFiles.add(newf);
        }
      }
    }
 else {
      throw new RuntimeException("Cannot identify the file format. Valid values are text (or txt) and ser, where the serialized file is of the type Map<String, DataInstance>.");
    }
  }
  Map<String,DataInstance> evalsents=new HashMap<String,DataInstance>();
  File saveEvalSentencesSerFileFile=null;
  boolean evaluate=Boolean.parseBoolean(props.getProperty("evaluate"));
  if (evaluate) {
    if (evalFileWithGoldLabels != null) {
      String saveEvalSentencesSerFile=props.getProperty("saveEvalSentencesSerFile");
      if (saveEvalSentencesSerFile == null) {
        String systemdir=System.getProperty("java.io.tmpdir");
        saveEvalSentencesSerFileFile=File.createTempFile("evalsents",".tmp",new File(systemdir));
      }
 else       saveEvalSentencesSerFileFile=new File(saveEvalSentencesSerFile);
      Map setClassForTheseLabels=new HashMap<String,Class>();
      List<File> allFiles=GetPatternsFromDataMultiClass.getAllFiles(evalFileWithGoldLabels);
      int numFile=0;
      String evalFileFormat=props.getProperty("evalFileFormat");
      if (evalFileFormat == null || evalFileFormat.equalsIgnoreCase("text") || evalFileFormat.equalsIgnoreCase("txt") || evalFileFormat.startsWith("text")) {
        for (        File f : allFiles) {
          numFile++;
          Redwood.log(Redwood.DBG,"Annotating text in " + f + ". Num file "+ numFile);
          if (evalFileFormat.equalsIgnoreCase("textCoNLLStyle")) {
            Map<String,DataInstance> sentsEval=AnnotatedTextReader.parseColumnFile(new BufferedReader(new FileReader(f)),labels,setClassForTheseLabels,true,f.getName());
            evalsents.putAll(runPOSNERParseOnTokens(sentsEval,props));
          }
 else {
            List<CoreMap> sentsCMs=AnnotatedTextReader.parseFile(new BufferedReader(new FileReader(f)),labels,setClassForTheseLabels,true,f.getName());
            evalsents.putAll(runPOSNEROnTokens(sentsCMs,posModelPath,useTargetNERRestriction || useContextNERRestriction,"",useTargetParserParentRestriction,props.getProperty(Flags.numThreads),patternType));
          }
        }
      }
 else       if (fileFormat.equalsIgnoreCase("ser")) {
        for (        File f : allFiles) {
          evalsents.putAll((Map<? extends String,? extends DataInstance>)IOUtils.readObjectFromFile(f));
        }
      }
      if (addEvalSentsToTrain) {
        Redwood.log(Redwood.DBG,"Adding " + evalsents.size() + " eval sents to the training set");
      }
      IOUtils.writeObjectToFile(evalsents,saveEvalSentencesSerFileFile);
      if (batchProcessSents) {
        Data.sentsFiles.add(saveEvalSentencesSerFileFile);
        for (        String k : evalsents.keySet())         Data.sentId2File.put(k,saveEvalSentencesSerFileFile);
      }
 else       sents.putAll(evalsents);
    }
  }
  return new Pair(sents,evalsents);
}
