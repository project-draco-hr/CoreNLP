{
  Redwood.log(Redwood.DBG,"ignoreCaseSeedMatch is " + constVars.ignoreCaseSeedMatch);
  List<List<String>> threadedSentIds=getThreadBatches(new ArrayList<>(sents.keySet()),constVars.numThreads);
  ExecutorService executor=Executors.newFixedThreadPool(constVars.numThreads);
  List<Future<Pair<Map<String,DataInstance>,Counter<CandidatePhrase>>>> list=new ArrayList<>();
  Counter<CandidatePhrase> matchedPhrasesCounter=new ClassicCounter<>();
  for (  List<String> keys : threadedSentIds) {
    Callable<Pair<Map<String,DataInstance>,Counter<CandidatePhrase>>> task=new LabelWithSeedWords(seedWords,sents,keys,answerclass,label,constVars.fuzzyMatch,constVars.minLen4FuzzyForPattern,constVars.backgroundSymbol,constVars.getEnglishWords(),stringTransformationFunction,constVars.writeMatchedTokensIdsForEachPhrase,overwriteExistingLabels,constVars.patternType,constVars.ignoreCaseSeedMatch);
    Pair<Map<String,DataInstance>,Counter<CandidatePhrase>> sentsi=executor.submit(task).get();
    sents.putAll(sentsi.first());
    matchedPhrasesCounter.addAll(sentsi.second());
  }
  executor.shutdown();
  Redwood.log("extremedebug","Matched phrases freq is " + matchedPhrasesCounter);
  return matchedPhrasesCounter;
}
