{
  PatternFactory.PatternType type=PatternFactory.PatternType.valueOf(propsoriginal.getProperty(Flags.patternType));
  Properties props=new Properties();
  List<String> anns=new ArrayList<>();
  anns.add("pos");
  anns.add("lemma");
  boolean useTargetParserParentRestriction=Boolean.parseBoolean(propsoriginal.getProperty(Flags.useTargetParserParentRestriction));
  boolean useTargetNERRestriction=Boolean.parseBoolean(propsoriginal.getProperty(Flags.useTargetNERRestriction));
  String posModelPath=props.getProperty(Flags.posModelPath);
  String numThreads=propsoriginal.getProperty(Flags.numThreads);
  if (useTargetParserParentRestriction) {
    anns.add("parse");
  }
 else   if (type.equals(PatternFactory.PatternType.DEP))   anns.add("depparse");
  if (useTargetNERRestriction) {
    anns.add("ner");
  }
  props.setProperty("annotators",StringUtils.join(anns,","));
  props.setProperty("parse.maxlen","80");
  props.setProperty("nthreads",numThreads);
  props.setProperty("threads",numThreads);
  if (posModelPath != null) {
    props.setProperty("pos.model",posModelPath);
  }
  StanfordCoreNLP pipeline=new StanfordCoreNLP(props,false);
  Redwood.log(Redwood.DBG,"Annotating text");
  for (  Map.Entry<String,DataInstance> en : sents.entrySet()) {
    List<CoreMap> temp=new ArrayList<>();
    CoreMap s=new ArrayCoreMap();
    s.set(CoreAnnotations.TokensAnnotation.class,en.getValue().getTokens());
    temp.add(s);
    Annotation doc=new Annotation(temp);
    try {
      pipeline.annotate(doc);
      if (useTargetParserParentRestriction)       inferParentParseTag(s.get(TreeAnnotation.class));
    }
 catch (    Exception e) {
      System.out.println("Ignoring error: for sentence  " + StringUtils.joinWords(en.getValue().getTokens()," "));
      e.printStackTrace();
    }
  }
  Redwood.log(Redwood.DBG,"Done annotating text");
  return sents;
}
