{
  Redwood.log(Redwood.DBG,"calculating sufficient stats");
  patternsForEachToken.setupSearch();
  Class answerClass4Label=constVars.getAnswerClass().get(label);
  int sampleSize=constVars.sampleSentencesForSufficientStats == 1.0 ? sents.size() : (int)Math.round(constVars.sampleSentencesForSufficientStats * sents.size());
  List<List<String>> sampledSentIds=splitIntoNumThreads(CollectionUtils.toList(sents.keySet()),sampleSize,constVars.numThreads);
  Redwood.log(Redwood.DBG,"sampled " + sampleSize + " sentences ("+ constVars.sampleSentencesForSufficientStats * 100 + "%)");
  ExecutorService executor=Executors.newFixedThreadPool(constVars.numThreads);
  List<Future<Triple<List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>>>> list=new ArrayList<Future<Triple<List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>>>>();
  for (  List<String> sampledSents : sampledSentIds) {
    Callable<Triple<List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>>> task=new CalculateSufficientStatsThreads(patternsForEachToken,sampledSents,sents,label,answerClass4Label);
    Future<Triple<List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>>> submit=executor.submit(task);
    list.add(submit);
  }
  for (  Future<Triple<List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>>> future : list) {
    try {
      Triple<List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>,List<Pair<E,CandidatePhrase>>> stats=future.get();
      addStats(patternsandWords4Label,stats.first());
      addStats(negPatternsandWords4Label,stats.second());
      addStats(unLabeledPatternsandWords4Label,stats.third());
    }
 catch (    Exception e) {
      executor.shutdownNow();
      throw new RuntimeException(e);
    }
  }
  executor.shutdown();
}
