{
  if (!this.flags.USE_SPEAKERMATCH && !this.flags.USE_DISCOURSEMATCH && !this.flags.USE_APPOSITION&& !this.flags.USE_PREDICATENOMINATIVES&& this.skipThisMention(document,m,document.corefClusters.get(m.corefClusterID),dict)) {
    return;
  }
  Set<Mention> roleSet=document.roleSet;
  for (int sentJ=m.sentNum; sentJ >= 0; sentJ--) {
    List<Mention> l=Sieve.getOrderedAntecedents(m,sentJ,mIdx,document.predictedMentions,dict);
    if (maxSentDist != -1 && m.sentNum - sentJ > maxSentDist)     continue;
    for (int i=0; i < l.size(); i++) {
      for (int j=0; j < l.size(); j++) {
        if (l.get(i).headString.equals(l.get(j).headString) && l.get(i).startIndex == l.get(j).startIndex && l.get(i).sameSentence(l.get(j)) && j > i && l.get(i).spanToString().length() > l.get(j).spanToString().length()) {
          l.set(j,l.set(i,l.get(j)));
        }
      }
    }
    for (    Mention ant : l) {
      if (skipForAnalysis(ant,m,props))       continue;
      if (m.isSingleton && m.mentionType != MentionType.PROPER && ant.isSingleton && ant.mentionType != MentionType.PROPER)       continue;
      if (m.corefClusterID == ant.corefClusterID)       continue;
      if (!mType.contains(m.mentionType) || !aType.contains(ant.mentionType))       continue;
      if (m.mentionType == MentionType.PRONOMINAL) {
        if (!matchedMentionType(m,mTypeStr))         continue;
        if (!matchedMentionType(ant,aTypeStr))         continue;
      }
      CorefCluster c1=document.corefClusters.get(m.corefClusterID);
      CorefCluster c2=document.corefClusters.get(ant.corefClusterID);
      assert(c1 != null);
      assert(c2 != null);
      if (this.useRoleSkip()) {
        if (m.isRoleAppositive(ant,dict)) {
          roleSet.add(m);
        }
 else         if (ant.isRoleAppositive(m,dict)) {
          roleSet.add(ant);
        }
        continue;
      }
      if (this.coreferent(document,c1,c2,m,ant,dict,roleSet)) {
        if (CorefProperties.debug(props)) {
          sbLog.append(CorefPrinter.printErrorLogDcoref(m,ant,document,dict,mIdx,this.getClass().getName()));
        }
        int removeID=c1.clusterID;
        CorefCluster.mergeClusters(c2,c1);
        document.mergeIncompatibles(c2,c1);
        document.mergeAcronymCache(c2,c1);
        document.corefClusters.remove(removeID);
        return;
      }
    }
  }
}
