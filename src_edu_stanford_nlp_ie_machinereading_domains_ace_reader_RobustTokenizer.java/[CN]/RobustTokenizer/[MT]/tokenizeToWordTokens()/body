{
  List<WordToken> result=new ArrayList<>();
  Matcher match=wordPattern.matcher(buffer);
  int previousEndMatch=0;
  while (match.find()) {
    String crtMatch=match.group();
    int endMatch=match.end();
    int startMatch=endMatch - crtMatch.length();
    int i;
    if (crtMatch.endsWith("n't")) {
      if (crtMatch.length() > 3) {
        WordToken token1=new WordToken(crtMatch.substring(0,crtMatch.length() - 3),startMatch,endMatch - 3,countNewLines(buffer,previousEndMatch,startMatch));
        result.add(token1);
      }
      WordToken token2=new WordToken(crtMatch.substring(crtMatch.length() - 3,crtMatch.length()),endMatch - 3,endMatch,0);
      result.add(token2);
    }
 else     if ((i=hasApostropheBlock(crtMatch)) != -1) {
      WordToken token1=new WordToken(crtMatch.substring(0,i),startMatch,startMatch + i,countNewLines(buffer,previousEndMatch,startMatch));
      WordToken token2=new WordToken(crtMatch.substring(i,crtMatch.length()),startMatch + i,endMatch,0);
      result.add(token1);
      result.add(token2);
    }
 else {
      WordToken token=new WordToken(crtMatch,startMatch,endMatch,countNewLines(buffer,previousEndMatch,startMatch));
      result.add(token);
    }
    previousEndMatch=endMatch;
  }
  List<WordToken> resultWithAbs=new ArrayList<>();
  for (int i=0; i < result.size(); i++) {
    int end=result.size();
    if (end > i + MAX_MULTI_WORD_SIZE)     end=i + MAX_MULTI_WORD_SIZE;
    boolean found=false;
    for (; end > i + 1; end--) {
      WordToken startToken=result.get(i);
      WordToken endToken=result.get(end - 1);
      if (countNewLines(result,i,end) == 0) {
        String conc=concatenate(result,i,end);
        found=false;
        if ((mAbbreviations.contains(conc) == true)) {
          found=true;
          WordToken token=new WordToken(conc,startToken.getStart(),endToken.getEnd(),startToken.getNewLineCount());
          resultWithAbs.add(token);
          i=end - 1;
          break;
        }
      }
    }
    if (!found) {
      resultWithAbs.add(result.get(i));
    }
  }
  resultWithAbs=postprocess(resultWithAbs);
  return resultWithAbs;
}
