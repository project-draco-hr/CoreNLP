{
  pad.set(CoreAnnotations.AnswerAnnotation.class,flags.backgroundSymbol);
  PaddedList<IN> pInfo=new PaddedList<IN>(info,pad);
  List<List<String>> features=new ArrayList<List<String>>();
  Collection<Clique> done=Generics.newHashSet();
  for (int i=0; i < windowSize; i++) {
    List<String> featuresC=new ArrayList<String>();
    List<Clique> windowCliques=FeatureFactory.getCliques(i,0);
    windowCliques.removeAll(done);
    done.addAll(windowCliques);
    for (    Clique c : windowCliques) {
      for (      FeatureFactory featureFactory : featureFactories) {
        featuresC.addAll(featureFactory.getCliqueFeatures(pInfo,loc,c));
      }
      if (testTime && i == 0)       featuresC.add(BIAS);
    }
    features.add(featuresC);
  }
  int[] labels=new int[windowSize];
  for (int i=0; i < windowSize; i++) {
    String answer=pInfo.get(loc + i - windowSize + 1).get(CoreAnnotations.AnswerAnnotation.class);
    labels[i]=classIndex.indexOf(answer);
  }
  return new CRFDatum<List<String>,CRFLabel>(features,new CRFLabel(labels),null);
}
