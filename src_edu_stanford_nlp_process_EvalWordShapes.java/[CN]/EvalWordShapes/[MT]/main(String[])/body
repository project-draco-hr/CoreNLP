{
  int numClassifiers=7;
  boolean showCounts=false, avgEntropy=true, classEntropy=false, one=true;
  String trainFile="";
  String delim=" ";
  int wordCol=0;
  int classCol=2;
  int[] classifiers=new int[numClassifiers];
  for (int i=0; i < classifiers.length; i++) {
    classifiers[i]=i;
  }
  for (int i=0; i < args.length; i++) {
    if (args[i].equalsIgnoreCase("-f")) {
      trainFile=args[++i];
      continue;
    }
    if (args[i].equalsIgnoreCase("-a")) {
      classifiers=new int[Integer.parseInt(args[++i])];
      for (int j=0; j < classifiers.length; j++) {
        classifiers[j]=j;
      }
      numClassifiers=classifiers.length;
      continue;
    }
    if (args[i].equalsIgnoreCase("-s")) {
      String[] cs=args[++i].split(",");
      numClassifiers=cs.length;
      for (int j=0; j < cs.length; j++) {
        int index;
        if ((index=cs[j].indexOf("-")) >= 0) {
          int a=Integer.parseInt(cs[j].substring(0,index));
          int b=Integer.parseInt(cs[j].substring(index + 1));
          numClassifiers+=(b - a);
        }
      }
      classifiers=new int[numClassifiers];
      int ci=0;
      for (int j=0; j < cs.length; j++) {
        int index;
        if ((index=cs[j].indexOf("-")) >= 0) {
          int a=Integer.parseInt(cs[j].substring(0,index));
          int b=Integer.parseInt(cs[j].substring(index + 1));
          for (int k=a; k <= b; k++) {
            classifiers[ci++]=k;
          }
        }
 else {
          classifiers[ci++]=Integer.parseInt(cs[j]);
        }
      }
      continue;
    }
    if (args[i].equalsIgnoreCase("-counts")) {
      showCounts=(args[++i].equals("1"));
      continue;
    }
    if (args[i].equalsIgnoreCase("-classEntropy")) {
      classEntropy=(args[++i].equals("1"));
      continue;
    }
    if (args[i].equalsIgnoreCase("-avgEntropy")) {
      avgEntropy=(args[++i].equals("1"));
      continue;
    }
    if (args[i].equalsIgnoreCase("-delim")) {
      delim=args[++i];
      continue;
    }
    if (args[i].equalsIgnoreCase("-wordcol")) {
      wordCol=Integer.parseInt(args[++i]);
      continue;
    }
    if (args[i].equalsIgnoreCase("-classcol")) {
      classCol=Integer.parseInt(args[++i]);
      continue;
    }
    if (args[i].equalsIgnoreCase("-printWordShape")) {
      printWordShape=args[++i];
      continue;
    }
    if (args[i].equalsIgnoreCase("-one")) {
      one=(args[++i].equals("1"));
      continue;
    }
    System.out.println("Unknown Flag: " + args[i]);
    System.exit(1);
  }
  for (int i=0; i < classifiers.length; i++) {
    System.out.println("\nClassifier " + classifiers[i] + "\n");
    String[][] s=getWords(trainFile,wordCol,classCol,delim);
    GeneralizedCounter<Object> gc=train(s,classifiers[i]);
    if (classEntropy) {
      printAllEntropies(gc);
    }
    if (showCounts) {
      prettyPrintCounts(getCounts(gc));
    }
    if (avgEntropy) {
      System.out.println("weightedEntropy: " + weightedEntropy(gc));
    }
    if (one) {
      System.out.println("numSolitaryWordShapes: " + singleClasses(gc));
    }
  }
}
