{
  List<Tree> leaves=tree.getLeaves();
  for (  Tree leaf : leaves) {
    CoreLabel l=null;
    if (leaf.label() instanceof CoreLabel)     l=(CoreLabel)leaf.label();
    if (l != null) {
      int index=l.get(IndexAnnotation.class);
      String text=l.get(TextAnnotation.class);
      if (text.equals("Mary"))       assertEquals(1,index);
 else       if (text.equals("had"))       assertEquals(2,index);
 else       if (text.equals("a"))       assertEquals(3,index);
 else       if (text.equals("little"))       assertEquals(4,index);
 else       if (text.equals("lamb"))       assertEquals(5,index);
 else       if (text.equals("."))       assertEquals(6,index);
    }
 else {
    }
  }
  TreebankLanguagePack tlp=new PennTreebankLanguagePack();
  GrammaticalStructureFactory gsf=tlp.grammaticalStructureFactory();
  GrammaticalStructure gs=gsf.newGrammaticalStructure(tree);
  Collection<TypedDependency> deps=gs.typedDependenciesCCprocessed(true);
  Set<CyclicCoreLabel> nodes=new IdentityHashSet<CyclicCoreLabel>();
  for (  TypedDependency dep : deps) {
    nodes.add(dep.gov().label());
    nodes.add(dep.dep().label());
  }
  for (  CyclicCoreLabel n : nodes) {
    String text=n.value();
    int index=n.get(IndexAnnotation.class);
    if (text.equals("Mary"))     assertEquals(1,index);
 else     if (text.equals("had"))     assertEquals(2,index);
 else     if (text.equals("a"))     assertEquals(3,index);
 else     if (text.equals("little"))     assertEquals(4,index);
 else     if (text.equals("lamb"))     assertEquals(5,index);
 else     if (text.equals("."))     assertEquals(6,index);
  }
}
