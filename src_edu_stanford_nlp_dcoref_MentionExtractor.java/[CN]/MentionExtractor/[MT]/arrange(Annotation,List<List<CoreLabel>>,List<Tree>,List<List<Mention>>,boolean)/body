{
  List<List<Mention>> orderedMentionsBySentence=new ArrayList<>();
  for (int sent=0, sz=words.size(); sent < sz; sent++) {
    List<CoreLabel> sentence=words.get(sent);
    Tree tree=trees.get(sent);
    List<Mention> mentions=unorderedMentions.get(sent);
    Map<String,List<Mention>> mentionsToTrees=Generics.newHashMap();
    if (doMergeLabels)     mergeLabels(tree,sentence);
    for (    Mention mention : mentions) {
      mention.contextParseTree=tree;
      mention.sentenceWords=sentence;
      mention.originalSpan=new ArrayList<>(mention.sentenceWords.subList(mention.startIndex,mention.endIndex));
      if (!((CoreLabel)tree.label()).has(CoreAnnotations.BeginIndexAnnotation.class))       tree.indexSpans(0);
      if (mention.headWord == null) {
        Tree headTree=((RuleBasedCorefMentionFinder)mentionFinder).findSyntacticHead(mention,tree,sentence);
        mention.headWord=(CoreLabel)headTree.label();
        mention.headIndex=mention.headWord.get(CoreAnnotations.IndexAnnotation.class) - 1;
      }
      if (mention.mentionSubTree == null) {
        Tree headTree=tree.getLeaves().get(mention.headIndex);
        if (headTree == null) {
          throw new RuntimeException("Missing head tree for a mention!");
        }
        Tree t=headTree;
        while ((t=t.parent(tree)) != null) {
          if (t.headTerminal(headFinder) == headTree && t.value().equals("NP")) {
            mention.mentionSubTree=t;
          }
 else           if (mention.mentionSubTree != null) {
            break;
          }
        }
        if (mention.mentionSubTree == null) {
          mention.mentionSubTree=headTree;
        }
      }
      List<Mention> mentionsForTree=mentionsToTrees.get(treeToKey(mention.mentionSubTree));
      if (mentionsForTree == null) {
        mentionsForTree=new ArrayList<>();
        mentionsToTrees.put(treeToKey(mention.mentionSubTree),mentionsForTree);
      }
      mentionsForTree.add(mention);
      mention.process(dictionaries,semantics,this,singletonPredictor);
    }
    List<Mention> orderedMentions=new ArrayList<>();
    orderedMentionsBySentence.add(orderedMentions);
    for (    Tree t : tree.preOrderNodeList()) {
      List<Mention> lm=mentionsToTrees.get(treeToKey(t));
      if (lm != null) {
        for (        Mention m : lm) {
          orderedMentions.add(m);
        }
      }
    }
    findSyntacticRelations(tree,orderedMentions);
    assert(mentions.size() == orderedMentions.size());
  }
  return orderedMentionsBySentence;
}
