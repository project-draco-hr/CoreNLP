{
  List<List<CoreLabel>> documents=new ArrayList<List<CoreLabel>>();
  String s=IOUtils.slurpReader(r);
  Set<String> wordsSeenOnce=new HashSet<String>();
  Set<String> wordsSeenMultiple=new HashSet<String>();
  XMLBeginEndIterator xmlIter=new XMLBeginEndIterator(new StringReader(s),"TEXT");
  while (xmlIter.hasNext()) {
    PTBTokenizer<CoreLabel> ptb=PTBTokenizer.newPTBTokenizer(new StringReader((String)xmlIter.next()),false,true);
    List<CoreLabel> document=new ArrayList<CoreLabel>();
    Set<String> words=new HashSet<String>();
    while (ptb.hasNext()) {
      CoreLabel w=ptb.next();
      words.add(w.word().toLowerCase());
      Matcher m=sgml.matcher(w.word());
      if (m.matches()) {
        if (document.size() > 0) {
          documents.addAll(wts.process(document));
          document=new ArrayList<CoreLabel>();
        }
        continue;
      }
      document.add(w);
    }
    if (document.size() > 0) {
      documents.addAll(wts.process(document));
    }
    for (    String word : words) {
      if (wordsSeenMultiple.contains(word)) {
      }
 else       if (wordsSeenOnce.contains(word)) {
        wordsSeenOnce.remove(word);
        wordsSeenMultiple.add(word);
      }
 else {
        wordsSeenOnce.add(word);
      }
    }
  }
  xmlIter=new XMLBeginEndIterator(new StringReader(s),"TXT");
  while (xmlIter.hasNext()) {
    PTBTokenizer<CoreLabel> ptb=PTBTokenizer.newPTBTokenizer(new StringReader((String)xmlIter.next()),false,true);
    List<CoreLabel> document=new ArrayList<CoreLabel>();
    Set<String> words=new HashSet<String>();
    while (ptb.hasNext()) {
      CoreLabel w=ptb.next();
      words.add(w.word().toLowerCase());
      Matcher m=sgml.matcher(w.word());
      if (m.matches()) {
        if (document.size() > 0) {
          documents.addAll(wts.process(document));
          document=new ArrayList<CoreLabel>();
        }
        continue;
      }
      document.add(w);
    }
    if (document.size() > 0) {
      documents.addAll(wts.process(document));
    }
    for (    String word : words) {
      if (wordsSeenMultiple.contains(word)) {
      }
 else       if (wordsSeenOnce.contains(word)) {
        wordsSeenOnce.remove(word);
        wordsSeenMultiple.add(word);
      }
 else {
        wordsSeenOnce.add(word);
      }
    }
  }
  knownWords=wordsSeenMultiple;
  knownWords.addAll(wordsSeenOnce);
  wordsSeenMultiple=null;
  List<List<CoreLabel>> docs=new ArrayList<List<CoreLabel>>();
  for (  List<CoreLabel> document : documents) {
    System.err.println(document);
    List<CoreLabel> doc=new ArrayList<CoreLabel>();
    int pos=0;
    for (    CoreLabel w : document) {
      CoreLabel wi=new CoreLabel();
      Matcher lowerMatcher=allLower.matcher(w.word());
      if (lowerMatcher.matches()) {
        wi.set(AnswerAnnotation.class,"LOWER");
      }
 else {
        Matcher upperMatcher=allUpper.matcher(w.word());
        if (upperMatcher.matches()) {
          wi.set(AnswerAnnotation.class,"UPPER");
        }
 else {
          Matcher startUpperMatcher=startUpper.matcher(w.word());
          if (startUpperMatcher.matches()) {
            wi.set(AnswerAnnotation.class,"INIT_UPPER");
          }
 else {
            wi.set(AnswerAnnotation.class,"O");
          }
        }
      }
      wi.setWord(w.word().toLowerCase());
      wi.set(UnknownAnnotation.class,(wordsSeenOnce.contains(w.word().toLowerCase()) ? "true" : "false"));
      wi.set(PositionAnnotation.class,Integer.toString(pos));
      if (wi.get(UnknownAnnotation.class).equals("true")) {
        System.err.println(wi.word() + " :: " + wi.get(UnknownAnnotation.class)+ " :: "+ wi.get(PositionAnnotation.class));
      }
      doc.add(wi);
      pos++;
    }
    System.err.println();
    docs.add(doc);
  }
  return docs.iterator();
}
