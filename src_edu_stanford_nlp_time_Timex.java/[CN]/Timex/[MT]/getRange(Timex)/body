{
  if (this.val == null) {
    throw new UnsupportedOperationException("no value specified for " + this);
  }
 else   if (val.length() >= 8 && Pattern.matches("\\d\\d\\d\\d\\d\\d\\d\\d",this.val.substring(0,8))) {
    int year=Integer.parseInt(this.val.substring(0,4));
    int month=Integer.parseInt(this.val.substring(4,6));
    int day=Integer.parseInt(this.val.substring(6,8));
    return new Pair<>(makeCalendar(year,month,day),makeCalendar(year,month,day));
  }
 else   if (val.length() >= 10 && Pattern.matches("\\d\\d\\d\\d-\\d\\d-\\d\\d",this.val.substring(0,10))) {
    int year=Integer.parseInt(this.val.substring(0,4));
    int month=Integer.parseInt(this.val.substring(5,7));
    int day=Integer.parseInt(this.val.substring(8,10));
    return new Pair<>(makeCalendar(year,month,day),makeCalendar(year,month,day));
  }
 else   if (Pattern.matches("\\d\\d\\d\\d\\d\\d\\d\\d[A-Z]+",this.val)) {
    int year=Integer.parseInt(this.val.substring(0,4));
    int month=Integer.parseInt(this.val.substring(4,6));
    int day=Integer.parseInt(this.val.substring(6,8));
    return new Pair<>(makeCalendar(year,month,day),makeCalendar(year,month,day));
  }
 else   if (val.length() >= 6 && Pattern.matches("\\d\\d\\d\\d\\d\\d",this.val.substring(0,6))) {
    int year=Integer.parseInt(this.val.substring(0,4));
    int month=Integer.parseInt(this.val.substring(4,6));
    Calendar begin=makeCalendar(year,month,1);
    int lastDay=begin.getActualMaximum(Calendar.DATE);
    Calendar end=makeCalendar(year,month,lastDay);
    return new Pair<>(begin,end);
  }
 else   if (val.length() >= 7 && Pattern.matches("\\d\\d\\d\\d-\\d\\d",this.val.substring(0,7))) {
    int year=Integer.parseInt(this.val.substring(0,4));
    int month=Integer.parseInt(this.val.substring(5,7));
    Calendar begin=makeCalendar(year,month,1);
    int lastDay=begin.getActualMaximum(Calendar.DATE);
    Calendar end=makeCalendar(year,month,lastDay);
    return new Pair<>(begin,end);
  }
 else   if (val.length() >= 4 && Pattern.matches("\\d\\d\\d\\d",this.val.substring(0,4))) {
    int year=Integer.parseInt(this.val.substring(0,4));
    return new Pair<>(makeCalendar(year,1,1),makeCalendar(year,12,31));
  }
  if (Pattern.matches("P\\d+Y",this.val) && documentTime != null) {
    Calendar rc=documentTime.getDate();
    int yearRange=Integer.parseInt(this.val.substring(1,this.val.length() - 1));
    if (this.beginPoint < this.endPoint) {
      Calendar start=copyCalendar(rc);
      Calendar end=copyCalendar(rc);
      end.add(Calendar.YEAR,yearRange);
      return new Pair<>(start,end);
    }
 else     if (this.beginPoint > this.endPoint) {
      Calendar start=copyCalendar(rc);
      Calendar end=copyCalendar(rc);
      start.add(Calendar.YEAR,0 - yearRange);
      return new Pair<>(start,end);
    }
    throw new RuntimeException("begin and end are equal " + this);
  }
  if (Pattern.matches("P\\d+M",this.val) && documentTime != null) {
    Calendar rc=documentTime.getDate();
    int monthRange=Integer.parseInt(this.val.substring(1,this.val.length() - 1));
    if (this.beginPoint < this.endPoint) {
      Calendar start=copyCalendar(rc);
      Calendar end=copyCalendar(rc);
      end.add(Calendar.MONTH,monthRange);
      return new Pair<>(start,end);
    }
    if (this.beginPoint > this.endPoint) {
      Calendar start=copyCalendar(rc);
      Calendar end=copyCalendar(rc);
      start.add(Calendar.MONTH,0 - monthRange);
      return new Pair<>(start,end);
    }
    throw new RuntimeException("begin and end are equal " + this);
  }
  if (Pattern.matches("P\\d+D",this.val) && documentTime != null) {
    Calendar rc=documentTime.getDate();
    int dayRange=Integer.parseInt(this.val.substring(1,this.val.length() - 1));
    if (this.beginPoint < this.endPoint) {
      Calendar start=copyCalendar(rc);
      Calendar end=copyCalendar(rc);
      end.add(Calendar.DAY_OF_MONTH,dayRange);
      return new Pair<>(start,end);
    }
    if (this.beginPoint > this.endPoint) {
      Calendar start=copyCalendar(rc);
      Calendar end=copyCalendar(rc);
      start.add(Calendar.DAY_OF_MONTH,0 - dayRange);
      return new Pair<>(start,end);
    }
    throw new RuntimeException("begin and end are equal " + this);
  }
  if (Pattern.matches("\\d+SP",this.val)) {
    int year=Integer.parseInt(this.val.substring(0,4));
    Calendar start=makeCalendar(year,2,1);
    Calendar end=makeCalendar(year,4,31);
    return new Pair<>(start,end);
  }
  if (Pattern.matches("\\d+SU",this.val)) {
    int year=Integer.parseInt(this.val.substring(0,4));
    Calendar start=makeCalendar(year,5,1);
    Calendar end=makeCalendar(year,7,31);
    return new Pair<>(start,end);
  }
  if (Pattern.matches("\\d+FA",this.val)) {
    int year=Integer.parseInt(this.val.substring(0,4));
    Calendar start=makeCalendar(year,8,1);
    Calendar end=makeCalendar(year,10,31);
    return new Pair<>(start,end);
  }
  if (Pattern.matches("\\d+WI",this.val)) {
    int year=Integer.parseInt(this.val.substring(0,4));
    Calendar start=makeCalendar(year,11,1);
    Calendar end=makeCalendar(year + 1,1,29);
    return new Pair<>(start,end);
  }
  if (Pattern.matches("\\d\\d\\d\\dW\\d+",this.val)) {
    int year=Integer.parseInt(this.val.substring(0,4));
    int week=Integer.parseInt(this.val.substring(5));
    int startDay=(week - 1) * 7;
    int endDay=startDay + 6;
    Calendar start=makeCalendar(year,startDay);
    Calendar end=makeCalendar(year,endDay);
    return new Pair<>(start,end);
  }
  if (this.val.equals("PRESENT_REF")) {
    Calendar rc=documentTime.getDate();
    Calendar start=copyCalendar(rc);
    Calendar end=copyCalendar(rc);
    return new Pair<>(start,end);
  }
  throw new RuntimeException(String.format("unknown value \"%s\" in %s",this.val,this));
}
