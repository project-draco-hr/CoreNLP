{
  this.parent=parent;
  this.values=values;
  initComponents();
  setBackground(Color.white);
  setLayout(new GridLayout(values.length,values.length,0,0));
  for (int i=0; i < values.length; i++) {
    for (int j=0; j < values.length; j++) {
      add(new CellPlotter(values[i][j]));
    }
  }
  for (int i=0; i < getComponentCount(); i++) {
    if (getComponent(i) instanceof CellPlotter) {
      ((CellPlotter)getComponent(i)).setLabelShowing(true);
    }
  }
  parent.addComponentListener(new ComponentAdapter(){
    @Override public void componentResized(    ComponentEvent e){
      updateSize();
    }
  }
);
  getInputMap().put(KeyStroke.getKeyStroke(KeyEvent.VK_P,InputEvent.CTRL_MASK),"print");
  getActionMap().put("print",new AbstractAction(){
    /** 
 */
    private static final long serialVersionUID=6807319864478455840L;
    public void actionPerformed(    ActionEvent e){
      doPrint();
    }
  }
);
}
