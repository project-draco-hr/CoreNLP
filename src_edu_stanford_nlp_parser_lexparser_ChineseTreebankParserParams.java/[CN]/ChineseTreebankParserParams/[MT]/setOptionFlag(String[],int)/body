{
  if (args[i].equalsIgnoreCase("-paRootDtr")) {
    paRootDtr=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-unaryIP")) {
    unaryIP=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-unaryCP")) {
    unaryCP=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-markPostverbalP")) {
    markPostverbalP=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-markPostverbalPP")) {
    markPostverbalPP=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-baseNP")) {
    splitBaseNP=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-markVVsisterIP")) {
    markVVsisterIP=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-markPsisterIP")) {
    markPsisterIP=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-markIPsisterVVorP")) {
    markIPsisterVVorP=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-markIPsisterBA")) {
    markIPsisterBA=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-dominatesV")) {
    dominatesV=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-gpaAD")) {
    gpaAD=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-markVPadjunct")) {
    markVPadjunct=Boolean.valueOf(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-markNPmodNP")) {
    markNPmodNP=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-markModifiedNP")) {
    markModifiedNP=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-nomarkModifiedNP")) {
    markModifiedNP=false;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-markNPconj")) {
    markNPconj=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-nomarkNPconj")) {
    markNPconj=false;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-chineseSplitPunct")) {
    chineseSplitPunct=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-chineseSplitPunctLR")) {
    chineseSplitPunct=true;
    chineseSplitPunctLR=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-chineseSelectiveTagPA")) {
    chineseSelectiveTagPA=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-chineseVerySelectiveTagPA")) {
    chineseVerySelectiveTagPA=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-markIPsisDEC")) {
    markIPsisDEC=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-chineseSplitVP")) {
    chineseSplitVP=Integer.parseInt(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-tagWordSize")) {
    tagWordSize=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-vanilla")) {
    chineseSplitDouHao=false;
    chineseSplitPunct=false;
    chineseSplitPunctLR=false;
    markVVsisterIP=false;
    markPsisterIP=false;
    markIPsisterVVorP=false;
    markADgrandchildOfIP=false;
    gpaAD=false;
    markIPsisterBA=false;
    markVPadjunct=false;
    markNPmodNP=false;
    markModifiedNP=false;
    markNPconj=false;
    markMultiNtag=false;
    markIPsisDEC=false;
    markIPconj=false;
    markIPadjsubj=false;
    chineseSplitVP=0;
    mergeNNVV=false;
    unaryIP=false;
    unaryCP=false;
    paRootDtr=false;
    markPostverbalP=false;
    markPostverbalPP=false;
    splitBaseNP=false;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-acl03chinese")) {
    chineseSplitDouHao=false;
    chineseSplitPunct=true;
    chineseSplitPunctLR=true;
    markVVsisterIP=true;
    markPsisterIP=true;
    markIPsisterVVorP=true;
    markADgrandchildOfIP=false;
    gpaAD=true;
    markIPsisterBA=false;
    markVPadjunct=true;
    markNPmodNP=true;
    markModifiedNP=true;
    markNPconj=true;
    markMultiNtag=false;
    markIPsisDEC=true;
    markIPconj=false;
    markIPadjsubj=false;
    chineseSplitVP=3;
    mergeNNVV=false;
    unaryIP=true;
    unaryCP=true;
    paRootDtr=true;
    markPostverbalP=false;
    markPostverbalPP=false;
    splitBaseNP=false;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-chineseFactored")) {
    chineseSplitDouHao=false;
    chineseSplitPunct=true;
    chineseSplitPunctLR=true;
    markVVsisterIP=true;
    markPsisterIP=true;
    markIPsisterVVorP=true;
    markADgrandchildOfIP=false;
    gpaAD=true;
    markIPsisterBA=true;
    markVPadjunct=true;
    markNPmodNP=true;
    markModifiedNP=true;
    markNPconj=true;
    markMultiNtag=false;
    markIPsisDEC=true;
    markIPconj=false;
    markIPadjsubj=false;
    chineseSplitVP=3;
    mergeNNVV=false;
    unaryIP=true;
    unaryCP=true;
    paRootDtr=true;
    markPostverbalP=false;
    markPostverbalPP=false;
    splitBaseNP=false;
    chineseVerySelectiveTagPA=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-chinesePCFG")) {
    chineseSplitDouHao=false;
    chineseSplitPunct=true;
    chineseSplitPunctLR=true;
    markVVsisterIP=true;
    markPsisterIP=false;
    markIPsisterVVorP=true;
    markADgrandchildOfIP=false;
    gpaAD=false;
    markIPsisterBA=true;
    markVPadjunct=true;
    markNPmodNP=true;
    markModifiedNP=true;
    markNPconj=false;
    markMultiNtag=false;
    markIPsisDEC=false;
    markIPconj=false;
    markIPadjsubj=false;
    chineseSplitVP=0;
    mergeNNVV=false;
    unaryIP=false;
    unaryCP=false;
    paRootDtr=false;
    markPostverbalP=false;
    markPostverbalPP=false;
    splitBaseNP=false;
    chineseVerySelectiveTagPA=true;
    i+=1;
  }
 else   if (args[i].equalsIgnoreCase("-sunHead")) {
    sunJurafskyHeadFinder=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-bikelHead")) {
    bikelHeadFinder=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-discardFrags")) {
    discardFrags=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-charLex")) {
    useCharacterBasedLexicon=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-charUnk")) {
    useCharBasedUnknownWordModel=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-rad")) {
    useUnknownCharacterModel=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-lengthPenalty") && (i + 1 < args.length)) {
    lengthPenalty=Double.parseDouble(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-penaltyType") && (i + 1 < args.length)) {
    penaltyType=Integer.parseInt(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-gtUnknown")) {
    useGoodTuringUnknownWordModel=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-maxentUnk")) {
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-tuneSigma")) {
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-trainCountThresh") && (i + 1 < args.length)) {
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-markCC")) {
    markCC=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-segmentMarkov") || args[i].equalsIgnoreCase("-segmentWords")) {
    segment=true;
    segmentMarkov=true;
    segmenterClass="edu.stanford.nlp.parser.lexparser.ChineseMarkovWordSegmenter";
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-segmentMaxMatch")) {
    segment=true;
    segmentMarkov=false;
    segmenterClass="edu.stanford.nlp.parser.lexparser.MaxMatchSegmenter";
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-segmentDPMaxMatch")) {
    segment=true;
    segmentMarkov=false;
    segmenterClass="edu.stanford.nlp.wordseg.MaxMatchSegmenter";
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-maxentLex")) {
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-fixUnkFunctionWords")) {
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-similarWordSmoothing")) {
    useSimilarWordMap=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-maxentLexSeenTagsOnly")) {
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-maxentLexFeatLevel") && (i + 1 < args.length)) {
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-maxentDepGrammarFeatLevel") && (i + 1 < args.length)) {
    depGramFeatureLevel=Integer.parseInt(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-maxentDepGrammar")) {
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-splitNPTMP")) {
    splitNPTMP=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-splitPPTMP")) {
    splitPPTMP=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-splitXPTMP")) {
    splitXPTMP=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-segmenter")) {
    segment=true;
    segmentMarkov=false;
    segmenterClass=args[i + 1];
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-headFinder") && (i + 1 < args.length)) {
    try {
      headFinder=(HeadFinder)Class.forName(args[i + 1]).newInstance();
    }
 catch (    Exception e) {
      log.info(e);
      log.info(this.getClass().getName() + ": Could not load head finder " + args[i + 1]);
      throw new RuntimeException(e);
    }
    i+=2;
  }
  return i;
}
