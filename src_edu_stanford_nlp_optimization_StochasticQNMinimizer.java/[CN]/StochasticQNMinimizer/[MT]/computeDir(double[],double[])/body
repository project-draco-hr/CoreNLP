{
  System.arraycopy(fg,0,dir,0,fg.length);
  int mmm=sList.size();
  double[] as=new double[mmm];
  double[] factors=new double[dir.length];
  for (int i=mmm - 1; i >= 0; i--) {
    as[i]=roList.get(i) * ArrayMath.innerProduct(sList.get(i),dir);
    plusAndConstMult(dir,yList.get(i),-as[i],dir);
  }
  if (mmm != 0) {
    double[] y=yList.get(mmm - 1);
    double yDotY=ArrayMath.innerProduct(y,y);
    if (yDotY == 0) {
      throw new StochasticQNMinimizer.SurpriseConvergence("Y is 0!!");
    }
    double gamma=ArrayMath.innerProduct(sList.get(mmm - 1),y) / yDotY;
    ArrayMath.multiplyInPlace(dir,gamma);
  }
 else   if (mmm == 0) {
    ArrayMath.multiplyInPlace(dir,epsilon);
  }
  for (int i=0; i < mmm; i++) {
    double b=roList.get(i) * ArrayMath.innerProduct(yList.get(i),dir);
    plusAndConstMult(dir,sList.get(i),cPosDef * as[i] - b,dir);
    plusAndConstMult(ArrayMath.pairwiseMultiply(yList.get(i),sList.get(i)),factors,1,factors);
  }
  ArrayMath.multiplyInPlace(dir,-1);
}
