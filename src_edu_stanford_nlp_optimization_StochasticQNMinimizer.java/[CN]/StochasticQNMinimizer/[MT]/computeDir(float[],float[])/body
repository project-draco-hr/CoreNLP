{
  System.arraycopy(fg,0,dir,0,fg.length);
  int mmm=sList_float.size();
  float[] as=new float[mmm];
  for (int i=mmm - 1; i >= 0; i--) {
    as[i]=roList_float.get(i) * (float)ArrayMath.innerProduct(sList_float.get(i),dir);
    plusAndConstMult(dir,yList_float.get(i),-as[i],dir);
  }
  if (mmm != 0) {
    float[] y=yList_float.get(mmm - 1);
    float yDotY=(float)ArrayMath.innerProduct(y,y);
    if (yDotY == 0) {
      throw new StochasticQNMinimizer.SurpriseConvergence("Y is 0!!");
    }
    float gamma=(float)ArrayMath.innerProduct(sList_float.get(mmm - 1),y) / yDotY;
    ArrayMath.multiplyInPlace(dir,gamma);
  }
  for (int i=0; i < mmm; i++) {
    float b=roList_float.get(i) * (float)ArrayMath.innerProduct(yList_float.get(i),dir);
    plusAndConstMult(dir,sList_float.get(i),as[i] - b,dir);
  }
  ArrayMath.multiplyInPlace(dir,-1);
}
