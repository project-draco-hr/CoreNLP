{
  List<BinaryTransition> leftoverBinary=Generics.newArrayList();
  while (transitions.size() > 0) {
    Transition head=transitions.remove(0);
    if (head instanceof ShiftTransition) {
      break;
    }
    if (head instanceof BinaryTransition) {
      leftoverBinary.add((BinaryTransition)head);
    }
  }
  if (transitions.size() == 0 || leftoverBinary.size() == 0) {
    return false;
  }
  int shiftCount=0;
  ListIterator<Transition> cursor=transitions.listIterator();
  BinaryTransition lastBinary=null;
  while (cursor.hasNext() && shiftCount >= 0) {
    Transition next=cursor.next();
    if (next instanceof ShiftTransition) {
      ++shiftCount;
    }
 else     if (next instanceof BinaryTransition) {
      --shiftCount;
      if (shiftCount < 0) {
        lastBinary=(BinaryTransition)next;
        cursor.remove();
      }
    }
  }
  if (!cursor.hasNext() || lastBinary == null) {
    return false;
  }
  String label=lastBinary.label;
  if (lastBinary.isBinarized()) {
    label=label.substring(1);
  }
  if (lastBinary.side == BinaryTransition.Side.RIGHT) {
    for (int i=0; i < leftoverBinary.size(); ++i) {
      cursor.add(new BinaryTransition("@" + label,BinaryTransition.Side.RIGHT));
    }
    cursor.add(new BinaryTransition(lastBinary.label,BinaryTransition.Side.RIGHT));
  }
 else {
    cursor.add(new BinaryTransition("@" + label,BinaryTransition.Side.LEFT));
    for (int i=0; i < leftoverBinary.size() - 1; ++i) {
      cursor.add(new BinaryTransition("@" + label,leftoverBinary.get(i).side));
    }
    cursor.add(new BinaryTransition(lastBinary.label,leftoverBinary.get(leftoverBinary.size() - 1).side));
  }
  return true;
}
