{
  String line=null;
  Map<String,Map<String,Double>> softPriorMap=new HashMap<String,Map<String,Double>>();
  try {
    BufferedReader br=new BufferedReader(new InputStreamReader(new FileInputStream(new File(alignmentPriorPenaltyFile))));
    while ((line=br.readLine()) != null) {
      line=line.trim();
      if (line.length() > 0) {
        String[] parts=line.split("\t");
        String chPart=parts[0];
        String enPart=parts[1];
        if (!chFirst) {
          String temp=chPart;
          chPart=enPart;
          enPart=temp;
        }
        double prob=Math.log(Double.parseDouble(parts[2]));
        if (!softPriorMap.containsKey(chPart)) {
          Map<String,Double> innerMap=new HashMap<String,Double>();
          innerMap.put(enPart,prob);
          softPriorMap.put(chPart,innerMap);
        }
 else {
          Map<String,Double> innerMap=softPriorMap.get(chPart);
          innerMap.put(enPart,prob);
        }
      }
    }
    System.err.println("loaded softPriorMap" + (chFirst ? "Ch" : "En") + ":\n"+ softPriorMap.toString());
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    throw new RuntimeException("Reading soft prior penalty error in line:\n" + line);
  }
  return softPriorMap;
}
