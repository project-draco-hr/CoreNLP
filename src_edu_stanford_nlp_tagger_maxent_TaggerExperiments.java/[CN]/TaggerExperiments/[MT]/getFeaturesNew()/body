{
  try {
    System.err.println("TaggerExperiments.getFeaturesNew: initializing fnumArr.");
    maxentTagger.fnumArr=new byte[xSize][ySize];
    File hFile=File.createTempFile("temp",".x",new File("./"));
    RandomAccessFile hF=new RandomAccessFile(hFile,"rw");
    System.err.println("  length of sTemplates keys: " + sTemplates.size());
    System.err.println("getFeaturesNew adding features ...");
    int current=0;
    int numFeats=0;
    final boolean VERBOSE=false;
    for (    FeatureKey fK : sTemplates) {
      int numF=fK.num;
      int[] xValues;
      Pair<Integer,String> wT=new Pair<Integer,String>(numF,fK.val);
      xValues=tFeature.getXValues(wT);
      if (xValues == null) {
        System.err.println("  xValues is null: " + fK.toString());
        continue;
      }
      int numEvidence=0;
      int y=maxentTagger.tags.getIndex(fK.tag);
      for (      int xValue : xValues) {
        if (maxentTagger.occurringTagsOnly) {
          String word=ExtractorFrames.cWord.extract(tHistories.getHistory(xValue));
          if (maxentTagger.dict.getCount(word,fK.tag) == 0) {
            continue;
          }
        }
        if (maxentTagger.possibleTagsOnly) {
          String word=ExtractorFrames.cWord.extract(tHistories.getHistory(xValue));
          String[] tags=maxentTagger.dict.getTags(word);
          Set<String> s=Generics.newHashSet(Arrays.asList(maxentTagger.tags.deterministicallyExpandTags(tags)));
          if (DEBUG)           System.err.printf("possible tags for %s: %s\n",word,Arrays.toString(s.toArray()));
          if (!s.contains(fK.tag))           continue;
        }
        numEvidence+=this.px[xValue];
      }
      if (populated(numF,numEvidence)) {
        int[] positions=tFeature.getPositions(fK);
        if (maxentTagger.occurringTagsOnly || maxentTagger.possibleTagsOnly) {
          positions=null;
        }
        if (positions == null) {
          int numElements=0;
          for (          int x : xValues) {
            if (maxentTagger.occurringTagsOnly) {
              String word=ExtractorFrames.cWord.extract(tHistories.getHistory(x));
              if (maxentTagger.dict.getCount(word,fK.tag) == 0) {
                continue;
              }
            }
            if (maxentTagger.possibleTagsOnly) {
              String word=ExtractorFrames.cWord.extract(tHistories.getHistory(x));
              String[] tags=maxentTagger.dict.getTags(word);
              Set<String> s=Generics.newHashSet(Arrays.asList(maxentTagger.tags.deterministicallyExpandTags(tags)));
              if (!s.contains(fK.tag))               continue;
            }
            numElements++;
            hF.writeInt(x);
            maxentTagger.fnumArr[x][y]++;
          }
          TaggerFeature tF=new TaggerFeature(current,current + numElements - 1,fK,maxentTagger.tags,this);
          tFeature.addPositions(current,current + numElements - 1,fK);
          current=current + numElements;
          feats.add(tF);
          if (VERBOSE) {
            System.err.println("  added feature with key " + fK.toString() + " has support "+ numElements);
          }
        }
 else {
          for (          int x : xValues) {
            maxentTagger.fnumArr[x][y]++;
          }
          TaggerFeature tF=new TaggerFeature(positions[0],positions[1],fK,maxentTagger.tags,this);
          feats.add(tF);
          if (VERBOSE) {
            System.err.println("  added feature with key " + fK.toString() + " has support "+ xValues.length);
          }
        }
        if (maxentTagger.fAssociations.size() <= fK.num) {
          for (int i=maxentTagger.fAssociations.size(); i <= fK.num; ++i) {
            maxentTagger.fAssociations.add(Generics.<String,int[]>newHashMap());
          }
        }
        Map<String,int[]> fValueAssociations=maxentTagger.fAssociations.get(fK.num);
        int[] fTagAssociations=fValueAssociations.get(fK.val);
        if (fTagAssociations == null) {
          fTagAssociations=new int[ySize];
          for (int i=0; i < ySize; ++i) {
            fTagAssociations[i]=-1;
          }
          fValueAssociations.put(fK.val,fTagAssociations);
        }
        fTagAssociations[maxentTagger.tags.getIndex(fK.tag)]=numFeats;
        numFeats++;
      }
    }
    tFeature.release();
    feats.xIndexed=new int[current];
    hF.seek(0);
    int current1=0;
    while (current1 < current) {
      feats.xIndexed[current1]=hF.readInt();
      current1++;
    }
    System.err.println("  total feats: " + sTemplates.size() + ", populated: "+ numFeats);
    hF.close();
    hFile.delete();
    int max=0;
    int maxGt=0;
    int numZeros=0;
    for (int x=0; x < xSize; x++) {
      int numGt=0;
      for (int y=0; y < ySize; y++) {
        if (maxentTagger.fnumArr[x][y] > 0) {
          numGt++;
          if (max < maxentTagger.fnumArr[x][y]) {
            max=maxentTagger.fnumArr[x][y];
          }
        }
 else {
          numZeros++;
        }
      }
      if (maxGt < numGt) {
        maxGt=numGt;
      }
    }
    System.err.println("  Max features per x,y pair: " + max);
    System.err.println("  Max non-zero y values for an x: " + maxGt);
    System.err.println("  Number of non-zero feature x,y pairs: " + (xSize * ySize - numZeros));
    System.err.println("  Number of zero feature x,y pairs: " + numZeros);
    System.err.println("end getFeaturesNew.");
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
