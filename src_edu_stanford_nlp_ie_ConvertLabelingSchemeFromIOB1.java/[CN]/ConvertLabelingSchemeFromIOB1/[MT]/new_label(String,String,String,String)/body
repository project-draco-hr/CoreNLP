{
  String[] prevLabelSplit=firstCharAndRest(prevLabel);
  String[] currLabelSplit=firstCharAndRest(currLabel);
  String[] nextLabelSplit=firstCharAndRest(nextLabel);
  if (currLabel.equalsIgnoreCase("O"))   return "O";
  if ((currLabel.trim()).equalsIgnoreCase(""))   return "";
  if (newScheme.equalsIgnoreCase("IO"))   return "I" + currLabelSplit[1];
  if (newScheme.equalsIgnoreCase("IOB1"))   return currLabel;
  if (newScheme.equalsIgnoreCase("IOB2")) {
    if (currLabelSplit[0].equalsIgnoreCase("B"))     return currLabel;
    if ((prevLabelSplit[1]).equalsIgnoreCase(currLabelSplit[1]))     return currLabel;
 else     return "B" + currLabelSplit[1];
  }
  if (newScheme.equalsIgnoreCase("IOE1")) {
    if ((nextLabelSplit[0]).equalsIgnoreCase("B"))     return "E" + currLabelSplit[1];
 else     return "I" + currLabelSplit[1];
  }
  if (newScheme.equalsIgnoreCase("IOE2")) {
    if (!((nextLabelSplit[0]).equalsIgnoreCase("I")))     return "E" + currLabelSplit[1];
    if (currLabelSplit[1].equalsIgnoreCase(nextLabelSplit[1]))     return "I" + currLabelSplit[1];
 else     return "E" + currLabelSplit[1];
  }
  if (newScheme.equalsIgnoreCase("IOBES")) {
    boolean isStart=((currLabelSplit[0].equalsIgnoreCase("B")) || (!(prevLabelSplit[1]).equalsIgnoreCase(currLabelSplit[1])));
    boolean isEnd=((!((nextLabelSplit[0]).equalsIgnoreCase("I"))) || (!(currLabelSplit[1].equalsIgnoreCase(nextLabelSplit[1]))));
    if (isStart && isEnd)     return "S" + currLabelSplit[1];
 else     if (isStart)     return "B" + currLabelSplit[1];
 else     if (isEnd)     return "E" + currLabelSplit[1];
 else     return "I" + currLabelSplit[1];
  }
  return "ERROR in spec";
}
