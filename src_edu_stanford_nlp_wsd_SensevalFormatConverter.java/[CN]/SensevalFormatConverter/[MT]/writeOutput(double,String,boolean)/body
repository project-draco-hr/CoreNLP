{
  HashMap<String,BufferedWriter> outFiles=new HashMap<String,BufferedWriter>();
  System.out.println("Writing output files.");
  for (  SensevalInstance instance : allInstances) {
    boolean noSenseID=instance.getSenseIDs().isEmpty();
    boolean isTestIns;
    if (ttsplit >= 0) {
      isTestIns=(Math.random() > ttsplit);
    }
 else {
      isTestIns=noSenseID;
    }
    ArrayList<String> senseIDs;
    if (noSenseID) {
      senseIDs=keyMap.get(instance.getInstId());
      if (senseIDs == null) {
        if (!quiet) {
          System.err.println("Instance " + instance.getInstId() + " has no senseID in key file.  Skipping.");
        }
        continue;
      }
    }
 else {
      senseIDs=instance.getSenseIDs();
    }
    BufferedWriter insFile=null;
    BufferedWriter ansFile=null;
    String insExt=new String(isTestIns ? ".test" : ".train");
    String insFilename=new String(outputPrefix + instance.getLexElt() + insExt);
    String ansFilename=new String(outputPrefix + instance.getLexElt() + ".ans");
    try {
      if (outFiles.containsKey(insFilename)) {
        insFile=outFiles.get(insFilename);
      }
 else {
        insFile=new BufferedWriter(new FileWriter(insFilename));
        outFiles.put(insFilename,insFile);
      }
      if (isTestIns && !combineTestAndAns) {
        if (outFiles.containsKey(ansFilename)) {
          ansFile=outFiles.get(ansFilename);
        }
 else {
          ansFile=new BufferedWriter(new FileWriter(ansFilename));
          outFiles.put(ansFilename,ansFile);
        }
      }
      int targetWordPos=instance.getTargetWordPos();
      if (instanceIDs) {
        insFile.write(instance.getNakedLexElt() + " " + instance.getInstId()+ " ");
      }
      for (int i=0; i < 5 - targetWordPos; i++) {
        insFile.write("xtrainx ");
      }
      Index<String> senseNum=numMap.get(instance.getNakedLexElt());
      ArrayList<String> context=instance.getContext();
      for (int i=0; i < context.size(); i++) {
        String word=new String(context.get(i));
        if (i == targetWordPos) {
          for (          String thisSenseID : senseIDs) {
            String ourSenseID;
            if (stringSenses) {
              ourSenseID="(" + thisSenseID + ")";
            }
 else             if (thisSenseID.length() == 1) {
              ourSenseID=thisSenseID;
            }
 else {
              ourSenseID=Integer.toString(senseNum.indexOf(thisSenseID,true));
            }
            if (!isTestIns || combineTestAndAns) {
              word+="_" + ourSenseID;
              if (!allSenses) {
                break;
              }
            }
 else {
              ansFile.write(ourSenseID + " ");
            }
          }
          if (isTestIns && !combineTestAndAns) {
            ansFile.newLine();
          }
        }
        word+=' ';
        insFile.write(word);
      }
      for (int i=5; i >= context.size() - targetWordPos; i--) {
        insFile.write("xtrainx ");
      }
      insFile.newLine();
    }
 catch (    IOException e) {
      System.err.println(e.getMessage());
      System.exit(1);
    }
  }
  for (  String filename : outFiles.keySet()) {
    BufferedWriter outFile=outFiles.get(filename);
    try {
      outFile.close();
    }
 catch (    IOException e) {
      System.err.println("Error closing output file \"" + filename + "\". Ignoring.");
    }
  }
}
