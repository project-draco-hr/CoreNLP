{
  String outputModelFilename=null;
  List<String> inputModelFilenames=Generics.newArrayList();
  for (int argIndex=0; argIndex < args.length; ) {
    if (args[argIndex].equalsIgnoreCase("-output")) {
      outputModelFilename=args[argIndex + 1];
      argIndex+=2;
    }
 else     if (args[argIndex].equalsIgnoreCase("-input")) {
      for (++argIndex; argIndex < args.length && !args[argIndex].startsWith("-"); ++argIndex) {
        inputModelFilenames.add(args[argIndex]);
      }
    }
 else {
      throw new RuntimeException("Unknown argument " + args[argIndex]);
    }
  }
  System.err.println(outputModelFilename);
  System.err.println(inputModelFilenames);
  LexicalizedParser lexparser=null;
  List<DVModel> models=Generics.newArrayList();
  for (  String filename : inputModelFilenames) {
    LexicalizedParser parser=LexicalizedParser.loadModel(filename);
    if (lexparser == null) {
      lexparser=parser;
    }
    models.add(DVParser.getModelFromLexicalizedParser(parser));
  }
  List<TwoDimensionalMap<String,String,SimpleMatrix>> binaryTransformMaps=CollectionUtils.transformAsList(models,new Function<DVModel,TwoDimensionalMap<String,String,SimpleMatrix>>(){
    public TwoDimensionalMap<String,String,SimpleMatrix> apply(    DVModel model){
      return model.binaryTransform;
    }
  }
);
  List<TwoDimensionalMap<String,String,SimpleMatrix>> binaryScoreMaps=CollectionUtils.transformAsList(models,new Function<DVModel,TwoDimensionalMap<String,String,SimpleMatrix>>(){
    public TwoDimensionalMap<String,String,SimpleMatrix> apply(    DVModel model){
      return model.binaryScore;
    }
  }
);
  List<Map<String,SimpleMatrix>> unaryTransformMaps=CollectionUtils.transformAsList(models,new Function<DVModel,Map<String,SimpleMatrix>>(){
    public Map<String,SimpleMatrix> apply(    DVModel model){
      return model.unaryTransform;
    }
  }
);
  List<Map<String,SimpleMatrix>> unaryScoreMaps=CollectionUtils.transformAsList(models,new Function<DVModel,Map<String,SimpleMatrix>>(){
    public Map<String,SimpleMatrix> apply(    DVModel model){
      return model.unaryScore;
    }
  }
);
  List<Map<String,SimpleMatrix>> wordMaps=CollectionUtils.transformAsList(models,new Function<DVModel,Map<String,SimpleMatrix>>(){
    public Map<String,SimpleMatrix> apply(    DVModel model){
      return model.wordVectors;
    }
  }
);
  TwoDimensionalMap<String,String,SimpleMatrix> binaryTransformAverages=averageBinaryMatrices(binaryTransformMaps);
  TwoDimensionalMap<String,String,SimpleMatrix> binaryScoreAverages=averageBinaryMatrices(binaryScoreMaps);
  Map<String,SimpleMatrix> unaryTransformAverages=averageUnaryMatrices(unaryTransformMaps);
  Map<String,SimpleMatrix> unaryScoreAverages=averageUnaryMatrices(unaryScoreMaps);
  Map<String,SimpleMatrix> wordAverages=averageUnaryMatrices(wordMaps);
  DVModel newModel=new DVModel(binaryTransformAverages,unaryTransformAverages,binaryScoreAverages,unaryScoreAverages,wordAverages,lexparser.getOp());
  DVParser newParser=new DVParser(newModel,lexparser);
  newParser.saveModel(outputModelFilename);
}
