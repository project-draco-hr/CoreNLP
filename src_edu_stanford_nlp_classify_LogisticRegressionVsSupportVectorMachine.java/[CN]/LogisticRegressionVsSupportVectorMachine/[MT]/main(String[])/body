{
  System.out.println("reading train set");
  Dataset<String,String> train=Dataset.readSVMLightFormat(args[0]);
  train.featureIndex.lock();
  System.out.println("reading test set");
  Dataset<String,String> test=Dataset.readSVMLightFormat(args[1],train.featureIndex(),train.labelIndex());
  train.featureIndex.unlock();
  System.out.println("done reading data");
  if (args[2].equalsIgnoreCase("-usePR")) {
    scorer=new MultiClassPrecisionRecallStats<String>(args[3]);
    basicScorer=scorer;
  }
 else   if (args[2].equalsIgnoreCase("-useAcc")) {
    scorer=new AccuracyStats<String>(args[3],args[4]);
    basicScorer=new BasicAccuracyStats<String>();
  }
 else   if (args[2].equalsIgnoreCase("-useMCAcc")) {
    scorer=new MultiClassAccuracyStats<String>(args[3]);
    basicScorer=new BasicAccuracyStats<String>();
  }
 else {
    throw new RuntimeException("You must specify a scorer for cross validation!\nOptions: -usePR -useAcc -useMCAcc");
  }
  System.out.println("Current Test: Full training set, optimize params");
  System.out.println(train.toSummaryStatistics());
  svmTrainTestCV(train,test);
  lrTrainTestCV(train,test);
  double[] trainSizes={0.1,0.2,0.33,0.5,0.75};
  for (  double size : trainSizes) {
    System.out.println("Current Test: " + size + " of training set, optimize params");
    Pair<Dataset<String,String>,Dataset<String,String>> randomSubDatasets=getRandomSubDatasetOfTrain(train,test,size);
    Dataset<String,String> reducedTrain=randomSubDatasets.first();
    Dataset<String,String> reducedTest=randomSubDatasets.second();
    System.out.println(reducedTrain.toSummaryStatistics());
    lrTrainTest(reducedTrain,reducedTest);
    svmTrainTest(reducedTrain,reducedTest);
  }
  System.out.println("Current Test: Full of training set, optimize params, randomly added features");
  Pair<Dataset<String,String>,Dataset<String,String>> addRandomFeaturesDatasets=addRandomFeatures(train,test,1.0);
  Dataset<String,String> randomTrain=addRandomFeaturesDatasets.first();
  Dataset<String,String> randomTest=addRandomFeaturesDatasets.second();
  System.out.println(randomTrain.toSummaryStatistics());
  lrTrainTest(randomTrain,randomTest);
  svmTrainTest(randomTrain,randomTest);
  System.out.println("Current Test: Full of training set, optimize params, randomly added features");
  Pair<Dataset<String,String>,Dataset<String,String>> addRedundantFeaturesDatasets=addRedundantFeatures(train,test,0.5);
  Dataset<String,String> redundantTrain=addRedundantFeaturesDatasets.first();
  Dataset<String,String> redundantTest=addRedundantFeaturesDatasets.second();
  System.out.println(redundantTrain.toSummaryStatistics());
  lrTrainTest(redundantTrain,redundantTest);
  svmTrainTest(redundantTrain,redundantTest);
}
