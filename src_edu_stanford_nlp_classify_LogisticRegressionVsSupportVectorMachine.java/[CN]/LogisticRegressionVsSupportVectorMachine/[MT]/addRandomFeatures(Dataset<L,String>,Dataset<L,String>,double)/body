{
  if (train.featureIndex != test.featureIndex) {
    throw new RuntimeException("Both Datasets must have same feature index!");
  }
  Dataset<L,String> newTrain=new Dataset<L,String>(train.size(),train.featureIndex,train.labelIndex);
  Dataset<L,String> newTest=new Dataset<L,String>(test.size(),test.featureIndex,test.labelIndex);
  int numFeatures=train.numFeatures();
  String[] newFeatures=new String[(int)(numFeatures * increaseBy)];
  for (int i=0; i < newFeatures.length; i++) {
    String f="***RANDOM-" + i + "***";
    newFeatures[i]=f;
  }
  for (int i=0; i < train.size(); i++) {
    Datum<L,String> d=train.getDatum(i);
    Collection<String> features=d.asFeatures();
    Collection<String> newDatumFeatures=new ArrayList<String>(features);
    double prob=((double)features.size() / (double)newFeatures.length) * increaseBy;
    for (int j=0; j < newFeatures.length; j++) {
      if (rand.nextDouble() < prob) {
        newDatumFeatures.add(newFeatures[j]);
      }
    }
    newTrain.add(new BasicDatum<L,String>(newDatumFeatures,d.label()));
  }
  newTrain.featureIndex.lock();
  for (int i=0; i < test.size(); i++) {
    Datum<L,String> d=test.getDatum(i);
    Collection<String> features=d.asFeatures();
    Collection<String> newDatumFeatures=new ArrayList<String>(features);
    double prob=((double)features.size() / (double)newFeatures.length) * increaseBy;
    for (int j=0; j < newFeatures.length; j++) {
      if (rand.nextDouble() < prob) {
        newDatumFeatures.add(newFeatures[j]);
      }
    }
    newTest.add(new BasicDatum<L,String>(newDatumFeatures,d.label()));
  }
  newTrain.featureIndex.unlock();
  return Generics.newPair(newTrain,newTest);
}
