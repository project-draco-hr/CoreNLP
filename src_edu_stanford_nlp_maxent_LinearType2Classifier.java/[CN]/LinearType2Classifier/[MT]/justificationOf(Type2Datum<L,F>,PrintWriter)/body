{
  String space=" ";
  String value="val.";
  NumberFormat nf=NumberFormat.getNumberInstance();
  nf.setMinimumFractionDigits(2);
  nf.setMaximumFractionDigits(2);
  if (nf instanceof DecimalFormat) {
    ((DecimalFormat)nf).setPositivePrefix(" ");
  }
  ClassicCounter<Object> scores=new ClassicCounter<Object>();
  Set<L> classes=d.classes();
  for (  L key : classes) {
    scores.incrementCount(key,0);
  }
  TwoDimensionalCounter<L,F> classFeatures=d.classFeatureCounts;
  pw.println("justifying example " + d.toShortString());
  for (  L thisClass : classes) {
    double score=0;
    StringBuilder sb=new StringBuilder();
    sb.append("scores for class ").append(thisClass).append("\t");
    Counter<F> thisClassFeatures=classFeatures.getCounter(thisClass);
    for (    F thisFeature : thisClassFeatures.keySet()) {
      double thisFeatureValue=thisClassFeatures.getCount(thisFeature);
      double thisFeatureWeight=weights.getCount(thisFeature);
      score+=thisFeatureValue * thisFeatureWeight;
      sb.append(thisFeature);
      sb.append(space);
      sb.append(value);
      sb.append(space);
      sb.append(nf.format(thisFeatureValue));
      sb.append(space);
      sb.append(nf.format(thisFeatureWeight));
      sb.append(space);
    }
    scores.incrementCount(thisClass,score);
    sb.append("total ").append(score);
    pw.println(sb.toString());
  }
}
