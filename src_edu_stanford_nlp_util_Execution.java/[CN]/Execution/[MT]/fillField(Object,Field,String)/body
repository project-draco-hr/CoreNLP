{
  if (verbose) {
    Option opt=f.getAnnotation(Option.class);
    StringBuilder b=new StringBuilder("setting ").append(f.getDeclaringClass().getName()).append("#").append(f.getName()).append(" ");
    if (opt != null) {
      b.append("[").append(opt.name()).append("] ");
    }
    b.append("to: ").append(value);
    log(b.toString());
  }
  try {
    boolean accessState=true;
    if (Modifier.isFinal(f.getModifiers())) {
      runtimeException("Option cannot be final: " + f);
    }
    if (!f.isAccessible()) {
      accessState=false;
      f.setAccessible(true);
    }
    Object objVal=MetaClass.cast(value,f.getGenericType());
    if (objVal != null) {
      if (objVal.getClass().isArray()) {
        Object[] array=(Object[])objVal;
        if (!f.getType().isArray()) {
          runtimeException("Setting an array to a non-array field. field: " + f + " value: "+ Arrays.toString(array)+ " src: "+ value);
        }
        Object toSet=Array.newInstance(f.getType().getComponentType(),array.length);
        for (int i=0; i < array.length; i++) {
          Array.set(toSet,i,array[i]);
        }
        f.set(instance,toSet);
      }
 else {
        f.set(instance,objVal);
      }
    }
 else {
      runtimeException("Cannot assign option field: " + f + " value: "+ value+ "; invalid type");
    }
    if (!accessState) {
      f.setAccessible(false);
    }
  }
 catch (  IllegalArgumentException e) {
    err(e);
    runtimeException("Cannot assign option field: " + f.getDeclaringClass().getCanonicalName() + "."+ f.getName()+ " value: "+ value+ " cause: "+ e.getMessage());
  }
catch (  IllegalAccessException e) {
    err(e);
    runtimeException("Cannot access option field: " + f.getDeclaringClass().getCanonicalName() + "."+ f.getName());
  }
catch (  Exception e) {
    err(e);
    runtimeException("Cannot assign option field: " + f.getDeclaringClass().getCanonicalName() + "."+ f.getName()+ " value: "+ value+ " cause: "+ e.getMessage());
  }
}
