{
  if (allowedOrigins != null) {
    if (allowedOrigins.trim().equals("*")) {
      this.anyOriginAllowed=true;
    }
 else {
      this.anyOriginAllowed=false;
      Set<String> setAllowedOrigins=parseStringToSet(allowedOrigins);
      this.allowedOrigins.clear();
      this.allowedOrigins.addAll(setAllowedOrigins);
    }
  }
  if (allowedHttpMethods != null) {
    Set<String> setAllowedHttpMethods=parseStringToSet(allowedHttpMethods);
    this.allowedHttpMethods.clear();
    this.allowedHttpMethods.addAll(setAllowedHttpMethods);
  }
  if (allowedHttpHeaders != null) {
    Set<String> setAllowedHttpHeaders=parseStringToSet(allowedHttpHeaders);
    Set<String> lowerCaseHeaders=new HashSet<>();
    for (    String header : setAllowedHttpHeaders) {
      String lowerCase=header.toLowerCase();
      lowerCaseHeaders.add(lowerCase);
    }
    this.allowedHttpHeaders.clear();
    this.allowedHttpHeaders.addAll(lowerCaseHeaders);
  }
  if (exposedHeaders != null) {
    Set<String> setExposedHeaders=parseStringToSet(exposedHeaders);
    this.exposedHeaders.clear();
    this.exposedHeaders.addAll(setExposedHeaders);
  }
  if (supportsCredentials != null) {
    this.supportsCredentials=Boolean.parseBoolean(supportsCredentials);
  }
  if (preflightMaxAge != null) {
    try {
      if (!preflightMaxAge.isEmpty()) {
        this.preflightMaxAge=Long.parseLong(preflightMaxAge);
      }
 else {
        this.preflightMaxAge=0L;
      }
    }
 catch (    NumberFormatException e) {
      throw new ServletException("Unable to parse preflightMaxAge",e);
    }
  }
  if (loggingEnabled != null) {
    this.loggingEnabled=Boolean.parseBoolean(loggingEnabled);
  }
  if (decorateRequest != null) {
    this.decorateRequest=Boolean.parseBoolean(decorateRequest);
  }
}
