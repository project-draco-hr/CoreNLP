{
  StringBuilder buf=new StringBuilder();
switch (format) {
case "value":
    buf.append(value());
  break;
case "{map}":
{
  Map map2=new TreeMap();
  for (  Class key : this.keySet()) {
    map2.put(key.getName(),get(key));
  }
  buf.append(map2);
  break;
}
case "value{map}":
{
buf.append(value());
Map map2=new TreeMap(asClassComparator);
for (Class key : this.keySet()) {
  map2.put(key,get(key));
}
map2.remove(CoreAnnotations.ValueAnnotation.class);
buf.append(map2);
break;
}
case "value-index":
{
buf.append(value());
Integer index=this.get(CoreAnnotations.IndexAnnotation.class);
if (index != null) {
buf.append('-').append((index).intValue());
}
buf.append(toPrimes());
break;
}
case "value-tag-index":
{
buf.append(value());
String tag=tag();
if (tag != null) {
buf.append(TAG_SEPARATOR).append(tag);
}
Integer index=this.get(CoreAnnotations.IndexAnnotation.class);
if (index != null) {
buf.append('-').append((index).intValue());
}
buf.append(toPrimes());
break;
}
case "value-index{map}":
{
buf.append(value());
Integer index=this.get(CoreAnnotations.IndexAnnotation.class);
if (index != null) {
buf.append('-').append((index).intValue());
}
Map<String,Object> map2=new TreeMap<String,Object>();
for (Class key : this.keySet()) {
String cls=key.getName();
int idx=cls.indexOf('$');
if (idx >= 0) {
cls=cls.substring(idx + 1);
}
map2.put(cls,this.get(key));
}
map2.remove("IndexAnnotation");
map2.remove("ValueAnnotation");
if (!map2.isEmpty()) {
buf.append(map2);
}
break;
}
case "word":
buf.append(word());
break;
case "text-index":
{
buf.append(this.get(CoreAnnotations.TextAnnotation.class));
Integer index=this.get(CoreAnnotations.IndexAnnotation.class);
if (index != null) {
buf.append('-').append((index).intValue());
}
buf.append(toPrimes());
break;
}
}
return buf.toString();
}
