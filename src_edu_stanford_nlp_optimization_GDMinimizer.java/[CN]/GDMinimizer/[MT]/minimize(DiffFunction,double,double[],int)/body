{
  int dimension=dfunction.domainDimension();
  double fp=dfunction.valueAt(initial);
  if (verbose) {
    System.err.println("Initial: " + fp);
  }
  double[] xi=copyArray(dfunction.derivativeAt(initial));
  if (verbose) {
    System.err.println("Initial at: " + arrayToString(initial,numToPrint));
    System.err.println("Initial deriv: " + arrayToString(xi,numToPrint));
  }
  double[] p=new double[dimension];
  for (int j=0; j < dimension; j++) {
    p[j]=initial[j];
  }
  for (int iterations=1; iterations < maxIterations; iterations++) {
    if (verbose) {
      System.err.println("Iter " + iterations + " ");
    }
    if (verbose) {
      System.err.println("Minimizing along " + arrayToString(xi,numToPrint));
    }
    double fp2=fp + 1;
    double step=stepSize * 2;
    double[] p2=null;
    int iter=0;
    while (fp2 > fp) {
      step/=2;
      if (Math.abs(step) < 1e-12) {
        if (!silent)         System.err.println("Non convex surface: stuck at local minimum. Returning.");
        return p;
      }
      iter++;
      p2=addVector(p,xi,step);
      fp2=dfunction.valueAt(p2);
      if (verbose)       System.err.println("doing step " + step + " fp "+ fp+ " fp2 "+ fp2);
    }
    if ((iter == 1) && adaptive) {
      stepSize*=1.1;
    }
    if ((iter > 1) && adaptive) {
      stepSize=step;
    }
    if (verbose) {
      System.err.println("Result is " + fp2 + " after "+ iterations);
      System.err.println("Result at " + arrayToString(p2,numToPrint));
    }
    if (verbose) {
      System.err.println(" " + fp2);
    }
    if (monitor != null) {
      double monitorReturn=monitor.valueAt(p2);
      if (monitorReturn < functionTolerance) {
        if (!silent)         System.err.println("converged iterations " + iterations + " forced by monitor");
        return p2;
      }
    }
    if (2.0 * fabs(fp2 - fp) <= functionTolerance * (fabs(fp2) + fabs(fp) + EPS)) {
      if (!silent)       System.err.println("convereged iterations " + iterations);
      return p2;
    }
 else {
    }
    for (int j=0; j < dimension; j++) {
      p[j]=p2[j];
    }
    fp=fp2;
    xi=copyArray(dfunction.derivativeAt(p));
  }
  if (!silent)   System.err.println("Warning: exiting minimize because ITER exceeded!");
  return p;
}
