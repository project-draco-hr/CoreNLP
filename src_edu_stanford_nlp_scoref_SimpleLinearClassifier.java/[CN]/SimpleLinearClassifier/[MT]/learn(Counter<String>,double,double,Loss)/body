{
  examplesSeen++;
  double dloss=loss.derivative(label,weightFeatureProduct(features));
  for (  Map.Entry<String,Double> feature : features.entrySet()) {
    double dfeature=weight * (-dloss * feature.getValue());
    if (dfeature != 0) {
      String featureName=feature.getKey();
      learningRateSchedule.update(featureName,dfeature);
      double lr=learningRateSchedule.getLearningRate(featureName);
      double w=weights.getCount(featureName);
      double dreg=weight * regularizationStrength * (examplesSeen - accessTimes.getCount(featureName));
      double afterReg=(w - Math.signum(w) * dreg * lr);
      weights.setCount(featureName,(Math.signum(afterReg) != Math.signum(w) ? 0 : afterReg) + dfeature * lr);
      accessTimes.setCount(featureName,examplesSeen);
    }
  }
}
