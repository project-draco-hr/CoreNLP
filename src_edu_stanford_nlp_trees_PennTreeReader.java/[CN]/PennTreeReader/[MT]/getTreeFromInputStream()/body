{
  int wordIndex=1;
  label:   while (tokenizer.hasNext()) {
    String token=tokenizer.next();
switch (token) {
case leftParen:
      String label=(tokenizer.peek().equals(leftParen)) ? null : tokenizer.next();
    if (rightParen.equals(label)) {
      continue;
    }
 else     if (treeNormalizer != null) {
      label=treeNormalizer.normalizeNonterminal(label);
    }
  if (label != null) {
    label=STAR_PATTERN.matcher(label).replaceAll("*");
    label=SLASH_PATTERN.matcher(label).replaceAll("/");
  }
Tree newTree=treeFactory.newTreeNode(label,null);
if (currentTree == null) stack.add(newTree);
 else {
currentTree.addChild(newTree);
stack.add(currentTree);
}
currentTree=newTree;
break;
case rightParen:
if (stack.isEmpty()) {
System.err.println("PennTreeReader: warning: file has extra non-matching right parenthesis [ignored]");
break label;
}
currentTree=stack.remove(stack.size() - 1);
if (stack.isEmpty()) return currentTree;
break;
default :
if (currentTree == null) {
break label;
}
String terminal=(treeNormalizer == null) ? token : treeNormalizer.normalizeTerminal(token);
terminal=STAR_PATTERN.matcher(terminal).replaceAll("*");
terminal=SLASH_PATTERN.matcher(terminal).replaceAll("/");
Tree leaf=treeFactory.newLeaf(terminal);
if (leaf.label() instanceof HasIndex) {
HasIndex hi=(HasIndex)leaf.label();
hi.setIndex(wordIndex);
}
if (leaf.label() instanceof HasWord) {
HasWord hw=(HasWord)leaf.label();
hw.setWord(leaf.label().value());
}
wordIndex++;
currentTree.addChild(leaf);
break;
}
}
if (currentTree != null) {
System.err.println("PennTreeReader: warning: incomplete tree (extra left parentheses in input): " + currentTree);
}
return null;
}
