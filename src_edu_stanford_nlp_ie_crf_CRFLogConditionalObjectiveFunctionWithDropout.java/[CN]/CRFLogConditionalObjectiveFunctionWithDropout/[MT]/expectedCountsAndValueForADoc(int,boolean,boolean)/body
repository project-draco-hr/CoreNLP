{
  int[] activeFeatures=dataFeatureHashByDoc[docIndex];
  List<Set<Integer>> docDataHash=dataFeatureHash.get(docIndex);
  Map<Integer,List<Integer>> condensedFeaturesMap=condensedMap.get(docIndex);
  double prob=0;
  int[][][] docData=totalData[docIndex];
  int[] docLabels=null;
  if (docIndex < labels.length)   docLabels=labels[docIndex];
  Timing timer=new Timing();
  double[][][] featureVal3DArr=null;
  if (featureVal != null)   featureVal3DArr=featureVal[docIndex];
  CRFCliqueTree cliqueTree=CRFCliqueTree.getCalibratedCliqueTree(docData,labelIndices,numClasses,classIndex,backgroundSymbol,cliquePotentialFunc,featureVal3DArr);
  if (!skipValCalc) {
    if (TIMED)     timer.start();
    int[] given=new int[window - 1];
    Arrays.fill(given,classIndex.indexOf(backgroundSymbol));
    if (docLabels.length > docData.length) {
      System.arraycopy(docLabels,0,given,0,given.length);
      int[] newDocLabels=new int[docData.length];
      System.arraycopy(docLabels,docLabels.length - newDocLabels.length,newDocLabels,0,newDocLabels.length);
      docLabels=newDocLabels;
    }
    double startPosLogProb=cliqueTree.logProbStartPos();
    if (VERBOSE)     System.err.printf("P_-1(Background) = % 5.3f\n",startPosLogProb);
    prob+=startPosLogProb;
    for (int i=0; i < docData.length; i++) {
      int label=docLabels[i];
      double p=cliqueTree.condLogProbGivenPrevious(i,label,given);
      if (VERBOSE) {
        log.info("P(" + label + "|"+ ArrayMath.toString(given)+ ")="+ Math.exp(p));
      }
      prob+=p;
      System.arraycopy(given,1,given,0,given.length - 1);
      given[given.length - 1]=label;
    }
    if (TIMED) {
      long elapsedMs=timer.stop();
      log.info("Calculate objective took: " + Timing.toMilliSecondsString(elapsedMs) + " ms");
    }
  }
  Map<Integer,double[]> EForADoc=sparseE(activeFeatures);
  List<Map<Integer,double[]>> EForADocPos=null;
  if (dropoutApprox) {
    EForADocPos=new ArrayList<>(docData.length);
  }
  if (!skipExpectedCountCalc) {
    if (TIMED)     timer.start();
    double fVal=1.0;
    for (int i=0; i < docData.length; i++) {
      Set<Integer> docDataHashI=docDataHash.get(i);
      Map<Integer,double[]> EForADocPosAtI=null;
      if (dropoutApprox)       EForADocPosAtI=sparseE(docDataHashI);
      for (      int fIndex : docDataHashI) {
        int j=map[fIndex];
        Index<CRFLabel> labelIndex=labelIndices.get(j);
        for (int k=0; k < labelIndex.size(); k++) {
          int[] label=labelIndex.get(k).getLabel();
          double p=cliqueTree.prob(i,label);
          if (dropoutApprox)           increScore(EForADocPosAtI,fIndex,k,fVal * p);
          increScore(EForADoc,fIndex,k,fVal * p);
        }
      }
      if (dropoutApprox) {
        for (        int fIndex : docDataHashI) {
          if (condensedFeaturesMap.containsKey(fIndex)) {
            List<Integer> aList=condensedFeaturesMap.get(fIndex);
            for (            int toCopyInto : aList) {
              double[] arr=EForADocPosAtI.get(fIndex);
              double[] targetArr=new double[arr.length];
              for (int q=0; q < arr.length; q++)               targetArr[q]=arr[q];
              EForADocPosAtI.put(toCopyInto,targetArr);
            }
          }
        }
        EForADocPos.add(EForADocPosAtI);
      }
    }
    for (    Map.Entry<Integer,List<Integer>> entry : condensedFeaturesMap.entrySet()) {
      int key=entry.getKey();
      List<Integer> aList=entry.getValue();
      for (      int toCopyInto : aList) {
        double[] arr=EForADoc.get(key);
        double[] targetArr=new double[arr.length];
        for (int i=0; i < arr.length; i++)         targetArr[i]=arr[i];
        EForADoc.put(toCopyInto,targetArr);
      }
    }
    if (TIMED) {
      long elapsedMs=timer.stop();
      log.info("Expected count took: " + Timing.toMilliSecondsString(elapsedMs) + " ms");
    }
  }
  Map<Integer,double[]> dropoutPriorGrad=null;
  if (prior == DROPOUT_PRIOR) {
    if (TIMED)     timer.start();
    dropoutPriorGrad=sparseE(activeFeatures);
    prob-=getDropoutPrior(cliqueTree,docData,EForADoc,docDataHash,activeFeatures,dropoutPriorGrad,condensedFeaturesMap,EForADocPos);
    if (TIMED) {
      long elapsedMs=timer.stop();
      log.info("Dropout took: " + Timing.toMilliSecondsString(elapsedMs) + " ms");
    }
  }
  return new Quadruple<>(docIndex,prob,EForADoc,dropoutPriorGrad);
}
