{
  double[] xtest=new double[initial.length];
  this.maxTime=msPerTest;
  if (!(function instanceof AbstractStochasticCachingDiffFunction)) {
    throw new UnsupportedOperationException();
  }
  AbstractStochasticCachingDiffFunction dfunction=(AbstractStochasticCachingDiffFunction)function;
  List<Pair<Double,Double>> res=new ArrayList<>();
  Pair<Double,Double> best=new Pair<>(lower,Double.POSITIVE_INFINITY);
  Pair<Double,Double> low=new Pair<>(lower,Double.POSITIVE_INFINITY);
  Pair<Double,Double> high=new Pair<>(upper,Double.POSITIVE_INFINITY);
  Pair<Double,Double> cur=new Pair<>();
  Pair<Double,Double> tmp=new Pair<>();
  List<Double> queue=new ArrayList<>();
  queue.add(lower);
  queue.add(upper);
  boolean toContinue=true;
  this.numPasses=10000;
  do {
    System.arraycopy(initial,0,xtest,0,initial.length);
    if (queue.size() != 0) {
      cur.first=queue.remove(0);
    }
 else {
      cur.first=0.5 * (low.first() + high.first());
    }
    ps.set(cur.first());
    log.info("");
    log.info("About to test with batch size:  " + bSize + "  gain: "+ gain+ " and  "+ ps.toString()+ " set to  "+ cur.first());
    xtest=this.minimize(function,1e-100,xtest);
    if (Double.isNaN(xtest[0])) {
      cur.second=Double.POSITIVE_INFINITY;
    }
 else {
      cur.second=dfunction.valueAt(xtest);
    }
    if (cur.second() < best.second()) {
      copyPair(best,tmp);
      copyPair(cur,best);
      if (tmp.first() > best.first()) {
        copyPair(tmp,high);
      }
 else {
        copyPair(tmp,low);
      }
      queue.add(0.5 * (cur.first() + high.first()));
    }
 else     if (cur.first() < best.first()) {
      copyPair(cur,low);
    }
 else     if (cur.first() > best.first()) {
      copyPair(cur,high);
    }
    if (Math.abs(low.first() - high.first()) < TOL) {
      toContinue=false;
    }
    res.add(new Pair<>(cur.first(),cur.second()));
    log.info("");
    log.info("Final value is: " + nf.format(cur.second()));
    log.info("Optimal so far using " + ps.toString() + " is: "+ best.first());
  }
 while (toContinue);
  log.info("-------------");
  log.info(" RESULTS          ");
  log.info(ps.getClass().toString());
  log.info("-------------");
  log.info("  val    ,    function after " + msPerTest + " ms");
  for (  Pair<Double,Double> re : res) {
    log.info(re.first() + "    ,    " + re.second());
  }
  log.info("");
  log.info("");
  return best.first();
}
