{
  this.op=op;
  rand=new Random(op.randomSeed);
  if (op.randomWordVectors) {
    initRandomWordVectors(trainingTrees);
  }
 else {
    readWordVectors();
  }
  if (op.numHid > 0) {
    this.numHid=op.numHid;
  }
 else {
    int size=0;
    for (    SimpleMatrix vector : wordVectors.values()) {
      size=vector.getNumElements();
      break;
    }
    this.numHid=size;
  }
  TwoDimensionalSet<String,String> binaryProductions=TwoDimensionalSet.hashSet();
  if (op.simplifiedModel) {
    binaryProductions.add("","");
  }
 else {
  }
  Set<String> unaryProductions=Generics.newHashSet();
  if (op.simplifiedModel) {
    unaryProductions.add("");
  }
 else {
  }
  this.numClasses=op.numClasses;
  identity=SimpleMatrix.identity(numHid);
  binaryTransform=TwoDimensionalMap.treeMap();
  binaryTensors=TwoDimensionalMap.treeMap();
  binaryClassification=TwoDimensionalMap.treeMap();
  for (  Pair<String,String> binary : binaryProductions) {
    String left=basicCategory(binary.first);
    String right=basicCategory(binary.second);
    if (binaryTransform.contains(left,right)) {
      continue;
    }
    binaryTransform.put(left,right,randomTransformMatrix());
    if (op.useTensors) {
      binaryTensors.put(left,right,randomBinaryTensor());
    }
    if (!op.combineClassification) {
      binaryClassification.put(left,right,randomClassificationMatrix());
    }
  }
  numBinaryMatrices=binaryTransform.size();
  binaryTransformSize=numHid * (2 * numHid + 1);
  if (op.useTensors) {
    binaryTensorSize=numHid * numHid * numHid* 4;
  }
 else {
    binaryTensorSize=0;
  }
  binaryClassificationSize=(op.combineClassification) ? 0 : numClasses * (numHid + 1);
  unaryClassification=Generics.newTreeMap();
  for (  String unary : unaryProductions) {
    unary=basicCategory(unary);
    if (unaryClassification.containsKey(unary)) {
      continue;
    }
    unaryClassification.put(unary,randomClassificationMatrix());
  }
  numUnaryMatrices=unaryClassification.size();
  unaryClassificationSize=numClasses * (numHid + 1);
}
