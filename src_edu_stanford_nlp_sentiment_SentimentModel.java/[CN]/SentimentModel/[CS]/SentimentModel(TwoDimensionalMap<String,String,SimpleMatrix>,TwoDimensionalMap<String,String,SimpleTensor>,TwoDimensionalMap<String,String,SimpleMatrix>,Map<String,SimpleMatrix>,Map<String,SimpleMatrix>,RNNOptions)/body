{
  this.op=op;
  this.binaryTransform=binaryTransform;
  this.binaryTensors=binaryTensors;
  this.binaryClassification=binaryClassification;
  this.unaryClassification=unaryClassification;
  this.wordVectors=wordVectors;
  this.numClasses=op.numClasses;
  if (op.numHid <= 0) {
    int nh=0;
    for (    SimpleMatrix wv : wordVectors.values()) {
      nh=wv.getNumElements();
    }
    this.numHid=nh;
  }
 else {
    this.numHid=op.numHid;
  }
  this.numBinaryMatrices=binaryTransform.size();
  binaryTransformSize=numHid * (2 * numHid + 1);
  if (op.useTensors) {
    binaryTensorSize=numHid * numHid * numHid* 4;
  }
 else {
    binaryTensorSize=0;
  }
  binaryClassificationSize=(op.combineClassification) ? 0 : numClasses * (numHid + 1);
  numUnaryMatrices=unaryClassification.size();
  unaryClassificationSize=numClasses * (numHid + 1);
  rand=new Random(op.randomSeed);
  identity=SimpleMatrix.identity(numHid);
}
