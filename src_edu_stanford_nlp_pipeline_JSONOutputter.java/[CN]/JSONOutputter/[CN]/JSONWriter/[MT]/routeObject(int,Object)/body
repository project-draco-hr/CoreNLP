{
  if (value instanceof String) {
    writer.write("\"");
    writer.write(cleanJSON(value.toString()));
    writer.write("\"");
  }
 else   if (value instanceof Collection) {
    writer.write("[");
    newline();
    Iterator<Object> elems=((Collection<Object>)value).iterator();
    while (elems.hasNext()) {
      indent(indent + 1);
      routeObject(indent + 1,elems.next());
      if (elems.hasNext()) {
        writer.write(",");
      }
      newline();
    }
    indent(indent);
    writer.write("]");
  }
 else   if (value instanceof Enum) {
    writer.write("\"");
    writer.write(cleanJSON(((Enum)value).name()));
    writer.write("\"");
  }
 else   if (value instanceof Pair) {
    routeObject(indent,Arrays.asList(((Pair)value).first,((Pair)value).second));
  }
 else   if (value instanceof Span) {
    writer.write("[");
    writer.write(Integer.toString(((Span)value).start()));
    writer.write(",");
    space();
    writer.write(Integer.toString(((Span)value).end()));
    writer.write("]");
  }
 else   if (value instanceof Consumer) {
    object(indent,(Consumer<Writer>)value);
  }
 else   if (value instanceof Stream) {
    routeObject(indent,((Stream)value).collect(Collectors.toList()));
  }
 else   if (value.getClass().isArray()) {
    Class<?> componentType=value.getClass().getComponentType();
    if (componentType.isPrimitive()) {
      if (int.class.isAssignableFrom(componentType)) {
        ArrayList<Integer> lst=new ArrayList<>();
        for (        int elem : ((int[])value)) {
          lst.add(elem);
        }
        routeObject(indent,lst);
      }
 else       if (short.class.isAssignableFrom(componentType)) {
        ArrayList<Short> lst=new ArrayList<>();
        for (        short elem : ((short[])value)) {
          lst.add(elem);
        }
        routeObject(indent,lst);
      }
 else       if (byte.class.isAssignableFrom(componentType)) {
        ArrayList<Byte> lst=new ArrayList<>();
        for (        byte elem : ((byte[])value)) {
          lst.add(elem);
        }
        routeObject(indent,lst);
      }
 else       if (long.class.isAssignableFrom(componentType)) {
        ArrayList<Long> lst=new ArrayList<>();
        for (        long elem : ((long[])value)) {
          lst.add(elem);
        }
        routeObject(indent,lst);
      }
 else       if (char.class.isAssignableFrom(componentType)) {
        ArrayList<Character> lst=new ArrayList<>();
        for (        char elem : ((char[])value)) {
          lst.add(elem);
        }
        routeObject(indent,lst);
      }
 else       if (float.class.isAssignableFrom(componentType)) {
        ArrayList<Float> lst=new ArrayList<>();
        for (        float elem : ((float[])value)) {
          lst.add(elem);
        }
        routeObject(indent,lst);
      }
 else       if (double.class.isAssignableFrom(componentType)) {
        ArrayList<Double> lst=new ArrayList<>();
        for (        double elem : ((double[])value)) {
          lst.add(elem);
        }
        routeObject(indent,lst);
      }
 else       if (boolean.class.isAssignableFrom(componentType)) {
        ArrayList<Boolean> lst=new ArrayList<>();
        for (        boolean elem : ((boolean[])value)) {
          lst.add(elem);
        }
        routeObject(indent,lst);
      }
 else {
        throw new IllegalStateException("Unhandled primitive type in array: " + componentType);
      }
    }
 else {
      routeObject(indent,Arrays.asList((Object[])value));
    }
  }
 else   if (value instanceof Integer) {
    writer.write(Integer.toString((Integer)value));
  }
 else   if (value instanceof Short) {
    writer.write(Short.toString((Short)value));
  }
 else   if (value instanceof Byte) {
    writer.write(Byte.toString((Byte)value));
  }
 else   if (value instanceof Long) {
    writer.write(Long.toString((Long)value));
  }
 else   if (value instanceof Character) {
    writer.write(Character.toString((Character)value));
  }
 else   if (value instanceof Float) {
    writer.write(new DecimalFormat("0.#######").format(value));
  }
 else   if (value instanceof Double) {
    writer.write(new DecimalFormat("0.##############").format(value));
  }
 else   if (value instanceof Boolean) {
    writer.write(Boolean.toString((Boolean)value));
  }
 else   if (int.class.isAssignableFrom(value.getClass())) {
    routeObject(indent,Integer.valueOf((int)value));
  }
 else   if (short.class.isAssignableFrom(value.getClass())) {
    routeObject(indent,Short.valueOf((short)value));
  }
 else   if (byte.class.isAssignableFrom(value.getClass())) {
    routeObject(indent,Byte.valueOf((byte)value));
  }
 else   if (long.class.isAssignableFrom(value.getClass())) {
    routeObject(indent,Long.valueOf((long)value));
  }
 else   if (char.class.isAssignableFrom(value.getClass())) {
    routeObject(indent,Character.valueOf((char)value));
  }
 else   if (float.class.isAssignableFrom(value.getClass())) {
    routeObject(indent,Float.valueOf((float)value));
  }
 else   if (double.class.isAssignableFrom(value.getClass())) {
    routeObject(indent,Double.valueOf((double)value));
  }
 else   if (boolean.class.isAssignableFrom(value.getClass())) {
    routeObject(indent,Boolean.valueOf((boolean)value));
  }
 else {
    throw new RuntimeException("Unknown object to serialize: " + value);
  }
}
