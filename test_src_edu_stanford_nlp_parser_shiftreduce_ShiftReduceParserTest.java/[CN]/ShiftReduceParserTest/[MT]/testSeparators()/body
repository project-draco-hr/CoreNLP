{
  Tree tree=convertTree(commaTreeString);
  List<Transition> transitions=CreateTransitionSequence.createTransitionSequence(tree,true);
  List<String> expectedTransitions=Arrays.asList(new String[]{"Shift","Shift","Shift","Shift","RightBinary(@ADJP)","RightBinary(ADJP)","Shift","RightBinary(@NP)","RightBinary(NP)","CompoundUnary([ROOT, FRAG])","Finalize","Idle"});
  assertEquals(expectedTransitions,CollectionUtils.transformAsList(transitions,new Function<Transition,String>(){
    public String apply(    Transition t){
      return t.toString();
    }
  }
));
  String[] expectedSeparators={"[NONE]","[NONE, NONE]","[HEAD, NONE, NONE]","[NONE, HEAD, NONE, NONE]","[LEFT, NONE, NONE]","[LEFT, NONE]","[NONE, LEFT, NONE]","[LEFT, NONE]","[LEFT]","[LEFT]","[LEFT]","[LEFT]"};
  State state=ShiftReduceParser.initialStateFromGoldTagTree(tree);
  for (int i=0; i < transitions.size(); ++i) {
    state=transitions.get(i).apply(state);
    assertEquals(expectedSeparators[i],state.separators.toString());
  }
}
