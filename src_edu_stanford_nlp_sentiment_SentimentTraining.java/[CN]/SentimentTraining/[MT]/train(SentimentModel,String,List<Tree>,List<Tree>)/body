{
  Timing timing=new Timing();
  long maxTrainTimeMillis=model.op.trainOptions.maxTrainTimeSeconds * 1000;
  int debugCycle=0;
  double[] sumGradSquare=new double[model.totalParamSize()];
  Arrays.fill(sumGradSquare,model.op.trainOptions.initialAdagradWeight);
  int numBatches=trainingTrees.size() / model.op.trainOptions.batchSize + 1;
  log.info("Training on " + trainingTrees.size() + " trees in "+ numBatches+ " batches");
  log.info("Times through each training batch: " + model.op.trainOptions.epochs);
  for (int epoch=0; epoch < model.op.trainOptions.epochs; ++epoch) {
    log.info("======================================");
    log.info("Starting epoch " + epoch);
    if (epoch > 0 && model.op.trainOptions.adagradResetFrequency > 0 && (epoch % model.op.trainOptions.adagradResetFrequency == 0)) {
      log.info("Resetting adagrad weights to " + model.op.trainOptions.initialAdagradWeight);
      Arrays.fill(sumGradSquare,model.op.trainOptions.initialAdagradWeight);
    }
    List<Tree> shuffledSentences=Generics.newArrayList(trainingTrees);
    if (model.op.trainOptions.shuffleMatrices) {
      Collections.shuffle(shuffledSentences,model.rand);
    }
    for (int batch=0; batch < numBatches; ++batch) {
      log.info("======================================");
      log.info("Epoch " + epoch + " batch "+ batch);
      int startTree=batch * model.op.trainOptions.batchSize;
      int endTree=(batch + 1) * model.op.trainOptions.batchSize;
      if (endTree > shuffledSentences.size()) {
        endTree=shuffledSentences.size();
      }
      executeOneTrainingBatch(model,shuffledSentences.subList(startTree,endTree),sumGradSquare);
      long totalElapsed=timing.report();
      log.info("Finished epoch " + epoch + " batch "+ batch+ "; total training time "+ totalElapsed+ " ms");
      if (maxTrainTimeMillis > 0 && totalElapsed > maxTrainTimeMillis) {
        break;
      }
      if (batch == (numBatches - 1) && model.op.trainOptions.debugOutputEpochs > 0 && (epoch + 1) % model.op.trainOptions.debugOutputEpochs == 0) {
        double score=0.0;
        if (devTrees != null) {
          Evaluate eval=new Evaluate(model);
          eval.eval(devTrees);
          eval.printSummary();
          score=eval.exactNodeAccuracy() * 100.0;
        }
        if (modelPath != null) {
          String tempPath;
          if (modelPath.endsWith(".ser.gz")) {
            tempPath=modelPath.substring(0,modelPath.length() - 7) + "-" + FILENAME.format(debugCycle)+ "-"+ NF.format(score)+ ".ser.gz";
          }
 else           if (modelPath.endsWith(".gz")) {
            tempPath=modelPath.substring(0,modelPath.length() - 3) + "-" + FILENAME.format(debugCycle)+ "-"+ NF.format(score)+ ".gz";
          }
 else {
            tempPath=modelPath.substring(0,modelPath.length() - 3) + "-" + FILENAME.format(debugCycle)+ "-"+ NF.format(score);
          }
          model.saveSerialized(tempPath);
        }
        ++debugCycle;
      }
    }
    long totalElapsed=timing.report();
    if (maxTrainTimeMillis > 0 && totalElapsed > maxTrainTimeMillis) {
      log.info("Max training time exceeded, exiting");
      break;
    }
  }
}
