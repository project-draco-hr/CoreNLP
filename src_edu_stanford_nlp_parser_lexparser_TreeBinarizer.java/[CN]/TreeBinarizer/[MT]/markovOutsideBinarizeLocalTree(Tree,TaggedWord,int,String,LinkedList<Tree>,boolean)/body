{
  String word=head.word();
  String tag=head.tag();
  List<Tree> newChildren=new ArrayList<Tree>(2);
  if (headLoc == 0) {
    if (!doneLeft) {
      if (tlp.isStartSymbol(topCat)) {
        return markovOutsideBinarizeLocalTree(t,head,headLoc,topCat,new LinkedList<Tree>(),true);
      }
      String headStr=t.getChild(headLoc).label().value();
      String subLabelStr="@" + topCat + ": "+ headStr+ " ]";
      Label subLabel=new CategoryWordTag(subLabelStr,word,tag);
      Tree subTree=tf.newTreeNode(subLabel,t.getChildrenAsList());
      newChildren.add(markovOutsideBinarizeLocalTree(subTree,head,headLoc,topCat,new LinkedList<Tree>(),true));
      return tf.newTreeNode(t.label(),newChildren);
    }
    int len=t.numChildren();
    if (len == 1) {
      return tf.newTreeNode(t.label(),Collections.singletonList(t.getChild(0)));
    }
    ll.addFirst(t.getChild(len - 1));
    if (ll.size() > markovOrder) {
      ll.removeLast();
    }
    String headStr=t.getChild(headLoc).label().value();
    String rightStr=(len > markovOrder - 1 ? "... " : "") + join(ll);
    String subLabelStr="@" + topCat + ": "+ headStr+ " "+ rightStr;
    Label subLabel=new CategoryWordTag(subLabelStr,word,tag);
    Tree subTree=tf.newTreeNode(subLabel,t.getChildrenAsList().subList(0,len - 1));
    newChildren.add(markovOutsideBinarizeLocalTree(subTree,head,headLoc,topCat,ll,true));
    newChildren.add(t.getChild(len - 1));
    return tf.newTreeNode(t.label(),newChildren);
  }
  if (headLoc > 0) {
    ll.addLast(t.getChild(0));
    if (ll.size() > markovOrder) {
      ll.removeFirst();
    }
    String headStr=t.getChild(headLoc).label().value();
    String leftStr=join(ll) + (headLoc > markovOrder - 1 ? " ..." : "");
    String subLabelStr="@" + topCat + ": "+ leftStr+ " "+ headStr+ " ]";
    Label subLabel=new CategoryWordTag(subLabelStr,word,tag);
    Tree subTree=tf.newTreeNode(subLabel,t.getChildrenAsList().subList(1,t.numChildren()));
    newChildren.add(t.getChild(0));
    newChildren.add(markovOutsideBinarizeLocalTree(subTree,head,headLoc - 1,topCat,ll,false));
    return tf.newTreeNode(t.label(),newChildren);
  }
  return t;
}
