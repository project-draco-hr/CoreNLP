{
  TreebankLangParserParams tlpp=null;
  TreeReaderFactory trf=new TreeReaderFactory(){
    public TreeReader newTreeReader(    Reader in){
      return new PennTreeReader(in,new LabeledScoredTreeFactory(new CategoryWordTagFactory()),new BobChrisTreeNormalizer());
    }
  }
;
  String fileExt="mrg";
  HeadFinder hf=new ModCollinsHeadFinder();
  TreebankLanguagePack tlp=new PennTreebankLanguagePack();
  boolean insideFactor=false;
  boolean mf=false;
  int mo=1;
  boolean uwl=false;
  boolean uat=false;
  double sst=20.0;
  boolean mfs=false;
  boolean simpleLabels=false;
  boolean noRebinarization=false;
  int i=0;
  while (i < args.length && args[i].startsWith("-")) {
    if (args[i].equalsIgnoreCase("-tlp") && i + 1 < args.length) {
      try {
        tlp=(TreebankLanguagePack)Class.forName(args[i + 1]).newInstance();
      }
 catch (      Exception e) {
        System.err.println("Couldn't instantiate: " + args[i + 1]);
        throw new RuntimeException(e);
      }
      i++;
    }
 else     if (args[i].equalsIgnoreCase("-tlpp") && i + 1 < args.length) {
      try {
        tlpp=(TreebankLangParserParams)Class.forName(args[i + 1]).newInstance();
      }
 catch (      Exception e) {
        System.err.println("Couldn't instantiate: " + args[i + 1]);
        throw new RuntimeException(e);
      }
      i++;
    }
 else     if (args[i].equalsIgnoreCase("-insideFactor")) {
      insideFactor=true;
    }
 else     if (args[i].equalsIgnoreCase("-markovOrder") && i + 1 < args.length) {
      i++;
      mo=Integer.parseInt(args[i]);
    }
 else     if (args[i].equalsIgnoreCase("-simpleLabels")) {
      simpleLabels=true;
    }
 else     if (args[i].equalsIgnoreCase("-noRebinarization")) {
      noRebinarization=true;
    }
 else {
      System.err.println("Unknown option:" + args[i]);
    }
    i++;
  }
  if (i >= args.length) {
    System.err.println("usage: java TreeBinarizer [-tlpp class|-markovOrder int|...] treebankPath");
    System.exit(0);
  }
  Treebank treebank;
  if (tlpp != null) {
    treebank=tlpp.memoryTreebank();
    tlp=tlpp.treebankLanguagePack();
    fileExt=tlp.treebankFileExtension();
    hf=tlpp.headFinder();
  }
 else {
    treebank=new DiskTreebank(trf);
  }
  treebank.loadPath(args[i],fileExt,true);
  TreeTransformer tt=new TreeBinarizer(hf,tlp,insideFactor,mf,mo,uwl,uat,sst,mfs,simpleLabels,noRebinarization);
  for (  Tree t : treebank) {
    Tree newT=tt.transformTree(t);
    System.out.println("Original tree:");
    t.pennPrint();
    System.out.println("Binarized tree:");
    newT.pennPrint();
    System.out.println();
  }
}
