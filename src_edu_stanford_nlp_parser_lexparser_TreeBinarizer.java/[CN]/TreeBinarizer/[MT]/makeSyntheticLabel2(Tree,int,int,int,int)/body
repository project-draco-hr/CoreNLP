{
  String topCat=t.label().value();
  Tree[] children=t.children();
  String finalPiece;
  int i=0;
  if (markFinalStates) {
    if (headLoc != 0 && left == 0) {
      finalPiece=" " + children[left].label().value() + "[";
      left++;
      i++;
    }
 else     if (headLoc == 0 && right > headLoc && right == children.length - 1) {
      finalPiece=" " + children[right].label().value() + "]";
      right--;
      i++;
    }
 else {
      finalPiece="";
    }
  }
 else {
    finalPiece="";
  }
  String middlePiece="";
  for (; i < markovOrder; i++) {
    if (left < headLoc) {
      middlePiece=" " + children[left].label().value() + "<"+ middlePiece;
      left++;
    }
 else     if (right > headLoc) {
      middlePiece=" " + children[right].label().value() + ">"+ middlePiece;
      right--;
    }
 else {
      break;
    }
  }
  if (right > headLoc || left < headLoc) {
    middlePiece=" ..." + middlePiece;
  }
  String headStr=t.getChild(headLoc).label().value();
  int leng=1 + 2 + 1+ topCat.length()+ headStr.length()+ middlePiece.length()+ finalPiece.length();
  StringBuilder sb=new StringBuilder(leng);
  sb.append("@").append(topCat).append("| ").append(headStr).append("_").append(middlePiece).append(finalPiece);
  String labelStr=sb.toString();
  String word=((HasWord)t.label()).word();
  String tag=((HasTag)t.label()).tag();
  return new CategoryWordTag(labelStr,word,tag);
}
