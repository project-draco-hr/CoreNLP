{
  double initialX=current[i];
  double initialY=function.valueAt(current);
  System.out.println("finding high bracket");
  double deltaX0=functionTolerance;
  double closeX0=initialX;
  double farX0=initialX + deltaX0;
  double closeY0=initialY;
  current[i]=farX0;
  double farY0=function.valueAt(current);
  while (farY0 <= closeY0 && farX0 < initialX + functionTolerance * 1e12) {
    System.out.println("farX0=" + farX0 + " farY0="+ farY0);
    closeX0=farX0;
    closeY0=farY0;
    deltaX0*=2.0;
    farX0=current[i] + deltaX0;
    current[i]=farX0;
    farY0=function.valueAt(current);
  }
  System.out.println("farX0=" + farX0 + " farY0="+ farY0);
  if (farX0 >= initialX + functionTolerance * 1e12) {
    return closeX0;
  }
  if (closeX0 != initialX && closeY0 != initialY) {
    if (!isValid(initialY,closeY0,farY0)) {
      throw new RuntimeException();
    }
    return goldenSectionSearch(initialX,initialY,closeX0,closeY0,farX0,farY0,current,i,function,functionTolerance,false,0);
  }
 else {
    System.out.println("finding low bracket");
    double deltaX1=functionTolerance;
    double closeX1=initialX;
    double farX1=initialX - deltaX1;
    double closeY1=initialY;
    current[i]=farX1;
    double farY1=function.valueAt(current);
    while (farY1 <= closeY1 && farX1 > initialX - functionTolerance * 1e12) {
      System.out.println("farX1=" + farX1 + " farY1="+ farY1);
      closeX1=farX1;
      closeY1=farY1;
      deltaX1*=2.0;
      farX1=current[i] - deltaX1;
      current[i]=farX1;
      farY1=function.valueAt(current);
    }
    System.out.println("farX1=" + farX1 + " farY1="+ farY1);
    if (farX1 <= initialX - functionTolerance * 1e12) {
      return closeX1;
    }
    if (closeX1 != initialX && closeY1 != initialY) {
      if (!isValid(farY1,closeY1,initialY)) {
        throw new RuntimeException();
      }
      return goldenSectionSearch(farX1,farY1,closeX1,closeY1,initialX,initialY,current,i,function,functionTolerance,true,0);
    }
 else {
      current[i]=initialX;
      return initialY;
    }
  }
}
