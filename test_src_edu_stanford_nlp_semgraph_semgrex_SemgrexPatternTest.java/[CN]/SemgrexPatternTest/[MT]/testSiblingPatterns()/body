{
  SemanticGraph sg=SemanticGraph.valueOf("[loved/VBD-2\nnsubj>Hughes/NNP-1\ndobj>[wife/NN-4 nmod:poss>his/PRP$-3 appos>Gracia/NNP-5]\nconj:and>[obsessed/JJ-9\ncop>was/VBD-7\nadvmod>absolutely/RB-8\nnmod:with>[Elicia/NN-14 nmod:poss>his/PRP$-11 amod>little/JJ-12 compound>daughter/NN-13]]]");
  SemgrexPattern pat1=SemgrexPattern.compile("{tag:NNP}=w1 . {tag:VBD}=w2");
  SemgrexMatcher matcher=pat1.matcher(sg);
  if (matcher.find()) {
    String w1=matcher.getNode("w1").word();
    String w2=matcher.getNode("w2").word();
    Assert.assertEquals("Hughes",w1);
    Assert.assertEquals("loved",w2);
  }
 else {
    throw new RuntimeException("failed!");
  }
  SemgrexPattern pat2=SemgrexPattern.compile("{word:was}=w1 $+ {}=w2");
  matcher=pat2.matcher(sg);
  if (matcher.find()) {
    String w1=matcher.getNode("w1").word();
    String w2=matcher.getNode("w2").word();
    Assert.assertEquals("was",w1);
    Assert.assertEquals("absolutely",w2);
  }
 else {
    throw new RuntimeException("failed!");
  }
  SemgrexPattern pat3=SemgrexPattern.compile("{word:absolutely}=w1 $- {}=w2");
  matcher=pat3.matcher(sg);
  if (matcher.find()) {
    String w1=matcher.getNode("w1").word();
    String w2=matcher.getNode("w2").word();
    Assert.assertEquals("absolutely",w1);
    Assert.assertEquals("was",w2);
  }
 else {
    throw new RuntimeException("failed!");
  }
  SemgrexPattern pat4=SemgrexPattern.compile("{word:his}=w1 $++ {tag:NN}=w2");
  matcher=pat4.matcher(sg);
  if (matcher.find()) {
    String w1=matcher.getNode("w1").word();
    String w2=matcher.getNode("w2").word();
    Assert.assertEquals("his",w1);
    Assert.assertEquals("daughter",w2);
  }
 else {
    throw new RuntimeException("failed!");
  }
  SemgrexPattern pat6=SemgrexPattern.compile("{word:daughter}=w1 $-- {tag:/PRP./}=w2");
  matcher=pat6.matcher(sg);
  if (matcher.find()) {
    String w1=matcher.getNode("w1").word();
    String w2=matcher.getNode("w2").word();
    Assert.assertEquals("daughter",w1);
    Assert.assertEquals("his",w2);
  }
 else {
    throw new RuntimeException("failed!");
  }
  SemgrexPattern pat5=SemgrexPattern.compile("{word:his}=w1 $-- {}=w2");
  matcher=pat5.matcher(sg);
  if (matcher.find()) {
    throw new RuntimeException("failed!");
  }
  SemgrexPattern pat7=SemgrexPattern.compile("{word:his}=w1 !$-- {}");
  matcher=pat7.matcher(sg);
  if (matcher.find()) {
    String w1=matcher.getNode("w1").word();
    Assert.assertEquals("his",w1);
  }
 else {
    throw new RuntimeException("failed!");
  }
  SemgrexPattern pat8=SemgrexPattern.compile("{word:his}=w1 !$++ {}");
  matcher=pat8.matcher(sg);
  if (matcher.find()) {
    throw new RuntimeException("failed!");
  }
}
