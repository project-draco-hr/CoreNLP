{
  double eE, eI;
  double tE, tI;
  for (int c=1; c <= numCategories; c++) {
    ClassicCounter<String> oldCachedInterpolatedProbs=null;
    for (int n=0; n < ln; n++) {
      List<String>[] ngrams=new List[getLengthBinCount()];
      ClassicCounter<String> cachedEmpiricalProbs=new ClassicCounter<String>();
      ClassicCounter<String> cachedInterpolatedProbs=new ClassicCounter<String>();
      for (int i=0; i < ngrams.length; i++) {
        ngrams[i]=new ArrayList<String>();
      }
      for (int i=0; i < heldOutExamples[c].size(); i++) {
        String line=heldOutExamples[c].get(i);
        String wordLengths=getWordLengthsString(line);
        for (int j=ln; j <= wordLengths.length(); j++) {
          String ngram=wordLengths.substring(j - n - 1,j);
          ngrams[getLengthBin(ngram,c)].add(ngram);
          cachedEmpiricalProbs.setCount(ngram,getEmpiricalLengthProb(ngram,c));
        }
      }
      if (DEBUG) {
        System.err.print("length bin counts for mixing " + (n + 1) + "-gram and "+ n+ "-gram in category "+ c+ ": ");
        for (int i=0; i < ngrams.length; i++) {
          System.err.print((i > 0 ? "," : "") + ngrams[i].size());
        }
        System.err.println();
      }
      for (int b=0; b < getLengthBinCount(); b++) {
        int numIterations=0;
        while (true) {
          eE=0.001;
          eI=0.001;
          for (int i=0; i < ngrams[b].size(); i++) {
            String ngram=ngrams[b].get(i);
            tE=lengthInterpolationConstants[c][n][b] * cachedEmpiricalProbs.getCount(ngram);
            double interpolatedProb;
            if (oldCachedInterpolatedProbs == null) {
              interpolatedProb=length0GramProb;
            }
 else {
              interpolatedProb=oldCachedInterpolatedProbs.getCount(ngram.substring(1));
            }
            tI=(1 - lengthInterpolationConstants[c][n][b]) * interpolatedProb;
            double totalProb=tE + tI;
            cachedInterpolatedProbs.setCount(ngram,totalProb);
            eE+=tE / totalProb;
            eI+=tI / totalProb;
          }
          double weight=eE / (eE + eI);
          if (Math.abs(lengthInterpolationConstants[c][n][b] - weight) < lengthConvergenceMargin) {
            if (DEBUG) {
              System.err.println("weight for mixing length " + (n + 1) + "-gram and "+ n+ "-gram using bin "+ b+ " in category "+ c+ " converged after "+ numIterations+ " iterations: "+ weight);
            }
            break;
          }
 else {
            lengthInterpolationConstants[c][n][b]=weight;
          }
          numIterations++;
        }
      }
      oldCachedInterpolatedProbs=cachedInterpolatedProbs;
    }
  }
}
