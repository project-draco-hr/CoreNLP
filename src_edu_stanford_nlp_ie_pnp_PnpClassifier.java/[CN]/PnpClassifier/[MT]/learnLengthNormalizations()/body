{
  String[][] endMarkedHeldOutExamples=new String[numCategories + 1][];
  double[][][] cachedLengthScores=new double[numCategories + 1][][];
  String[][][] cachedWordsWithContext=new String[numCategories + 1][][];
  double[][][][] cachedCharWordScores=new double[numCategories + 1][][][];
  for (int c=1; c <= numCategories; c++) {
    endMarkedHeldOutExamples[c]=new String[heldOutExamples[c].size()];
    cachedLengthScores[c]=new double[heldOutExamples[c].size()][numCategories + 1];
    cachedWordsWithContext[c]=new String[heldOutExamples[c].size()][];
    cachedCharWordScores[c]=new double[heldOutExamples[c].size()][][];
    for (int i=0; i < heldOutExamples[c].size(); i++) {
      String line=getEndMarkedString((String)heldOutExamples[c].get(i));
      endMarkedHeldOutExamples[c][i]=line;
      List<String> wordsWithContext=getWordsWithContext(line);
      cachedWordsWithContext[c][i]=wordsWithContext.toArray(new String[0]);
      cachedCharWordScores[c][i]=new double[wordsWithContext.size()][numCategories + 1];
      for (int cat=1; cat <= numCategories; cat++) {
        cachedLengthScores[c][i][cat]=getLengthScore(line,cat);
        for (int w=0; w < cachedWordsWithContext[c][i].length; w++) {
          cachedCharWordScores[c][i][w][cat]=getCharWordScore(cachedWordsWithContext[c][i][w],cat);
        }
      }
    }
  }
  double[] cachedLogPriors=new double[numCategories + 1];
  for (int c=1; c <= numCategories; c++) {
    cachedLogPriors[c]=Math.log(getPriorProb(c));
  }
  ClassicCounter<Double> normalizationScores=new ClassicCounter<Double>();
  double score;
  for (double n=0.0; n <= 10.0; n+=0.25) {
    if (n > 0 && n < 1) {
      continue;
    }
    score=0;
    for (int c=1; c <= numCategories; c++) {
      for (int i=0; i < heldOutExamples[c].size(); i++) {
        double weight=((Double)heldOutWeights[c].get(i)).doubleValue();
        ClassicCounter<Integer> catScores=new ClassicCounter<Integer>();
        for (int cat=1; cat <= numCategories; cat++) {
          double catScore=cachedLogPriors[cat];
          catScore+=cachedLengthScores[c][i][cat];
          for (int w=0; w < cachedWordsWithContext[c][i].length; w++) {
            String wordWithContext=cachedWordsWithContext[c][i][w];
            double charWordLogProb=cachedCharWordScores[c][i][w][cat];
            int wordLength=getPureString(wordWithContext).length();
            catScore+=lengthNormalize(charWordLogProb,wordLength,n);
          }
          catScores.setCount(Integer.valueOf(cat),catScore);
        }
        int bestCategory=Counters.argmax(catScores).intValue();
        if (bestCategory == c) {
          score+=weight;
        }
      }
    }
    normalizationScores.setCount(new Double(n),score);
  }
  double bestNormalization=Counters.argmax(normalizationScores).doubleValue();
  lengthNormalization=bestNormalization;
  if (DEBUG) {
    System.err.println(new Date() + " best length normalization = " + lengthNormalization);
  }
}
