{
  numExamples=0;
  categoryCounts=new int[numCategories + 1];
  lengthSequenceCounts=new ClassicCounter[numCategories + 1];
  lengthInterpolationConstants=new double[numCategories + 1][ln][getLengthBinCount()];
  wordTotalCounts=new int[numCategories + 1];
  charSequenceCounts=new ClassicCounter[numCategories + 1];
  charInterpolationConstants=new double[numCategories + 1][cn][getCharBinCount()];
  charSequenceTotalsByLength=new ClassicCounter[numCategories + 1];
  charTotalCounts=new int[numCategories + 1];
  cachedCharSequenceInterpolatedProbs=new ClassicCounter[numCategories + 1];
  wordCounts=new ClassicCounter[numCategories + 1];
  wordTotalsByLength=new ClassicCounter[numCategories + 1];
  charWordInterpolationConstants=new ClassicCounter[numCategories + 1];
  lengthNormalizations=new double[numCategories + 1];
  heldOutExamples=new List[numCategories + 1];
  heldOutWeights=new List[numCategories + 1];
  for (int c=1; c <= numCategories; c++) {
    categoryCounts[c]=0;
    lengthSequenceCounts[c]=new ClassicCounter();
    for (int i=0; i < ln; i++) {
      for (int b=0; b < getLengthBinCount(); b++) {
        lengthInterpolationConstants[c][i][b]=0.5;
      }
    }
    wordTotalCounts[c]=0;
    charSequenceCounts[c]=new ClassicCounter();
    for (int i=0; i < cn; i++) {
      for (int b=0; b < getCharBinCount(); b++) {
        charInterpolationConstants[c][i][b]=0.5;
      }
    }
    charSequenceTotalsByLength[c]=new ClassicCounter();
    charTotalCounts[c]=0;
    cachedCharSequenceInterpolatedProbs[c]=new ClassicCounter();
    wordCounts[c]=new ClassicCounter();
    wordTotalsByLength[c]=new ClassicCounter();
    charWordInterpolationConstants[c]=new ClassicCounter();
    lengthNormalizations[c]=0;
    heldOutExamples[c]=new ArrayList();
    heldOutWeights[c]=new ArrayList();
  }
  priorBoost=1;
  parametersTuned=false;
}
