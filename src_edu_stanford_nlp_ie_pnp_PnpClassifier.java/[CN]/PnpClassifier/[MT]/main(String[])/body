{
  if (args.length == 0) {
    System.err.println("Doing internal rudimentary testing....");
    Properties props=getDefaultProperties();
    props.setProperty("DEBUG","true");
    props.setProperty("cn","2");
    props.setProperty("charBinCutoffs","");
    props.setProperty("useWordModel","false");
    props.setProperty("useLengthModel","false");
    props.setProperty("startSymbol","^");
    props.setProperty("endSymbol","$");
    PnpClassifier pnpc=new PnpClassifier(props);
    for (int i=0; i < 20; i++)     pnpc.addCounts("abc");
    for (int i=0; i < 10; i++)     pnpc.addCounts("xyz");
    pnpc.tuneParameters();
    pnpc.PRINT_RUNNING_SCORES=true;
    System.err.println("P[abc] = " + Math.exp(pnpc.getLogProb("abc")));
    System.err.println("P[xyz] = " + Math.exp(pnpc.getLogProb("xyz")));
    System.err.println("P[abz] = " + Math.exp(pnpc.getLogProb("abz")));
    System.err.println("P[abcxyz] = " + Math.exp(pnpc.getLogProb("abcxyz")));
  }
 else   if (args.length < 2) {
    System.err.println("Usage: java PnpClassifier trainingFilename testFilename [propertiesFilename]");
  }
 else {
    try {
      Properties props=(args.length == 3 ? loadProperties(args[2]) : null);
      PnpClassifier lc=new PnpClassifier(args[0],props);
      lc.test(args[1]);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}
