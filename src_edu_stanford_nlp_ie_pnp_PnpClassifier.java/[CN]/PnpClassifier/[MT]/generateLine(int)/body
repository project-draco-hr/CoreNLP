{
  StringBuffer wordLengths=new StringBuffer();
  for (int i=0; i < ln - 1; i++) {
    wordLengths.append((char)0);
  }
  while (true) {
    double r=rand.nextDouble();
    double totalMass=0;
    wordLengths.append((char)0);
    Iterator iter=charSequenceTotalsByLength[category].keySet().iterator();
    while (iter.hasNext()) {
      Integer curLength=(Integer)iter.next();
      wordLengths.setCharAt(wordLengths.length() - 1,(char)curLength.intValue());
      double ngramProb=getInterpolatedLengthProb(wordLengths.substring(wordLengths.length() - ln),category);
      totalMass+=ngramProb;
      if (totalMass >= r) {
        break;
      }
    }
    if ((int)wordLengths.charAt(wordLengths.length() - 1) == 0) {
      break;
    }
  }
  StringBuffer line=new StringBuffer();
  for (int i=0; i < cn - 1; i++) {
    line.append(startSymbol);
  }
  for (int i=ln - 1; i < wordLengths.length() - 1; i++) {
    line.append(generateWord((int)wordLengths.charAt(i),line.substring(line.length() - cn + 1),(i < wordLengths.length() - 2 ? ' ' : endSymbol),category));
  }
  return (line.toString());
}
