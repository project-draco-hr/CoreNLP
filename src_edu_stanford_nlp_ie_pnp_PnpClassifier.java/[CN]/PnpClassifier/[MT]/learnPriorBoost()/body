{
  double[][][] cachedLogProbs=new double[numCategories + 1][][];
  for (int c=1; c <= numCategories; c++) {
    cachedLogProbs[c]=new double[heldOutExamples[c].size()][numCategories + 1];
    for (int i=0; i < heldOutExamples[c].size(); i++) {
      for (int cat=1; cat <= numCategories; cat++) {
        cachedLogProbs[c][i][cat]=getLogProb(heldOutExamples[c].get(i),cat);
      }
    }
  }
  double[] cachedLogPriors=new double[numCategories + 1];
  for (int c=1; c <= numCategories; c++) {
    cachedLogPriors[c]=Math.log(getPriorProb(c));
  }
  ClassicCounter<Integer> boostScores=new ClassicCounter<Integer>();
  double score;
  for (int b=0; b <= maxPriorBoost; b++) {
    score=0;
    for (int c=1; c <= numCategories; c++) {
      for (int i=0; i < heldOutExamples[c].size(); i++) {
        double weight=(heldOutWeights[c].get(i)).doubleValue();
        ClassicCounter<Integer> catScores=new ClassicCounter<Integer>();
        for (int cat=1; cat <= numCategories; cat++) {
          catScores.setCount(Integer.valueOf(cat),cachedLogPriors[cat] * b + cachedLogProbs[c][i][cat]);
        }
        int bestCategory=Counters.argmax(catScores).intValue();
        if (bestCategory == c) {
          score+=weight;
        }
      }
    }
    boostScores.setCount(Integer.valueOf(b),score);
  }
  int bestBoost=Counters.argmax(boostScores).intValue();
  priorBoost=bestBoost;
  if (DEBUG) {
    System.err.println(new Date() + " best prior boost = " + priorBoost);
  }
}
