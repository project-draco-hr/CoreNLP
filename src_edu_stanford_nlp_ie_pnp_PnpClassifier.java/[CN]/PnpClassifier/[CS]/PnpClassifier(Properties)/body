{
  if (props == null) {
    props=getDefaultProperties();
  }
  DEBUG=Boolean.parseBoolean(props.getProperty("DEBUG"));
  if (DEBUG) {
    props.list(System.err);
  }
  numCategories=Integer.parseInt(props.getProperty("numCategories"));
  cn=Integer.parseInt(props.getProperty("cn"));
  ln=Integer.parseInt(props.getProperty("ln"));
  startSymbol=props.getProperty("startSymbol").charAt(0);
  endSymbol=props.getProperty("endSymbol").charAt(0);
  charBinCutoffs=parseIntList(props.getProperty("charBinCutoffs"));
  lengthBinCutoffs=parseIntList(props.getProperty("lengthBinCutoffs"));
  heldOutPercent=Integer.parseInt(props.getProperty("heldOutPercent"));
  charConvergenceMargin=Double.parseDouble(props.getProperty("charConvergenceMargin"));
  lengthConvergenceMargin=Double.parseDouble(props.getProperty("lengthConvergenceMargin"));
  numCharWordSteps=Integer.parseInt(props.getProperty("numCharWordSteps"));
  maxPriorBoost=Integer.parseInt(props.getProperty("maxPriorBoost"));
  useCharModel=Boolean.parseBoolean(props.getProperty("useCharModel"));
  useLengthModel=Boolean.parseBoolean(props.getProperty("useLengthModel"));
  useWordModel=Boolean.parseBoolean(props.getProperty("useWordModel"));
  useLengthNormalization=Boolean.parseBoolean(props.getProperty("useLengthNormalization"));
  usePriorBoost=Boolean.parseBoolean(props.getProperty("usePriorBoost"));
  labelIndex=new HashIndex();
  initCounts();
}
