{
  double logLikelihood=0.0;
  ConcatVector gradient=new ConcatVector(weights.getNumberOfComponents());
  CliqueTree.MarginalResult result=new CliqueTree(model,weights).calculateMarginals();
  for (  GraphicalModel.Factor factor : model.factors) {
    factor.featuresTable.cacheVectors();
  }
  for (  GraphicalModel.Factor factor : model.factors) {
    int[] assignment=new int[factor.neigborIndices.length];
    for (int i=0; i < assignment.length; i++) {
      int deterministicValue=getDeterministicAssignment(result.marginals[factor.neigborIndices[i]]);
      if (deterministicValue != -1) {
        assignment[i]=deterministicValue;
      }
 else {
        int trainingObservation=Integer.parseInt(model.getVariableMetaDataByReference(factor.neigborIndices[i]).get(LogLikelihoodFunction.VARIABLE_TRAINING_VALUE));
        assignment[i]=trainingObservation;
      }
    }
    ConcatVector features=factor.featuresTable.getAssignmentValue(assignment).get();
    gradient.addVectorInPlace(features,1.0);
    logLikelihood+=features.dotProduct(weights);
  }
  logLikelihood-=Math.log(result.partitionFunction);
  for (  GraphicalModel.Factor factor : model.factors) {
    Iterator<int[]> fastPassByReferenceIterator=factor.featuresTable.fastPassByReferenceIterator();
    int[] assignment=fastPassByReferenceIterator.next();
    while (true) {
      double assignmentProb=result.jointMarginals.get(factor).getAssignmentValue(assignment);
      if (assignmentProb > 0) {
        gradient.addVectorInPlace(factor.featuresTable.getAssignmentValue(assignment).get(),-assignmentProb);
      }
      if (fastPassByReferenceIterator.hasNext())       fastPassByReferenceIterator.next();
 else       break;
    }
  }
  for (  GraphicalModel.Factor factor : model.factors) {
    factor.featuresTable.releaseCache();
  }
  return new FunctionSummaryAtPoint(logLikelihood,gradient);
}
