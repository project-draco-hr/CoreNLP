{
  if (args.length < minArgs) {
    System.out.println(usage());
    System.exit(-1);
  }
  Properties options=StringUtils.argsToProperties(args,argDefs());
  Language language=PropertiesUtils.get(options,"l",Language.English,Language.class);
  TreebankLangParserParams tlpp=language.params;
  DiskTreebank tb=null;
  String encoding=options.getProperty("l","UTF-8");
  boolean removeBracket=PropertiesUtils.getBool(options,"b",false);
  tlpp.setInputEncoding(encoding);
  tlpp.setOutputEncoding(encoding);
  tb=tlpp.diskTreebank();
  String[] files=options.getProperty("","").split("\\s+");
  if (files.length != 0) {
    for (    String filename : files) {
      tb.loadPath(filename);
    }
  }
 else {
    log.info(usage());
    System.exit(-1);
  }
  PrintWriter pwo=tlpp.pw();
  String startSymbol=tlpp.treebankLanguagePack().startSymbol();
  TreeFactory tf=new LabeledScoredTreeFactory();
  int nTrees=0;
  for (  Tree t : tb) {
    if (removeBracket) {
      if (t.value().equals(startSymbol)) {
        t=t.firstChild();
      }
    }
 else     if (!t.value().equals(startSymbol)) {
      t=tf.newTreeNode(startSymbol,Collections.singletonList(t));
    }
    pwo.println(t.toString());
    nTrees++;
  }
  pwo.close();
  System.err.printf("Processed %d trees.%n",nTrees);
}
