{
  final Random rand=new Random();
  double corpusLevel=corpusAvg / corpusNum;
  double sentLevel=sentAvg / sentNum;
  double sentEx=100.0 * sentExact / sentNum;
  if (verbose) {
    Map<Double,List<CoreLabel>> avgMap=new TreeMap<>();
    for (    Map.Entry<List<CoreLabel>,Double> entry : catAvg.entrySet()) {
      double avg=entry.getValue() / catNum.get(entry.getKey());
      if (Double.isNaN(avg)) {
        avg=-1.0;
      }
      if (avgMap.containsKey(avg)) {
        avgMap.put(avg + (rand.nextDouble() / 10000.0),entry.getKey());
      }
 else {
        avgMap.put(avg,entry.getKey());
      }
    }
    pw.println("============================================================");
    pw.println("Leaf Ancestor Metric" + "(" + name + ") -- final statistics");
    pw.println("============================================================");
    pw.println("#Sentences: " + (int)sentNum);
    pw.println();
    pw.println("Sentence-level (macro-averaged)");
    pw.printf(" Avg: %.3f%n",sentLevel);
    pw.printf(" Exact: %.2f%%%n",sentEx);
    pw.println();
    pw.println("Corpus-level (micro-averaged)");
    pw.printf(" Avg: %.3f%n",corpusLevel);
    pw.println("============================================================");
    for (    List<CoreLabel> lineage : avgMap.values()) {
      if (catNum.get(lineage) < 30.0)       continue;
      double avg=catAvg.get(lineage) / catNum.get(lineage);
      pw.printf(" %.3f\t%d\t%s%n",avg,(int)((double)catNum.get(lineage)),toString(lineage));
    }
    pw.println("============================================================");
  }
 else {
    pw.printf("%s summary: corpus: %.3f sent: %.3f sent-ex: %.2f%n",name,corpusLevel,sentLevel,sentEx);
  }
}
