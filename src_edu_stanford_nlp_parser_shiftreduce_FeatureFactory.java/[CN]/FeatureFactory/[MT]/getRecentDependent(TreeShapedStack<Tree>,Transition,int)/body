{
  if (stack.size() <= nodeNum) {
    return null;
  }
  for (int i=0; i < nodeNum; ++i) {
    stack=stack.pop();
  }
  Tree node=stack.peek();
  if (node == null) {
    return null;
  }
  if (!(node.label() instanceof CoreLabel)) {
    throw new IllegalArgumentException("Can only featurize CoreLabel trees");
  }
  CoreLabel head=((CoreLabel)node.label()).get(TreeCoreAnnotations.HeadWordLabelAnnotation.class);
switch (transition) {
case LEFT:
{
      while (true) {
        if (node.children().length == 0) {
          return null;
        }
        Tree child=node.children()[0];
        if (!(child.label() instanceof CoreLabel)) {
          throw new IllegalArgumentException("Can only featurize CoreLabel trees");
        }
        if (((CoreLabel)child.label()).get(TreeCoreAnnotations.HeadWordLabelAnnotation.class) != head) {
          return (CoreLabel)child.label();
        }
        node=child;
      }
    }
case RIGHT:
{
    while (true) {
      if (node.children().length == 0) {
        return null;
      }
      if (node.children().length == 1) {
        node=node.children()[0];
        continue;
      }
      Tree child=node.children()[1];
      if (!(child.label() instanceof CoreLabel)) {
        throw new IllegalArgumentException("Can only featurize CoreLabel trees");
      }
      if (((CoreLabel)child.label()).get(TreeCoreAnnotations.HeadWordLabelAnnotation.class) != head) {
        return (CoreLabel)child.label();
      }
      node=child;
    }
  }
default :
throw new IllegalArgumentException("Can only get left or right heads");
}
}
