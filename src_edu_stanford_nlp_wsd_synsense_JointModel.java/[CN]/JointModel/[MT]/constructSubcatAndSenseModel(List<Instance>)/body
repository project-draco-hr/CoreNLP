{
  ClassicCounter<Subcategory> subcatCounter=new ClassicCounter<Subcategory>();
  TwoDimensionalCounter<String,Subcategory> senseAndSubcatCounts=new TwoDimensionalCounter<String,Subcategory>();
  for (  Instance ins : data) {
    if (ins.subcat.equals(Subcategory.UNASSIGNED)) {
      continue;
    }
    if (!ins.subcat.equals(Subcategory.DISTRIBUTION)) {
      subcatCounter.incrementCount(ins.subcat);
    }
    if (ins.sense[0].equals(Instance.UNASSIGNED)) {
      continue;
    }
    if (ins.sense[0].equals(Instance.DISTRIBUTION)) {
      for (      String sense : allSenses) {
        double senseWeight=ins.senseDist.probabilityOf(sense);
        senseAndSubcatCounts.incrementCount(sense,ins.subcat,senseWeight);
      }
    }
 else {
      if (ins.subcat.equals(Subcategory.DISTRIBUTION)) {
        for (        Subcategory subcat : Subcategory.SUBCATEGORIES) {
          double subcatProb=ins.subcatDist.probabilityOf(subcat) / ins.sense.length;
          for (int i=0; i < ins.sense.length; i++) {
            senseAndSubcatCounts.incrementCount(ins.sense[i],subcat,subcatProb);
          }
        }
      }
 else {
        throw new RuntimeException("marked for both sense and subcat");
      }
    }
  }
  if (subcatCounter.isEmpty()) {
    throw new RuntimeException();
  }
  subcatPrior=Distribution.laplaceSmoothedDistribution(subcatCounter,Subcategory.SUBCATEGORIES.size(),0.0001);
  if (senseAndSubcatCounts.isEmpty()) {
    for (    String sense : allSenses) {
      for (      Subcategory subcat : Subcategory.SUBCATEGORIES) {
        senseAndSubcatCounts.incrementCount(sense,subcat,1.0);
      }
    }
  }
 else {
    for (    String sense : allSenses) {
      ClassicCounter<Subcategory> c=senseAndSubcatCounts.getCounter(sense);
      for (      Subcategory subcat : Subcategory.SUBCATEGORIES) {
        senseAndSubcatCounts.incrementCount(sense,subcat,jointSmoothingParam);
      }
    }
  }
  subcatGivenSense=new HashMap<String,Distribution<Subcategory>>();
  for (Iterator<String> senseI=senseAndSubcatCounts.firstKeySet().iterator(); senseI.hasNext(); ) {
    String sense=senseI.next();
    ClassicCounter<Subcategory> c=senseAndSubcatCounts.getCounter(sense);
    Distribution<Subcategory> dist=Distribution.getDistribution(c);
    subcatGivenSense.put(sense,dist);
  }
  TwoDimensionalCounter<Subcategory,String> subcatAndSenseCounts=TwoDimensionalCounter.reverseIndexOrder(senseAndSubcatCounts);
  senseGivenSubcat=new HashMap<Subcategory,Distribution<String>>();
  for (Iterator<Subcategory> subcatI=subcatAndSenseCounts.firstKeySet().iterator(); subcatI.hasNext(); ) {
    Subcategory subcat=subcatI.next();
    ClassicCounter<String> c=subcatAndSenseCounts.getCounter(subcat);
    Distribution<String> dist=Distribution.getDistribution(c);
    senseGivenSubcat.put(subcat,dist);
  }
}
