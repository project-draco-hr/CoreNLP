{
  double logHighestScore=Double.NEGATIVE_INFINITY;
  Subcategory bestSubcat=Subcategory.UNASSIGNED;
  TwoDimensionalCounter<String,Subcategory> joint=new TwoDimensionalCounter<String,Subcategory>();
  for (  Subcategory subcat : Subcategory.SUBCATEGORIES) {
    double thisSequenceGivenThisSubcat=logP_seqGivenSub(ins,subcat);
    double probSubcat=Math.log(subcatPrior.probabilityOf(subcat));
    double[] posteriors=new double[allSenses.size()];
    for (    String sense : allSenses) {
      double logSensePart=logP_seqGivenSense(ins,sense);
      double thisSenseGivenThisSubcat=logP_senseGivenSubcat(subcat,sense);
      if (thisSenseGivenThisSubcat == Double.NEGATIVE_INFINITY) {
        throw new RuntimeException("got -infty");
      }
      double logThisScore=thisSequenceGivenThisSubcat + probSubcat + thisSenseGivenThisSubcat+ logSensePart;
      joint.incrementCount(sense,subcat,logThisScore);
      posteriors[allSenses.indexOf(sense)]=logThisScore;
    }
    double totalThisSubcat=ArrayMath.logSum(posteriors);
    if (totalThisSubcat > logHighestScore) {
      logHighestScore=totalThisSubcat;
      bestSubcat=subcat;
    }
  }
  if (verbose) {
    System.out.println("instance:");
    System.out.println(ins);
    System.out.println("joint:");
    printJoint(null,joint);
    System.out.println("bestSubcat=" + bestSubcat);
    System.out.println();
  }
  return new InstanceMarking(ins,Instance.UNASSIGNED,bestSubcat,null,null);
}
