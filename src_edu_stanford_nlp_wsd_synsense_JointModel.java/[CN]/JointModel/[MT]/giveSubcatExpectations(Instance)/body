{
  boolean foundPositive=false;
  if (ins.sense[0].equals(Instance.DISTRIBUTION) || ins.sense[0].equals(Instance.UNASSIGNED)) {
    throw new RuntimeException();
  }
  ClassicCounter<Subcategory> newSubcat=new ClassicCounter<Subcategory>();
  for (  Subcategory subcat : Subcategory.SUBCATEGORIES) {
    double subcatProb=Math.log(subcatPrior.probabilityOf(subcat));
    double senseGivenSubcat=Double.NEGATIVE_INFINITY;
    for (int j=0; j < ins.sense.length; j++) {
      senseGivenSubcat=SloppyMath.logAdd(senseGivenSubcat,logP_senseGivenSubcat(subcat,ins.sense[j]));
    }
    senseGivenSubcat-=Math.log(ins.sense.length);
    double seqGivenSubcat=logP_seqGivenSub(ins,subcat);
    double logProb=subcatProb + senseGivenSubcat + seqGivenSubcat;
    if (logProb > Double.NEGATIVE_INFINITY) {
      foundPositive=true;
    }
    newSubcat.setCount(subcat,logProb);
  }
  if (!foundPositive) {
    System.out.println(ins.logSequenceGivenSubcat);
    throw new RuntimeException(subcatPrior.toString());
  }
  ins.subcatDist=Distribution.getDistributionFromLogValues(newSubcat);
  if (ins.subcatDist == null) {
    throw new RuntimeException();
  }
  ins.subcat=Subcategory.DISTRIBUTION;
}
