{
  init(data);
  clearExpectations(data);
  constructSenseAndWordModel(data);
  constructSubcatAndSenseModel(data);
  for (int i=0; i < EMsteps; i++) {
    giveExpectations(data);
    constructSenseAndWordModel(data);
    constructSubcatAndSenseModel(data);
  }
  if (verbose) {
    TwoDimensionalCounter<String,Subcategory> joint=new TwoDimensionalCounter<String,Subcategory>();
    for (    String sense : allSenses) {
      double senseProb=sensePrior.probabilityOf(sense);
      for (      Subcategory subcat : Subcategory.SUBCATEGORIES) {
        double jointProb=senseProb * Math.exp(logP_subcatGivenSense(subcat,sense));
        joint.incrementCount(sense,subcat,jointProb);
      }
    }
    printJoint(sensePrior,joint);
  }
}
