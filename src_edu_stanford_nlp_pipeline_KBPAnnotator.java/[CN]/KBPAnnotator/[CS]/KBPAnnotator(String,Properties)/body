{
  ArgumentParser.fillOptions(this,name,props);
  extractors=new ArrayList<>();
  try {
    Object object=IOUtils.readObjectFromURLOrClasspathOrFileSystem(model);
    if (object instanceof LinearClassifier) {
      extractors.add(new KBPStatisticalExtractor((Classifier<String,String>)object));
    }
 else     if (object instanceof KBPStatisticalExtractor) {
      extractors.add((KBPStatisticalExtractor)object);
    }
 else {
      throw new ClassCastException(object.getClass() + " cannot be cast into a " + KBPStatisticalExtractor.class);
    }
    extractors.add(new KBPTokensregexExtractor(tokensregexdir));
    extractors.add(new KBPSemgrexExtractor(semgrexdir));
  }
 catch (  IOException|ClassNotFoundException e) {
    throw new RuntimeIOException(e);
  }
  this.casedNER=new TokensRegexNERAnnotator(regexnerCasedPath,false);
  this.caselessNER=new TokensRegexNERAnnotator(regexnerCaselessPath,true,"^(NN|JJ).*");
}
