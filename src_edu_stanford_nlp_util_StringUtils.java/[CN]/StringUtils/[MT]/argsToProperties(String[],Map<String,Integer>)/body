{
  Properties result=new Properties();
  List<String> remainingArgs=new ArrayList<>();
  for (int i=0; i < args.length; i++) {
    String key=args[i];
    if (!key.isEmpty() && key.charAt(0) == '-') {
      if (key.length() > 1 && key.charAt(1) == '-') {
        key=key.substring(2);
      }
 else {
        key=key.substring(1);
      }
      Integer maxFlagArgs=flagsToNumArgs.get(key);
      int max=maxFlagArgs == null ? 1 : maxFlagArgs;
      int min=maxFlagArgs == null ? 0 : maxFlagArgs;
      if (maxFlagArgs != null && maxFlagArgs == 0 && i < args.length - 1 && ("true".equalsIgnoreCase(args[i + 1]) || "false".equalsIgnoreCase(args[i + 1]))) {
        max=1;
      }
      List<String> flagArgs=new ArrayList<>();
      for (int j=0; j < max && i + 1 < args.length && (j < min || args[i + 1].isEmpty() || args[i + 1].charAt(0) != '-'); i++, j++) {
        flagArgs.add(args[i + 1]);
      }
      String value;
      if (flagArgs.isEmpty()) {
        value="true";
      }
 else {
        value=join(flagArgs," ");
      }
      if (key.equalsIgnoreCase(PROP) || key.equalsIgnoreCase(PROPS) || key.equalsIgnoreCase(PROPERTIES)|| key.equalsIgnoreCase(ARGUMENTS)|| key.equalsIgnoreCase(ARGS)) {
        result.setProperty(PROPERTIES,value);
      }
 else {
        result.setProperty(key,value);
      }
    }
 else {
      remainingArgs.add(args[i]);
    }
  }
  if (!remainingArgs.isEmpty()) {
    result.setProperty("",join(remainingArgs," "));
  }
  while (result.containsKey(PROPERTIES)) {
    String file=result.getProperty(PROPERTIES);
    result.remove(PROPERTIES);
    Properties toAdd=new Properties();
    BufferedReader reader=null;
    try {
      reader=IOUtils.readerFromString(file);
      toAdd.load(reader);
      for (      String propKey : toAdd.stringPropertyNames()) {
        String newVal=toAdd.getProperty(propKey);
        toAdd.setProperty(propKey,newVal.trim());
      }
    }
 catch (    IOException e) {
      String msg="argsToProperties could not read properties file: " + file;
      throw new RuntimeIOException(msg,e);
    }
 finally {
      IOUtils.closeIgnoringExceptions(reader);
    }
    for (    String key : toAdd.stringPropertyNames()) {
      String val=toAdd.getProperty(key);
      if (!result.containsKey(key)) {
        result.setProperty(key,val);
      }
    }
  }
  return result;
}
