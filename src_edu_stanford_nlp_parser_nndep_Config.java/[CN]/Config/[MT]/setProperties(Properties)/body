{
  trainingThreads=PropertiesUtils.getInt(props,"trainingThreads",trainingThreads);
  wordCutOff=PropertiesUtils.getInt(props,"wordCutOff",wordCutOff);
  initRange=PropertiesUtils.getDouble(props,"initRange",initRange);
  maxIter=PropertiesUtils.getInt(props,"maxIter",maxIter);
  batchSize=PropertiesUtils.getInt(props,"batchSize",batchSize);
  adaEps=PropertiesUtils.getDouble(props,"adaEps",adaEps);
  adaAlpha=PropertiesUtils.getDouble(props,"adaAlpha",adaAlpha);
  regParameter=PropertiesUtils.getDouble(props,"regParameter",regParameter);
  dropProb=PropertiesUtils.getDouble(props,"dropProb",dropProb);
  hiddenSize=PropertiesUtils.getInt(props,"hiddenSize",hiddenSize);
  embeddingSize=PropertiesUtils.getInt(props,"embeddingSize",embeddingSize);
  numTokens=PropertiesUtils.getInt(props,"numTokens",numTokens);
  numPreComputed=PropertiesUtils.getInt(props,"numPreComputed",numPreComputed);
  evalPerIter=PropertiesUtils.getInt(props,"evalPerIter",evalPerIter);
  String tlpClass=PropertiesUtils.getString(props,"tlp","edu.stanford.nlp.trees.PennTreebankLanguagePack");
  tlp=ReflectionLoading.loadByReflection(tlpClass);
}
