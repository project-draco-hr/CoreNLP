{
  trainingThreads=PropertiesUtils.getInt(props,"trainingThreads",trainingThreads);
  wordCutOff=PropertiesUtils.getInt(props,"wordCutOff",wordCutOff);
  initRange=PropertiesUtils.getDouble(props,"initRange",initRange);
  maxIter=PropertiesUtils.getInt(props,"maxIter",maxIter);
  batchSize=PropertiesUtils.getInt(props,"batchSize",batchSize);
  adaEps=PropertiesUtils.getDouble(props,"adaEps",adaEps);
  adaAlpha=PropertiesUtils.getDouble(props,"adaAlpha",adaAlpha);
  regParameter=PropertiesUtils.getDouble(props,"regParameter",regParameter);
  dropProb=PropertiesUtils.getDouble(props,"dropProb",dropProb);
  hiddenSize=PropertiesUtils.getInt(props,"hiddenSize",hiddenSize);
  embeddingSize=PropertiesUtils.getInt(props,"embeddingSize",embeddingSize);
  numPreComputed=PropertiesUtils.getInt(props,"numPreComputed",numPreComputed);
  evalPerIter=PropertiesUtils.getInt(props,"evalPerIter",evalPerIter);
  clearGradientsPerIter=PropertiesUtils.getInt(props,"clearGradientsPerIter",clearGradientsPerIter);
  saveIntermediate=PropertiesUtils.getBool(props,"saveIntermediate",saveIntermediate);
  sentenceDelimiter=PropertiesUtils.getString(props,"sentenceDelimiter",sentenceDelimiter);
  tagger=PropertiesUtils.getString(props,"tagger.model",tagger);
  String escaperClass=props.getProperty("escaper");
  escaper=escaperClass != null ? ReflectionLoading.loadByReflection(escaperClass) : null;
  language=props.containsKey("language") ? getLanguage(props.getProperty("language")) : language;
  tlp=Languages.getLanguageParams(language).treebankLanguagePack();
}
