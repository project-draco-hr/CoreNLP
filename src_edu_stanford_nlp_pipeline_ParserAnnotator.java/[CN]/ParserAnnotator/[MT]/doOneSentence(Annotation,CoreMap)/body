{
  if (noSquash && sentence.get(TreeCoreAnnotations.TreeAnnotation.class) != null && !"X".equalsIgnoreCase(sentence.get(TreeCoreAnnotations.TreeAnnotation.class).label().value())) {
    return;
  }
  final List<CoreLabel> words=sentence.get(CoreAnnotations.TokensAnnotation.class);
  if (VERBOSE) {
    System.err.println("Parsing: " + words);
  }
  Tree tree=null;
  if (maxSentenceLength <= 0 || words.size() <= maxSentenceLength) {
    try {
      final List<ParserConstraint> constraints=sentence.get(ParserAnnotations.ConstraintAnnotation.class);
      tree=doOneSentence(constraints,words);
    }
 catch (    RuntimeInterruptedException e) {
      if (VERBOSE) {
        System.err.println("Took too long parsing: " + words);
      }
      tree=null;
    }
  }
  if (tree == null) {
    tree=ParserUtils.xTree(words);
    for (    CoreLabel word : words) {
      if (word.tag() == null) {
        word.setTag("X");
      }
    }
  }
  if (treeMap != null) {
    tree=treeMap.apply(tree);
  }
  ParserAnnotatorUtils.fillInParseAnnotations(VERBOSE,BUILD_GRAPHS,gsf,sentence,tree);
  if (saveBinaryTrees) {
    TreeBinarizer binarizer=new TreeBinarizer(parser.getTLPParams().headFinder(),parser.treebankLanguagePack(),false,false,0,false,false,0.0,false,true,true);
    Tree binarized=binarizer.transformTree(tree);
    Trees.convertToCoreLabels(binarized);
    sentence.set(TreeCoreAnnotations.BinarizedTreeAnnotation.class,binarized);
  }
}
