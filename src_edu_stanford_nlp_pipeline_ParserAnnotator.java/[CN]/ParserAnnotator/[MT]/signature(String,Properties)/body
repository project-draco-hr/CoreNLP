{
  StringBuilder os=new StringBuilder();
  os.append(annotatorName + ".model:" + props.getProperty(annotatorName + ".model",LexicalizedParser.DEFAULT_PARSER_LOC));
  os.append(annotatorName + ".debug:" + props.getProperty(annotatorName + ".debug","false"));
  os.append(annotatorName + ".flags:" + props.getProperty(annotatorName + ".flags",""));
  os.append(annotatorName + ".maxlen:" + props.getProperty(annotatorName + ".maxlen","-1"));
  os.append(annotatorName + ".treemap:" + props.getProperty(annotatorName + ".treemap",""));
  os.append(annotatorName + ".maxtime:" + props.getProperty(annotatorName + ".maxtime","-1"));
  os.append(annotatorName + ".originalDependencies:" + props.getProperty(annotatorName + ".originalDependencies","false"));
  os.append(annotatorName + ".buildgraphs:" + props.getProperty(annotatorName + ".buildgraphs","true"));
  os.append(annotatorName + ".nthreads:" + props.getProperty(annotatorName + ".nthreads",props.getProperty("nthreads","")));
  os.append(annotatorName + ".nosquash:" + props.getProperty(annotatorName + ".nosquash","false"));
  os.append(annotatorName + ".keepPunct:" + props.getProperty(annotatorName + ".keepPunct","true"));
  os.append(annotatorName + ".extradependencies:" + props.getProperty(annotatorName + ".extradependences","NONE").toLowerCase());
  boolean usesBinary=StanfordCoreNLP.usesBinaryTrees(props);
  boolean saveBinaryTrees=PropertiesUtils.getBool(props,annotatorName + ".binaryTrees",usesBinary);
  os.append(annotatorName + ".binaryTrees:" + saveBinaryTrees);
  return os.toString();
}
