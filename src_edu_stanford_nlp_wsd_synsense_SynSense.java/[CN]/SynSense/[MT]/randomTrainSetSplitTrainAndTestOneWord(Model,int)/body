{
  String word=words.get(i);
  if (verbose) {
    System.out.println("Testing on word " + word);
  }
  int numPerWordSenseCorrect=0;
  int numPerWordSense=0;
  int numPerWordSubcatCorrect=0;
  int numPerWordSubcat=0;
  List<Instance> trainInstances=new ArrayList<Instance>();
  List<Instance> senseTestInstances=new ArrayList<Instance>();
  List<Instance> subcatTestInstances=new ArrayList<Instance>();
  shuffleDatasets();
  splitData(i,trainInstances,senseTestInstances,subcatTestInstances);
  if (verbose) {
    System.out.println("Training model.");
  }
  model.train(trainInstances);
  List<InstanceMarking> senseGuesses=model.test(senseTestInstances);
  int numSenseCorrect=evaluateSense(senseGuesses,model,false);
  int numSense=senseTestInstances.size();
  numPerWordSenseCorrect+=numSenseCorrect;
  numPerWordSense+=numSense;
  if (verbose) {
    System.out.println("Sense: " + numSenseCorrect + " correct out of "+ numSense+ " = "+ ((double)numSenseCorrect / (double)numSense));
  }
  List<InstanceMarking> subcatGuesses=model.test(subcatTestInstances);
  int numSubcatCorrect=evaluateSubcat(subcatGuesses,false);
  int numSubcat=subcatTestInstances.size();
  numPerWordSubcatCorrect+=numSubcatCorrect;
  numPerWordSubcat+=numSubcat;
  if (verbose) {
    System.out.println("Subcat: " + numSubcatCorrect + " correct out of "+ numSubcat+ " = "+ ((double)numSubcatCorrect / (double)numSubcat));
  }
  totalSenseCorrect+=numPerWordSenseCorrect;
  totalSense+=numPerWordSense;
  totalSubcatCorrect+=numPerWordSubcatCorrect;
  totalSubcat+=numPerWordSubcat;
  return new int[]{numPerWordSenseCorrect,numPerWordSubcatCorrect};
}
