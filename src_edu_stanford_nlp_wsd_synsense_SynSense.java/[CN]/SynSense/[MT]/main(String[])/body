{
  Map argMap=StringUtils.parseCommandLineArguments(args);
  String modelString=(String)argMap.get("-model");
  if (argMap.containsKey("-coarse")) {
    senseGranularity=Integer.parseInt((String)argMap.get("-coarse"));
    readSenseMap("sensemap");
  }
  readInData(argMap);
  shuffleDatasets();
  if (argMap.containsKey("-output")) {
    out=new PrintStream(new FileOutputStream((String)argMap.get("-output")));
    out.print("word,");
    out.print("BASkfSense,BASkfSubcat,BAStSense,BAStSubcat,");
    out.print("JOINTkfSense,JOINTkfSubcat,JOINTtSense,JOINTtSubcat,");
    out.println("numSenseTrain,numSubcatTrain,numSenseTest,numSubcatTest");
    trainAndTestAllWords();
  }
 else {
    if (modelString.equalsIgnoreCase("basic")) {
      System.out.println("training basic model");
      trainAndTestAllWords(argMap.containsKey("-kfold"),new JointModel());
    }
 else     if (modelString.equalsIgnoreCase("joint")) {
      System.out.println("training joint model");
      trainAndTestAllWords(argMap.containsKey("-kfold"),new JointModel());
    }
 else     if (modelString.equalsIgnoreCase("both")) {
      basicWrongAndJointRight=new HashSet<InstanceMarking>();
      basicRightAndJointWrong=new HashSet<InstanceMarking>();
      System.out.println("training basic model");
      trainAndTestAllWords(argMap.containsKey("-kfold"),new BasicModel());
      System.out.println("training joint model");
      trainAndTestAllWords(argMap.containsKey("-kfold"),new JointModel());
      System.out.println("jointRightButBasicWrong:");
      for (Iterator<InstanceMarking> iter=basicWrongAndJointRight.iterator(); iter.hasNext(); ) {
        InstanceMarking instanceMarking=iter.next();
        System.out.println(instanceMarking);
      }
      System.out.println("basicRightButJointWrong:");
      for (Iterator<InstanceMarking> iter=basicRightAndJointWrong.iterator(); iter.hasNext(); ) {
        InstanceMarking instanceMarking=iter.next();
        System.out.println(instanceMarking);
      }
    }
 else {
      printUsageAndExit();
    }
  }
  if (out != null) {
    out.close();
  }
}
