{
  HashSet<String>[] featureIndices=new HashSet[windowSize];
  for (int i=0; i < windowSize; i++) {
    featureIndices[i]=new HashSet<String>();
  }
  boolean labelIndicesExists=false;
  if (labelIndices == null) {
    labelIndices=new HashIndex[windowSize];
    for (int i=0; i < labelIndices.length; i++) {
      labelIndices[i]=new HashIndex<CRFLabel>();
    }
  }
 else {
    System.err.println("TEST: using old labelIndices");
    labelIndicesExists=true;
  }
  Index<CRFLabel> labelIndex=labelIndices[windowSize - 1];
  boolean classIndexExists=false;
  if (classIndex == null) {
    classIndex=new HashIndex<String>();
    classIndex.add(flags.backgroundSymbol);
    for (    List<CoreLabel> doc : wordInfos) {
      for (int j=0; j < doc.size(); j++) {
        String ans=(doc.get(j)).get(AnswerAnnotation.class);
        classIndex.add(ans);
      }
    }
  }
 else {
    System.err.println("Using old ClassIndex, size: " + classIndex.size());
    classIndexExists=true;
  }
  HashSet[] seenBackgroundFeatures=new HashSet[2];
  seenBackgroundFeatures[0]=new HashSet();
  seenBackgroundFeatures[1]=new HashSet();
  for (  List<CoreLabel> doc : wordInfos) {
    if (flags.useReverse) {
      Collections.reverse(doc);
    }
    for (int j=0; j < doc.size(); j++) {
      CRFDatum<List<String>,CRFLabel> d=makeDatum(doc,j,featureFactory);
      labelIndex.add(d.label());
      List<List<String>> features=d.asFeatures();
      for (int k=0; k < features.size(); k++) {
        Collection<String> cliqueFeatures=features.get(k);
        if (k < 2 && flags.removeBackgroundSingletonFeatures) {
          String ans=(doc.get(j)).get(AnswerAnnotation.class);
          boolean background=ans.equals(flags.backgroundSymbol);
          if (k == 1 && j > 0 && background) {
            ans=(doc.get(j - 1)).get(AnswerAnnotation.class);
            background=ans.equals(flags.backgroundSymbol);
          }
          if (background) {
            for (            String f : cliqueFeatures) {
              if (!featureIndices[k].contains(f)) {
                if (seenBackgroundFeatures[k].contains(f)) {
                  seenBackgroundFeatures[k].remove(f);
                  featureIndices[k].add(f);
                }
 else {
                  seenBackgroundFeatures[k].add(f);
                }
              }
            }
          }
 else {
            seenBackgroundFeatures[k].removeAll(cliqueFeatures);
            featureIndices[k].addAll(cliqueFeatures);
          }
        }
 else {
          featureIndices[k].addAll(cliqueFeatures);
        }
      }
    }
    if (flags.useReverse) {
      Collections.reverse(doc);
    }
  }
  int numFeatures=0;
  for (int i=0; i < windowSize; i++) {
    numFeatures+=featureIndices[i].size();
  }
  if (featureIndex == null) {
    featureIndex=new HashIndex<String>();
    map=new int[numFeatures];
    Arrays.fill(map,-1);
  }
 else {
    int oldFeatureSize=featureIndex.size();
    for (int i=0; i < windowSize; i++) {
      for (      String o : featureIndices[i]) {
        if (featureIndex.add(o)) {
          System.err.println("NEW " + o);
        }
 else {
          System.err.println("OLD " + o);
        }
      }
    }
    System.err.println("TEST: numFeatures b4  " + oldFeatureSize);
    numFeatures=featureIndex.size();
    int[] oldMap=map;
    map=new int[numFeatures];
    System.arraycopy(oldMap,0,map,0,oldMap.length);
    for (int i=oldMap.length; i < numFeatures; i++) {
      map[i]=-1;
    }
    System.err.println("TEST: oldMap size     " + oldMap.length);
    System.err.println("TEST: oldIndex size   " + oldFeatureSize);
    System.err.println("TEST: newIndex size   " + featureIndex.size());
  }
  for (int i=0; i < windowSize; i++) {
    featureIndex.addAll(featureIndices[i]);
    Iterator<String> fIter=featureIndices[i].iterator();
    while (fIter.hasNext()) {
      String feature=fIter.next();
      if (map[featureIndex.indexOf(feature)] == -1) {
        map[featureIndex.indexOf(feature)]=i;
      }
    }
  }
  if (!labelIndicesExists) {
    if (flags.useObservedSequencesOnly) {
      for (int i=0; i < labelIndex.size(); i++) {
        CRFLabel label=labelIndex.get(i);
        for (int j=windowSize - 2; j >= 0; j--) {
          label=label.getOneSmallerLabel();
          labelIndices[j].add(label);
        }
      }
    }
 else {
      for (int i=0; i < labelIndices.length; i++) {
        labelIndices[i]=allLabels(i + 1,classIndex);
      }
    }
  }
  if (VERBOSE) {
    for (int i=0; i < featureIndex.size(); i++) {
      System.out.println(i + ": " + featureIndex.get(i));
    }
  }
}
