{
  data.createFeatureIndex(lowerEmpCount,lowerAllCount);
  data.summaryStatistics();
  HashMap<Integer,Pair<Double,Double>> mappedSpecialPriors=new HashMap<Integer,Pair<Double,Double>>();
  if (specialPriors != null) {
    for (    Pair<L,F> next : specialPriors.keySet()) {
      int fIndex=data.getIndex(next);
      System.err.println("index of " + next + " is "+ fIndex);
      if (fIndex > -1) {
        mappedSpecialPriors.put(Integer.valueOf(fIndex),specialPriors.get(next));
      }
    }
  }
  DiffFunction logLik=null;
  if (specialPriors == null) {
    logLik=new LikelihoodPriorObjectiveFunction(data,sigma);
  }
 else {
    logLik=new LikelihoodPriorObjectiveFunction(data,LikelihoodPriorObjectiveFunction.QUADRATIC_PRIOR,sigma,0,mappedSpecialPriors);
  }
  double[] initial=new double[data.domainDimension()];
  double[] parameters=minimizer.minimize(logLik,TOL,initial);
  ClassicCounter<Pair<L,F>> weights=new ClassicCounter<Pair<L,F>>();
  for (int ind=0; ind < parameters.length; ind++) {
    weights.incrementCount(data.getFeature(ind),parameters[ind]);
  }
  return new LinearType2Classifier<L,Pair<L,F>>(weights);
}
