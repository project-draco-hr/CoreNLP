{
  if (flags.useObservedFeaturesOnly) {
    boolean[] seen=observedFeatures(trainingData);
    keepFeatures(trainingData,seen);
  }
  if (flags.featureCountThreshold > 0) {
    boolean[] keepers=featuresWithCountsGreaterThan(trainingData,flags.featureCountThreshold);
    keepFeatures(trainingData,keepers);
  }
  if (testingData != null) {
    boolean[] seenFeat=seenFeatureOnly(trainingData.metaInfo(),testingData.metaInfo());
    keepFeatures(trainingData,seenFeat);
  }
  if (flags.randomizedRatio < 1.0) {
    boolean[] randomized=randomizedFeatures(trainingData,flags.randomizedRatio);
    System.err.println("Selecting each feature with prob=" + flags.randomizedRatio + "....");
    keepFeatures(trainingData,randomized);
  }
  metaInfo=trainingData.metaInfo();
  if (flags.saveFeatureIndexToDisk) {
    metaInfo.writeToDisk();
  }
  LogPrior.LogPriorType type=LogPrior.getType(flags.priorType);
  LogPrior prior=new LogPrior(type,flags.sigma,flags.epsilon);
  ObjectiveFunctionInterface func=null;
  if (adapt) {
    System.err.println("(DEBUG): adapt");
    int length=trainingData.metaInfo().numFeatures();
    double[] newWeights=new double[length];
    Arrays.fill(newWeights,0);
    System.arraycopy(weights,0,newWeights,0,weights.length);
    System.err.println("(DEBUG): old weights.length=" + weights.length + ", new="+ newWeights.length);
    prior=LogPrior.getAdaptationPrior(newWeights,prior);
  }
 else {
    System.err.println("(DEBUG): NOT adapt");
  }
  func=provider.getObjectiveFunction(trainingData);
  func.setPrior(prior);
  Minimizer minimizer;
  if (flags.useQN) {
    minimizer=new QNMinimizer(flags.QNsize,flags.useRobustQN);
  }
 else   if (flags.useInPlaceSGD) {
    StochasticInPlaceMinimizer sgdMinimizer=new StochasticInPlaceMinimizer(flags.sigma,flags.SGDPasses,flags.tuneSampleSize);
    if (flags.useSGDtoQN) {
      QNMinimizer qnMinimizer=new QNMinimizer(flags.QNsize,flags.useRobustQN);
      minimizer=new HybridMinimizer(sgdMinimizer,qnMinimizer,flags.SGDPasses);
    }
 else {
      minimizer=sgdMinimizer;
    }
  }
 else   if (flags.useSGD) {
    if (flags.tuneSGD) {
      StochasticMinimizer sgd=new SGDMinimizer(flags.gainSGD,flags.stochasticBatchSize,flags.SGDPasses);
      Pair<Integer,Double> ret=sgd.tune(func,func.initial(),5 * 60 * 1000);
      flags.stochasticBatchSize=ret.first();
      flags.gainSGD=ret.second();
      sgd=null;
    }
    minimizer=new SGDMinimizer(flags.gainSGD,flags.stochasticBatchSize,flags.SGDPasses,flags.outputIterationsToFile);
  }
 else   if (flags.useSMD) {
    if (flags.tuneSGD) {
      StochasticMinimizer smd=new SMDMinimizer(flags.gainSGD,flags.stochasticBatchSize,StochasticCalculateMethods.GradientOnly,flags.SGDPasses);
      Pair<Integer,Double> ret=smd.tune(func,func.initial(),5 * 60 * 1000);
      flags.stochasticBatchSize=ret.first();
      flags.gainSGD=ret.second();
      smd=null;
    }
    minimizer=new SMDMinimizer(flags.gainSGD,flags.stochasticBatchSize,flags.stochasticMethod,flags.SGDPasses,flags.outputIterationsToFile);
  }
 else   if (flags.useScaledSGD) {
    if (flags.tuneSGD) {
      StochasticMinimizer scaled=new ScaledSGDMinimizer(flags.gainSGD,flags.stochasticBatchSize,flags.SGDPasses,flags.scaledSGDMethod);
      Pair<Integer,Double> ret=scaled.tune(func,func.initial(),5 * 60 * 1000);
      flags.stochasticBatchSize=ret.first();
      flags.gainSGD=ret.second();
      scaled=null;
    }
    minimizer=new ScaledSGDMinimizer(flags.gainSGD,flags.stochasticBatchSize,flags.SGDPasses,flags.scaledSGDMethod,flags.outputIterationsToFile);
  }
 else   if (flags.useSGDtoQN) {
    minimizer=new SGDToQNMinimizer(flags.gainSGD,flags.stochasticBatchSize,flags.SGDPasses,flags.QNPasses,1,flags.QNsize);
  }
 else   if (flags.useStochasticQN) {
    minimizer=new SQNMinimizer(flags.QNsize,0.9,flags.stochasticBatchSize,flags.outputIterationsToFile);
  }
 else {
    minimizer=new CGMinimizer();
  }
  Evaluator[] evaluators=null;
  if (flags.evaluateIters > 0) {
    List<Evaluator> evaluatorList=new ArrayList<Evaluator>();
    evaluatorList.add(new MemoryEvaluator());
    if (flags.evaluateTrain) {
      SequenceClassifierEvaluator evaluator=new SequenceClassifierEvaluator("Train set",this);
      evaluator.setTestData(trainingData);
      evaluator.setEvalCmd(flags.evalCmd);
      evaluatorList.add(evaluator);
    }
    if (testingData != null) {
      SequenceClassifierEvaluator evaluator=new SequenceClassifierEvaluator("Test set",this);
      evaluator.setTestData(testingData);
      evaluator.setEvalCmd(flags.evalCmd);
      evaluatorList.add(evaluator);
    }
    evaluators=new Evaluator[evaluatorList.size()];
    evaluatorList.toArray(evaluators);
  }
  if (minimizer instanceof HasEvaluators) {
    ((HasEvaluators)minimizer).setEvaluators(flags.evaluateIters,evaluators);
  }
  if (!true) {
    ((FeatureFactoryWrapper)(metaInfo.featureFactory)).clearSubstrings();
  }
  weights=minimizer.minimize(func,flags.tolerance,func.initial(),flags.maxIterations);
  if (!true) {
    minimizer=null;
    for (    CliqueDataset ds : trainingData.datasets) {
      ds.features=null;
      ds.labels=null;
      ds.possibleLabels=null;
      ds.maxCliqueLabels=null;
    }
  }
  if (flags.saveFeatureIndexToDisk) {
    metaInfo.readFromDisk();
  }
  if (flags.featureWeightThreshold > 0.0) {
    boolean[] keepers=featuresWithWeightsGreaterThan(trainingData,flags.featureWeightThreshold);
    keepFeatures(trainingData,keepers);
    if (flags.saveFeatureIndexToDisk) {
      metaInfo.writeToDisk();
    }
    func=provider.getObjectiveFunction(trainingData);
    func.setPrior(prior);
    if (minimizer instanceof QNMinimizer) {
      ((QNMinimizer)minimizer).setM(flags.QNsize2);
    }
    weights=minimizer.minimize(func,flags.tolerance,func.initial(),flags.maxIterations);
    if (flags.saveFeatureIndexToDisk) {
      metaInfo.readFromDisk();
    }
  }
  if (flags.removeTopN > 0) {
    for (int i=0; i < flags.numTimesRemoveTopN; i++) {
      boolean[] keepers=removeTopNWeights(trainingData,flags.removeTopN);
      keepFeatures(trainingData,keepers);
      if (flags.saveFeatureIndexToDisk) {
        metaInfo.writeToDisk();
      }
      func=provider.getObjectiveFunction(trainingData);
      func.setPrior(prior);
      weights=minimizer.minimize(func,flags.tolerance,func.initial(),flags.maxIterations);
      if (flags.saveFeatureIndexToDisk) {
        metaInfo.readFromDisk();
      }
    }
  }
  if (flags.removeTopNPercent > 0) {
    boolean[] keepers=removeTopNPercentWeights(trainingData,flags.removeTopNPercent);
    keepFeatures(trainingData,keepers);
    if (flags.saveFeatureIndexToDisk) {
      metaInfo.writeToDisk();
    }
    func=provider.getObjectiveFunction(trainingData);
    func.setPrior(prior);
    weights=minimizer.minimize(func,flags.tolerance,func.initial(),flags.maxIterations);
    if (flags.saveFeatureIndexToDisk) {
      metaInfo.readFromDisk();
    }
  }
}
