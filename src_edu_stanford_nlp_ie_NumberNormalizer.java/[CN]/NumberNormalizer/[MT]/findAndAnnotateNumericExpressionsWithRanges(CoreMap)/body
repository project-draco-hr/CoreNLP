{
  Integer startTokenOffset=annotation.get(CoreAnnotations.TokenBeginAnnotation.class);
  if (startTokenOffset == null) {
    startTokenOffset=0;
  }
  List<CoreMap> mergedNumbers=NumberNormalizer.findAndMergeNumbers(annotation);
  annotation.set(CoreAnnotations.NumerizedTokensAnnotation.class,mergedNumbers);
  List<CoreMap> numberRanges=NumberNormalizer.findNumberRanges(annotation);
  final Integer startTokenOffsetFinal=startTokenOffset;
  List<CoreMap> mergedNumbersWithRanges=CollectionUtils.mergeListWithSortedMatchedPreAggregated(annotation.get(CoreAnnotations.NumerizedTokensAnnotation.class),numberRanges,new Function<CoreMap,Interval<Integer>>(){
    public Interval<Integer> apply(    CoreMap in){
      return Interval.toInterval(in.get(CoreAnnotations.TokenBeginAnnotation.class) - startTokenOffsetFinal,in.get(CoreAnnotations.TokenEndAnnotation.class) - startTokenOffsetFinal);
    }
  }
);
  annotation.set(CoreAnnotations.NumerizedTokensAnnotation.class,mergedNumbersWithRanges);
  return mergedNumbersWithRanges;
}
