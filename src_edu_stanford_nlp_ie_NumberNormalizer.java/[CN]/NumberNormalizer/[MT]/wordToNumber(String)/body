{
  if (str.trim().equals("")) {
    return null;
  }
  boolean neg=false;
  String originalString=str;
  str=str.trim();
  str=str.toLowerCase();
  if (str.startsWith("-")) {
    neg=true;
  }
  str=str.replaceAll("\\band\\b"," ");
  str=str.replaceAll("-"," ");
  str=str.replaceAll("(\\d),(\\d)","$1$2");
  str=str.replaceAll(","," ");
  str=str.trim();
  if (str.startsWith("a ")) {
    str=str.replace("a","one");
  }
  if (str.endsWith("sands")) {
    str=str.substring(0,str.length() - 1);
  }
 else   if (str.endsWith("ions")) {
    str=str.substring(0,str.length() - 1);
  }
  String[] fields=wsPattern.split(str);
  Number[] numFields=new Number[fields.length];
  int numWords=fields.length;
  for (int curIndex=0; curIndex < numWords; curIndex++) {
    String curPart=fields[curIndex];
    Matcher m=alphaPattern.matcher(curPart);
    if (m.find()) {
      Number curNum;
      if (word2NumMap.containsKey(curPart)) {
        curNum=word2NumMap.get(curPart);
      }
 else       if (ordWord2NumMap.containsKey(curPart)) {
        if (curIndex == numWords - 1) {
          curNum=ordWord2NumMap.get(curPart);
        }
 else {
          throw new NumberFormatException("Error in wordToNumber function.");
        }
      }
 else       if (curIndex > 0 && (curPart.endsWith("ths") || curPart.endsWith("rds"))) {
        curNum=ordWord2NumMap.get(curPart.substring(0,curPart.length() - 1));
        if (curNum != null) {
          curNum=1 / curNum.doubleValue();
        }
 else {
          throw new NumberFormatException("Bad number put into wordToNumber.  Word is: \"" + curPart + "\", originally part of \""+ originalString+ "\", piece # "+ curIndex);
        }
      }
 else       if (Character.isDigit(curPart.charAt(0))) {
        if (curPart.endsWith("th") || curPart.endsWith("rd") || curPart.endsWith("nd")|| curPart.endsWith("st")) {
          curPart=curPart.substring(0,curPart.length() - 2);
        }
        if (digitsPattern.matcher(curPart).matches()) {
          curNum=Long.parseLong(curPart);
        }
 else {
          throw new NumberFormatException("Bad number put into wordToNumber.  Word is: \"" + curPart + "\", originally part of \""+ originalString+ "\", piece # "+ curIndex);
        }
      }
 else {
        throw new NumberFormatException("Bad number put into wordToNumber.  Word is: \"" + curPart + "\", originally part of \""+ originalString+ "\", piece # "+ curIndex);
      }
      numFields[curIndex]=curNum;
    }
 else {
      if (digitsPattern.matcher(curPart).matches()) {
        numFields[curIndex]=Long.parseLong(curPart);
      }
 else       if (numPattern.matcher(curPart).matches()) {
        numFields[curIndex]=new BigDecimal(curPart);
      }
 else {
        throw new NumberFormatException("Bad number put into wordToNumber.  Word is: \"" + curPart + "\", originally part of \""+ originalString+ "\", piece # "+ curIndex);
      }
    }
  }
  Number n=wordToNumberRecurse(numFields);
  return (neg) ? -n.doubleValue() : n;
}
