{
  CoreMap annotation=new ArrayCoreMap(annotationRaw);
  List<CoreMap> numbers=NumberNormalizer.findNumbers(annotation);
  CoreMapAggregator numberAggregator=CoreMapAggregator.getAggregator(CoreMapAttributeAggregator.DEFAULT_NUMERIC_AGGREGATORS,CoreAnnotations.TokensAnnotation.class);
  Integer startTokenOffset=annotation.get(CoreAnnotations.TokenBeginAnnotation.class);
  if (startTokenOffset == null) {
    startTokenOffset=0;
  }
  int i=0;
  List<Integer> savedTokenBegins=new LinkedList<Integer>();
  List<Integer> savedTokenEnds=new LinkedList<Integer>();
  for (  CoreMap c : annotation.get(CoreAnnotations.TokensAnnotation.class)) {
    if ((i == 0 && c.get(CoreAnnotations.TokenBeginAnnotation.class) != null) || (i > 0 && !savedTokenBegins.isEmpty())) {
      savedTokenBegins.add(c.get(CoreAnnotations.TokenBeginAnnotation.class));
    }
    c.set(CoreAnnotations.TokenBeginAnnotation.class,i + startTokenOffset);
    i++;
    if ((i == 1 && c.get(CoreAnnotations.TokenEndAnnotation.class) != null) || (i > 1 && !savedTokenEnds.isEmpty())) {
      savedTokenEnds.add(c.get(CoreAnnotations.TokenEndAnnotation.class));
    }
    c.set(CoreAnnotations.TokenEndAnnotation.class,i + startTokenOffset);
  }
  final Integer startTokenOffsetFinal=startTokenOffset;
  List<CoreMap> mergedNumbers=numberAggregator.merge(annotation.get(CoreAnnotations.TokensAnnotation.class),numbers,new Function<CoreMap,Interval<Integer>>(){
    public Interval<Integer> apply(    CoreMap in){
      return Interval.toInterval(in.get(CoreAnnotations.TokenBeginAnnotation.class) - startTokenOffsetFinal,in.get(CoreAnnotations.TokenEndAnnotation.class) - startTokenOffsetFinal);
    }
  }
);
  if (!savedTokenBegins.isEmpty() && !savedTokenEnds.isEmpty()) {
    for (    CoreMap c : mergedNumbers) {
      int newBegin=c.get(CoreAnnotations.TokenBeginAnnotation.class) - startTokenOffset;
      int newEnd=c.get(CoreAnnotations.TokenEndAnnotation.class) - startTokenOffset;
      c.set(CoreAnnotations.TokenBeginAnnotation.class,savedTokenBegins.get(newBegin));
      c.set(CoreAnnotations.TokenEndAnnotation.class,savedTokenEnds.get(newEnd - 1));
    }
  }
  return mergedNumbers;
}
