{
  System.out.println("Train File: " + trainFile);
  System.out.println("Dev File: " + devFile);
  System.out.println("Model File: " + modelFile);
  System.out.println("Embedding File: " + embedFile);
  List<CoreMap> trainSents=new ArrayList<>();
  List<DependencyTree> trainTrees=new ArrayList<DependencyTree>();
  Util.loadConllFile(trainFile,trainSents,trainTrees);
  Util.printTreeStats("Train",trainTrees);
  List<CoreMap> devSents=new ArrayList<CoreMap>();
  List<DependencyTree> devTrees=new ArrayList<DependencyTree>();
  if (devFile != null) {
    Util.loadConllFile(devFile,devSents,devTrees);
    Util.printTreeStats("Dev",devTrees);
  }
  genDictionaries(trainSents,trainTrees);
  List<String> lDict=new ArrayList<String>(labelDict);
  lDict.remove(0);
  system=new ArcStandard(lDict);
  double[][] E=new double[wordDict.size() + posDict.size() + labelDict.size()][Config.embeddingSize];
  double[][] W1=new double[Config.hiddenSize][Config.embeddingSize * Config.numTokens];
  double[] b1=new double[Config.hiddenSize];
  double[][] W2=new double[labelDict.size() * 2 - 1][Config.hiddenSize];
  Random random=new Random();
  for (int i=0; i < W1.length; ++i)   for (int j=0; j < W1[i].length; ++j)   W1[i][j]=random.nextDouble() * 2 * Config.initRange - Config.initRange;
  for (int i=0; i < b1.length; ++i)   b1[i]=random.nextDouble() * 2 * Config.initRange - Config.initRange;
  for (int i=0; i < W2.length; ++i)   for (int j=0; j < W2[i].length; ++j)   W2[i][j]=random.nextDouble() * 2 * Config.initRange - Config.initRange;
  readEmbedFile(embedFile);
  int foundEmbed=0;
  for (int i=0; i < E.length; ++i) {
    int index=-1;
    if (i < wordDict.size()) {
      String str=wordDict.get(i);
      if (embedID.containsKey(str))       index=embedID.get(str);
 else       if (embedID.containsKey(str.toLowerCase()))       index=embedID.get(str.toLowerCase());
    }
    if (index >= 0) {
      ++foundEmbed;
      for (int j=0; j < E[i].length; ++j)       E[i][j]=embeddings[index][j];
    }
 else {
      for (int j=0; j < E[i].length; ++j)       E[i][j]=random.nextDouble() * Config.initRange * 2 - Config.initRange;
    }
  }
  System.out.println("Found embeddings: " + foundEmbed + " / "+ wordDict.size());
  genTrainExamples(trainSents,trainTrees);
  classifier=new Classifier(trainSet,E,W1,b1,W2,preComputed);
  long startTime=System.currentTimeMillis();
  for (int iter=0; iter < Config.maxIter; ++iter) {
    System.out.println("##### Iteration " + iter);
    Classifier.Cost cost=classifier.computeCostFunction(Config.batchSize,Config.regParameter,Config.dropProb);
    System.out.println("Cost = " + cost.getCost() + ", Correct(%) = "+ 0);
    classifier.takeAdaGradientStep(cost,Config.adaAlpha,Config.adaEps);
    System.out.println("Elapsed Time: " + (System.currentTimeMillis() - startTime) / 1000.0 + " (s)");
    if (devFile != null && iter % Config.evalPerIter == 0)     System.out.println("UAS: " + system.getUASScore(devSents,predict(devSents),devTrees));
  }
  writeModelFile(modelFile);
}
