{
  if (!silent)   System.out.println("Prediction..");
  int numTrans=system.transitions.size();
  long startTime=System.currentTimeMillis();
  List<DependencyTree> trees=new ArrayList<DependencyTree>();
  for (int i=0; i < sents.size(); ++i) {
    if (!silent && i % 100 == 0)     System.out.println("DATA " + i);
    Configuration c=system.initialConfiguration(sents.get(i));
    for (int k=0; k < sents.get(i).n * 2; ++k) {
      double[] scores=classifier.computeScores(getFeatures(c));
      double optScore=Double.NEGATIVE_INFINITY;
      String optTrans=null;
      for (int j=0; j < numTrans; ++j)       if (scores[j] > optScore)       if (system.canApply(c,system.transitions.get(j))) {
        optScore=scores[j];
        optTrans=system.transitions.get(j);
      }
      system.apply(c,optTrans);
    }
    trees.add(c.tree);
  }
  if (!silent)   System.out.println("Elapsed Time: " + (System.currentTimeMillis() - startTime) / 1000.0 + " (s)");
  return trees;
}
