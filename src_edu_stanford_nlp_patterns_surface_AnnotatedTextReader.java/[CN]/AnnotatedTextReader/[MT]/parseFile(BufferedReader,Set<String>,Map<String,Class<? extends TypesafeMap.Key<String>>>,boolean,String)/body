{
  Pattern startingLabelToken=Pattern.compile("<(" + StringUtils.join(categoriesAllowed,"|") + ")>");
  Pattern endLabelToken=Pattern.compile("</(" + StringUtils.join(categoriesAllowed,"|") + ")>");
  String backgroundSymbol="O";
  List<CoreMap> sentences=new ArrayList<>();
  int lineNum=-1;
  String l=null;
  while ((l=reader.readLine()) != null) {
    lineNum++;
    String[] t=l.split("\t",2);
    String id=null;
    String text=null;
    if (t.length == 2) {
      id=t[0];
      text=t[1];
    }
 else     if (t.length == 1) {
      text=t[0];
      id=String.valueOf(lineNum);
    }
    id=sentIDprefix + id;
    DocumentPreprocessor dp=new DocumentPreprocessor(new StringReader(text));
    PTBTokenizerFactory<CoreLabel> tokenizerFactory=PTBTokenizerFactory.newCoreLabelTokenizerFactory("ptb3Escaping=false,normalizeParentheses=false,escapeForwardSlashAsterisk=false");
    dp.setTokenizerFactory(tokenizerFactory);
    String label=backgroundSymbol;
    int sentNum=-1;
    for (    List<HasWord> sentence : dp) {
      sentNum++;
      String sentStr="";
      List<CoreLabel> sent=new ArrayList<>();
      for (      HasWord tokw : sentence) {
        String tok=tokw.word();
        Matcher startingMatcher=startingLabelToken.matcher(tok);
        Matcher endMatcher=endLabelToken.matcher(tok);
        if (startingMatcher.matches()) {
          label=startingMatcher.group(1);
        }
 else         if (endMatcher.matches()) {
          label=backgroundSymbol;
        }
 else {
          CoreLabel c=new CoreLabel();
          List<String> toks=new ArrayList<>();
          toks.add(tok);
          for (          String toksplit : toks) {
            sentStr+=" " + toksplit;
            c.setWord(toksplit);
            c.setLemma(toksplit);
            c.setValue(toksplit);
            c.set(CoreAnnotations.TextAnnotation.class,toksplit);
            c.set(CoreAnnotations.OriginalTextAnnotation.class,tok);
            if (setGoldClass) {
              c.set(CoreAnnotations.GoldAnswerAnnotation.class,label);
            }
            if (setClassForTheseLabels != null && setClassForTheseLabels.containsKey(label))             c.set(setClassForTheseLabels.get(label),label);
            sent.add(c);
          }
        }
      }
      CoreMap sentcm=new ArrayCoreMap();
      sentcm.set(CoreAnnotations.TextAnnotation.class,sentStr.trim());
      sentcm.set(CoreAnnotations.TokensAnnotation.class,sent);
      sentcm.set(CoreAnnotations.DocIDAnnotation.class,id + "-" + sentNum);
      sentences.add(sentcm);
    }
  }
  return sentences;
}
