{
  SimpleMatrix nodeVector=null;
  SimpleMatrix classification=null;
  if (tree.isLeaf()) {
    throw new AssertionError("We should not have reached leaves in forwardPropagate");
  }
 else   if (tree.isPreTerminal()) {
    classification=model.getUnaryClassification(tree.label().value());
    String word=tree.children()[0].label().value();
    SimpleMatrix wordVector=model.getWordVector(word);
    nodeVector=Utils.elementwiseApplyTanh(wordVector);
  }
 else   if (tree.children().length == 1) {
    throw new AssertionError("Non-preterminal nodes of size 1 should have already been collapsed");
  }
 else   if (tree.children().length == 2) {
    forwardPropagateTree(tree.children()[0]);
    forwardPropagateTree(tree.children()[1]);
    String leftCategory=tree.children()[0].label().value();
    String rightCategory=tree.children()[1].label().value();
    SimpleMatrix W=model.getBinaryTransform(leftCategory,rightCategory);
    classification=model.getBinaryClassification(leftCategory,rightCategory);
    SimpleMatrix leftVector=RNNCoreAnnotations.getNodeVector(tree.children()[0]);
    SimpleMatrix rightVector=RNNCoreAnnotations.getNodeVector(tree.children()[1]);
    SimpleMatrix childrenVector=Utils.concatenateWithBias(leftVector,rightVector);
    if (model.op.useTensors) {
      SimpleTensor tensor=model.getBinaryTensor(leftCategory,rightCategory);
      SimpleMatrix tensorIn=Utils.concatenate(leftVector,rightVector);
      SimpleMatrix tensorOut=tensor.bilinearProducts(tensorIn);
      nodeVector=Utils.elementwiseApplyTanh(W.mult(childrenVector).plus(tensorOut));
    }
 else {
      nodeVector=Utils.elementwiseApplyTanh(W.mult(childrenVector));
    }
  }
 else {
    throw new AssertionError("Tree not correctly binarized");
  }
  SimpleMatrix predictions=Utils.softmax(classification.mult(Utils.concatenateWithBias(nodeVector)));
  int index=getPredictedClass(predictions);
  if (!(tree.label() instanceof CoreLabel)) {
    throw new AssertionError("Expected CoreLabels in the nodes");
  }
  CoreLabel label=(CoreLabel)tree.label();
  label.set(RNNCoreAnnotations.Predictions.class,predictions);
  label.set(RNNCoreAnnotations.PredictedClass.class,index);
  label.set(RNNCoreAnnotations.NodeVector.class,nodeVector);
}
