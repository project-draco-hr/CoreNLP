{
  if (tree.isLeaf()) {
    return;
  }
  SimpleMatrix currentVector=RNNCoreAnnotations.getNodeVector(tree);
  String category=tree.label().value();
  category=model.basicCategory(category);
  SimpleMatrix goldLabel=new SimpleMatrix(model.numClasses,1);
  int goldClass=RNNCoreAnnotations.getGoldClass(tree);
  goldLabel.set(goldClass,1.0);
  double nodeWeight=model.op.trainOptions.getClassWeight(goldClass);
  SimpleMatrix predictions=RNNCoreAnnotations.getPredictions(tree);
  SimpleMatrix deltaClass=predictions.minus(goldLabel).scale(nodeWeight);
  SimpleMatrix localCD=deltaClass.mult(RNNUtils.concatenateWithBias(currentVector).transpose());
  double error=-(RNNUtils.elementwiseApplyLog(predictions).elementMult(goldLabel).elementSum());
  error=error * nodeWeight;
  RNNCoreAnnotations.setPredictionError(tree,error);
  if (tree.isPreTerminal()) {
    unaryCD.put(category,unaryCD.get(category).plus(localCD));
    String word=tree.children()[0].label().value();
    word=model.getVocabWord(word);
    SimpleMatrix currentVectorDerivative=RNNUtils.elementwiseApplyTanhDerivative(currentVector);
    SimpleMatrix deltaFromClass=model.getUnaryClassification(category).transpose().mult(deltaClass);
    deltaFromClass=deltaFromClass.extractMatrix(0,model.op.numHid,0,1).elementMult(currentVectorDerivative);
    SimpleMatrix deltaFull=deltaFromClass.plus(deltaUp);
    wordVectorD.put(word,wordVectorD.get(word).plus(deltaFull));
  }
 else {
    String leftCategory=model.basicCategory(tree.children()[0].label().value());
    String rightCategory=model.basicCategory(tree.children()[1].label().value());
    if (model.op.combineClassification) {
      unaryCD.put("",unaryCD.get("").plus(localCD));
    }
 else {
      binaryCD.put(leftCategory,rightCategory,binaryCD.get(leftCategory,rightCategory).plus(localCD));
    }
    SimpleMatrix currentVectorDerivative=RNNUtils.elementwiseApplyTanhDerivative(currentVector);
    SimpleMatrix deltaFromClass=model.getBinaryClassification(leftCategory,rightCategory).transpose().mult(deltaClass);
    deltaFromClass=deltaFromClass.extractMatrix(0,model.op.numHid,0,1).elementMult(currentVectorDerivative);
    SimpleMatrix deltaFull=deltaFromClass.plus(deltaUp);
    SimpleMatrix leftVector=RNNCoreAnnotations.getNodeVector(tree.children()[0]);
    SimpleMatrix rightVector=RNNCoreAnnotations.getNodeVector(tree.children()[1]);
    SimpleMatrix childrenVector=RNNUtils.concatenateWithBias(leftVector,rightVector);
    SimpleMatrix W_df=deltaFull.mult(childrenVector.transpose());
    binaryTD.put(leftCategory,rightCategory,binaryTD.get(leftCategory,rightCategory).plus(W_df));
    SimpleMatrix deltaDown;
    if (model.op.useTensors) {
      SimpleTensor Wt_df=getTensorGradient(deltaFull,leftVector,rightVector);
      binaryTensorTD.put(leftCategory,rightCategory,binaryTensorTD.get(leftCategory,rightCategory).plus(Wt_df));
      deltaDown=computeTensorDeltaDown(deltaFull,leftVector,rightVector,model.getBinaryTransform(leftCategory,rightCategory),model.getBinaryTensor(leftCategory,rightCategory));
    }
 else {
      deltaDown=model.getBinaryTransform(leftCategory,rightCategory).transpose().mult(deltaFull);
    }
    SimpleMatrix leftDerivative=RNNUtils.elementwiseApplyTanhDerivative(leftVector);
    SimpleMatrix rightDerivative=RNNUtils.elementwiseApplyTanhDerivative(rightVector);
    SimpleMatrix leftDeltaDown=deltaDown.extractMatrix(0,deltaFull.numRows(),0,1);
    SimpleMatrix rightDeltaDown=deltaDown.extractMatrix(deltaFull.numRows(),deltaFull.numRows() * 2,0,1);
    backpropDerivativesAndError(tree.children()[0],binaryTD,binaryCD,binaryTensorTD,unaryCD,wordVectorD,leftDerivative.elementMult(leftDeltaDown));
    backpropDerivativesAndError(tree.children()[1],binaryTD,binaryCD,binaryTensorTD,unaryCD,wordVectorD,rightDerivative.elementMult(rightDeltaDown));
  }
}
