{
  Class tokensAnnotationKey=extractFunc.tokensAnnotationField;
  if (chunkOffsets != null) {
    annotation=ChunkAnnotationUtils.getMergedChunk((List<? extends CoreMap>)sourceAnnotation.get(tokensAnnotationKey),chunkOffsets.getBegin(),chunkOffsets.getEnd(),aggregators);
    if (sourceAnnotation.containsKey(CoreAnnotations.TextAnnotation.class)) {
      ChunkAnnotationUtils.annotateChunkText(annotation,sourceAnnotation);
    }
    if (tokenOffsets != null) {
      if (annotation.get(CoreAnnotations.TokenBeginAnnotation.class) == null) {
        annotation.set(CoreAnnotations.TokenBeginAnnotation.class,tokenOffsets.getBegin());
      }
      if (annotation.get(CoreAnnotations.TokenEndAnnotation.class) == null) {
        annotation.set(CoreAnnotations.TokenEndAnnotation.class,tokenOffsets.getEnd());
      }
    }
    charOffsets=Interval.toInterval(annotation.get(CoreAnnotations.CharacterOffsetBeginAnnotation.class),annotation.get(CoreAnnotations.CharacterOffsetEndAnnotation.class));
    tokenOffsets=Interval.toInterval(annotation.get(CoreAnnotations.TokenBeginAnnotation.class),annotation.get(CoreAnnotations.TokenEndAnnotation.class),Interval.INTERVAL_OPEN_END);
  }
 else {
    Integer baseCharOffset=sourceAnnotation.get(CoreAnnotations.CharacterOffsetBeginAnnotation.class);
    if (baseCharOffset == null) {
      baseCharOffset=0;
    }
    chunkOffsets=ChunkAnnotationUtils.getChunkOffsetsUsingCharOffsets((List<? extends CoreMap>)sourceAnnotation.get(tokensAnnotationKey),charOffsets.getBegin() + baseCharOffset,charOffsets.getEnd() + baseCharOffset);
    CoreMap annotation2=ChunkAnnotationUtils.getMergedChunk((List<? extends CoreMap>)sourceAnnotation.get(tokensAnnotationKey),chunkOffsets.getBegin(),chunkOffsets.getEnd(),aggregators);
    annotation=ChunkAnnotationUtils.getAnnotatedChunkUsingCharOffsets(sourceAnnotation,charOffsets.getBegin(),charOffsets.getEnd());
    tokenOffsets=Interval.toInterval(annotation.get(CoreAnnotations.TokenBeginAnnotation.class),annotation.get(CoreAnnotations.TokenEndAnnotation.class),Interval.INTERVAL_OPEN_END);
    annotation.set(tokensAnnotationKey,annotation2.get(tokensAnnotationKey));
  }
  text=annotation.get(CoreAnnotations.TextAnnotation.class);
  extractFunc.annotate(this,(List<? extends CoreMap>)annotation.get(tokensAnnotationKey));
  return true;
}
