{
  double[][] alphaTarget=new double[numStates][2];
  double[][] alphaNonTarget=new double[numStates][2];
  int prev=0, cur=1;
  System.err.println("computeTargetScore: " + targetRange.extractRange(doc));
  java.text.DecimalFormat df=new java.text.DecimalFormat("0.00E000");
  for (int i=0; i < numStates; i++) {
    if (states[i].type == targetType) {
      alphaTarget[i][prev]=alpha[i][targetRange.getFrom() + 1];
    }
 else {
      alphaNonTarget[i][prev]=alpha[i][targetRange.getFrom() + 1];
    }
  }
  for (int i=0; i < numStates; i++) {
    System.err.print(df.format(alphaTarget[i][prev]) + " ");
  }
  System.err.print("|| ");
  for (int i=0; i < numStates; i++) {
    System.err.print(df.format(alphaNonTarget[i][prev]) + " ");
  }
  System.err.println();
  for (int t=targetRange.getFrom() + 1; t < targetRange.getTo(); t++) {
    TypedTaggedWord ttw=(TypedTaggedWord)doc.get(t);
    for (int j=0; j < states.length; j++) {
      double targetSum=0.0;
      double nonTargetSum=0.0;
      for (int i=0; i < states.length; i++) {
        if (states[i].type == targetType) {
          targetSum+=alphaTarget[i][prev] * states[i].transition[j];
        }
 else {
          nonTargetSum+=alphaNonTarget[i][prev] * states[i].transition[j];
        }
      }
      if (states[j].emit != null) {
        if (states[j].type == targetType) {
          alphaTarget[j][cur]=targetSum * states[j].emit.get(ttw.word());
        }
 else {
          alphaNonTarget[j][cur]=nonTargetSum * states[j].emit.get(ttw.word());
        }
      }
    }
    for (int i=0; i < numStates; i++) {
      System.err.print(df.format(alphaTarget[i][cur]) + " ");
    }
    System.err.print("|| ");
    for (int i=0; i < numStates; i++) {
      System.err.print(df.format(alphaNonTarget[i][cur]) + " ");
    }
    System.err.println();
    cur^=1;
    prev^=1;
  }
  for (int i=0; i < numStates; i++) {
    System.err.println("beta[" + i + "] = "+ beta[i][targetRange.getTo() + 1]);
    if (states[i].type == targetType) {
      alphaTarget[i][cur]=alphaTarget[i][prev] * beta[i][targetRange.getTo() + 1];
    }
 else {
      alphaNonTarget[i][cur]=alphaNonTarget[i][prev] * beta[i][targetRange.getTo() + 1];
    }
  }
  for (int i=0; i < numStates; i++) {
    System.err.print(df.format(alphaTarget[i][cur]) + " ");
  }
  System.err.print("|| ");
  for (int i=0; i < numStates; i++) {
    System.err.print(df.format(alphaNonTarget[i][cur]) + " ");
  }
  System.err.println();
  double totalTargetProb=0.0;
  double totalNonTargetProb=0.0;
  for (int i=0; i < numStates; i++) {
    totalTargetProb+=alphaTarget[i][cur];
    totalNonTargetProb+=alphaNonTarget[i][cur];
  }
  System.err.println("totalTargetProb: " + totalTargetProb);
  System.err.println("totalNonTargetProb: " + totalNonTargetProb);
  System.err.println("--> score: " + (totalTargetProb / totalNonTargetProb));
  if (totalTargetProb == 0) {
    return (0);
  }
  return (totalTargetProb / totalNonTargetProb);
}
