{
  boolean converged=false;
  int numIterations=0;
  double lastLogPosterior=0.0;
  double improve=0.0;
  while (numIterations < MAX_ITER) {
    checkNormalized();
    expectations(true,true);
    double logPosterior=entropicLogPosterior();
    if (numIterations > 0) {
      improve=(lastLogPosterior == 0.0) ? 0.0 : (lastLogPosterior - logPosterior) / lastLogPosterior;
      converged=improve < LL_CONVERGE_SIZE;
    }
    if (verbose) {
      NumberFormat nf=NumberFormat.getNumberInstance();
      nf.setMaximumFractionDigits(3);
      System.err.print("Log posterior after " + numIterations + " iterations: "+ nf.format(logPosterior));
      if (numIterations > 0) {
        System.err.print(" [" + nf.format(improve * 100) + "% change]");
      }
      System.err.println();
    }
    lastLogPosterior=logPosterior;
    if (numIterations >= 5 && converged) {
      converged=true;
      break;
    }
    estimateMAP();
    numIterations++;
  }
  if (verbose) {
    if (converged) {
      System.err.println("Converged after " + numIterations + " iterations.");
    }
 else {
      System.err.println("Stopping after " + MAX_ITER + " iterations.");
    }
  }
}
