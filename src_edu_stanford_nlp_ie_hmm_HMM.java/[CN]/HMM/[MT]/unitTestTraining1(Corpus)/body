{
  Properties props=new Properties();
  props.setProperty("unseenSource","singletons");
  HMMTrainer hmmt=train(trainCorpus,props,true);
  double internalLogLike=0.0;
  double internalUnscaledLogLike=0.0;
  for (int d=0, size=hmmt.trainDocs.size(); d < size; d++) {
    System.err.println("Document " + d + " of "+ size+ ".");
    Document doc=(Document)hmmt.trainDocs.get(d);
    int numTimes=doc.size() + 2;
    System.err.println();
    System.err.println("Forward backward with scaling.");
    if (!hmmt.forwardAlgorithm(doc,true)) {
      System.err.println("Couldn't generate document " + d);
    }
 else {
      hmmt.backwardAlgorithm(doc,true);
      printTrellis("Forward",hmmt.alpha);
      printTrellis("Backward",hmmt.beta);
      printStateVector("Scaling",hmmt.scale);
      double C=1.0;
      for (int t=0; t < numTimes; t++) {
        C*=hmmt.scale[t];
      }
      C=1 / C;
      System.err.println();
      System.err.println("Scaled P(O|mu) = " + C + "  (log(P) = "+ Math.log(C)+ ")");
      internalLogLike+=Math.log(C);
    }
    System.err.println();
    System.err.println("Forward backward without scaling.");
    if (!hmmt.forwardAlgorithm(doc,false)) {
      System.err.println("Couldn't generate document " + d);
    }
 else {
      hmmt.backwardAlgorithm(doc,false);
      printTrellis("Forward",hmmt.alpha);
      printTrellis("Backward",hmmt.beta);
      double C=0.0;
      for (int i=0; i < states.length; i++) {
        C+=hmmt.alpha[i][numTimes - 1];
      }
      System.err.println("Unscaled P(O|mu) = " + C);
      internalUnscaledLogLike+=Math.log(C);
    }
    System.err.println();
  }
  System.err.println();
  System.err.println("internal Scaled logLikelihood = " + internalLogLike);
  System.err.println("internal Unscaled logLikelihood = " + internalUnscaledLogLike);
  System.err.println("Scaled logLikelihood = " + logLikelihood(trainCorpus));
  System.err.println("Unscaled logLikelihood = " + logLikelihood(trainCorpus,false));
  System.err.println();
}
