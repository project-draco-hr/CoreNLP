{
  hmmType=REGULAR_HMM;
  int numStates=0;
  if (trained) {
    vocab=new ClassicCounter<String>();
    Counters.addInPlace(vocab,contextHMM.getVocab());
    for (    HMM targetHMM : targetHMMs) {
      Counters.addInPlace(vocab,targetHMM.getVocab());
    }
  }
  unseenMode=contextHMM.getUnseenMode();
  unkModel=contextHMM.getUnkModel();
  unseenProbSource=contextHMM.getUnseenProbSource();
  featureSource=contextHMM.getFeatureSource();
  feat=contextHMM.getFeature();
  for (int i=0; i < contextHMM.states.length; i++) {
    if (contextHMM.states[i].type <= 0) {
      numStates++;
    }
  }
  HashMap<String,Integer> targetIndexMap=new HashMap<String,Integer>();
  for (int i=0; i < targetHMMs.length; i++) {
    if (verbose) {
      System.err.println("Target HMM " + i + ": "+ targetHMMs[i]);
    }
    if (targetHMMs[i].targetFields.length != 2) {
      if (verbose) {
        System.err.println("Invalid target: " + (targetHMMs[i].targetFields.length - 1) + " target fields.  Ignoring this target.");
      }
    }
 else {
      targetIndexMap.put(targetHMMs[i].targetFields[1],Integer.valueOf(i));
      numStates+=(targetHMMs[i].states.length - 2);
    }
  }
  if (verbose) {
    System.err.println("New HMM will have " + numStates + " states.");
  }
  states=new State[numStates];
  targetFields=contextHMM.targetFields;
  for (int i=0; i < contextHMM.states.length; i++) {
    states[i]=new State(contextHMM.states[i].type,contextHMM.states[i].emit,numStates);
    System.arraycopy(contextHMM.states[i].transition,0,states[i].transition,0,contextHMM.states[i].transition.length);
  }
  int newTargetBaseNum=contextHMM.states.length;
  for (int i=0; i < contextHMM.states.length; i++) {
    if (contextHMM.states[i].type > 0) {
      State placeHolder=new State(states[i]);
      int targetType=contextHMM.states[i].type;
      if (targetIndexMap.get(targetFields[targetType]) == null) {
        if (verbose) {
          System.err.println("Could not find HMM for target " + targetFields[targetType]);
          System.err.println("targetIndexMap: " + targetIndexMap);
          for (          String targetField : targetFields) {
            System.err.print(targetField + " ");
          }
          System.err.println();
          System.err.println("targetType: " + targetType);
        }
        continue;
      }
      int targetIndex=targetIndexMap.get(targetFields[targetType]).intValue();
      State[] targetStates=targetHMMs[targetIndex].states;
      for (int k=targetStates[State.STARTIDX].transition.length - 1; k > State.STARTIDX; k--) {
        if (targetStates[State.STARTIDX].transition[k] != 0.0) {
          int newTargetStateNum=(k == 2) ? i : (newTargetBaseNum + k - 3);
          for (int l=0; l < newTargetBaseNum; l++) {
            states[l].transition[newTargetStateNum]=states[l].transition[i] * targetStates[State.STARTIDX].transition[k];
          }
        }
      }
      for (int j=State.STARTIDX + 1; j < targetStates.length; j++) {
        State curTargetState=targetStates[j];
        int newTargetStateNum=(j == State.STARTIDX + 1) ? i : (newTargetBaseNum + j - 3);
        states[newTargetStateNum]=new State(targetType,curTargetState.emit,numStates);
        if (verbose) {
          System.err.println("Copying target state " + j + " to state "+ newTargetStateNum+ " (type "+ targetType+ ": "+ targetFields[targetType]+ ") in the merged HMM");
        }
        for (int k=0; k < states.length; k++) {
          states[newTargetStateNum].transition[k]=curTargetState.transition[State.FINISHIDX] * placeHolder.transition[k];
        }
        for (int k=State.STARTIDX + 1; k < curTargetState.transition.length; k++) {
          int outgoingState=(k == 2) ? i : (newTargetBaseNum + k - 3);
          states[newTargetStateNum].transition[outgoingState]=curTargetState.transition[k];
        }
      }
      newTargetBaseNum+=targetStates.length - 3;
    }
  }
  checkNormalized();
  if (verbose) {
    printProbs();
  }
}
