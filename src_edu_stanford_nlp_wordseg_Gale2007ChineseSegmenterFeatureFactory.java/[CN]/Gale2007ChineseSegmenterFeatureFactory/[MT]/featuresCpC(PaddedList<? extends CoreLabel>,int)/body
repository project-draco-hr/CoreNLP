{
  Collection<String> features=new ArrayList<String>();
  CoreLabel c=cInfo.get(loc);
  CoreLabel c2=cInfo.get(loc + 1);
  CoreLabel c3=cInfo.get(loc + 2);
  CoreLabel p=cInfo.get(loc - 1);
  CoreLabel p2=cInfo.get(loc - 2);
  CoreLabel p3=cInfo.get(loc - 3);
  String charc=c.getString(CharAnnotation.class);
  String charc2=c2.getString(CharAnnotation.class);
  String charc3=c3.getString(CharAnnotation.class);
  String charp=p.getString(CharAnnotation.class);
  String charp2=p2.getString(CharAnnotation.class);
  String charp3=p3.getString(CharAnnotation.class);
  Integer cI=c.get(UTypeAnnotation.class);
  String uTypec=(cI != null ? cI.toString() : "");
  Integer c2I=c2.get(UTypeAnnotation.class);
  String uTypec2=(c2I != null ? c2I.toString() : "");
  Integer c3I=c3.get(UTypeAnnotation.class);
  String uTypec3=(c3I != null ? c3I.toString() : "");
  Integer pI=p.get(UTypeAnnotation.class);
  String uTypep=(pI != null ? pI.toString() : "");
  Integer p2I=p2.get(UTypeAnnotation.class);
  String uTypep2=(p2I != null ? p2I.toString() : "");
  if (flags.dictionary != null || flags.serializedDictionary != null) {
    dictionaryFeaturesCpC(LBeginAnnotation.class,LMiddleAnnotation.class,LEndAnnotation.class,"",features,p2,p,c,c2);
  }
  if (flags.dictionary2 != null) {
    dictionaryFeaturesCpC(D2_LBeginAnnotation.class,D2_LMiddleAnnotation.class,D2_LEndAnnotation.class,"-D2-",features,p2,p,c,c2);
  }
  if (flags.useWord2) {
    features.add(charc + "c");
    features.add(charc2 + "c2");
    features.add(charp + "p");
    features.add(charp + charc + "pc");
    features.add(charc + charc2 + "cc2");
    features.add(charp + "-" + charc2+ "pc2");
  }
  if (flags.useFeaturesCpC4gram || flags.useFeaturesCpC5gram || flags.useFeaturesCpC6gram) {
    features.add(charp2 + charp + "p2p");
    features.add(charp2 + "p2");
  }
  if (flags.useFeaturesCpC5gram || flags.useFeaturesCpC6gram) {
    features.add(charc3 + "c3");
    features.add(charc2 + charc3 + "c2c3");
  }
  if (flags.useFeaturesCpC6gram) {
    features.add(charp3 + "p3");
    features.add(charp3 + charp2 + "p3p2");
  }
  if (flags.useGoodForNamesCpC) {
    features.add(charp2 + "p2");
    features.add(charp3 + "p3");
  }
  if (flags.useUnicodeType || flags.useUnicodeType4gram || flags.useUnicodeType5gram) {
    features.add(uTypep + "-" + uTypec+ "-"+ uTypec2+ "-uType3");
  }
  if (flags.useUnicodeType4gram || flags.useUnicodeType5gram) {
    features.add(uTypep2 + "-" + uTypep+ "-"+ uTypec+ "-"+ uTypec2+ "-uType4");
  }
  if (flags.useUnicodeType5gram) {
    features.add(uTypep2 + "-" + uTypep+ "-"+ uTypec+ "-"+ uTypec2+ "-"+ uTypec3+ "-uType5");
  }
  if (flags.useWordUTypeConjunctions2) {
    features.add(uTypep + charc + "putcc");
    features.add(charp + uTypec + "pccut");
  }
  if (flags.useWordUTypeConjunctions3) {
    features.add(uTypep2 + uTypep + charc+ "p2utputcc");
    features.add(uTypep + charc + uTypec2+ "putccc2ut");
    features.add(charc + uTypec2 + uTypec3+ "ccc2utc3ut");
  }
  if (flags.useUnicodeBlock) {
    features.add(p.getString(UBlockAnnotation.class) + "-" + c.getString(UBlockAnnotation.class)+ "-"+ c2.getString(UBlockAnnotation.class)+ "-uBlock");
  }
  if (flags.useShapeStrings) {
    if (flags.useShapeStrings1) {
      features.add(p.getString(ShapeAnnotation.class) + "ps");
      features.add(c.getString(ShapeAnnotation.class) + "cs");
      features.add(c2.getString(ShapeAnnotation.class) + "c2s");
    }
    if (flags.useShapeStrings3) {
      features.add(p.getString(ShapeAnnotation.class) + c.getString(ShapeAnnotation.class) + c2.getString(ShapeAnnotation.class)+ "pscsc2s");
    }
    if (flags.useShapeStrings4) {
      features.add(p2.getString(ShapeAnnotation.class) + p.getString(ShapeAnnotation.class) + c.getString(ShapeAnnotation.class)+ c2.getString(ShapeAnnotation.class)+ "p2spscsc2s");
    }
    if (flags.useShapeStrings5) {
      features.add(p2.getString(ShapeAnnotation.class) + p.getString(ShapeAnnotation.class) + c.getString(ShapeAnnotation.class)+ c2.getString(ShapeAnnotation.class)+ c3.getString(ShapeAnnotation.class)+ "p2spscsc2sc3s");
    }
    if (flags.useWordShapeConjunctions2) {
      features.add(p.getString(ShapeAnnotation.class) + charc + "pscc");
      features.add(charp + c.getString(ShapeAnnotation.class) + "pccs");
    }
    if (flags.useWordShapeConjunctions3) {
      features.add(p2.getString(ShapeAnnotation.class) + p.getString(ShapeAnnotation.class) + charc+ "p2spscc");
      features.add(p.getString(ShapeAnnotation.class) + charc + c2.getString(ShapeAnnotation.class)+ "psccc2s");
      features.add(charc + c2.getString(ShapeAnnotation.class) + c3.getString(ShapeAnnotation.class)+ "ccc2sc3s");
    }
  }
  char rcharc, rcharc2, rcharp, rcharp2;
  if (charc.length() == 0) {
    rcharc='n';
  }
 else {
    rcharc=RadicalMap.getRadical(charc.charAt(0));
  }
  if (charc2.length() == 0) {
    rcharc2='n';
  }
 else {
    rcharc2=RadicalMap.getRadical(charc2.charAt(0));
  }
  if (charp.length() == 0) {
    rcharp='n';
  }
 else {
    rcharp=RadicalMap.getRadical(charp.charAt(0));
  }
  if (charp2.length() == 0) {
    rcharp2='n';
  }
 else {
    rcharp2=RadicalMap.getRadical(charp2.charAt(0));
  }
  if (flags.useRad2) {
    features.add(rcharc + "rc");
    features.add(rcharc2 + "rc2");
    features.add(rcharp + "rp");
    features.add(rcharp + rcharc + "rprc");
    features.add(rcharc + rcharc2 + "rcrc2");
    features.add(rcharp + rcharc + rcharc2+ "rprcrc2");
  }
  if (flags.useRad2b) {
    features.add(rcharc + "rc");
    features.add(rcharc2 + "rc2");
    features.add(rcharp + "rp");
    features.add(rcharp + rcharc + "rprc");
    features.add(rcharc + rcharc2 + "rcrc2");
    features.add(rcharp2 + rcharp + "rp2rp");
  }
  if (flags.useDict2) {
    NonDict2 nd=new NonDict2(flags);
    features.add(nd.checkDic(charp + charc,flags) + "nondict");
  }
  if (flags.useOutDict2) {
    if (outDict == null) {
      createOutDict();
    }
    features.add(outDict.getW(charp + charc) + "outdict");
    features.add(outDict.getW(charc + charc2) + "outdict");
    features.add(outDict.getW(charp2 + charp) + "outdict");
    features.add(outDict.getW(charp2 + charp + charc) + "outdict");
    features.add(outDict.getW(charp3 + charp2 + charp) + "outdict");
    features.add(outDict.getW(charp + charc + charc2) + "outdict");
    features.add(outDict.getW(charc + charc2 + charc3) + "outdict");
    features.add(outDict.getW(charp + charc + charc2+ charc3) + "outdict");
  }
  if (flags.useCTBChar2 || flags.useASBCChar2 || flags.useHKChar2|| flags.usePKChar2|| flags.useMSRChar2) {
    String[] tagsets;
    if (flags.useChPos) {
      if (flags.useCTBChar2) {
        tagsets=new String[]{"AD","AS","BA","CC","CD","CS","DE","DT","ETC","IJ","JJ","LB","LC","M","NN","NR","NT","OD","P","PN","PU","SB","SP","VA","VC","VE","VV"};
      }
 else       if (flags.usePKChar2) {
        tagsets=new String[]{"2","3","4"};
      }
 else {
        throw new RuntimeException("only support settings for CTB and PK now.");
      }
    }
 else {
      tagsets=new String[]{"2","3","4"};
    }
    if (taDetector == null) {
      createTADetector();
    }
    for (    String tag : tagsets) {
      features.add(taDetector.checkDic(tag + "p",charp) + taDetector.checkDic(tag + "i",charp) + taDetector.checkDic(tag + "s",charc)+ taDetector.checkInDic(charp)+ taDetector.checkInDic(charc)+ tag+ "prep-sufc");
    }
  }
  if (flags.useRule2) {
    if (charp.equals(charc)) {
      features.add("11-R2");
    }
    if (charp.equals(charc2)) {
      features.add("22-R2");
    }
    if (!flags.usePk && !flags.useHk) {
      if (charc.equals(charc2)) {
        features.add("33-R2");
      }
    }
    char cur1=' ';
    char cur2=' ';
    char cur=' ';
    char pre=' ';
    if (charc2.length() > 0) {
      cur1=charc2.charAt(0);
    }
    if (charc3.length() > 0) {
      cur2=charc3.charAt(0);
    }
    if (charc.length() > 0) {
      cur=charc.charAt(0);
    }
    if (charp.length() > 0) {
      pre=charp.charAt(0);
    }
    String prer=String.valueOf(rcharp);
    Pattern E=Pattern.compile("[a-zA-Z]");
    Pattern N=Pattern.compile("[0-9]");
    Matcher m=E.matcher(charp);
    Matcher ce=E.matcher(charc);
    Matcher pe=E.matcher(charp2);
    Matcher cn=N.matcher(charc);
    Matcher pn=N.matcher(charp2);
    if (cur >= '0' && cur <= '9' && pre >= '0' && pre <= '9') {
      if (cur == '9' && pre == '1' && cur1 == '9' && cur2 >= '0' && cur2 <= '9') {
        features.add("YR-R2");
      }
 else {
        features.add("2N-R2");
      }
    }
 else     if (pre >= '0' && pre <= '9') {
      features.add("1N-R2");
    }
 else     if (m.matches()) {
      features.add("E-R2");
    }
 else     if (prer.equals(".") && charp.length() == 1) {
      if (ce.matches()) {
        features.add("PU+E-R2");
      }
      if (pe.matches()) {
        features.add("E+PU-R2");
      }
      if (cn.matches()) {
        features.add("PU+N-R2");
      }
      if (pn.matches()) {
        features.add("N+PU-R2");
      }
      features.add("PU-R2");
    }
    String engType=isEnglish(charp,charc);
    String engPU=isEngPU(charp);
    if (!engType.equals(""))     features.add(engType);
    if (!engPU.equals("") && !engType.equals("")) {
      StringBuilder sb=new StringBuilder();
      sb.append(engPU).append(engType).append("R2");
      features.add(sb.toString());
    }
  }
  String origS=c.getString(OriginalCharAnnotation.class);
  char origC=' ';
  if (origS.length() > 0) {
    origC=origS.charAt(0);
  }
  int type=Character.getType(origC);
switch (type) {
case Character.UPPERCASE_LETTER:
case Character.LOWERCASE_LETTER:
    features.add("CHARTYPE-LETTER");
  break;
case Character.DECIMAL_DIGIT_NUMBER:
features.add("CHARTYPE-DECIMAL_DIGIT_NUMBER");
break;
case Character.OTHER_LETTER:
features.add("CHARTYPE-OTHER_LETTER");
break;
default :
features.add("CHARTYPE-MISC");
}
features.add("cliqueCpC");
return features;
}
