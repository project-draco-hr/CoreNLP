{
  if (args.length != 2 && args.length != 3) {
    System.err.println("Usage: Tdiff treeFile1 treeFile2 [maxLength]");
    System.exit(0);
  }
  String treeFileStr1=args[0];
  String treeFileStr2=args[1];
  if (args.length > 2) {
    maxLength=Integer.parseInt(args[2]);
  }
  TreeReader tR1=new PennTreeReader(new BufferedReader(new FileReader(treeFileStr1)),new LabeledScoredTreeFactory(new StringLabelFactory()),new edu.stanford.nlp.trees.PruneNodesStripSubtagsTreeNormalizer(new Filter<Tree>(){
    /** 
 */
    private static final long serialVersionUID=3669635574979632179L;
    public boolean accept(    Tree t){
      Label l=t.label();
      if ((l != null) && (isBadString(l.toString()))) {
        return false;
      }
      return true;
    }
  }
));
  TreeReader tR2=new PennTreeReader(new BufferedReader(new FileReader(treeFileStr2)),new LabeledScoredTreeFactory(new StringLabelFactory()),new edu.stanford.nlp.trees.PruneNodesStripSubtagsTreeNormalizer(new Filter<Tree>(){
    /** 
 */
    private static final long serialVersionUID=-2886338403801586219L;
    public boolean accept(    Tree t){
      Label l=t.label();
      if ((l != null) && (isBadString(l.toString()))) {
        return false;
      }
      return true;
    }
  }
));
  Tree t1=tR1.readTree();
  Tree t2=tR2.readTree();
  while (t1 != null && t2 != null) {
    if (t1 == null) {
      System.err.println("Not enough trees in " + treeFileStr2 + ", exiting.");
      System.exit(0);
    }
    if (t2 == null) {
      System.err.println("Not enough trees in " + treeFileStr1 + ", exiting.");
      System.exit(0);
    }
    if (maxLength == -1 || t1.yield().size() <= maxLength || t2.yield().size() <= maxLength) {
      printDiff(t1,t2);
    }
    t1=tR1.readTree();
    t2=tR2.readTree();
  }
}
