{
  s1=" " + s1 + " ";
  s2=" " + s2 + " ";
  int[][] bestAlignment=new int[s1.length()][s2.length()];
  int[][] backtrace=new int[s1.length()][s2.length()];
  for (int s1pos=0; s1pos < s1.length(); s1pos++) {
    bestAlignment[s1pos][0]=0;
    backtrace[s1pos][0]=2;
  }
  for (int s2pos=0; s2pos < s2.length(); s2pos++) {
    bestAlignment[0][s2pos]=0;
    backtrace[0][s2pos]=1;
  }
  backtrace[0][0]=0;
  for (int s1pos=1; s1pos < s1.length(); s1pos++) {
    for (int s2pos=1; s2pos < s2.length(); s2pos++) {
      if (s1.charAt(s1pos) != ' ' && s2.charAt(s2pos) != ' ') {
        if (s1.charAt(s1pos) == s2.charAt(s2pos)) {
          if (s1.charAt(s1pos) == ')' || s1.charAt(s1pos) == '(' || (s1.charAt(s1pos) >= 'A' && s1.charAt(s1pos) <= 'Z')) {
            bestAlignment[s1pos][s2pos]=100 + bestAlignment[s1pos - 1][s2pos - 1];
          }
 else {
            bestAlignment[s1pos][s2pos]=1000 + bestAlignment[s1pos - 1][s2pos - 1];
          }
          backtrace[s1pos][s2pos]=0;
        }
 else {
          bestAlignment[s1pos][s2pos]=1 + bestAlignment[s1pos - 1][s2pos - 1];
          backtrace[s1pos][s2pos]=0;
        }
      }
 else {
        bestAlignment[s1pos][s2pos]=bestAlignment[s1pos - 1][s2pos - 1];
        backtrace[s1pos][s2pos]=0;
        if (s1.charAt(s1pos) == ' ') {
          if (bestAlignment[s1pos][s2pos - 1] > bestAlignment[s1pos][s2pos]) {
            bestAlignment[s1pos][s2pos]=bestAlignment[s1pos][s2pos - 1];
            backtrace[s1pos][s2pos]=1;
          }
        }
        if (s2.charAt(s2pos) == ' ') {
          if (bestAlignment[s1pos - 1][s2pos] > bestAlignment[s1pos][s2pos]) {
            bestAlignment[s1pos][s2pos]=bestAlignment[s1pos - 1][s2pos];
            backtrace[s1pos][s2pos]=2;
          }
        }
      }
    }
  }
  StringBuffer sb1=new StringBuffer();
  StringBuffer sb2=new StringBuffer();
  int s1pos=s1.length() - 1;
  int s2pos=s2.length() - 1;
  while (s1pos >= 0 || s2pos >= 0) {
    if (backtrace[s1pos][s2pos] == 0) {
      sb1.append(s1.charAt(s1pos));
      sb2.append(s2.charAt(s2pos));
      s1pos--;
      s2pos--;
      continue;
    }
    if (backtrace[s1pos][s2pos] == 1) {
      sb1.append(' ');
      sb2.append(s2.charAt(s2pos));
      s2pos--;
      continue;
    }
    if (backtrace[s1pos][s2pos] == 2) {
      sb1.append(s1.charAt(s1pos));
      sb2.append(' ');
      s1pos--;
      continue;
    }
  }
  sb1=new StringBuffer(sb1.substring(1,sb2.length() - 1));
  sb2=new StringBuffer(sb2.substring(1,sb2.length() - 1));
  return new Pair<String,String>(sb1.reverse().toString(),sb2.reverse().toString());
}
