{
  final double denom=(double)numTrees;
  meanDepth=depth2 / denom;
  meanLength=length2 / denom;
  meanBreadth=breadth2 / denom;
  meanConstituents=phrasalBranchingNum2.totalCount() / denom;
  meanBranchingFactor=phrasalBranching2.totalCount() / phrasalBranchingNum2.totalCount();
  for (  int d : depths)   stddevDepth+=Math.pow(d - meanDepth,2);
  stddevDepth=Math.sqrt(stddevDepth / denom);
  for (  int l : lengths)   stddevLength+=Math.pow(l - meanLength,2);
  stddevLength=Math.sqrt(stddevLength / denom);
  for (  int b : breadths)   stddevBreadth+=Math.pow(b - meanBreadth,2);
  stddevBreadth=Math.sqrt(stddevBreadth / denom);
  meanBranchingByLabel=new ClassicCounter<String>();
  for (  String label : phrasalBranching2.keySet()) {
    double mean=phrasalBranching2.getCount(label) / phrasalBranchingNum2.getCount(label);
    meanBranchingByLabel.incrementCount(label,mean);
  }
  oovWords=new HashSet<String>(words.keySet());
  oovWords.removeAll(trainVocab);
  OOVRate=(double)oovWords.size() / (double)words.keySet().size();
}
