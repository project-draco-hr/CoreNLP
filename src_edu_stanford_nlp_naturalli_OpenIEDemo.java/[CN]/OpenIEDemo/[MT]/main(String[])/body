{
  Properties props=PropertiesUtils.asProperties("annotators","tokenize,ssplit,pos,lemma,parse,natlog,openie");
  StanfordCoreNLP pipeline=new StanfordCoreNLP(props);
  String text;
  if (args.length > 0) {
    text=IOUtils.slurpFile(args[0]);
  }
 else {
    text="Obama was born in Hawaii. He is our president.";
  }
  Annotation doc=new Annotation(text);
  pipeline.annotate(doc);
  int sentNo=0;
  for (  CoreMap sentence : doc.get(CoreAnnotations.SentencesAnnotation.class)) {
    System.out.println("Sentence #" + ++sentNo + ": "+ sentence.get(CoreAnnotations.TextAnnotation.class));
    System.out.println(sentence.get(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class).toString(SemanticGraph.OutputFormat.LIST));
    Collection<RelationTriple> triples=sentence.get(NaturalLogicAnnotations.RelationTriplesAnnotation.class);
    for (    RelationTriple triple : triples) {
      System.out.println(triple.confidence + "\t" + triple.subjectLemmaGloss()+ "\t"+ triple.relationLemmaGloss()+ "\t"+ triple.objectLemmaGloss());
    }
    List<SentenceFragment> clauses=new OpenIE(props).clausesInSentence(sentence);
    for (    SentenceFragment clause : clauses) {
      System.out.println(clause.parseTree.toString(SemanticGraph.OutputFormat.LIST));
    }
    System.out.println();
  }
}
