{
  if (trainOptions.printTreeTransformations > 0) {
    trainOptions.printTrainTree(null,"ORIGINAL TREE:",t);
  }
  Tree trTree=annotator.transformTree(t);
  if (trainOptions.selectivePostSplit) {
    trTree=postSplitter.transformTree(trTree);
  }
  if (trainOptions.printTreeTransformations > 0) {
    trainOptions.printTrainTree(trainOptions.printAnnotatedPW,"ANNOTATED TREE:",trTree);
  }
  if (trainOptions.printAnnotatedRuleCounts) {
    Tree tr2=trTree.deepCopy(new LabeledScoredTreeFactory(),new StringLabelFactory());
    Set<Tree> localTrees=tr2.localTrees();
    for (    Tree tr : localTrees) {
      annotatedRuleCounts.incrementCount(tr);
    }
  }
  if (trainOptions.printAnnotatedStateCounts) {
    for (    Tree subt : trTree) {
      if (!subt.isLeaf()) {
        annotatedStateCounts.incrementCount(subt.label().value());
      }
    }
  }
  addRoot(trTree);
  Tree binarizedTree=binarizer.transformTree(trTree);
  if (trainOptions.printTreeTransformations > 0) {
    trainOptions.printTrainTree(trainOptions.printBinarizedPW,"BINARIZED TREE:",binarizedTree);
    trainOptions.printTreeTransformations--;
  }
  if (forceCNF) {
    binarizedTree=new CNFTransformers.ToCNFTransformer().transformTree(binarizedTree);
  }
  return binarizedTree;
}
