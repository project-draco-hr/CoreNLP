{
  double[] layerCache=null;
  double[] hlCache=null;
  int layerOneSize=inputLayerWeights.length;
  if (cliqueSize > 1) {
    if (layerOneCache4Edge == null || layerOneSize != layerOneCache4Edge.length)     layerOneCache4Edge=new double[layerOneSize];
    layerCache=layerOneCache4Edge;
  }
 else {
    if (layerOneCache == null || layerOneSize != layerOneCache.length)     layerOneCache=new double[layerOneSize];
    layerCache=layerOneCache;
  }
  for (int i=0; i < layerOneSize; i++) {
    double[] ws=inputLayerWeights[i];
    double lOneW=0;
    double dotProd=0;
    for (int m=0; m < nodeCliqueFeatures.length; m++) {
      dotProd=ws[nodeCliqueFeatures[m]];
      if (featureVal != null)       dotProd*=featureVal[m];
      lOneW+=dotProd;
    }
    layerCache[i]=lOneW;
  }
  if (!aFlag.useHiddenLayer)   return layerCache;
  if (cliqueSize > 1) {
    if (hiddenLayerCache4Edge == null || layerOneSize != hiddenLayerCache4Edge.length)     hiddenLayerCache4Edge=new double[layerOneSize];
    hlCache=hiddenLayerCache4Edge;
  }
 else {
    if (hiddenLayerCache == null || layerOneSize != hiddenLayerCache.length)     hiddenLayerCache=new double[layerOneSize];
    hlCache=hiddenLayerCache;
  }
  for (int i=0; i < layerOneSize; i++) {
    if (aFlag.useSigmoid) {
      hlCache[i]=sigmoid(layerCache[i]);
    }
 else {
      hlCache[i]=Math.tanh(layerCache[i]);
    }
  }
  return hlCache;
}
