{
  if (args.length == 0) {
    System.err.println("Usage: java ACE2Columns dir dir2 ...");
    System.exit(1);
  }
  ACEEntityHandler entityHandler=new ACEEntityHandler();
  ACETextHandler textHandler=new ACETextHandler();
  try {
    SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
    parser.getXMLReader().setFeature("http://xml.org/sax/features/validation",false);
    for (    String arg : args) {
      File dir=new File(arg);
      File[] files=dir.listFiles();
      Arrays.sort(files,new Comparator<File>(){
        public int compare(        final File o1,        final File o2){
          return (o1).getName().compareTo((o2).getName());
        }
      }
);
      for (int j=0; j < files.length; j++) {
        File sgmFile=files[j];
        if (!sgmFile.getName().endsWith(".sgm")) {
          continue;
        }
        int index=sgmFile.getName().lastIndexOf(".sgm");
        String prefix=sgmFile.getName().substring(0,index);
        File xmlFile=null;
        if (j > 0) {
          xmlFile=files[j - 1];
          if (!xmlFile.getName().startsWith(prefix)) {
            xmlFile=null;
          }
        }
        if (xmlFile == null) {
          j++;
          xmlFile=files[j];
          if (!xmlFile.getName().startsWith(prefix)) {
            xmlFile=null;
          }
        }
        if (xmlFile == null) {
          System.err.println("Could not find entity file for " + sgmFile.getName());
          continue;
        }
        System.err.println("Parsing " + sgmFile.getName());
        parser.parse(sgmFile,textHandler);
        String text=textHandler.text();
        text=text.replaceAll("&amp;","&");
        parser.parse(xmlFile,entityHandler);
        List<ACEEntity> entities=entityHandler.entities();
        Collections.sort(entities);
        StringBuilder sb=new StringBuilder(text);
        int offset=textHandler.offset();
        for (        ACEEntity entity : entities) {
          if (entity.start < 0 || entity.end - offset >= sb.length()) {
            System.err.println("Warning (Out of Bounds): " + entity);
            continue;
          }
          sb.insert(entity.end - offset + 1,entity.endTag());
          sb.insert(entity.start - offset,entity.startTag());
        }
        PTBTokenizer<Word> tokenizer=PTBTokenizer.newPTBTokenizer(new StringReader(sb.toString()));
        String tag="O";
        while (tokenizer.hasNext()) {
          String token=tokenizer.next().word();
          if (token.startsWith("</")) {
            tag="O";
          }
 else           if (token.startsWith("<") && token.endsWith(">")) {
            tag=token.substring(1,token.length() - 1);
          }
 else {
            token=token.replaceAll("\\s","");
            System.out.println(token + ' ' + tag);
          }
        }
        System.out.println();
        entityHandler.reset();
        textHandler.reset();
      }
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}
