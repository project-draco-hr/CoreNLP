{
  List<SemanticGraph> retList=new ArrayList<>();
  for (  SsurgeonPattern pattern : patternList) {
    Collection<SemanticGraph> generated=pattern.execute(sg);
    for (    SemanticGraph orderedGraph : generated) {
      retList.add(orderedGraph);
      System.out.println("\ncompact = " + orderedGraph.toCompactString());
      System.out.println("regular=" + orderedGraph);
    }
    if (generated.size() > 0) {
      if (log != null) {
        log.info("* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *");
        log.info("Pre remove duplicates, num=" + generated.size());
      }
      SemanticGraphUtils.removeDuplicates(generated,sg);
      if (log != null) {
        log.info("Expand from patterns");
        if (logPrefix != null)         log.info(logPrefix);
        log.info("Pattern = '" + pattern.getUID() + "' generated "+ generated.size()+ " matches");
        log.info("= = = = = = = = = =\nSrc graph:\n" + sg + "\n= = = = = = = = = =\n");
        int index=1;
        for (        SemanticGraph genSg : generated) {
          log.info("REWRITE " + (index++));
          log.info(genSg.toString());
          log.info(". . . . .\n");
        }
      }
    }
  }
  return retList;
}
