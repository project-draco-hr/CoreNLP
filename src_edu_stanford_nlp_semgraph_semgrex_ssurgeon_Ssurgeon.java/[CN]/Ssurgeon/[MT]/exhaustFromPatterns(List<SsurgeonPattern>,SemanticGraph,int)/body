{
  List<SemanticGraph> retList=new ArrayList<>();
  for (  SsurgeonPattern pattern : patternList) {
    Collection<SemanticGraph> generated=pattern.execute(sg);
    for (    SemanticGraph modGraph : generated) {
      retList.add(modGraph);
    }
    if (log != null && generated.size() > 0) {
      log.info("* * * * * * * * * ** * * * * * * * * *");
      log.info("Exhaust from patterns, depth=" + depth);
      if (logPrefix != null)       log.info(logPrefix);
      log.info("Pattern = '" + pattern.getUID() + "' generated "+ generated.size()+ " matches");
      log.info("= = = = = = = = = =\nSrc graph:\n" + sg.toString() + "\n= = = = = = = = = =\n");
      int index=1;
      for (      SemanticGraph genSg : generated) {
        log.info("REWRITE " + (index++));
        log.info(genSg.toString());
        log.info(". . . . .\n");
      }
    }
  }
  if (retList.size() > 0) {
    List<SemanticGraph> referenceList=new ArrayList<>(retList);
    for (    SemanticGraph childGraph : referenceList) {
      if (depth < 3)       retList.addAll(exhaustFromPatterns(patternList,childGraph,depth + 1));
    }
  }
  return retList;
}
