{
  DFSA<String,Integer> viterbiSearchGraph=new DFSA<>(null);
  int length=ts.length();
  int leftWindow=ts.leftWindow();
  int rightWindow=ts.rightWindow();
  assert(rightWindow == 0);
  int padLength=length + leftWindow + rightWindow;
  int[][] tags=new int[padLength][];
  int[] tagNum=new int[padLength];
  for (int pos=0; pos < padLength; pos++) {
    tags[pos]=ts.getPossibleValues(pos);
    tagNum[pos]=tags[pos].length;
  }
  DFSAState<String,Integer>[][] graphStates=null;
  DFSAState<String,Integer> startState=null, endState=null;
  if (viterbiSearchGraph != null) {
    int stateId=-1;
    startState=new DFSAState<>(++stateId,viterbiSearchGraph,0.0);
    viterbiSearchGraph.setInitialState(startState);
    graphStates=new DFSAState[length][];
    for (int pos=0; pos < length; ++pos) {
      graphStates[pos]=new DFSAState[tags[pos].length];
      for (int product=0; product < tags[pos].length; ++product) {
        graphStates[pos][product]=new DFSAState<>(++stateId,viterbiSearchGraph);
      }
    }
    endState=new DFSAState<>(++stateId,viterbiSearchGraph,0.0);
    endState.setAccepting(true);
  }
  int[] tempTags=new int[padLength];
  int[] productSizes=new int[padLength];
  int curProduct=1;
  for (int i=0; i < leftWindow; i++) {
    curProduct*=tagNum[i];
  }
  for (int pos=leftWindow; pos < padLength; pos++) {
    if (pos > leftWindow + rightWindow) {
      curProduct/=tagNum[pos - leftWindow - rightWindow- 1];
    }
    curProduct*=tagNum[pos];
    productSizes[pos - rightWindow]=curProduct;
  }
  double[][] windowScore=new double[padLength][];
  for (int pos=leftWindow; pos < leftWindow + length; pos++) {
    windowScore[pos]=new double[productSizes[pos]];
    Arrays.fill(tempTags,tags[0][0]);
    for (int product=0; product < productSizes[pos]; product++) {
      int p=product;
      int shift=1;
      for (int curPos=pos; curPos >= pos - leftWindow; curPos--) {
        tempTags[curPos]=tags[curPos][p % tagNum[curPos]];
        p/=tagNum[curPos];
        if (curPos > pos) {
          shift*=tagNum[curPos];
        }
      }
      if (tempTags[pos] == tags[pos][0]) {
        double[] scores=ts.scoresOf(tempTags,pos);
        for (int t=0; t < tagNum[pos]; t++) {
          windowScore[pos][product + t * shift]=scores[t];
        }
      }
    }
  }
  for (int pos=leftWindow; pos < length + leftWindow; pos++) {
    for (int product=0; product < productSizes[pos]; product++) {
      if (pos == leftWindow) {
        int curTag=tags[pos][product % tagNum[pos]];
        DFSATransition<String,Integer> tr=new DFSATransition<>("",startState,graphStates[pos][product],classIndex.get(curTag),"",-windowScore[pos][product]);
        startState.addTransition(tr);
      }
 else {
        int sharedProduct=product / tagNum[pos + rightWindow];
        int factor=productSizes[pos] / tagNum[pos + rightWindow];
        for (int newTagNum=0; newTagNum < tagNum[pos - leftWindow - 1]; newTagNum++) {
          int predProduct=newTagNum * factor + sharedProduct;
          int predTag=tags[pos - 1][predProduct % tagNum[pos - 1]];
          int curTag=tags[pos][product % tagNum[pos]];
          DFSAState<String,Integer> sourceState=graphStates[pos - leftWindow][predTag];
          DFSAState<String,Integer> destState=(pos - leftWindow + 1 == graphStates.length) ? endState : graphStates[pos - leftWindow + 1][curTag];
          DFSATransition<String,Integer> tr=new DFSATransition<>("",sourceState,destState,classIndex.get(curTag),"",-windowScore[pos][product]);
          graphStates[pos - leftWindow][predTag].addTransition(tr);
        }
      }
    }
  }
  return viterbiSearchGraph;
}
