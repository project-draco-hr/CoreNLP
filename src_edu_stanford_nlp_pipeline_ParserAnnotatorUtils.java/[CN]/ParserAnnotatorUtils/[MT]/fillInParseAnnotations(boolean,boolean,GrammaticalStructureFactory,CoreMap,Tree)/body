{
  Trees.convertToCoreLabels(tree);
  tree.indexSpans(0);
  sentence.set(TreeCoreAnnotations.TreeAnnotation.class,tree);
  if (verbose) {
    System.err.println("Tree is:");
    tree.pennPrint(System.err);
  }
  if (buildGraphs) {
    String docID=sentence.get(CoreAnnotations.DocIDAnnotation.class);
    if (docID == null) {
      docID="";
    }
    Integer sentenceIndex=sentence.get(CoreAnnotations.SentenceIndexAnnotation.class);
    int index=(sentenceIndex == null) ? 0 : sentenceIndex;
    Tree copy=tree.deepCopy();
    GrammaticalStructure gs=gsf.newGrammaticalStructure(copy);
    SemanticGraph deps=SemanticGraphFactory.generateCollapsedDependencies(gs,docID,index);
    SemanticGraph uncollapsedDeps=SemanticGraphFactory.generateUncollapsedDependencies(gs,docID,index);
    SemanticGraph ccDeps=SemanticGraphFactory.generateCCProcessedDependencies(gs,docID,index);
    if (verbose) {
      System.err.println("SDs:");
      System.err.println(deps.toString("plain"));
    }
    sentence.set(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class,deps);
    sentence.set(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class,uncollapsedDeps);
    sentence.set(SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation.class,ccDeps);
  }
  setMissingTags(sentence,tree);
}
