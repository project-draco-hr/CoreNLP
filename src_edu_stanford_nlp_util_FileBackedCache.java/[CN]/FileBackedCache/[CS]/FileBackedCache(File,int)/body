{
  if (!directoryToCacheIn.exists()) {
    if (!directoryToCacheIn.mkdirs()) {
      throw new IllegalArgumentException("Could not create cache directory: " + directoryToCacheIn);
    }
  }
  if (!directoryToCacheIn.isDirectory()) {
    throw new IllegalArgumentException("Cache directory must be a directory: " + directoryToCacheIn);
  }
  if (!directoryToCacheIn.canRead()) {
    throw new IllegalArgumentException("Cannot read cache directory: " + directoryToCacheIn);
  }
  this.cacheDir=directoryToCacheIn;
  this.maxFiles=maxFiles;
  Thread mappingCleaner=new Thread(){
    @SuppressWarnings({"unchecked","StatementWithEmptyBody","EmptyCatchBlock","InfiniteLoopStatement"}) @Override public void run(){
      while (true) {
        try {
          if (reaper.poll() != null) {
            while (reaper.poll() != null) {
            }
            List<KEY> toRemove=new LinkedList<KEY>();
            try {
              for (              Entry<KEY,SoftReference<T>> entry : mapping.entrySet()) {
                if (entry.getValue().get() == null) {
                  toRemove.add(entry.getKey());
                }
              }
            }
 catch (            ConcurrentModificationException e) {
            }
            for (            KEY key : toRemove) {
              mapping.remove(key);
            }
          }
          Thread.sleep(100);
        }
 catch (        InterruptedException e) {
        }
      }
    }
  }
;
  mappingCleaner.setDaemon(true);
  mappingCleaner.start();
}
