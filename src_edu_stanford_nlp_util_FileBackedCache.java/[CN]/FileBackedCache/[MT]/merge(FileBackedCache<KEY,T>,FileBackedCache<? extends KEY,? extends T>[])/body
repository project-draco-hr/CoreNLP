{
  startTrack("Merging Caches");
  forceTrack("Reading Constituents");
  Map<String,Map<KEY,T>> combinedMapping=Generics.newHashMap();
  try {
    for (int i=0; i < constituents.length; ++i) {
      FileBackedCache<? extends KEY,? extends T> constituent=constituents[i];
      for (      Entry<? extends KEY,? extends T> entry : constituent) {
        String fileToWriteTo=destination.hash2file(entry.getKey().hashCode(),false).getName();
        if (!combinedMapping.containsKey(fileToWriteTo)) {
          combinedMapping.put(fileToWriteTo,Generics.<KEY,T>newHashMap());
        }
        combinedMapping.get(fileToWriteTo).put(entry.getKey(),entry.getValue());
      }
      log("[" + new DecimalFormat("0000").format(i) + "/"+ constituents.length+ "] read "+ constituent.cacheDir+ " ["+ (Runtime.getRuntime().freeMemory() / 1000000)+ "MB free memory]");
      constituent.clear();
    }
    for (    Entry<? extends KEY,? extends T> entry : destination) {
      String fileToWriteTo=destination.hash2file(entry.getKey().hashCode(),false).getName();
      if (!combinedMapping.containsKey(fileToWriteTo)) {
        combinedMapping.put(fileToWriteTo,Generics.<KEY,T>newHashMap());
      }
      combinedMapping.get(fileToWriteTo).put(entry.getKey(),entry.getValue());
    }
  }
 catch (  IOException e) {
    err("Found exception in merge() -- all data is intact (but passing exception up)");
    throw new RuntimeException(e);
  }
  endTrack("Reading Constituents");
  forceTrack("Clearing Destination");
  if (!destination.cacheDir.exists() && !destination.cacheDir.mkdirs()) {
    throw new RuntimeException("Could not create cache dir for destination (data is intact): " + destination.cacheDir);
  }
  File[] filesInDestination=destination.cacheDir.listFiles();
  if (filesInDestination == null) {
    throw new RuntimeException("Cannot list files in destination's cache dir (data is intact): " + destination.cacheDir);
  }
  for (  File block : filesInDestination) {
    if (!block.delete()) {
      warn("FileBackedCache","could not delete block: " + block);
    }
  }
  endTrack("Clearing Destination");
  forceTrack("Writing New Files");
  try {
    for (    Entry<String,Map<KEY,T>> blockEntry : combinedMapping.entrySet()) {
      File toWrite=canonicalFile.intern(new File(destination.cacheDir + File.separator + blockEntry.getKey()).getCanonicalFile());
      boolean exists=toWrite.exists();
      Pair<? extends OutputStream,CloseAction> writer=destination.newOutputStream(toWrite,exists);
      for (      Entry<KEY,T> entry : blockEntry.getValue().entrySet()) {
        destination.writeNextObject(writer.first,Pair.makePair(entry.getKey(),entry.getValue()));
      }
      writer.second.apply();
    }
  }
 catch (  IOException e) {
    err("Could not write constituent files to combined cache (DATA IS LOST)!");
    throw new RuntimeException(e);
  }
  endTrack("Writing New Files");
  endTrack("Merging Caches");
}
