{
  JsonReader jsonReader=Json.createReader(new StringReader(line));
  JsonObject objarr=jsonReader.readObject();
  jsonReader.close();
  Properties props=new Properties();
  for (  Map.Entry<String,JsonValue> o : objarr.entrySet()) {
    props.setProperty(o.getKey(),objarr.getString(o.getKey()));
  }
  System.out.println("file value is " + objarr.getString("file"));
  String outputfile=props.getProperty("file") + "_processed";
  if (!props.containsKey("columnOutputFile"))   props.setProperty("columnOutputFile",outputfile);
  setProperties(props);
  this.props=props;
  seedWords=GetPatternsFromDataMultiClass.readSeedWords(props);
  Pair<Map<String,DataInstance>,Map<String,DataInstance>> sentsPair=GetPatternsFromDataMultiClass.processSents(props,seedWords.keySet());
  Data.sents=sentsPair.first();
  int i=1;
  for (  String label : seedWords.keySet()) {
    String ansclstr="edu.stanford.nlp.patterns.PatternsAnnotations$PatternLabel" + i;
    Class<? extends TypesafeMap.Key<String>> mcCl=(Class<? extends TypesafeMap.Key<String>>)Class.forName(ansclstr);
    machineAnswerClasses.put(label,mcCl);
    String humanansclstr="edu.stanford.nlp.patterns.PatternsAnnotations$PatternHumanLabel" + i;
    humanLabelClasses.put(label,(Class<? extends TypesafeMap.Key<String>>)Class.forName(humanansclstr));
    i++;
  }
  ConstantsAndVariables<SurfacePattern> constVars=new ConstantsAndVariables<SurfacePattern>(props,seedWords.keySet(),machineAnswerClasses);
  for (  String label : seedWords.keySet()) {
    GetPatternsFromDataMultiClass.runLabelSeedWords(Data.sents,humanLabelClasses.get(label),label,seedWords.get(label),constVars,true);
  }
  GetPatternsFromDataMultiClass.writeColumnOutput(outputfile,false,humanLabelClasses);
  System.out.println("written the output to " + outputfile);
  return "SUCCESS";
}
