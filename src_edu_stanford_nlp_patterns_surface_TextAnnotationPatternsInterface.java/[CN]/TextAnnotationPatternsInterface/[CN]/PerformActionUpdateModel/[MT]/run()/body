{
  PrintWriter out=null;
  String msg="";
  BufferedReader in=null;
  try {
    in=new BufferedReader(new InputStreamReader(socket.getInputStream()));
    out=new PrintWriter(socket.getOutputStream(),true);
  }
 catch (  IOException e) {
    try {
      socket.close();
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
    e.printStackTrace();
  }
  out.println("The possible actions are " + Arrays.toString(Actions.values()) + ".Enter a line with only a period to quit");
  Actions nextlineAction=Actions.NONE;
  while (true) {
    try {
      String input=in.readLine();
      if (input == null || input.equals(".")) {
        break;
      }
      ;
      if (nextlineAction.equals(Actions.NEWPHRASES)) {
        msg="Added new phrases";
        doNewPhrases(input);
        nextlineAction=Actions.NONE;
      }
 else       if (nextlineAction.equals(Actions.NEWANNOTATIONS)) {
        doNewAnnotations(input);
        msg="Added new annotations";
        nextlineAction=Actions.NONE;
      }
 else       if (nextlineAction.equals(Actions.REMOVEPHRASES)) {
        msg="Removed phrases";
        doRemovePhrases(input);
        nextlineAction=Actions.NONE;
      }
 else       if (nextlineAction.equals(Actions.PROCESSFILE)) {
        msg=processFile(input);
        nextlineAction=Actions.NONE;
      }
 else {
        try {
          nextlineAction=Actions.valueOf(input.trim());
        }
 catch (        IllegalArgumentException e) {
          System.out.println("read " + input + " and cannot understand");
          msg="Did not understand " + input + ". POSSIBLE ACTIONS ARE: "+ Arrays.toString(Actions.values());
        }
        if (nextlineAction.equals(Actions.NEWPHRASES))         msg="Please write the new phrases to add in the next line ";
 else         if (nextlineAction.equals(Actions.NEWANNOTATIONS))         msg="Please write the new annotations to add in the next line ";
 else         if (nextlineAction.equals(Actions.REMOVEPHRASES))         msg="Please write the  phrases to remove in the next line ";
 else         if (nextlineAction.equals(Actions.CLOSE))         msg="bye!";
 else         if (nextlineAction.equals(Actions.PROCESSFILE)) {
          msg="please write the filename to process";
        }
 else         if (nextlineAction.equals(Actions.SUMMARY)) {
          msg=this.currentSummary();
          nextlineAction=Actions.NONE;
        }
 else         if (nextlineAction.equals(Actions.SUGGEST)) {
          msg=this.suggestPhrases();
          nextlineAction=Actions.NONE;
        }
      }
      System.out.println("sending msg " + msg);
    }
 catch (    Exception e) {
      msg="ERROR " + e.toString().replaceAll("\n","\t") + ". REDO.";
      nextlineAction=Actions.NONE;
      log("Error handling client# " + clientNumber);
      e.printStackTrace();
    }
 finally {
      out.println(msg);
    }
  }
}
