{
  Counter<String> lowResults=new ClassicCounter<String>();
  Counter<String> highResults=new ClassicCounter<String>();
  Counter<String> expectedResults=new ClassicCounter<String>();
  lowResults.setCount(MENTION_TP,12400);
  expectedResults.setCount(MENTION_TP,12405);
  highResults.setCount(MENTION_TP,12410);
  lowResults.setCount(MENTION_F1,50.4);
  expectedResults.setCount(MENTION_F1,50.42);
  highResults.setCount(MENTION_F1,50.45);
  lowResults.setCount(MUC_TP,6245);
  expectedResults.setCount(MUC_TP,6250);
  highResults.setCount(MUC_TP,6255);
  lowResults.setCount(MUC_F1,60.65);
  expectedResults.setCount(MUC_F1,60.66);
  highResults.setCount(MUC_F1,60.7);
  lowResults.setCount(BCUBED_TP,12440);
  expectedResults.setCount(BCUBED_TP,12445.8);
  highResults.setCount(BCUBED_TP,12450);
  lowResults.setCount(BCUBED_F1,70.75);
  expectedResults.setCount(BCUBED_F1,70.80);
  highResults.setCount(BCUBED_F1,70.85);
  lowResults.setCount(CEAFM_TP,10915);
  expectedResults.setCount(CEAFM_TP,10920);
  highResults.setCount(CEAFM_TP,10930);
  lowResults.setCount(CEAFM_F1,59.4);
  expectedResults.setCount(CEAFM_F1,59.42);
  highResults.setCount(CEAFM_F1,59.5);
  lowResults.setCount(CEAFE_TP,3830);
  expectedResults.setCount(CEAFE_TP,3831.36);
  highResults.setCount(CEAFE_TP,3840);
  lowResults.setCount(CEAFE_F1,47.4);
  expectedResults.setCount(CEAFE_F1,47.45);
  highResults.setCount(CEAFE_F1,47.5);
  lowResults.setCount(BLANC_F1,75.35);
  expectedResults.setCount(BLANC_F1,75.38);
  highResults.setCount(BLANC_F1,75.42);
  lowResults.setCount(CONLL_SCORE,59.6);
  expectedResults.setCount(CONLL_SCORE,59.64);
  highResults.setCount(CONLL_SCORE,59.7);
  Counter<String> results=new ClassicCounter<String>();
  BufferedReader r=new BufferedReader(new StringReader(runCorefTest(true)));
  for (String line; (line=r.readLine()) != null; ) {
    Matcher m1=MENTION_PATTERN.matcher(line);
    if (m1.matches()) {
      results.setCount(MENTION_TP,Double.parseDouble(m1.group(1)));
      results.setCount(MENTION_F1,Double.parseDouble(m1.group(2)));
    }
    Matcher m2=MUC_PATTERN.matcher(line);
    if (m2.matches()) {
      results.setCount(MUC_TP,Double.parseDouble(m2.group(1)));
      results.setCount(MUC_F1,Double.parseDouble(m2.group(2)));
    }
    Matcher m3=BCUBED_PATTERN.matcher(line);
    if (m3.matches()) {
      results.setCount(BCUBED_TP,Double.parseDouble(m3.group(1)));
      results.setCount(BCUBED_F1,Double.parseDouble(m3.group(2)));
    }
    Matcher m4=CEAFM_PATTERN.matcher(line);
    if (m4.matches()) {
      results.setCount(CEAFM_TP,Double.parseDouble(m4.group(1)));
      results.setCount(CEAFM_F1,Double.parseDouble(m4.group(2)));
    }
    Matcher m5=CEAFE_PATTERN.matcher(line);
    if (m5.matches()) {
      results.setCount(CEAFE_TP,Double.parseDouble(m5.group(1)));
      results.setCount(CEAFE_F1,Double.parseDouble(m5.group(2)));
    }
    Matcher m6=BLANC_PATTERN.matcher(line);
    if (m6.matches()) {
      results.setCount(BLANC_F1,Double.parseDouble(m6.group(1)));
    }
    Matcher m7=CONLL_PATTERN.matcher(line);
    if (m7.matches()) {
      results.setCount(CONLL_SCORE,Double.parseDouble(m7.group(1)));
    }
  }
  BenchmarkingHelper.benchmarkResults(results,lowResults,highResults,expectedResults);
}
