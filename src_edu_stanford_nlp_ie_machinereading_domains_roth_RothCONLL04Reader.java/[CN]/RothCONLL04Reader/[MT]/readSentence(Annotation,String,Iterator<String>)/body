{
  Annotation sentence=new Annotation("");
  sentence.set(CoreAnnotations.DocIDAnnotation.class,docId);
  sentence.set(MachineReadingAnnotations.EntityMentionsAnnotation.class,new ArrayList<EntityMention>());
  StringBuilder textContent=new StringBuilder();
  int tokenCount=0;
  List<CoreLabel> tokens=new ArrayList<CoreLabel>();
  int numBlankLinesSeen=0;
  String sentenceID=null;
  Map<String,EntityMention> indexToEntityMention=new HashMap<String,EntityMention>();
  while (lineIterator.hasNext() && numBlankLinesSeen < 2) {
    String currentLine=lineIterator.next();
    currentLine=currentLine.replace("COMMA",",");
    List<String> pieces=StringUtils.split(currentLine);
    String identifier;
    int size=pieces.size();
switch (size) {
case 1:
      numBlankLinesSeen++;
    break;
case 3:
  String type=pieces.get(2);
List<ExtractionObject> args=new ArrayList<ExtractionObject>();
EntityMention entity1=indexToEntityMention.get(pieces.get(0));
EntityMention entity2=indexToEntityMention.get(pieces.get(1));
args.add(entity1);
args.add(entity2);
Span span=new Span(entity1.getExtentTokenStart(),entity2.getExtentTokenEnd());
identifier=RelationMention.makeUniqueId();
RelationMention relationMention=new RelationMention(identifier,sentence,span,type,null,args);
AnnotationUtils.addRelationMention(sentence,relationMention);
break;
case 9:
List<String> words=StringUtils.split(pieces.get(5),"/");
String text=StringUtils.join(words," ");
identifier="entity" + pieces.get(0) + "-"+ pieces.get(2);
String nerTag=getNormalizedNERTag(pieces.get(1));
if (sentenceID == null) sentenceID=pieces.get(0);
if (!nerTag.equals("O")) {
Span extentSpan=new Span(tokenCount,tokenCount + words.size());
EntityMention entity=new EntityMention(identifier,sentence,extentSpan,extentSpan,nerTag,null,null);
AnnotationUtils.addEntityMention(sentence,entity);
String index=pieces.get(2);
indexToEntityMention.put(index,entity);
}
for (String word : words) {
CoreLabel label=new CoreLabel();
label.setWord(word);
label.set(CoreAnnotations.TextAnnotation.class,word);
label.set(CoreAnnotations.ValueAnnotation.class,word);
tokens.add(label);
}
textContent.append(text);
textContent.append(" ");
tokenCount+=words.size();
break;
}
}
sentence.set(CoreAnnotations.TextAnnotation.class,textContent.toString());
sentence.set(CoreAnnotations.ValueAnnotation.class,textContent.toString());
sentence.set(CoreAnnotations.TokensAnnotation.class,tokens);
sentence.set(CoreAnnotations.SentenceIDAnnotation.class,sentenceID);
return sentence;
}
