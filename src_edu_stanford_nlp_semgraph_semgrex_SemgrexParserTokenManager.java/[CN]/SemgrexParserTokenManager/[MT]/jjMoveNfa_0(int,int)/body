{
  int startsAt=0;
  jjnewStateCnt=19;
  int i=1;
  jjstateSet[0]=startState;
  int kind=0x7fffffff;
  for (; ; ) {
    if (++jjround == 0x7fffffff)     ReInitRounds();
    if (curChar < 64) {
      long l=1L << curChar;
      do {
switch (jjstateSet[--i]) {
case 0:
          if ((0x3ff0484ffffdbffL & l) != 0L) {
            if (kind > 6)             kind=6;
            jjCheckNAdd(7);
          }
 else           if ((0x5000400000000000L & l) != 0L) {
            if (kind > 4)             kind=4;
          }
 else           if (curChar == 36)           jjCheckNAddStates(0,3);
 else           if (curChar == 47)           jjCheckNAddStates(4,6);
 else           if (curChar == 61)           jjstateSet[jjnewStateCnt++]=5;
        if ((0x3ff000000000000L & l) != 0L) {
          if (kind > 7)           kind=7;
          jjCheckNAdd(8);
        }
 else         if (curChar == 60)         jjstateSet[jjnewStateCnt++]=3;
 else         if (curChar == 62)         jjstateSet[jjnewStateCnt++]=1;
      break;
case 17:
    if (curChar == 45)     jjCheckNAdd(16);
 else     if (curChar == 43)     jjCheckNAdd(15);
  if (curChar == 45) {
    if (kind > 4)     kind=4;
  }
 else   if (curChar == 43) {
    if (kind > 4)     kind=4;
  }
break;
case 1:
if (curChar == 62 && kind > 4) kind=4;
break;
case 2:
if (curChar == 62) jjstateSet[jjnewStateCnt++]=1;
break;
case 3:
if (curChar == 60 && kind > 4) kind=4;
break;
case 4:
if (curChar == 60) jjstateSet[jjnewStateCnt++]=3;
break;
case 5:
if (curChar == 61 && kind > 4) kind=4;
break;
case 6:
if (curChar == 61) jjstateSet[jjnewStateCnt++]=5;
break;
case 7:
if ((0x3ff0484ffffdbffL & l) == 0L) break;
if (kind > 6) kind=6;
jjCheckNAdd(7);
break;
case 8:
if ((0x3ff000000000000L & l) == 0L) break;
if (kind > 7) kind=7;
jjCheckNAdd(8);
break;
case 9:
case 10:
if (curChar == 47) jjCheckNAddStates(4,6);
break;
case 12:
if ((0xffff7fffffffdbffL & l) != 0L) jjCheckNAddStates(4,6);
break;
case 13:
if (curChar == 47 && kind > 10) kind=10;
break;
case 14:
if (curChar == 36) jjCheckNAddStates(0,3);
break;
case 15:
if (curChar == 43 && kind > 4) kind=4;
break;
case 16:
if (curChar == 45 && kind > 4) kind=4;
break;
case 18:
if (curChar == 45) jjCheckNAdd(16);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else if (curChar < 128) {
long l=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 0:
case 7:
if ((0x87ffffffd7fffffeL & l) == 0L) break;
if (kind > 6) kind=6;
jjCheckNAdd(7);
break;
case 11:
if (curChar == 92) jjstateSet[jjnewStateCnt++]=10;
break;
case 12:
jjAddStates(4,6);
break;
default :
break;
}
}
 while (i != startsAt);
}
 else {
int hiByte=(int)(curChar >> 8);
int i1=hiByte >> 6;
long l1=1L << (hiByte & 077);
int i2=(curChar & 0xff) >> 6;
long l2=1L << (curChar & 077);
do {
switch (jjstateSet[--i]) {
case 0:
case 7:
if (!jjCanMove_0(hiByte,i1,i2,l1,l2)) break;
if (kind > 6) kind=6;
jjCheckNAdd(7);
break;
case 12:
if (jjCanMove_0(hiByte,i1,i2,l1,l2)) jjAddStates(4,6);
break;
default :
break;
}
}
 while (i != startsAt);
}
if (kind != 0x7fffffff) {
jjmatchedKind=kind;
jjmatchedPos=curPos;
kind=0x7fffffff;
}
++curPos;
if ((i=jjnewStateCnt) == (startsAt=19 - (jjnewStateCnt=startsAt))) return curPos;
try {
curChar=input_stream.readChar();
}
 catch (java.io.IOException e) {
return curPos;
}
}
}
