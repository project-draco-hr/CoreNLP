{
  SemanticGraph tree=sentence.get(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class);
  if (tree == null) {
    tree=sentence.get(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class);
  }
  List<CoreLabel> tokens=sentence.get(CoreAnnotations.TokensAnnotation.class);
  boolean[] isOperator=new boolean[tokens.size()];
  for (int i=0; i < isOperator.length; ++i) {
    OperatorSpec spec=tokens.get(i).get(OperatorAnnotation.class);
    if (spec != null) {
      for (int k=spec.quantifierBegin; k < spec.quantifierEnd; ++k) {
        isOperator[k]=true;
      }
    }
  }
  SemgrexMatcher matcher=UNARY_PATTERN.matcher(tree);
  while (matcher.find()) {
    IndexedWord quantifier=matcher.getNode("quantifier");
    IndexedWord subject=matcher.getNode("subject");
    if (!isOperator[quantifier.index() - 1]) {
      Optional<Triple<Operator,Integer,Integer>> quantifierInfo=validateQuantiferByHead(sentence,quantifier);
      if (quantifierInfo.isPresent()) {
        OperatorSpec scope=computeScope(tree,quantifierInfo.get().first,subject,Pair.makePair(quantifierInfo.get().second,quantifierInfo.get().third),null,false,null);
        CoreLabel token=tokens.get(quantifier.index() - 1);
        token.set(OperatorAnnotation.class,scope);
      }
    }
  }
}
