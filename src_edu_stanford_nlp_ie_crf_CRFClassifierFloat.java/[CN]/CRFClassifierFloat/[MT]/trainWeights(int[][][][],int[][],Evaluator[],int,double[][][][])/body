{
  CRFLogConditionalObjectiveFloatFunction func=new CRFLogConditionalObjectiveFloatFunction(data,labels,featureIndex,windowSize,classIndex,labelIndices,map,flags.backgroundSymbol,flags.sigma);
  cliquePotentialFunctionHelper=func;
  QNMinimizer minimizer;
  if (flags.interimOutputFreq != 0) {
    FloatFunction monitor=new ResultStoringFloatMonitor(flags.interimOutputFreq,flags.serializeTo);
    minimizer=new QNMinimizer(monitor);
  }
 else {
    minimizer=new QNMinimizer();
  }
  if (pruneFeatureItr == 0) {
    minimizer.setM(flags.QNsize);
  }
 else {
    minimizer.setM(flags.QNsize2);
  }
  float[] initialWeights;
  if (flags.initialWeights == null) {
    initialWeights=func.initial();
  }
 else {
    try {
      System.err.println("Reading initial weights from file " + flags.initialWeights);
      DataInputStream dis=new DataInputStream(new BufferedInputStream(new GZIPInputStream(new FileInputStream(flags.initialWeights))));
      initialWeights=ConvertByteArray.readFloatArr(dis);
    }
 catch (    IOException e) {
      throw new RuntimeException("Could not read from float initial weight file " + flags.initialWeights);
    }
  }
  System.err.println("numWeights: " + initialWeights.length);
  float[] weights=minimizer.minimize(func,(float)flags.tolerance,initialWeights);
  return ArrayMath.floatArrayToDoubleArray(weights);
}
