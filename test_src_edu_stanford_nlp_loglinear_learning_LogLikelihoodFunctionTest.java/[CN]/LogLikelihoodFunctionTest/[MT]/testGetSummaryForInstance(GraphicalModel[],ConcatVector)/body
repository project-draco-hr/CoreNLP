{
  LogLikelihoodDifferentiableFunction fn=new LogLikelihoodDifferentiableFunction();
  for (  GraphicalModel model : dataset) {
    double goldLogLikelihood=logLikelihood(model,weights);
    ConcatVector goldGradient=definitionOfDerivative(model,weights);
    ConcatVector gradient=new ConcatVector(0);
    double logLikelihood=fn.getSummaryForInstance(model,weights,gradient);
    assertEquals(goldLogLikelihood,logLikelihood,Math.max(1.0e-3,goldLogLikelihood * 1.0e-2));
    ConcatVector difference=goldGradient.deepClone();
    difference.addVectorInPlace(gradient,-1);
    double distance=Math.sqrt(difference.dotProduct(difference));
    if (distance > 5.0e-2) {
      System.err.println("Definitional and calculated gradient differ!");
      System.err.println("Definition approx: " + goldGradient);
      System.err.println("Calculated: " + gradient);
    }
    assertEquals(0.0,distance,5.0e-2);
  }
}
