{
  List<CoreLabel> sent=s.get(TokensAnnotation.class);
  Tree tree=s.get(TreeAnnotation.class);
  tree.indexLeaves();
  SemanticGraph dependency=s.get(CollapsedDependenciesAnnotation.class);
  final String mentionPattern="/^(?:NP|PRP)/";
  TregexPattern tgrepPattern=TregexPattern.compile(mentionPattern);
  TregexMatcher matcher=tgrepPattern.matcher(tree);
  while (matcher.find()) {
    Tree t=matcher.getMatch();
    List<Tree> mLeaves=t.getLeaves();
    int beginIdx=((CoreLabel)mLeaves.get(0).label()).get(IndexAnnotation.class) - 1;
    int endIdx=((CoreLabel)mLeaves.get(mLeaves.size() - 1).label()).get(IndexAnnotation.class);
    IntPair mSpan=new IntPair(beginIdx,endIdx);
    if (!mentionSpanSet.contains(mSpan) && !insideNE(mSpan,namedEntitySpanSet)) {
      int mentionID=assignIds ? ++maxID : -1;
      Mention m=new Mention(mentionID,beginIdx,endIdx,dependency,new ArrayList<CoreLabel>(sent.subList(beginIdx,endIdx)),t);
      mentions.add(m);
      mentionSpanSet.add(mSpan);
    }
  }
}
