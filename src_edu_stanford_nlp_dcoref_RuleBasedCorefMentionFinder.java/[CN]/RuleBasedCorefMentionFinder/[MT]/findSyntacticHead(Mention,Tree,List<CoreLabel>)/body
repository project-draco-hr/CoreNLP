{
  int endIdx=m.endIndex;
  if (m.originalSpan.size() > 0) {
    String lastWord=m.originalSpan.get(m.originalSpan.size() - 1).get(CoreAnnotations.TextAnnotation.class);
    if ((lastWord.equals("'s") || lastWord.equals("'")) && m.originalSpan.size() != 1)     endIdx--;
  }
  Tree exactMatch=findTreeWithSpan(root,m.startIndex,endIdx);
  if (exactMatch != null) {
    return safeHead(exactMatch,endIdx);
  }
  if (allowReparsing) {
    int approximateness=0;
    List<CoreLabel> extentTokens=new ArrayList<CoreLabel>();
    extentTokens.add(initCoreLabel("It"));
    extentTokens.add(initCoreLabel("was"));
    final int ADDED_WORDS=2;
    for (int i=m.startIndex; i < endIdx; i++) {
      CoreLabel label=tokens.get(i);
      if (!"-".equals(label.word())) {
        extentTokens.add((CoreLabel)label.labelFactory().newLabel(label));
      }
 else {
        approximateness++;
      }
    }
    extentTokens.add(initCoreLabel("."));
    ParserConstraint constraint=new ParserConstraint(ADDED_WORDS,extentTokens.size() - 1,Pattern.compile(".*"));
    List<ParserConstraint> constraints=Collections.singletonList(constraint);
    Tree tree=parse(extentTokens,constraints);
    convertToCoreLabels(tree);
    tree.indexSpans(m.startIndex - ADDED_WORDS);
    Tree subtree=findPartialSpan(tree,m.startIndex);
    Tree extentHead=safeHead(subtree,endIdx);
    assert(extentHead != null);
    CoreLabel l=(CoreLabel)extentHead.label();
    Tree realHead=funkyFindLeafWithApproximateSpan(root,l.value(),l.get(CoreAnnotations.BeginIndexAnnotation.class),approximateness);
    assert(realHead != null);
    return realHead;
  }
  Tree wordMatch=findTreeWithSmallestSpan(root,m.startIndex,endIdx);
  if (wordMatch != null) {
    Tree head=safeHead(wordMatch,endIdx);
    if (head != null) {
      int index=((CoreLabel)head.label()).get(CoreAnnotations.IndexAnnotation.class) - 1;
      if (index >= m.startIndex && index < endIdx) {
        return head;
      }
    }
  }
  int lastNounIdx=endIdx - 1;
  for (int i=m.startIndex; i < m.endIndex; i++) {
    if (tokens.get(i).tag().startsWith("N"))     lastNounIdx=i;
 else     if (tokens.get(i).tag().startsWith("W"))     break;
  }
  List<Tree> leaves=root.getLeaves();
  Tree endLeaf=leaves.get(lastNounIdx);
  return endLeaf;
}
