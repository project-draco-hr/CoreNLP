{
  Tree tree=s.get(TreeAnnotation.class);
  List<CoreLabel> sent=s.get(TokensAnnotation.class);
  Set<Mention> remove=new HashSet<Mention>();
  for (  Mention m : mentions) {
    String headPOS=m.headWord.get(PartOfSpeechAnnotation.class);
    String headNE=m.headWord.get(NamedEntityTagAnnotation.class);
    if (isPleonastic(m,tree))     remove.add(m);
    if (dict.nonWords.contains(m.headString))     remove.add(m);
    if (dict.quantifiers.contains(m.originalSpan.get(0).get(TextAnnotation.class).toLowerCase()))     remove.add(m);
    if (partitiveRule(m,sent,dict))     remove.add(m);
    if (headPOS.equals("NN") && !dict.temporals.contains(m.headString) && (m.originalSpan.size() == 1 || m.originalSpan.get(0).get(PartOfSpeechAnnotation.class).equals("JJ"))) {
      remove.add(m);
    }
    if (m.headString.equals("%"))     remove.add(m);
    if (headNE.equals("PERCENT") || headNE.equals("MONEY"))     remove.add(m);
    if (dict.adjectiveNation.contains(m.spanToString().toLowerCase()))     remove.add(m);
    if (inStopList(m))     remove.add(m);
  }
  for (  Mention m1 : mentions) {
    for (    Mention m2 : mentions) {
      if (m1 == m2 || remove.contains(m1) || remove.contains(m2))       continue;
      if (m1.sentNum == m2.sentNum && m1.headWord == m2.headWord && m2.insideIn(m1)) {
        if (m2.endIndex < sent.size() && (sent.get(m2.endIndex).get(PartOfSpeechAnnotation.class).equals(",") || sent.get(m2.endIndex).get(PartOfSpeechAnnotation.class).equals("CC"))) {
          continue;
        }
        remove.add(m2);
      }
    }
  }
  mentions.removeAll(remove);
}
