{
  ClassicCounter<String> correct=new ClassicCounter<String>();
  ClassicCounter<String> predictionCount=new ClassicCounter<String>();
  boolean countGoldLabels=false;
  if (labelCount == null) {
    labelCount=new ClassicCounter<String>();
    countGoldLabels=true;
  }
  for (  Pair<String,String> predictedActual : results.keySet()) {
    String predicted=predictedActual.first;
    String actual=predictedActual.second;
    if (predicted.equals(actual)) {
      correct.incrementCount(actual,results.getCount(predictedActual));
    }
    predictionCount.incrementCount(predicted,results.getCount(predictedActual));
    if (countGoldLabels) {
      labelCount.incrementCount(actual,results.getCount(predictedActual));
    }
  }
  DecimalFormat formatter=new DecimalFormat();
  formatter.setMaximumFractionDigits(1);
  formatter.setMinimumFractionDigits(1);
  double totalCount=0;
  double totalCorrect=0;
  double totalPredicted=0;
  pw.println("Label\tCorrect\tPredict\tActual\tPrecn\tRecall\tF");
  List<String> labels=new ArrayList<String>(labelCount.keySet());
  Collections.sort(labels);
  for (  String label : labels) {
    double numcorrect=correct.getCount(label);
    double predicted=predictionCount.getCount(label);
    double trueCount=labelCount.getCount(label);
    double precision=(predicted > 0) ? (numcorrect / predicted) : 0;
    double recall=numcorrect / trueCount;
    double f=(precision + recall > 0) ? 2 * precision * recall / (precision + recall) : 0.0;
    pw.println(StringUtils.padOrTrim(label,MAX_LABEL_LENGTH) + "\t" + numcorrect+ "\t"+ predicted+ "\t"+ trueCount+ "\t"+ formatter.format(precision * 100)+ "\t"+ formatter.format(100 * recall)+ "\t"+ formatter.format(100 * f));
    if (!RelationMention.isUnrelatedLabel(label)) {
      totalCount+=trueCount;
      totalCorrect+=numcorrect;
      totalPredicted+=predicted;
    }
  }
  double precision=(totalPredicted > 0) ? (totalCorrect / totalPredicted) : 0;
  double recall=totalCorrect / totalCount;
  double f=(totalPredicted > 0 && totalCorrect > 0) ? 2 * precision * recall / (precision + recall) : 0.0;
  pw.println("Total\t" + totalCorrect + "\t"+ totalPredicted+ "\t"+ totalCount+ "\t"+ formatter.format(100 * precision)+ "\t"+ formatter.format(100 * recall)+ "\t"+ formatter.format(100 * f));
}
