{
  try {
    ReadDataWeka test=new ReadDataWeka(fileName,train);
    data=new Experiments(train.vArray);
    train.makeStringsClasses();
    inds=getSortedAccuracy();
    if (selectOverlap) {
      selectClassifiers();
    }
    int res=0, resVoting=0, resBestHeldOut=0, resWeightedVoting=0;
    for (int d=0; d < test.v.size(); d++) {
      DataDouble dD=test.getData(d);
      int y=getClassification(dD);
      if (clean && kind.equals("mx")) {
        System.out.println(train.getYName(y));
      }
      if (y == dD.getYNo()) {
        res++;
      }
      int yH=train.getYIndex(train.getAttrName(inds[0],(int)dD.x[inds[0]]));
      if (dD.getYNo() == yH) {
        resBestHeldOut++;
      }
      int yV=getClassificationVoting(dD,top,false);
      if (dD.getYNo() == yV) {
        resVoting++;
      }
      if (clean && kind.equals("maj")) {
        System.out.println(train.getYName(yV));
      }
      int yWV=getClassificationWeightedVoting(dD,top,false);
      if (dD.getYNo() == yWV) {
        resWeightedVoting++;
      }
      if (clean && kind.equals("w")) {
        System.out.println(train.getYName(yWV));
      }
    }
    if (!clean) {
      System.out.println(mE.prob.lambda.length + " " + top);
      System.out.println(train.numSamples() / (double)train.numClasses);
      System.out.println("Accuracy weighted " + resWeightedVoting / (double)test.numSamples());
      System.out.println("Accuracy best " + resBestHeldOut / (double)test.numSamples());
      System.out.println("Accuracy voting " + resVoting / (double)test.numSamples());
      System.out.println("Accuracy " + res / (double)test.numSamples());
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
