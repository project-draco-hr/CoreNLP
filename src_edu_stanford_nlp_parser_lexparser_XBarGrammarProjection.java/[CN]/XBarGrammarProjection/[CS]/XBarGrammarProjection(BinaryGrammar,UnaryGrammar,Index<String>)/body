{
  Map<BinaryRule,BinaryRule> binaryRules=new HashMap<BinaryRule,BinaryRule>();
  Map<UnaryRule,UnaryRule> unaryRules=new HashMap<UnaryRule,UnaryRule>();
  sourceUG=ug;
  sourceBG=bg;
  sourceStateIndex=stateIndex;
  targetStateIndex=new HashIndex<String>();
  projection=new int[sourceStateIndex.size()];
  scanStates(sourceStateIndex,targetStateIndex);
  targetBG=new BinaryGrammar(targetStateIndex);
  targetUG=new UnaryGrammar(targetStateIndex);
  for (  BinaryRule br : bg) {
    BinaryRule rule=projectBinaryRule(br);
    BinaryRule old=binaryRules.get(rule);
    if (old == null || rule.score > old.score) {
      binaryRules.put(rule,rule);
    }
  }
  for (  BinaryRule br : binaryRules.keySet()) {
    targetBG.addRule(br);
  }
  targetBG.splitRules();
  for (int parent=0; parent < sourceStateIndex.size(); parent++) {
    for (Iterator<UnaryRule> urI=ug.ruleIteratorByParent(parent); urI.hasNext(); ) {
      UnaryRule sourceRule=urI.next();
      UnaryRule rule=projectUnaryRule(sourceRule);
      UnaryRule old=unaryRules.get(rule);
      if (old == null || rule.score > old.score) {
        unaryRules.put(rule,rule);
      }
    }
  }
  for (  UnaryRule ur : unaryRules.keySet()) {
    targetUG.addRule(ur);
  }
  targetUG.purgeRules();
  System.out.println("Projected " + sourceStateIndex.size() + " states to "+ targetStateIndex.size()+ " states.");
}
