{
  Map<String,Double> result=new HashMap<>();
  Set<String> punctuationTags=getPunctuationTags();
  if (trees.size() != goldTrees.size()) {
    System.err.println("ERROR: Incorrect number of trees.");
    return null;
  }
  int correctArcs=0;
  int correctArcsNoPunc=0;
  int correctHeads=0;
  int correctHeadsNoPunc=0;
  int correctTrees=0;
  int correctTreesNoPunc=0;
  int correctRoot=0;
  int sumArcs=0;
  int sumArcsNoPunc=0;
  for (int i=0; i < trees.size(); ++i) {
    List<CoreLabel> tokens=sentences.get(i).get(CoreAnnotations.TokensAnnotation.class);
    if (trees.get(i).n != goldTrees.get(i).n) {
      System.err.println("ERROR: Tree " + (i + 1) + ": incorrect number of nodes.");
      return null;
    }
    if (!trees.get(i).isTree()) {
      System.err.println("ERROR: Tree " + (i + 1) + ": illegal.");
      return null;
    }
    int nCorrectHead=0;
    int nCorrectHeadNoPunc=0;
    int nNoPunc=0;
    for (int j=1; j <= trees.get(i).n; ++j) {
      if (trees.get(i).getHead(j) == goldTrees.get(i).getHead(j)) {
        ++correctHeads;
        ++nCorrectHead;
        if (trees.get(i).getLabel(j).equals(goldTrees.get(i).getLabel(j)))         ++correctArcs;
      }
      ++sumArcs;
      String tag=tokens.get(j - 1).tag();
      if (!punctuationTags.contains(tag)) {
        ++sumArcsNoPunc;
        ++nNoPunc;
        if (trees.get(i).getHead(j) == goldTrees.get(i).getHead(j)) {
          ++correctHeadsNoPunc;
          ++nCorrectHeadNoPunc;
          if (trees.get(i).getLabel(j).equals(goldTrees.get(i).getLabel(j)))           ++correctArcsNoPunc;
        }
      }
    }
    if (nCorrectHead == trees.get(i).n)     ++correctTrees;
    if (nCorrectHeadNoPunc == nNoPunc)     ++correctTreesNoPunc;
    if (trees.get(i).getRoot() == goldTrees.get(i).getRoot())     ++correctRoot;
  }
  result.put("UAS",correctHeads * 100.0 / sumArcs);
  result.put("UASnoPunc",correctHeadsNoPunc * 100.0 / sumArcsNoPunc);
  result.put("LAS",correctArcs * 100.0 / sumArcs);
  result.put("LASnoPunc",correctArcsNoPunc * 100.0 / sumArcsNoPunc);
  result.put("UEM",correctTrees * 100.0 / trees.size());
  result.put("UEMnoPunc",correctTreesNoPunc * 100.0 / trees.size());
  result.put("ROOT",correctRoot * 100.0 / trees.size());
  return result;
}
