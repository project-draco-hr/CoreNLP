{
  List<CoreMap> sentences=doc.getAnnotation().get(CoreAnnotations.SentencesAnnotation.class);
  for (  String id : doc.corefChainMap.keySet()) {
    Collection<CoreMap> mentions=doc.corefChainMap.get(id);
    for (    CoreMap m : mentions) {
      CoreMap sent=sentences.get(m.get(CoreAnnotations.SentenceIndexAnnotation.class));
      Tree root=sent.get(TreeCoreAnnotations.TreeAnnotation.class);
      Tree t=m.get(TreeCoreAnnotations.TreeAnnotation.class);
      Tree npt=t;
      Tree npt2=t;
      if (npt.isPreTerminal()) {
        npt=npt.parent(root);
      }
      int sentTokenStart=sent.get(CoreAnnotations.TokenBeginAnnotation.class);
      int tokenStart=m.get(CoreAnnotations.TokenBeginAnnotation.class) - sentTokenStart;
      int tokenEnd=m.get(CoreAnnotations.TokenEndAnnotation.class) - sentTokenStart;
      int length=tokenEnd - tokenStart;
      mentionTokenLengthCounter.incrementCount(length);
      IntPair span=t.getSpan();
      if (span != null) {
        if (span.getSource() == tokenStart && span.getTarget() == tokenEnd - 1) {
          mentionExactTreeSpan++;
        }
 else {
          logger.info("Tree span is " + span + ", tree node is "+ t);
          logger.info("Mention span is " + tokenStart + " "+ (tokenEnd - 1)+ ", mention is "+ m);
        }
      }
 else {
        logger.warning("No span for " + t);
      }
      IntPair nptSpan=npt.getSpan();
      if (nptSpan.getSource() == tokenStart && nptSpan.getTarget() == tokenEnd - 1) {
        nonPretermSpanMatches++;
        npt2=npt;
      }
 else {
        mentionTreePretermNonPretermNoMatchLabelCounter.incrementCount(t.label().value());
        logger.info("NPT: Tree span is " + span + ", tree node is "+ npt);
        logger.info("NPT: Mention span is " + tokenStart + " "+ (tokenEnd - 1)+ ", mention is "+ m);
        Label tlabel=t.label();
        if (tlabel instanceof CoreLabel) {
          CoreMap mention=((CoreLabel)tlabel).get(CorefMentionAnnotation.class);
          String corefClusterId=mention.get(CorefCoreAnnotations.CorefAnnotation.class);
          Collection<CoreMap> clusteredMentions=doc.corefChainMap.get(corefClusterId);
          for (          CoreMap m2 : clusteredMentions) {
            logger.info("NPT: Clustered mention " + m2.get(CoreAnnotations.TextAnnotation.class));
          }
        }
      }
      totalMentions++;
      mentionTreeLabelCounter.incrementCount(t.label().value());
      mentionTreeNonPretermLabelCounter.incrementCount(npt.label().value());
      mentionTreeMixedLabelCounter.incrementCount(npt2.label().value());
      Label tlabel=t.label();
      if (tlabel instanceof CoreLabel) {
        if (((CoreLabel)tlabel).containsKey(NamedEntityAnnotation.class)) {
          nerMentions++;
          nerMentionTokenLengthCounter.incrementCount(length);
          Tree parent=t.parent(root);
          while (parent != null) {
            Label plabel=parent.label();
            if (plabel instanceof CoreLabel) {
              if (((CoreLabel)plabel).containsKey(NamedEntityAnnotation.class)) {
                logger.info("NER Mention: " + m);
                CoreMap parentNerChunk=((CoreLabel)plabel).get(NamedEntityAnnotation.class);
                logger.info("Nested inside NER Mention: " + parentNerChunk);
                logger.info("Nested inside NER Mention parent node: " + parent);
                nestedNerMentions++;
                break;
              }
            }
            parent=parent.parent(root);
          }
        }
      }
    }
  }
}
