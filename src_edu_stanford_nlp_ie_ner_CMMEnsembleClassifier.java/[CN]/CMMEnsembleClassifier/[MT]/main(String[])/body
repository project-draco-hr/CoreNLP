{
  Properties props=StringUtils.argsToProperties(args);
  String trainPropsString=(String)props.remove("trainProps");
  String serializedClassifiers=(String)props.remove("classifiers");
  CMMEnsembleClassifier ensemble=new CMMEnsembleClassifier(props);
  List<String> serialized=new ArrayList<String>();
  if (trainPropsString != null) {
    String[] trainProps=trainPropsString.split(";");
    for (int i=0; i < trainProps.length; i++) {
      Properties p=new Properties();
      try {
        p.load(new BufferedInputStream(new FileInputStream(trainProps[i])));
      }
 catch (      IOException e) {
        System.err.println("Could not load Properties file: " + trainProps[i]);
        continue;
      }
      CMMClassifier c=new CMMClassifier(p);
      c.train();
      c.serializeClassifier(c.flags.serializeTo);
      serialized.add(c.flags.serializeTo);
    }
  }
  if (ensemble.flags.loadClassifier != null) {
    ensemble.loadClassifier(ensemble.flags.loadClassifier);
  }
 else {
    if (serializedClassifiers != null) {
      serialized.addAll(Arrays.asList(serializedClassifiers.split(";")));
    }
    if (serialized.isEmpty()) {
      System.err.println("Must either train or specify classifiers for the ensemble.");
      System.exit(1);
    }
    for (    String aSerialized : serialized) {
      CMMClassifier c=new CMMClassifier();
      String path=aSerialized;
      c.loadClassifierNoExceptions(path);
      c.flags.serializeTo=path;
      ensemble.addClassifier(c,0.5);
    }
  }
  if (ensemble.flags.trainFile != null) {
    ensemble.train();
    if (ensemble.flags.serializeTo != null) {
      ensemble.serializeClassifier(ensemble.flags.serializeTo);
    }
  }
  for (  CMMClassifier c : ensemble.classifiers.keySet()) {
    if (ensemble.classIndex == null) {
      ensemble.classIndex=c.classIndex;
    }
    if (ensemble.answerArrays == null) {
      ensemble.answerArrays=c.answerArrays;
    }
    ensemble.flags.maxLeft=Math.max(ensemble.flags.maxLeft,c.flags.maxLeft);
    if (c.flags.useTaggySequences) {
      ensemble.flags.useTaggySequences=true;
    }
    if (c.flags.usePrevSequences) {
      ensemble.flags.usePrevSequences=true;
    }
    if (c.flags.useNextSequences) {
      ensemble.flags.useNextSequences=true;
    }
    if (c.flags.useSequences) {
      ensemble.flags.useSequences=true;
    }
  }
  if (ensemble.flags.testFile != null) {
    ensemble.classifyAndWriteAnswers(ensemble.flags.testFile,ensemble.makeReaderAndWriter());
  }
}
