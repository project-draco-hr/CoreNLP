{
  if (args.length < MIN_ARGS) {
    System.err.println(usage());
    System.exit(-1);
  }
  Properties options=StringUtils.argsToProperties(args,optionArgDefs());
  boolean VERBOSE=PropertiesUtils.getBool(options,"v",false);
  Language LANGUAGE=PropertiesUtils.get(options,"l",Language.English,Language.class);
  int MAX_GOLD_YIELD=PropertiesUtils.getInt(options,"g",Integer.MAX_VALUE);
  int MAX_GUESS_YIELD=PropertiesUtils.getInt(options,"y",Integer.MAX_VALUE);
  String[] parsedArgs=options.getProperty("","").split("\\s+");
  if (parsedArgs.length != MIN_ARGS) {
    System.err.println(usage());
    System.exit(-1);
  }
  File goldFile=new File(parsedArgs[0]);
  File guessFile=new File(parsedArgs[1]);
  final TreebankLangParserParams tlpp=LANGUAGE.params;
  final PrintWriter pwOut=tlpp.pw();
  final Treebank guessTreebank=tlpp.diskTreebank();
  guessTreebank.loadPath(guessFile);
  pwOut.println("GUESS TREEBANK:");
  pwOut.println(guessTreebank.textualSummary());
  final Treebank goldTreebank=tlpp.diskTreebank();
  goldTreebank.loadPath(goldFile);
  pwOut.println("GOLD TREEBANK:");
  pwOut.println(goldTreebank.textualSummary());
  final CollinsDepEval depEval=new CollinsDepEval("CollinsDep",true,tlpp.headFinder(),tlpp.treebankLanguagePack().startSymbol());
  final TreeTransformer tc=tlpp.collinizer();
  final Iterator<Tree> goldItr=goldTreebank.iterator();
  int goldLineId=0;
  int skippedGuessTrees=0;
  for (  final Tree guess : guessTreebank) {
    final Tree evalGuess=tc.transformTree(guess);
    if (guess.yield().size() > MAX_GUESS_YIELD) {
      skippedGuessTrees++;
      continue;
    }
    boolean doneEval=false;
    while (goldItr.hasNext() && !doneEval) {
      final Tree gold=goldItr.next();
      final Tree evalGold=tc.transformTree(gold);
      goldLineId++;
      if (gold.yield().size() > MAX_GOLD_YIELD) {
        continue;
      }
 else       if (evalGold.yield().size() != evalGuess.yield().size()) {
        pwOut.println("Yield mismatch at gold line " + goldLineId);
        skippedGuessTrees++;
        break;
      }
      depEval.evaluate(evalGuess,evalGold,((VERBOSE) ? pwOut : null));
      doneEval=true;
    }
  }
  pwOut.println("================================================================================");
  if (skippedGuessTrees != 0)   pwOut.printf("%s %d guess trees\n",((MAX_GUESS_YIELD < Integer.MAX_VALUE) ? "Skipped" : "Unable to evaluate"),skippedGuessTrees);
  depEval.display(true,pwOut);
  pwOut.close();
}
