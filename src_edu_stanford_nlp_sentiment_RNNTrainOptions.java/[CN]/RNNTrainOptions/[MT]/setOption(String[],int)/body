{
  if (args[argIndex].equalsIgnoreCase("-batchSize")) {
    batchSize=Integer.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-epochs")) {
    epochs=Integer.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-debugOutputEpochs")) {
    debugOutputEpochs=Integer.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-maxTrainTimeSeconds")) {
    maxTrainTimeSeconds=Integer.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-learningRate")) {
    learningRate=Double.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-scalingForInit")) {
    scalingForInit=Double.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-regTransformMatrix")) {
    regTransformMatrix=Double.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-regTransformTensor")) {
    regTransformTensor=Double.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-regClassification")) {
    regClassification=Double.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-regWordVector")) {
    regWordVector=Double.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-initialAdagradWeight")) {
    initialAdagradWeight=Double.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-adagradResetFrequency")) {
    adagradResetFrequency=Integer.valueOf(args[argIndex + 1]);
    return argIndex + 2;
  }
 else   if (args[argIndex].equalsIgnoreCase("-classWeights")) {
    String classWeightString=args[argIndex + 1];
    String[] pieces=classWeightString.split(",");
    classWeights=new double[pieces.length];
    for (int i=0; i < pieces.length; ++i) {
      classWeights[i]=Double.valueOf(pieces[i]);
    }
    return argIndex + 2;
  }
 else {
    return argIndex;
  }
}
