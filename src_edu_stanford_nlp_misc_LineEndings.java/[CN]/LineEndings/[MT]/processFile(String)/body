{
  int numCR=0;
  int numLF=0;
  int numCRLF=0;
  boolean lastWasCR=false;
  String content=null;
  File fl=new File(name);
  if (fl.isDirectory()) {
    System.err.println(name + ": a directory (NOT PROCESSED)");
    return;
  }
  try {
    content=IOUtils.slurpFile(name);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  if (content == null) {
    System.err.println(name + ": could not be read (no such file?)");
    return;
  }
  int cleng=content.length();
  for (int i=0; i < cleng; i++) {
    char ch=content.charAt(i);
    if (ch == '\n') {
      numLF++;
      if (lastWasCR) {
        numCRLF++;
      }
      lastWasCR=false;
    }
 else     if (ch == '\r') {
      numCR++;
      lastWasCR=true;
    }
 else {
      lastWasCR=false;
    }
  }
  if (numCR == 0 && numLF > 0) {
    if (!nonUnix) {
      System.err.print(name);
      System.err.print(": ");
      System.err.println("Unix text file (LF line endings)");
    }
  }
 else {
    System.err.print(name);
    System.err.print(": ");
    if (numLF == 0 && numCR > 0) {
      System.err.println("Mac text file (CR line endings)");
    }
 else     if (numCRLF == numCR && numCRLF == numLF && numCRLF > 0) {
      System.err.println("Windows text file (CR/LF line endings)");
    }
 else     if (numLF == 0 && numCR == 0) {
      System.err.println("One line text file (no line endings!)");
    }
 else {
      System.err.println("Mixed up text file (varied line endings)");
    }
  }
  if (fix && ((fixChar == '\n' && numCR > 0) || (fixChar == '\r' && numLF > 0))) {
    boolean justWroteCRasLF=false;
    char[] out=new char[cleng + 1];
    int numWrote=0;
    for (int i=0; i < cleng; i++) {
      char ch=content.charAt(i);
      if (ch == '\n') {
        if (justWroteCRasLF) {
          justWroteCRasLF=false;
        }
 else {
          out[numWrote++]=fixChar;
        }
      }
 else       if (ch == '\r') {
        if (justWroteCRasLF && undoubleCR) {
          justWroteCRasLF=false;
        }
 else {
          out[numWrote++]=fixChar;
          justWroteCRasLF=true;
        }
      }
 else {
        out[numWrote++]=ch;
        justWroteCRasLF=false;
      }
    }
    if (out[numWrote - 1] != fixChar) {
      System.err.println("  Adding eoln at eof");
      out[numWrote++]=fixChar;
    }
    try {
      Writer w=new FileWriter(name);
      w.write(out,0,numWrote);
      w.close();
      System.err.println("  Fixed!");
    }
 catch (    IOException ioe) {
      ioe.printStackTrace();
    }
  }
}
