{
  final Logger logger=Logger.getLogger(this.getClass().getName());
  try {
    raf.seek(initialOffset);
    resetInflater();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return new Iterator<InputStream>(){
    public boolean hasNext(){
      try {
        gotoEOR();
      }
 catch (      IOException e) {
        if ((e instanceof ZipException) || (e.getMessage() != null && e.getMessage().startsWith("Corrupt GZIP trailer"))) {
          logger.info("Skipping exception " + e.getMessage());
        }
 else {
          throw new RuntimeException(e);
        }
      }
      return moveToNextGzipMember();
    }
    /** 
 * @return An InputStream onto a GZIP Member.
 */
    public InputStream next(){
      try {
        gzipMemberSeek();
      }
 catch (      IOException e) {
        throw new RuntimeException("Failed move to EOR or " + "failed header read: " + e.getMessage());
      }
      return new InputStream(){
        @Override public int read() throws IOException {
          return MultiGZIPInputStream.this.read();
        }
        @Override public int read(        byte b[]) throws IOException {
          return MultiGZIPInputStream.this.read(b);
        }
        @Override public int read(        byte b[],        int off,        int len) throws IOException {
          return MultiGZIPInputStream.this.read(b,off,len);
        }
        @Override public void close(){
        }
      }
;
    }
    public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
