{
  if (data.labelIndex.size() != 2) {
    throw new RuntimeException("LogisticClassifier is only for binary classification!");
  }
  featureIndex=data.featureIndex;
  int[] feature2parentArr=augmentFeatureIndexWithPriors(data,feature2parent);
  weights=getInitialWeights(data.featureIndex,parent2VarPair);
  Minimizer<DiffFunction> minim;
  HierarchicalBayesianLogisticObjectiveFunction lof=null;
  if (data instanceof Dataset<?,?>)   lof=new HierarchicalBayesianLogisticObjectiveFunction(data.numFeatureTypes(),data.getDataArray(),data.getLabelsArray(),dataWeights,feature2parentArr,getRootIDsSet(roots),getParentID2Var(parent2VarPair),estimateVariance);
 else   if (data instanceof RVFDataset<?,?>)   lof=new HierarchicalBayesianLogisticObjectiveFunction(data.numFeatureTypes(),data.getDataArray(),data.getValuesArray(),data.getLabelsArray(),dataWeights,feature2parentArr,getRootIDsSet(roots),getParentID2Var(parent2VarPair),estimateVariance);
  minim=new QNMinimizer(lof);
  weights=minim.minimize(lof,1e-4,weights);
  classes[0]=data.labelIndex.get(0);
  classes[1]=data.labelIndex.get(1);
}
