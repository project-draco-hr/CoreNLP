{
  final AtomicBoolean haveStarted=new AtomicBoolean(false);
  final ReentrantLock metaInfoLock=new ReentrantLock();
  final AtomicInteger numPending=new AtomicInteger(0);
  ArrayList<Runnable> rtn=new ArrayList<Runnable>();
  for (  final Runnable runnable : runnables) {
    rtn.add(new Runnable(){
      public void run(){
        try {
          metaInfoLock.lock();
          if (!haveStarted.getAndSet(true)) {
            startThreads(title);
          }
          metaInfoLock.unlock();
          try {
            runnable.run();
          }
 catch (          Exception e) {
            e.printStackTrace();
            System.exit(1);
          }
catch (          AssertionError e) {
            e.printStackTrace();
            System.exit(1);
          }
          finishThread();
          int numStillPending=numPending.decrementAndGet();
          if (numStillPending <= 0) {
            endThreads(title);
          }
        }
 catch (        Throwable t) {
          t.printStackTrace();
          System.exit(1);
        }
      }
    }
);
    numPending.incrementAndGet();
  }
  return rtn;
}
