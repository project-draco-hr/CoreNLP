{
  if (doc.containsKey(CoreAnnotations.SentencesAnnotation.class)) {
    for (    CoreMap sentence : doc.get(CoreAnnotations.SentencesAnnotation.class)) {
      if (sentence.containsKey(CoreAnnotations.TokensAnnotation.class)) {
        boolean hasTokenBeginAnnotation=sentence.size() > 0 && sentence.get(CoreAnnotations.TokensAnnotation.class).get(0).has(CoreAnnotations.TokenBeginAnnotation.class);
        if (hasTokenBeginAnnotation) {
          sentence.set(CoreAnnotations.NumerizedTokensAnnotation.class,NumberNormalizer.findAndMergeNumbers(sentence));
        }
      }
    }
  }
  if (doc.containsKey(CoreAnnotations.QuotationsAnnotation.class)) {
    if (doc.get(CoreAnnotations.QuotationsAnnotation.class).isEmpty()) {
      doc.remove(CoreAnnotations.QuotationsAnnotation.class);
    }
 else {
      for (      CoreMap quote : doc.get(CoreAnnotations.QuotationsAnnotation.class)) {
        quote.remove(CoreAnnotations.TokensAnnotation.class);
        quote.remove(CoreAnnotations.QuotationsAnnotation.class);
        quote.remove(CoreAnnotations.QuotationsAnnotation.class);
      }
    }
  }
  if (doc.containsKey(CoreAnnotations.SentencesAnnotation.class)) {
    for (int i=0; i < doc.get(CoreAnnotations.SentencesAnnotation.class).size(); ++i) {
      CoreMap sentence=doc.get(CoreAnnotations.SentencesAnnotation.class).get(i);
      for (int k=0; k < sentence.get(CoreAnnotations.TokensAnnotation.class).size(); ++k) {
        CoreLabel token=sentence.get(CoreAnnotations.TokensAnnotation.class).get(k);
        if (doc.containsKey(CoreAnnotations.DocIDAnnotation.class)) {
          token.setDocID(doc.get(CoreAnnotations.DocIDAnnotation.class));
        }
        token.setSentIndex(i);
        if (!token.containsKey(CoreAnnotations.IndexAnnotation.class)) {
          token.set(CoreAnnotations.IndexAnnotation.class,k + 1);
        }
      }
      if (sentence.containsKey(CoreAnnotations.NumerizedTokensAnnotation.class)) {
        for (        CoreMap numerizedToken : sentence.get(CoreAnnotations.NumerizedTokensAnnotation.class)) {
          if (numerizedToken.containsKey(CoreAnnotations.TokensAnnotation.class)) {
            numerizedToken.set(CoreAnnotations.NormalizedNamedEntityTagAnnotation.class,numerizedToken.get(CoreAnnotations.TokensAnnotation.class).get(0).get(CoreAnnotations.NormalizedNamedEntityTagAnnotation.class));
            numerizedToken.set(CoreAnnotations.NamedEntityTagAnnotation.class,numerizedToken.get(CoreAnnotations.TokensAnnotation.class).get(0).get(CoreAnnotations.NamedEntityTagAnnotation.class));
          }
        }
      }
    }
  }
  if (doc.containsKey(CoreAnnotations.TokensAnnotation.class)) {
    for (int i=0; i < doc.get(CoreAnnotations.TokensAnnotation.class).size(); i++) {
      CoreLabel token=doc.get(CoreAnnotations.TokensAnnotation.class).get(i);
      if (token.get(MachineReadingAnnotations.GenderAnnotation.class) == null) {
        token.remove(MachineReadingAnnotations.GenderAnnotation.class);
      }
    }
  }
  if (!doc.equals(readDoc)) {
    if (doc.containsKey(CorefCoreAnnotations.CorefChainAnnotation.class) && !doc.get(CorefCoreAnnotations.CorefChainAnnotation.class).equals(doc.get(CorefCoreAnnotations.CorefChainAnnotation.class))) {
      assertTrue("Coref chain differs between documents",false);
    }
 else     if (doc.containsKey(CoreAnnotations.TokensAnnotation.class) && !doc.get(CoreAnnotations.TokensAnnotation.class).equals(readDoc.get(CoreAnnotations.TokensAnnotation.class))) {
      for (int i=0; i < doc.get(CoreAnnotations.TokensAnnotation.class).size(); ++i) {
        CoreLabel tokA=doc.get(CoreAnnotations.TokensAnnotation.class).get(i);
        CoreLabel tokB=readDoc.get(CoreAnnotations.TokensAnnotation.class).get(i);
        if (!tokA.equals(tokB)) {
          for (          Class keyA : tokA.keySet()) {
            if (!tokB.containsKey(keyA)) {
              assertTrue("Read document doesn't have key: " + keyA,false);
            }
 else             if (tokA.get(keyA) != null && !tokA.get(keyA).equals(tokB.get(keyA))) {
              assertTrue("Documents disagree on key: " + keyA,false);
            }
          }
          for (          Class keyB : tokB.keySet()) {
            if (!tokA.containsKey(keyB)) {
              assertTrue("Read document doesn't have key: " + keyB,false);
            }
 else             if (tokB.get(keyB) != null && !tokB.get(keyB).equals(tokA.get(keyB))) {
              assertTrue("Documents disagree on key: " + keyB,false);
            }
          }
          assertTrue("Token " + i + " doesn't match",false);
        }
      }
    }
 else     if (doc.containsKey(CoreAnnotations.SentencesAnnotation.class) && !doc.get(CoreAnnotations.SentencesAnnotation.class).equals(readDoc.get(CoreAnnotations.SentencesAnnotation.class))) {
      for (int i=0; i < doc.get(CoreAnnotations.SentencesAnnotation.class).size(); ++i) {
        CoreMap sentA=doc.get(CoreAnnotations.SentencesAnnotation.class).get(i);
        CoreMap sentB=readDoc.get(CoreAnnotations.SentencesAnnotation.class).get(i);
        if (!sentA.equals(sentB)) {
          if (sentA.containsKey(TreeCoreAnnotations.TreeAnnotation.class) && !sentA.get(TreeCoreAnnotations.TreeAnnotation.class).equals(sentB.get(TreeCoreAnnotations.TreeAnnotation.class))) {
            assertTrue("Tree for sentence " + i + " doesn't match",false);
          }
 else           if (sentA.containsKey(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class) && !sentA.get(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class).equals(sentB.get(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class))) {
            System.err.println("Graph A:");
            System.err.println("========");
            System.err.println(sentA.get(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class));
            System.err.println("Graph B:");
            System.err.println("========");
            System.err.println(sentB.get(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class));
            assertTrue("Basic graph for sentence " + i + " doesn't match",false);
          }
 else           if (sentA.containsKey(SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation.class) && !sentA.get(SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation.class).equals(sentB.get(SemanticGraphCoreAnnotations.CollapsedCCProcessedDependenciesAnnotation.class))) {
            assertTrue("Collapsed CC processed graph for sentence " + i + " doesn't match",false);
          }
 else           if (sentA.containsKey(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class) && !sentA.get(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class).equals(sentB.get(SemanticGraphCoreAnnotations.CollapsedDependenciesAnnotation.class))) {
            assertTrue("Collapsed graph for sentence " + i + " doesn't match",false);
          }
 else           if (sentA.containsKey(SemanticGraphCoreAnnotations.AlternativeDependenciesAnnotation.class) && !sentA.get(SemanticGraphCoreAnnotations.AlternativeDependenciesAnnotation.class).equals(sentB.get(SemanticGraphCoreAnnotations.AlternativeDependenciesAnnotation.class))) {
            assertTrue("Alternate graph for sentence " + i + " doesn't match",false);
          }
 else {
            for (            Class x : sentA.keySet()) {
              if (!sentA.get(x).equals(sentB.get(x))) {
                assertTrue("" + x.getSimpleName() + " for sentence "+ i+ " does not match",false);
              }
            }
            for (            Class x : sentB.keySet()) {
              if (!sentB.get(x).equals(sentA.get(x))) {
                assertTrue("" + x.getSimpleName() + " for sentence "+ i+ " does not match",false);
              }
            }
            assertTrue("Sentence " + i + " doesn't match (don't know why?)",false);
          }
        }
      }
    }
 else {
      assertTrue("Annotations don't match (don't know why?)",false);
    }
  }
  assertEquals("More specific cause of error failed!",doc,readDoc);
}
