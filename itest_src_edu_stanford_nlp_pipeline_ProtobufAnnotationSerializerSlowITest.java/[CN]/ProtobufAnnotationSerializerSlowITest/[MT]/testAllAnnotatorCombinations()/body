{
  String[] possibleAnnotators=possibleAnnotators();
  Properties props=new Properties();
  for (int i=1; i < (0x1 << (possibleAnnotators.length)); ++i) {
    Set<String> annotatorsToConsider=new HashSet<String>();
    for (int k=0; k < possibleAnnotators.length; ++k) {
      int mask=(0x1 << k);
      if ((i & mask) != 0) {
        annotatorsToConsider.add(possibleAnnotators[k]);
      }
    }
    new StanfordCoreNLP();
    List<String> annotators=new ArrayList<String>();
    Set<String> annotatorsAdded=new HashSet<String>();
    boolean wasChanged=true;
    while (wasChanged) {
      wasChanged=false;
      Iterator<String> iter=annotatorsToConsider.iterator();
      while (iter.hasNext()) {
        String annotator=iter.next();
        boolean valid=true;
        try {
          for (          Annotator.Requirement requirement : StanfordCoreNLP.getExistingAnnotator(annotator).requires()) {
            if (!annotatorsAdded.contains(requirement.name)) {
              valid=false;
            }
          }
        }
 catch (        NullPointerException e) {
        }
        if (valid) {
          annotators.add(annotator);
          annotatorsAdded.add(annotator);
          iter.remove();
          wasChanged=true;
        }
      }
    }
    if (!annotatorsToConsider.isEmpty()) {
      continue;
    }
    props.setProperty("annotators",StringUtils.join(annotators,","));
    StanfordCoreNLP pipeline;
    pipeline=new StanfordCoreNLP(props);
    try {
      System.out.println("Testing " + props.getProperty("annotators"));
      AnnotationSerializer serializer=new ProtobufAnnotationSerializer();
      Annotation doc=pipeline.process(THOROUGH_TEST ? prideAndPrejudiceChapters1to5 : prideAndPrejudiceFirstBit);
      ByteArrayOutputStream ks=new ByteArrayOutputStream();
      serializer.save(doc,ks);
      ks.close();
      InputStream kis=new ByteArrayInputStream(ks.toByteArray());
      Annotation readDoc=serializer.load(kis);
      kis.close();
      sameAsRead(doc,readDoc);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
}
