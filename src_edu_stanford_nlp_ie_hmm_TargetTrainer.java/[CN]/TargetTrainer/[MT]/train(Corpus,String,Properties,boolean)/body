{
  String propField;
  String propValue;
  String targetType;
  int numTargetStates;
  boolean trainNow=!("conditional").equals(props.getProperty("trainType"));
  propField=targetField + ".targetType";
  propValue=props.getProperty(propField);
  if (propValue != null) {
    targetType=propValue;
  }
 else {
    targetType=props.getProperty("targetType");
  }
  propField=targetField + ".nts";
  propValue=props.getProperty(propField);
  if (propValue != null) {
    numTargetStates=Integer.parseInt(propValue);
  }
 else {
    numTargetStates=Integer.parseInt(props.getProperty("nts"));
  }
  if (verbose) {
    System.err.println("Target type for target " + targetField + ": "+ targetType);
    if (!targetType.equals("learned")) {
      System.err.println("Num target states: " + numTargetStates);
    }
  }
  Corpus targetDocs=new Corpus(trainDocs);
  targetDocs.retainOnlyTarget(targetField);
  if (verbose) {
    System.err.println("Training the " + targetField + " target HMM on "+ targetDocs.size()+ " mini-documents.");
  }
  HMM thmm=null;
  if (targetType.equals("learned") || targetType.equals("lchain")) {
    TargetTrainer tt=new TargetTrainer();
    props.setProperty("curTargetType",targetType);
    thmm=learnBySearching(targetDocs,targetField,props,verbose);
  }
 else   if (targetType.equals("learned2")) {
    TargetTrainer tt=new TargetTrainer();
    thmm=learnByPruning(targetDocs,targetField,props,verbose);
  }
 else   if (targetType.equals("dlramt")) {
    thmm=idealDlramt();
  }
 else {
    Structure ts=null;
    if (targetType.equals("ergodic")) {
      ts=new TargetStructure(numTargetStates,true);
    }
 else {
      ts=new TargetStructure(numTargetStates);
      ts.initializeTransitions();
    }
    thmm=new HMM(ts,HMM.TARGET_HMM);
  }
  if (trainNow) {
    thmm.train(targetDocs,props,verbose);
  }
 else {
    thmm.setTargetFields(targetDocs.getTargetFields());
  }
  return thmm;
}
