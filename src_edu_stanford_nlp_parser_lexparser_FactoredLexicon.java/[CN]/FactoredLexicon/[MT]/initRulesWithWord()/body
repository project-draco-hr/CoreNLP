{
  int unkWord=wordIndex.indexOf(UNKNOWN_WORD,true);
  int boundaryWordId=wordIndex.indexOf(BOUNDARY,true);
  int boundaryTagId=tagIndex.indexOf(BOUNDARY_TAG,true);
  final int numWords=wordIndex.size();
  rulesWithWord=new List[numWords];
  for (int w=0; w < numWords; w++) {
    rulesWithWord[w]=new ArrayList<IntTaggedWord>(1);
  }
  Set<IntTaggedWord> lexRules=Generics.newHashSet(40000);
  for (  int wordId : wordTag.firstKeySet()) {
    for (    int tagId : wordTag.getCounter(wordId).keySet()) {
      lexRules.add(new IntTaggedWord(wordId,tagId));
      lexRules.add(new IntTaggedWord(nullWord,tagId));
    }
  }
  for (  IntTaggedWord iTW : lexRules) {
    if (iTW.word() == nullWord) {
      double types=uwModel.unSeenCounter().getCount(iTW);
      if (types > trainOptions.openClassTypesThreshold) {
        IntTaggedWord iTU=new IntTaggedWord(unkWord,iTW.tag);
        if (!rulesWithWord[unkWord].contains(iTU)) {
          rulesWithWord[unkWord].add(iTU);
        }
      }
    }
 else {
      rulesWithWord[iTW.word].add(iTW);
    }
  }
  System.err.print("The " + rulesWithWord[unkWord].size() + " open class tags are: [");
  for (  IntTaggedWord item : rulesWithWord[unkWord]) {
    System.err.print(" " + tagIndex.get(item.tag()));
  }
  System.err.println(" ] ");
  rulesWithWord[boundaryWordId].add(new IntTaggedWord(boundaryWordId,boundaryTagId));
}
