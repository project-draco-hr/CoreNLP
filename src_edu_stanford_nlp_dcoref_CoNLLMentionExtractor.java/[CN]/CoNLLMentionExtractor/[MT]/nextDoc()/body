{
  List<List<CoreLabel>> allWords=new ArrayList<>();
  List<Tree> allTrees=new ArrayList<>();
  CoNLL2011DocumentReader.Document conllDoc=reader.getNextDocument();
  if (conllDoc == null) {
    return null;
  }
  Annotation anno=conllDoc.getAnnotation();
  List<CoreMap> sentences=anno.get(CoreAnnotations.SentencesAnnotation.class);
  for (  CoreMap sentence : sentences) {
    if (!Constants.USE_GOLD_PARSES && !replicateCoNLL) {
      sentence.remove(TreeCoreAnnotations.TreeAnnotation.class);
    }
 else {
      Tree tree=sentence.get(TreeCoreAnnotations.TreeAnnotation.class);
      if (LEMMATIZE) {
        treeLemmatizer.transformTree(tree);
      }
      try {
        SemanticGraph deps=SemanticGraphFactory.makeFromTree(tree,SemanticGraphFactory.Mode.ENHANCED,GrammaticalStructure.Extras.NONE,threadSafe);
        SemanticGraph basicDeps=SemanticGraphFactory.makeFromTree(tree,SemanticGraphFactory.Mode.BASIC,GrammaticalStructure.Extras.NONE,threadSafe);
        sentence.set(SemanticGraphCoreAnnotations.BasicDependenciesAnnotation.class,basicDeps);
        sentence.set(SemanticGraphCoreAnnotations.EnhancedDependenciesAnnotation.class,deps);
      }
 catch (      Exception e) {
        logger.log(Level.WARNING,"Exception caught during extraction of Stanford dependencies. Will ignore and continue...",e);
      }
    }
  }
  String preSpeaker=null;
  int utterance=-1;
  for (  CoreLabel token : anno.get(CoreAnnotations.TokensAnnotation.class)) {
    if (!token.containsKey(CoreAnnotations.SpeakerAnnotation.class)) {
      token.set(CoreAnnotations.SpeakerAnnotation.class,"");
    }
    String curSpeaker=token.get(CoreAnnotations.SpeakerAnnotation.class);
    if (!curSpeaker.equals(preSpeaker)) {
      utterance++;
      preSpeaker=curSpeaker;
    }
    token.set(CoreAnnotations.UtteranceAnnotation.class,utterance);
  }
  stanfordProcessor.annotate(anno);
  for (  CoreMap sentence : anno.get(CoreAnnotations.SentencesAnnotation.class)) {
    allWords.add(sentence.get(CoreAnnotations.TokensAnnotation.class));
    allTrees.add(sentence.get(TreeCoreAnnotations.TreeAnnotation.class));
  }
  List<List<Mention>> allGoldMentions=extractGoldMentions(conllDoc);
  List<List<Mention>> allPredictedMentions;
  if (Constants.USE_GOLD_MENTIONS) {
    allPredictedMentions=makeCopy(allGoldMentions);
  }
 else   if (Constants.USE_GOLD_MENTION_BOUNDARIES) {
    allPredictedMentions=((RuleBasedCorefMentionFinder)mentionFinder).filterPredictedMentions(allGoldMentions,anno,dictionaries);
  }
 else {
    allPredictedMentions=mentionFinder.extractPredictedMentions(anno,maxID,dictionaries);
  }
  try {
    recallErrors(allGoldMentions,allPredictedMentions,anno);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  Document doc=arrange(anno,allWords,allTrees,allPredictedMentions,allGoldMentions,true);
  doc.conllDoc=conllDoc;
  return doc;
}
