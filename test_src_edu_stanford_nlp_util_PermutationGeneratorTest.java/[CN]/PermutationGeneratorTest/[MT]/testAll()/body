{
  assertEquals(generator.getTotal(),BigInteger.valueOf(permutations.length));
  assertTrue(generator.hasNext());
  int[] sharedPermutation=generator.getNext();
  generator.reset();
  for (int i=0; i < permutations.length; i++) {
    assertTrue(generator.hasNext());
    assertEquals(generator.getNumLeft(),BigInteger.valueOf(permutations.length - i));
    int[] permutation=generator.getNext();
    assertArrayEquals(permutations[i],permutation);
    assertSame(sharedPermutation,permutation);
  }
  assertFalse(generator.hasNext());
  assertEquals(generator.getNumLeft(),BigInteger.ZERO);
  assertEquals(generator.getTotal(),BigInteger.valueOf(permutations.length));
  int[][] generated=new int[permutations.length][];
  generator.reset();
  for (int i=0; i < permutations.length; i++) {
    assertTrue(generator.hasNext());
    assertEquals(generator.getNumLeft(),BigInteger.valueOf(permutations.length - i));
    generated[i]=generator.next();
  }
  assertFalse(generator.hasNext());
  try {
    generator.next();
    fail("Failed to throw exception");
  }
 catch (  NoSuchElementException nse) {
  }
catch (  Exception e) {
    fail("Threw wrong exception");
  }
  assertEquals(generator.getNumLeft(),BigInteger.ZERO);
  for (int i=0; i < permutations.length; i++) {
    assertArrayEquals(generated[i],permutations[i]);
  }
}
