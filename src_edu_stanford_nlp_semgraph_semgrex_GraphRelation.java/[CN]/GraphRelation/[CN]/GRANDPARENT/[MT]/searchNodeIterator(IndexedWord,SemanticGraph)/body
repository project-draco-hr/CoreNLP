{
  return new SearchNodeIterator(){
    Stack<Pair<GrammaticalRelation,IndexedWord>> searchStack;
    Set<IndexedWord> seenNodes;
    @Override public void initialize(){
      if (node.equals(IndexedWord.NO_WORD)) {
        next=null;
        return;
      }
      searchStack=Generics.newStack();
      seenNodes=Generics.newHashSet();
      List<Pair<GrammaticalRelation,IndexedWord>> children=sg.childPairs(node);
      for (int i=children.size() - 1; i >= 0; i--) {
        searchStack.push(children.get(i));
      }
      if (!searchStack.isEmpty()) {
        advance();
      }
    }
    @Override void advance(){
      if (node.equals(IndexedWord.NO_WORD)) {
        next=null;
        return;
      }
      Pair<GrammaticalRelation,IndexedWord> nextPair;
      while (!searchStack.isEmpty()) {
        nextPair=searchStack.pop();
        if (seenNodes.contains(nextPair.second())) {
          continue;
        }
        seenNodes.add(nextPair.second());
        List<Pair<GrammaticalRelation,IndexedWord>> children=sg.childPairs(nextPair.second());
        for (int i=children.size() - 1; i >= 0; i--) {
          if (!seenNodes.contains(children.get(i).second()))           searchStack.push(children.get(i));
        }
        if (type.accept(nextPair.first().toString())) {
          next=nextPair.second();
          relation=nextPair.first().toString();
          return;
        }
      }
      next=null;
    }
  }
;
}
