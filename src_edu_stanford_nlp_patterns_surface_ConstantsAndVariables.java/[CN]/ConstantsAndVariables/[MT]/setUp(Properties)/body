{
  if (alreadySetUp) {
    return;
  }
  if (externalFeatureWeightsFile != null) {
    File f=new File(externalFeatureWeightsFile);
    if (!f.exists()) {
      System.err.println("externalweightsfile does not exist: learning weights!");
      LearnImportantFeatures lmf=new LearnImportantFeatures();
      if (answerClass.size() > 1 || this.labelDictionary.size() > 1)       throw new RuntimeException("not implemented");
      lmf.answerClass=CollectionUtils.toList(answerClass.values()).get(0);
      lmf.answerLabel=CollectionUtils.toList(labelDictionary.keySet()).get(0);
      Execution.fillOptions(lmf,props);
      lmf.setUp();
      lmf.getTopFeatures(Data.sents,perSelectRand,perSelectNeg);
    }
    for (    String line : IOUtils.readLines(externalFeatureWeightsFile)) {
      String[] t=line.split(":");
      if (!t[0].startsWith("Cluster"))       continue;
      String s=t[0].replace("Cluster-","");
      Integer clusterNum=Integer.parseInt(s);
      distSimWeights.setCount(clusterNum,Double.parseDouble(t[1]));
    }
  }
  if (wordIgnoreRegex != null && !wordIgnoreRegex.isEmpty())   ignoreWordRegex=Pattern.compile(wordIgnoreRegex);
  for (  String label : labelDictionary.keySet()) {
    env.put(label,TokenSequencePattern.getNewEnv());
    env.get(label).bind("answer",answerClass.get(label));
    for (    Entry<String,Class> en : generalizeClasses.get(label).entrySet())     env.get(label).bind(en.getKey(),en.getValue());
  }
  Redwood.log(Redwood.DBG,channelNameLogger,"Running with debug output");
  stopWords=new HashSet<String>();
  Redwood.log(Redwood.FORCE,channelNameLogger,"Reading stop words from " + stopWordsPatternFiles);
  for (  String stopwfile : stopWordsPatternFiles.split("[;,]"))   stopWords.addAll(IOUtils.linesFromFile(stopwfile));
  englishWords=new HashSet<String>();
  System.out.println("Reading english words from " + englishWordsFiles);
  for (  String englishWordsFile : englishWordsFiles.split("[;,]"))   englishWords.addAll(IOUtils.linesFromFile(englishWordsFile));
  if (commonWordsPatternFiles != null) {
    commonEngWords=Collections.synchronizedSet(new HashSet<String>());
    for (    String file : commonWordsPatternFiles.split("[;,]"))     commonEngWords.addAll(IOUtils.linesFromFile(file));
  }
  if (otherSemanticClassesFiles != null) {
    if (otherSemanticClasses == null)     otherSemanticClasses=Collections.synchronizedSet(new HashSet<String>());
    for (    String file : otherSemanticClassesFiles.split("[;,]")) {
      for (      String w : IOUtils.linesFromFile(file)) {
        String[] t=w.split("\\s+");
        if (t.length <= this.numWordsCompound)         otherSemanticClasses.add(w);
      }
    }
    System.out.println("Size of othersemantic class variables is " + otherSemanticClasses.size());
  }
 else {
    otherSemanticClasses=Collections.synchronizedSet(new HashSet<String>());
    System.out.println("Size of othersemantic class variables is " + 0);
  }
  String stopStr="/";
  int i=0;
  for (  String s : stopWords) {
    if (i > 0)     stopStr+="|";
    stopStr+=Pattern.quote(s.replaceAll("\\\\","\\\\\\\\"));
    i++;
  }
  stopStr+="/";
  for (  String label : labelDictionary.keySet()) {
    env.get(label).bind("$FILLER","/" + StringUtils.join(fillerWords,"|") + "/");
    env.get(label).bind("$STOPWORD",stopStr);
    env.get(label).bind("$MOD","[{tag:/JJ.*/}]");
  }
  if (wordClassClusterFile != null) {
    wordClassClusters=new HashMap<String,Integer>();
    for (    String line : IOUtils.readLines(wordClassClusterFile)) {
      String[] t=line.split("\t");
      wordClassClusters.put(t[0],Integer.parseInt(t[1]));
    }
  }
  alreadySetUp=true;
}
