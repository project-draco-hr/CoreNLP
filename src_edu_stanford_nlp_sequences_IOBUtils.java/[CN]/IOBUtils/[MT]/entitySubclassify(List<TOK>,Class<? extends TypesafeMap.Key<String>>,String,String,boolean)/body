{
  int how;
  String lowerStyle=style.toLowerCase(Locale.ENGLISH);
switch (lowerStyle) {
case "iob1":
    how=0;
  break;
case "iob2":
case "bio":
how=1;
break;
case "ioe1":
how=2;
break;
case "ioe2":
how=3;
break;
case "io":
how=4;
break;
case "sbieo":
case "iobes":
how=5;
break;
case "noprefix":
how=6;
break;
case "bilou":
how=7;
break;
default :
throw new IllegalArgumentException("entitySubclassify: unknown style: " + style);
}
List<TOK> paddedTokens=new PaddedList<>(tokens,(TOK)new CoreLabel());
int size=paddedTokens.size();
String[] newAnswers=new String[size];
for (int i=0; i < size; i++) {
TOK c=paddedTokens.get(i);
TOK p=paddedTokens.get(i - 1);
TOK n=paddedTokens.get(i + 1);
String cAns=c.get(key);
String pAns=p.get(key);
if (pAns == null) {
pAns=backgroundLabel;
}
String nAns=n.get(key);
if (nAns == null) {
nAns=backgroundLabel;
}
String base;
char prefix;
if (cAns.length() > 2 && cAns.charAt(1) == '-') {
base=cAns.substring(2,cAns.length());
prefix=Character.toUpperCase(cAns.charAt(0));
}
 else {
base=cAns;
prefix=' ';
}
String pBase;
char pPrefix;
if (pAns.length() > 2 && pAns.charAt(1) == '-') {
pBase=pAns.substring(2,pAns.length());
pPrefix=Character.toUpperCase(pAns.charAt(0));
}
 else {
pBase=pAns;
pPrefix=' ';
}
String nBase;
char nPrefix;
if (nAns.length() > 2 && nAns.charAt(1) == '-') {
nBase=nAns.substring(2,nAns.length());
nPrefix=Character.toUpperCase(nAns.charAt(0));
}
 else {
nBase=nAns;
nPrefix=' ';
}
boolean isStartAdjacentSame=isSameEntityBoundary(pBase,pPrefix,base,prefix);
boolean isEndAdjacentSame=isSameEntityBoundary(base,prefix,nBase,nPrefix);
boolean isFirst=isDifferentEntityBoundary(pBase,base) || isStartAdjacentSame;
boolean isLast=isDifferentEntityBoundary(base,nBase) || isEndAdjacentSame;
String newAnswer=base;
if (!base.equals(backgroundLabel)) {
switch (how) {
case 0:
if (isStartAdjacentSame) {
newAnswer="B-" + base;
}
 else {
newAnswer="I-" + base;
}
break;
case 1:
if (isFirst) {
newAnswer="B-" + base;
}
 else {
newAnswer="I-" + base;
}
break;
case 2:
if (isEndAdjacentSame) {
newAnswer="E-" + base;
}
 else {
newAnswer="I-" + base;
}
break;
case 3:
if (isLast) {
newAnswer="E-" + base;
}
 else {
newAnswer="I-" + base;
}
break;
case 4:
newAnswer="I-" + base;
break;
case 5:
if (isFirst && isLast) {
newAnswer="S-" + base;
}
 else if ((!isFirst) && isLast) {
newAnswer="E-" + base;
}
 else if (isFirst && (!isLast)) {
newAnswer="B-" + base;
}
 else {
newAnswer="I-" + base;
}
break;
case 7:
if (isFirst && isLast) {
newAnswer="U-" + base;
}
 else if ((!isFirst) && isLast) {
newAnswer="L-" + base;
}
 else if (isFirst && (!isLast)) {
newAnswer="B-" + base;
}
 else {
newAnswer="I-" + base;
}
}
}
if (intern) {
newAnswer=newAnswer.intern();
}
newAnswers[i]=newAnswer;
}
for (int i=0; i < size; i++) {
TOK c=tokens.get(i);
c.set(CoreAnnotations.AnswerAnnotation.class,newAnswers[i]);
}
}
