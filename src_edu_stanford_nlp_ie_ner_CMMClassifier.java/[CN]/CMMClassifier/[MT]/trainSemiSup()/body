{
  DocumentReaderAndWriter<IN> readerAndWriter=makeReaderAndWriter();
  String filename=flags.trainFile;
  String biasedFilename=flags.biasedTrainFile;
  ObjectBank<List<IN>> data=makeObjectBankFromFile(filename,readerAndWriter);
  ObjectBank<List<IN>> biasedData=makeObjectBankFromFile(biasedFilename,readerAndWriter);
  Index<String> featureIndex=new HashIndex<String>();
  Index<String> classIndex=new HashIndex<String>();
  Dataset<String,String> dataset=getDataset(data,featureIndex,classIndex);
  Dataset<String,String> biasedDataset=getBiasedDataset(biasedData,featureIndex,classIndex);
  double[][] confusionMatrix=new double[classIndex.size()][classIndex.size()];
  for (int i=0; i < confusionMatrix.length; i++) {
    Arrays.fill(confusionMatrix[i],0.0);
    confusionMatrix[i][i]=1.0;
  }
  String cm=flags.confusionMatrix;
  String[] bits=cm.split(":");
  for (  String bit : bits) {
    String[] bits1=bit.split("\\|");
    int i1=classIndex.indexOf(bits1[0]);
    int i2=classIndex.indexOf(bits1[1]);
    double d=Double.parseDouble(bits1[2]);
    confusionMatrix[i2][i1]=d;
  }
  for (int i=0; i < confusionMatrix.length; i++) {
    ArrayMath.normalize(confusionMatrix[i]);
  }
  for (int i=0; i < confusionMatrix.length; i++) {
    for (int j=0; j < i; j++) {
      double d=confusionMatrix[i][j];
      confusionMatrix[i][j]=confusionMatrix[j][i];
      confusionMatrix[j][i]=d;
    }
  }
  for (int i=0; i < confusionMatrix.length; i++) {
    for (int j=0; j < confusionMatrix.length; j++) {
      System.err.println("P(" + classIndex.get(j) + '|'+ classIndex.get(i)+ ") = "+ confusionMatrix[j][i]);
    }
  }
  trainSemiSup(dataset,biasedDataset,confusionMatrix);
}
