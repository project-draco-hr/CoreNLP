{
  if (document.isEmpty()) {
    return;
  }
  SequenceModel ts=getSequenceModel(document);
  int[] tags;
  if (flags.useViterbi) {
    ExactBestSequenceFinder ti=new ExactBestSequenceFinder();
    tags=ti.bestSequence(ts);
  }
 else {
    BeamBestSequenceFinder ti=new BeamBestSequenceFinder(flags.beamSize,true,true);
    tags=ti.bestSequence(ts,document.size());
  }
  if (flags.lowerNewgeneThreshold) {
    System.err.println("Using NEWGENE threshold: " + flags.newgeneThreshold);
    int[] copy=new int[tags.length];
    System.arraycopy(tags,0,copy,0,tags.length);
    int ngTag=classIndex.indexOf("G");
    int bgTag=classIndex.indexOf(flags.backgroundSymbol);
    for (int i=0, dSize=document.size(); i < dSize; i++) {
      CoreLabel wordInfo=document.get(i);
      if ("NEWGENE".equals(wordInfo.get(CoreAnnotations.GazAnnotation.class))) {
        int start=i;
        int j;
        for (j=i; j < document.size(); j++) {
          wordInfo=document.get(j);
          if (!"NEWGENE".equals(wordInfo.get(CoreAnnotations.GazAnnotation.class))) {
            break;
          }
        }
        int end=j;
        int winStart=Math.max(0,start - 4);
        int winEnd=Math.min(tags.length,end + 4);
        for (j=winStart; j < winEnd; j++) {
          copy[j]=bgTag;
        }
        double bgScore=0.0;
        for (j=start; j < end; j++) {
          double[] scores=ts.scoresOf(copy,j);
          scores=Scorer.recenter(scores);
          bgScore+=scores[bgTag];
        }
        ClassicCounter<Pair<Integer,Integer>> prevScores=new ClassicCounter<Pair<Integer,Integer>>();
        for (j=start; j < end; j++) {
          for (int k=start; k < end; k++) {
            copy[k]=bgTag;
          }
          for (int k=j; k < end; k++) {
            copy[k]=ngTag;
            double ngScore=0.0;
            for (int m=start; m < end; m++) {
              double[] scores=ts.scoresOf(copy,m);
              scores=Scorer.recenter(scores);
              ngScore+=scores[tags[m]];
            }
            prevScores.incrementCount(new Pair<Integer,Integer>(Integer.valueOf(j),Integer.valueOf(k)),ngScore - bgScore);
          }
        }
        for (j=start; j < end; j++) {
          for (int k=j; k < end; k++) {
            double score=prevScores.getCount(new Pair<Integer,Integer>(Integer.valueOf(j),Integer.valueOf(k)));
            Pair<Integer,Integer> al=new Pair<Integer,Integer>(Integer.valueOf(j - 1),Integer.valueOf(k));
            Pair<Integer,Integer> ar=new Pair<Integer,Integer>(Integer.valueOf(j),Integer.valueOf(k + 1));
            Pair<Integer,Integer> sl=new Pair<Integer,Integer>(Integer.valueOf(j + 1),Integer.valueOf(k));
            Pair<Integer,Integer> sr=new Pair<Integer,Integer>(Integer.valueOf(j),Integer.valueOf(k - 1));
            if (score >= flags.newgeneThreshold && (!prevScores.containsKey(al) || score > prevScores.getCount(al)) && (!prevScores.containsKey(ar) || score > prevScores.getCount(ar)) && (!prevScores.containsKey(sl) || score > prevScores.getCount(sl)) && (!prevScores.containsKey(sr) || score > prevScores.getCount(sr))) {
              StringBuilder sb=new StringBuilder();
              wordInfo=document.get(j);
              String docId=wordInfo.get(CoreAnnotations.IDAnnotation.class);
              String startIndex=wordInfo.get(CoreAnnotations.PositionAnnotation.class);
              wordInfo=document.get(k);
              String endIndex=wordInfo.get(CoreAnnotations.PositionAnnotation.class);
              for (int m=j; m <= k; m++) {
                wordInfo=document.get(m);
                sb.append(wordInfo.word());
                sb.append(' ');
              }
              System.out.println(docId + '|' + startIndex+ ' '+ endIndex+ '|'+ sb.toString().trim());
            }
          }
        }
        for (j=winStart; j < winEnd; j++) {
          copy[j]=tags[j];
        }
        i=end;
      }
    }
  }
  for (int i=0, docSize=document.size(); i < docSize; i++) {
    CoreLabel lineInfo=document.get(i);
    String answer=classIndex.get(tags[i]);
    lineInfo.set(CoreAnnotations.AnswerAnnotation.class,answer);
  }
  if (flags.justify && classifier instanceof LinearClassifier) {
    LinearClassifier<String,String> lc=(LinearClassifier<String,String>)classifier;
    if (flags.dump) {
      lc.dump();
    }
    for (int i=0, docSize=document.size(); i < docSize; i++) {
      CoreLabel lineInfo=document.get(i);
      System.err.print("@@ Position is: " + i + ": ");
      System.err.println(lineInfo.word() + ' ' + lineInfo.get(CoreAnnotations.AnswerAnnotation.class));
      lc.justificationOf(makeDatum(document,i,featureFactories));
    }
  }
  if (flags.useReverse) {
    Collections.reverse(document);
  }
}
