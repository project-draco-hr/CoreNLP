{
  if (args.length != 4) {
    Logging.logger(MnistConverter.class).info("Usage: MnistConverter dataFile labelFile outFile propsFile");
    return;
  }
  DataInputStream xStream=IOUtils.getDataInputStream(args[0]);
  DataInputStream yStream=IOUtils.getDataInputStream(args[1]);
  PrintWriter oStream=new PrintWriter(new FileWriter(args[2]));
  PrintWriter pStream=new PrintWriter(new FileWriter(args[3]));
  int xMagic=xStream.readInt();
  if (xMagic != 2051)   throw new RuntimeException("Bad format of xStream");
  int yMagic=yStream.readInt();
  if (yMagic != 2049)   throw new RuntimeException("Bad format of yStream");
  int xNumImages=xStream.readInt();
  int yNumLabels=yStream.readInt();
  if (xNumImages != yNumLabels)   throw new RuntimeException("x and y sizes don't match");
  Logging.logger(MnistConverter.class).info("Images and label file both contain " + xNumImages + " entries.");
  int xRows=xStream.readInt();
  int xColumns=xStream.readInt();
  for (int i=0; i < xNumImages; i++) {
    int label=yStream.readUnsignedByte();
    int[] matrix=new int[xRows * xColumns];
    for (int j=0; j < xRows * xColumns; j++) {
      matrix[j]=xStream.readUnsignedByte();
    }
    oStream.print(label);
    for (    int k : matrix) {
      oStream.print('\t');
      oStream.print(k);
    }
    oStream.println();
  }
  Logging.logger(MnistConverter.class).info("Converted.");
  xStream.close();
  yStream.close();
  oStream.close();
  pStream.println("goldAnswerColumn = 0");
  pStream.println("useClassFeature = true");
  pStream.println("sigma = 10");
  for (int j=0; j < xRows * xColumns; j++) {
    pStream.println((j + 1) + ".realValued = true");
  }
  pStream.close();
}
