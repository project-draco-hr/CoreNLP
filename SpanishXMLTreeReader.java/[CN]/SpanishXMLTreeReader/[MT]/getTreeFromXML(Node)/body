{
  final Element eRoot=(Element)root;
  if (isWordNode(eRoot)) {
    return buildWordNode(eRoot);
  }
 else   if (isEllipticNode(eRoot)) {
    String constituentStr=eRoot.getNodeName();
    List<Tree> kids=new ArrayList<Tree>();
    Tree leafNode=treeFactory.newLeaf(EMPTY_LEAF);
    if (leafNode.label() instanceof HasWord)     ((HasWord)leafNode.label()).setWord(EMPTY_LEAF);
    kids.add(leafNode);
    Tree t=treeFactory.newTreeNode(constituentStr,kids);
    return t;
  }
  List<Tree> kids=new ArrayList<Tree>();
  for (Node childNode=eRoot.getFirstChild(); childNode != null; childNode=childNode.getNextSibling()) {
    if (childNode.getNodeType() != Node.ELEMENT_NODE)     continue;
    Tree t=getTreeFromXML(childNode);
    if (t == null) {
      System.err.printf("%s: Discarding empty tree (root: %s)%n",this.getClass().getName(),childNode.getNodeName());
    }
 else {
      kids.add(t);
    }
  }
  String rootLabel=eRoot.getNodeName().trim();
  Tree t=(kids.size() == 0) ? null : treeFactory.newTreeNode(treeNormalizer.normalizeNonterminal(rootLabel),kids);
  return t;
}
