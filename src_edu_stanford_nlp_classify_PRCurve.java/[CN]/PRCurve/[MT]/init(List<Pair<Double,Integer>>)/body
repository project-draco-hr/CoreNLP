{
  PriorityQueue<Pair<Integer,Pair<Double,Integer>>> q=new BinaryHeapPriorityQueue<Pair<Integer,Pair<Double,Integer>>>();
  for (int i=0; i < dataScores.size(); i++) {
    q.add(new Pair<Integer,Pair<Double,Integer>>(Integer.valueOf(i),dataScores.get(i)),-dataScores.get(i).first().doubleValue());
  }
  List<Pair<Integer,Pair<Double,Integer>>> sorted=q.toSortedList();
  scores=new double[sorted.size()];
  classes=new int[sorted.size()];
  Logging.logger(this.getClass()).info("incoming size " + dataScores.size() + " resulting "+ sorted.size());
  for (int i=0; i < sorted.size(); i++) {
    Pair<Double,Integer> next=sorted.get(i).second();
    scores[i]=next.first().doubleValue();
    classes[i]=next.second().intValue();
  }
  init();
}
