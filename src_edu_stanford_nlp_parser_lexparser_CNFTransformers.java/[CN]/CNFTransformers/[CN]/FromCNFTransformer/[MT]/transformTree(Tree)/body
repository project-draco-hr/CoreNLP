{
  if (t.isLeaf()) {
    return t.treeFactory().newLeaf(t.label());
  }
  Tree[] children=t.children();
  Tree[] transformedChildren=new Tree[children.length];
  for (int childIndex=0; childIndex < children.length; childIndex++) {
    Tree child=children[childIndex];
    transformedChildren[childIndex]=transformTree(child);
  }
  Label label=t.label();
  if (!label.value().startsWith("&")) {
    return t.treeFactory().newTreeNode(label,Arrays.asList(transformedChildren));
  }
  String[] nodeStrings=label.value().split("&");
  int i=nodeStrings.length - 1;
  label=t.label().labelFactory().newLabel(nodeStrings[i]);
  Tree result=t.treeFactory().newTreeNode(label,Arrays.asList(transformedChildren));
  while (i > 1) {
    i--;
    label=t.label().labelFactory().newLabel(nodeStrings[i]);
    result=t.treeFactory().newTreeNode(label,Collections.singletonList(result));
  }
  return result;
}
