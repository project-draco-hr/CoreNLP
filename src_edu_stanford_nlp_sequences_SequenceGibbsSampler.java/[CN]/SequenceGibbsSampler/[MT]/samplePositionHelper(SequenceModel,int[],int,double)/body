{
  double[] distribution=model.scoresOf(sequence,pos);
  if (temperature != 1.0) {
    if (temperature == 0.0) {
      int argmax=ArrayMath.argmax(distribution);
      Arrays.fill(distribution,Double.NEGATIVE_INFINITY);
      distribution[argmax]=0.0;
    }
 else {
      ArrayMath.multiplyInPlace(distribution,1.0 / temperature);
    }
  }
  ArrayMath.logNormalize(distribution);
  ArrayMath.expInPlace(distribution);
  if (BisequenceEmpiricalNERPrior.DEBUG) {
    if (BisequenceEmpiricalNERPrior.debugIndices.indexOf(pos) != -1) {
      System.err.println("final classify:");
      for (int j=0; j < distribution.length; j++)       System.err.println("\t" + distribution[j]);
      System.err.println();
    }
  }
  int newTag=ArrayMath.sampleFromDistribution(distribution,random);
  double newProb=distribution[newTag];
  return new Pair<Integer,Double>(newTag,newProb);
}
