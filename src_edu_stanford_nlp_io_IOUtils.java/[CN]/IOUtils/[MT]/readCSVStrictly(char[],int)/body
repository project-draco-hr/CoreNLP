{
  StringBuilder[] buffer=new StringBuilder[numColumns];
  buffer[0]=new StringBuilder();
  LinkedList<String[]> lines=new LinkedList<String[]>();
  boolean inQuotes=false;
  boolean nextIsEscaped=false;
  int columnI=0;
  for (int offset=0; offset < csvContents.length; offset++) {
    if (nextIsEscaped) {
      buffer[columnI].append(csvContents[offset]);
      nextIsEscaped=false;
    }
 else {
switch (csvContents[offset]) {
case '"':
        inQuotes=!inQuotes;
      break;
case ',':
    if (inQuotes) {
      buffer[columnI].append(',');
    }
 else {
      columnI+=1;
      if (columnI >= numColumns) {
        throw new IllegalArgumentException("Too many columns: " + columnI + "/"+ numColumns+ " (offset: "+ offset+ ")");
      }
      buffer[columnI]=new StringBuilder();
    }
  break;
case '\n':
if (inQuotes) {
  buffer[columnI].append('\n');
}
 else {
  if (columnI != numColumns - 1) {
    throw new IllegalArgumentException("Too few columns: " + columnI + "/"+ numColumns+ " (offset: "+ offset+ ")");
  }
  String[] rtn=new String[buffer.length];
  for (int i=0; i < buffer.length; i++) {
    rtn[i]=buffer[i].toString();
  }
  lines.add(rtn);
  columnI=0;
  buffer[columnI]=new StringBuilder();
}
break;
case '\\':
nextIsEscaped=true;
break;
default :
buffer[columnI].append(csvContents[offset]);
}
}
}
return lines;
}
