{
  return new Iterator<String>(){
    private String next;
    private boolean done=false;
    private StringBuilder sb=new StringBuilder(80);
    private char[] charBuffer=new char[bufferSize];
    private int charBufferPos=-1;
    private int charsInBuffer=0;
    boolean lastWasLF=false;
    private String getNext(){
      try {
        while (true) {
          if (charBufferPos < 0) {
            charsInBuffer=reader.read(charBuffer);
            if (charsInBuffer < 0) {
              if (sb.length() > 0) {
                String line=sb.toString();
                sb.setLength(0);
                return line;
              }
 else {
                return null;
              }
            }
            charBufferPos=0;
          }
          boolean eolReached=copyUntilEol();
          if (eolReached) {
            String line=sb.toString();
            sb.setLength(0);
            return line;
          }
        }
      }
 catch (      IOException ex) {
        throw new RuntimeIOException(ex);
      }
    }
    private boolean copyUntilEol(){
      for (int i=charBufferPos; i < charsInBuffer; i++) {
        if (charBuffer[i] == '\n') {
          sb.append(charBuffer,charBufferPos,i - charBufferPos + 1);
          charBufferPos=i + 1;
          lastWasLF=false;
          return true;
        }
 else         if (lastWasLF) {
          if (i > charBufferPos) {
            sb.append(charBuffer,charBufferPos,i - charBufferPos);
            charBufferPos=i;
            lastWasLF=false;
            return true;
          }
        }
        lastWasLF=(charBuffer[i] == '\r');
      }
      sb.append(charBuffer,charBufferPos,charsInBuffer - charBufferPos);
      charBufferPos=-1;
      return false;
    }
    @Override public boolean hasNext(){
      if (done)       return false;
      if (next == null) {
        next=getNext();
      }
      if (next == null) {
        done=true;
      }
      return !done;
    }
    @Override public String next(){
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      String res=next;
      next=null;
      return res;
    }
    @Override public void remove(){
      throw new UnsupportedOperationException();
    }
  }
;
}
