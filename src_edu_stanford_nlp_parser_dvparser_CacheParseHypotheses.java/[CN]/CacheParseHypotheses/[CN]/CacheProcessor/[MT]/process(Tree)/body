{
  List<Tree> topParses=DVParser.getTopParsesForOneTree(parser,dvKBest,tree,transformer);
  List<Tree> converted=cacher.convertToTrees(cacher.convertToBytes(topParses));
  List<Tree> simplified=CollectionUtils.transformAsList(topParses,cacher.treeBasicCategories);
  simplified=CollectionUtils.filterAsList(simplified,cacher.treeFilter);
  if (simplified.size() != topParses.size()) {
    log.info("Filtered " + (topParses.size() - simplified.size()) + " trees");
    if (simplified.size() == 0) {
      log.info(" WARNING: filtered all trees for " + tree);
    }
  }
  if (!simplified.equals(converted)) {
    if (converted.size() != simplified.size()) {
      throw new AssertionError("horrible error: tree sizes not equal, " + converted.size() + " vs "+ simplified.size());
    }
    for (int i=0; i < converted.size(); ++i) {
      if (!simplified.get(i).equals(converted.get(i))) {
        System.out.println("=============================");
        System.out.println(simplified.get(i));
        System.out.println("=============================");
        System.out.println(converted.get(i));
        System.out.println("=============================");
        throw new AssertionError("horrible error: tree " + i + " not equal for base tree "+ tree);
      }
    }
  }
  return Pair.makePair(tree,cacher.convertToBytes(topParses));
}
