{
  String parserModel=null;
  String output=null;
  String treebankPath=null;
  FileFilter treebankFilter=null;
  int dvKBest=200;
  int numThreads=1;
  for (int argIndex=0; argIndex < args.length; ) {
    if (args[argIndex].equalsIgnoreCase("-dvKBest")) {
      dvKBest=Integer.valueOf(args[argIndex + 1]);
      argIndex+=2;
      continue;
    }
    if (args[argIndex].equalsIgnoreCase("-parser") || args[argIndex].equals("-model")) {
      parserModel=args[argIndex + 1];
      argIndex+=2;
      continue;
    }
    if (args[argIndex].equalsIgnoreCase("-output")) {
      output=args[argIndex + 1];
      argIndex+=2;
      continue;
    }
    if (args[argIndex].equalsIgnoreCase("-treebank")) {
      Pair<String,FileFilter> treebankDescription=ArgUtils.getTreebankDescription(args,argIndex,"-treebank");
      argIndex=argIndex + ArgUtils.numSubArgs(args,argIndex) + 1;
      treebankPath=treebankDescription.first();
      treebankFilter=treebankDescription.second();
      continue;
    }
    if (args[argIndex].equalsIgnoreCase("-numThreads")) {
      numThreads=Integer.valueOf(args[argIndex + 1]);
      argIndex+=2;
      continue;
    }
    throw new IllegalArgumentException("Unknown argument " + args[argIndex]);
  }
  if (parserModel == null) {
    throw new IllegalArgumentException("Need to supply a parser model with -model");
  }
  if (output == null) {
    throw new IllegalArgumentException("Need to supply an output filename with -output");
  }
  if (treebankPath == null) {
    throw new IllegalArgumentException("Need to supply a treebank with -treebank");
  }
  System.err.println("Reading trees from " + treebankPath);
  System.err.println("Writing output to " + output);
  System.err.println("Loading parser model " + parserModel);
  System.err.println("Writing " + dvKBest + " hypothesis trees for each tree");
  LexicalizedParser parser=LexicalizedParser.loadModel(parserModel,"-dvKBest",Integer.toString(dvKBest));
  CacheParseHypotheses cacher=new CacheParseHypotheses(parser);
  Treebank treebank=parser.getOp().tlpParams.memoryTreebank();
  treebank.loadPath(treebankPath,treebankFilter);
  System.err.println("Processing " + treebank.size() + " trees");
  TreeTransformer transformer=DVParser.buildTrainTransformer(parser.getOp());
  treebank=treebank.transform(transformer);
  List<Tree> sentences=new ArrayList<Tree>();
  sentences.addAll(treebank);
  List<Pair<Tree,byte[]>> cache=Generics.newArrayList();
  transformer=new SynchronizedTreeTransformer(transformer);
  MulticoreWrapper<Tree,Pair<Tree,byte[]>> wrapper=new MulticoreWrapper<Tree,Pair<Tree,byte[]>>(numThreads,new CacheProcessor(cacher,parser,dvKBest,transformer));
  for (  Tree tree : sentences) {
    wrapper.put(tree);
    while (wrapper.peek()) {
      cache.add(wrapper.poll());
      if (cache.size() % 10 == 0) {
        System.out.println("Processed " + cache.size() + " trees");
      }
    }
  }
  wrapper.join();
  while (wrapper.peek()) {
    cache.add(wrapper.poll());
    if (cache.size() % 10 == 0) {
      System.out.println("Processed " + cache.size() + " trees");
    }
  }
  System.out.println("Finished processing " + cache.size() + " trees");
  IOUtils.writeObjectToFile(cache,output);
}
