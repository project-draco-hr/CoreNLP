{
  final String genitiveNodeTregexString="@NP > @NP $- /^N/";
  TregexPatternCompiler tregexPatternCompiler=new TregexPatternCompiler(headFinder());
  try {
    annotationPatterns.put("-genitiveMark",new Pair<>(TregexPattern.compile(genitiveNodeTregexString),new SimpleStringFunction("-genitive")));
    annotationPatterns.put("-markStrictBaseNP",new Pair<>(tregexPatternCompiler.compile("@NP !< (__ < (__ < __))"),new SimpleStringFunction("-base")));
    annotationPatterns.put("-markOneLevelIdafa",new Pair<>(tregexPatternCompiler.compile("@NP < (@NP < (__ < __)) !< (/^[^N]/ < (__ < __)) !< (__ < (__ < (__ < __)))"),new SimpleStringFunction("-idafa1")));
    annotationPatterns.put("-markNounNPargTakers",new Pair<>(tregexPatternCompiler.compile("@NN|NNS|NNP|NNPS|DTNN|DTNNS|DTNNP|DTNNPS ># (@NP < @NP)"),new SimpleStringFunction("-NounNParg")));
    annotationPatterns.put("-markContainsVerb",new Pair<>(tregexPatternCompiler.compile("__ << (/^[CIP]?V/ < (__ !< __))"),new SimpleStringFunction("-withV")));
    annotationPatterns.put("-splitIN",new Pair<>(tregexPatternCompiler.compile("@IN < __=word"),new AddRelativeNodeFunction("-","word",false)));
    annotationPatterns.put("-splitPUNC",new Pair<>(tregexPatternCompiler.compile("@PUNC < __=" + AnnotatePunctuationFunction2.key),new AnnotatePunctuationFunction2()));
    annotationPatterns.put("-markMasdarVP",new Pair<>(tregexPatternCompiler.compile("@VP|MWVP < /VBG|VN/"),new SimpleStringFunction("-masdar")));
    annotationPatterns.put("-containsSVO",new Pair<>(tregexPatternCompiler.compile("__ << (@S < (@NP . @VP|MWVP))"),new SimpleStringFunction("-hasSVO")));
    annotationPatterns.put("-splitCC",new Pair<>(tregexPatternCompiler.compile("@CC|CONJ . __=term , __"),new AddEquivalencedConjNode("-","term")));
    annotationPatterns.put("-markFem",new Pair<>(tregexPatternCompiler.compile("__ < /??$/"),new SimpleStringFunction("-fem")));
    annotationPatterns.put("-mwe",new Pair<>(tregexPatternCompiler.compile("__ > /MW/=tag"),new AddRelativeNodeFunction("-","tag",true)));
    annotationPatterns.put("-mweContainsVerb",new Pair<>(tregexPatternCompiler.compile("__ << @MWVP"),new SimpleStringFunction("-withV")));
    annotationPatterns.put("-splitPUNC2",new Pair<>(tregexPatternCompiler.compile("@PUNC < __=punc"),new AnnotatePunctuationFunction("-","punc")));
    annotationPatterns.put("-tagPAar",new Pair<>(tregexPatternCompiler.compile("!@PUNC < (__ !< __) > __=parent"),new AddRelativeNodeFunction("-","parent",true)));
    annotationPatterns.put("-splitCC1",new Pair<>(tregexPatternCompiler.compile("@CC|CONJ < __=term"),new AddRelativeNodeRegexFunction("-","term","-*([^-].*)")));
    annotationPatterns.put("-splitCC2",new Pair<>(tregexPatternCompiler.compile("@CC . __=term , __"),new AddRelativeNodeFunction("-","term",true)));
    annotationPatterns.put("-idafaJJ1",new Pair<>(tregexPatternCompiler.compile("@NP <, (@NN $+ @NP) <+(@NP) @ADJP"),new SimpleStringFunction("-idafaJJ")));
    annotationPatterns.put("-idafaJJ2",new Pair<>(tregexPatternCompiler.compile("@NP <, (@NN $+ @NP) <+(@NP) @ADJP !<< @SBAR"),new SimpleStringFunction("-idafaJJ")));
    annotationPatterns.put("-properBaseNP",new Pair<>(tregexPatternCompiler.compile("@NP !<< @NP < /NNP/ !< @PUNC|CD"),new SimpleStringFunction("-prop")));
    annotationPatterns.put("-interrog",new Pair<>(tregexPatternCompiler.compile("__ << ????|????????|??????????|??????|??????"),new SimpleStringFunction("-inter")));
    annotationPatterns.put("-splitPseudo",new Pair<>(tregexPatternCompiler.compile("@NN < ????|??????|??????"),new SimpleStringFunction("-pseudo")));
    annotationPatterns.put("-nPseudo",new Pair<>(tregexPatternCompiler.compile("@NP < (@NN < ????|??????|??????)"),new SimpleStringFunction("-npseudo")));
    annotationPatterns.put("-pseudoArg",new Pair<>(tregexPatternCompiler.compile("@NP < @NP $, (@NN < ????|??????|??????)"),new SimpleStringFunction("-pseudoArg")));
    annotationPatterns.put("-eqL1",new Pair<>(tregexPatternCompiler.compile("__ < (@S !< @VP|S)"),new SimpleStringFunction("-haseq")));
    annotationPatterns.put("-eqL1L2",new Pair<>(tregexPatternCompiler.compile("__ < (__ < (@S !< @VP|S)) | < (@S !< @VP|S)"),new SimpleStringFunction("-haseq")));
    annotationPatterns.put("-fullQuote",new Pair<>(tregexPatternCompiler.compile("__ < ((@PUNC < \") $ (@PUNC < \"))"),new SimpleStringFunction("-fq")));
    annotationPatterns.put("-brokeQuote",new Pair<>(tregexPatternCompiler.compile("__ < ((@PUNC < \") !$ (@PUNC < \"))"),new SimpleStringFunction("-bq")));
    annotationPatterns.put("-splitVP",new Pair<>(tregexPatternCompiler.compile("@VP <# __=term1"),new AddRelativeNodeFunction("-","term1",true)));
    annotationPatterns.put("-markFemP",new Pair<>(tregexPatternCompiler.compile("@NP|ADJP < (__ < /??$/)"),new SimpleStringFunction("-femP")));
    annotationPatterns.put("-embedSBAR",new Pair<>(tregexPatternCompiler.compile("@NP|PP <+(@NP|PP) @SBAR"),new SimpleStringFunction("-embedSBAR")));
    annotationPatterns.put("-complexVP",new Pair<>(tregexPatternCompiler.compile("__ << (@VP < (@NP $ @NP)) > __"),new SimpleStringFunction("-complexVP")));
    annotationPatterns.put("-containsJJ",new Pair<>(tregexPatternCompiler.compile("@NP <+(@NP) /JJ/"),new SimpleStringFunction("-hasJJ")));
    annotationPatterns.put("-markMasdarVP2",new Pair<>(tregexPatternCompiler.compile("__ << @VN|VBG"),new SimpleStringFunction("-masdar")));
    annotationPatterns.put("-coordNP",new Pair<>(tregexPatternCompiler.compile("@NP|ADJP <+(@NP|ADJP) (@CC|PUNC $- __ $+ __)"),new SimpleStringFunction("-coordNP")));
    annotationPatterns.put("-coordWa",new Pair<>(tregexPatternCompiler.compile("__ << (@CC , __ < ??-)"),new SimpleStringFunction("-coordWA")));
    annotationPatterns.put("-NPhasADJP",new Pair<>(tregexPatternCompiler.compile("@NP <+(@NP) @ADJP"),new SimpleStringFunction("-NPhasADJP")));
    annotationPatterns.put("-NPADJP",new Pair<>(tregexPatternCompiler.compile("@NP < @ADJP"),new SimpleStringFunction("-npadj")));
    annotationPatterns.put("-NPJJ",new Pair<>(tregexPatternCompiler.compile("@NP < /JJ/"),new SimpleStringFunction("-npjj")));
    annotationPatterns.put("-NPCC",new Pair<>(tregexPatternCompiler.compile("@NP <+(@NP) @CC"),new SimpleStringFunction("-npcc")));
    annotationPatterns.put("-NPCD",new Pair<>(tregexPatternCompiler.compile("@NP < @CD"),new SimpleStringFunction("-npcd")));
    annotationPatterns.put("-NPNNP",new Pair<>(tregexPatternCompiler.compile("@NP < /NNP/"),new SimpleStringFunction("-npnnp")));
    annotationPatterns.put("-SVO",new Pair<>(tregexPatternCompiler.compile("@S < (@NP . @VP)"),new SimpleStringFunction("-svo")));
    annotationPatterns.put("-containsSBAR",new Pair<>(tregexPatternCompiler.compile("__ << @SBAR"),new SimpleStringFunction("-hasSBAR")));
    annotationPatterns.put("-markGappedVP",new Pair<>(TregexPattern.compile("@VP > @VP $- __ $ /^(?:CC|CONJ)/ !< /^V/"),new SimpleStringFunction("-gappedVP")));
    annotationPatterns.put("-markGappedVPConjoiners",new Pair<>(TregexPattern.compile("/^(?:CC|CONJ)/ $ (@VP > @VP $- __ !< /^V/)"),new SimpleStringFunction("-gappedVP")));
    annotationPatterns.put("-markGenitiveParent",new Pair<>(TregexPattern.compile("@NP < (" + genitiveNodeTregexString + ')'),new SimpleStringFunction("-genitiveParent")));
    annotationPatterns.put("-maSdrMark",new Pair<>(tregexPatternCompiler.compile("/^N/ <<# (/^[t\\u062a].+[y\\u064a].$/ > @NN|NOUN|DTNN)"),new SimpleStringFunction("-maSdr")));
    annotationPatterns.put("-maSdrMark2",new Pair<>(tregexPatternCompiler.compile("/^N/ <<# (/^(?:[t\\u062a].+[y\\u064a].|<.{3,}|A.{3,})$/ > @NN|NOUN|DTNN)"),new SimpleStringFunction("-maSdr")));
    annotationPatterns.put("-maSdrMark3",new Pair<>(tregexPatternCompiler.compile("/^N/ <<# (/^(?:[t\\u062a<A].{3,})$/ > @NN|NOUN|DTNN)"),new SimpleStringFunction("-maSdr")));
    annotationPatterns.put("-maSdrMark4",new Pair<>(tregexPatternCompiler.compile("/^N/ <<# (/^(?:[t\\u062a<A].{3,})$/ > (@NN|NOUN|DTNN > (@NP < @NP)))"),new SimpleStringFunction("-maSdr")));
    annotationPatterns.put("-maSdrMark5",new Pair<>(tregexPatternCompiler.compile("/^N/ <<# (__ > (@NN|NOUN|DTNN > (@NP < @NP)))"),new SimpleStringFunction("-maSdr")));
    annotationPatterns.put("-mjjMark",new Pair<>(tregexPatternCompiler.compile("@JJ|DTJJ < /^m/ $+ @PP ># @ADJP "),new SimpleStringFunction("-mjj")));
    annotationPatterns.put("-markNPwithSdescendant",new Pair<>(tregexPatternCompiler.compile("__ !< @S << @S [ >> @NP | == @NP ]"),new SimpleStringFunction("-inNPdominatesS")));
    annotationPatterns.put("-markRightRecursiveNP",new Pair<>(tregexPatternCompiler.compile("__ <<- @NP [>>- @NP | == @NP]"),new SimpleStringFunction("-rrNP")));
    annotationPatterns.put("-markBaseNP",new Pair<>(tregexPatternCompiler.compile("@NP !< @NP !< @VP !< @SBAR !< @ADJP !< @ADVP !< @S !< @QP !< @UCP !< @PP"),new SimpleStringFunction("-base")));
    annotationPatterns.put("-markBaseNPplusIdafa",new Pair<>(tregexPatternCompiler.compile("@NP !< (/^[^N]/ < (__ < __)) !< (__ < (__ < (__ < __)))"),new SimpleStringFunction("-base")));
    annotationPatterns.put("-markTwoLevelIdafa",new Pair<>(tregexPatternCompiler.compile("@NP < (@NP < (@NP < (__ < __)) !< (/^[^N]/ < (__ < __))) !< (/^[^N]/ < (__ < __)) !< (__ < (__ < (__ < (__ < __))))"),new SimpleStringFunction("-idafa2")));
    annotationPatterns.put("-markDefiniteIdafa",new Pair<>(tregexPatternCompiler.compile("@NP < (/^(?:NN|NOUN)/ !$,, /^[^AP]/) <+(/^NP/) (@NP < /^DT/)"),new SimpleStringFunction("-defIdafa")));
    annotationPatterns.put("-markDefiniteIdafa1",new Pair<>(tregexPatternCompiler.compile("@NP < (/^(?:NN|NOUN)/ !$,, /^[^AP]/) < (@NP < /^DT/) !< (/^[^N]/ < (__ < __)) !< (__ < (__ < (__ < __)))"),new SimpleStringFunction("-defIdafa1")));
    annotationPatterns.put("-markContainsSBAR",new Pair<>(tregexPatternCompiler.compile("__ << @SBAR"),new SimpleStringFunction("-withSBAR")));
    annotationPatterns.put("-markPhrasalNodesDominatedBySBAR",new Pair<>(tregexPatternCompiler.compile("__ < (__ < __) >> @SBAR"),new SimpleStringFunction("-domBySBAR")));
    annotationPatterns.put("-markCoordinateNPs",new Pair<>(tregexPatternCompiler.compile("@NP < @CC|CONJ"),new SimpleStringFunction("-coord")));
    annotationPatterns.put("-markNounAdjVPheads",new Pair<>(tregexPatternCompiler.compile("@NN|NNS|NNP|NNPS|JJ|DTJJ|DTNN|DTNNS|DTNNP|DTNNPS ># @VP"),new SimpleStringFunction("-VHead")));
    annotationPatterns.put("-markPronominalNP",new Pair<>(tregexPatternCompiler.compile("@NP < @PRP"),new SimpleStringFunction("-PRP")));
    annotationPatterns.put("-markMultiCC",new Pair<>(tregexPatternCompiler.compile("__ < (@CC $.. @CC)"),new SimpleStringFunction("-multiCC")));
    annotationPatterns.put("-markHasCCdaughter",new Pair<>(tregexPatternCompiler.compile("__ < @CC"),new SimpleStringFunction("-CCdtr")));
    annotationPatterns.put("-markAcronymNP",new Pair<>(tregexPatternCompiler.compile("@NP !<  (__ < (__ < __)) < (/^NN/ < /^.$/ $ (/^NN/ < /^.$/)) !< (__ < /../)"),new SimpleStringFunction("-acro")));
    annotationPatterns.put("-markAcronymNN",new Pair<>(tregexPatternCompiler.compile("/^NN/ < /^.$/ $ (/^NN/ < /^.$/) > (@NP !<  (__ < (__ < __)) !< (__ < /../))"),new SimpleStringFunction("-acro")));
    annotationPatterns.put("-markPPwithPPdescendant",new Pair<>(tregexPatternCompiler.compile("__ !< @PP << @PP [ >> @PP | == @PP ]"),new SimpleStringFunction("-inPPdominatesPP")));
    annotationPatterns.put("-gpAnnotatePrepositions",new Pair<>(TregexPattern.compile("/^(?:IN|PREP)$/ > (__ > __=gp)"),new AddRelativeNodeFunction("^^","gp",false)));
    annotationPatterns.put("-gpEquivalencePrepositions",new Pair<>(TregexPattern.compile("/^(?:IN|PREP)$/ > (@PP >+(/^PP/) __=gp)"),new AddEquivalencedNodeFunction("^^","gp")));
    annotationPatterns.put("-gpEquivalencePrepositionsVar",new Pair<>(TregexPattern.compile("/^(?:IN|PREP)$/ > (@PP >+(/^PP/) __=gp)"),new AddEquivalencedNodeFunctionVar("^^","gp")));
    annotationPatterns.put("-markPPParent",new Pair<>(tregexPatternCompiler.compile("@PP=max !< @PP"),new AddRelativeNodeRegexFunction("^^","max","^(\\w)")));
    annotationPatterns.put("-whPP",new Pair<>(tregexPatternCompiler.compile("@PP <- (@SBAR <, /^WH/)"),new SimpleStringFunction("-whPP")));
    annotationPatterns.put("-deflateMin",new Pair<>(tregexPatternCompiler.compile("__ < (__ < ????)"),new SimpleStringFunction("-min")));
    annotationPatterns.put("-v2MarkovIN",new Pair<>(tregexPatternCompiler.compile("@IN > (@__=p1 > @__=p2)"),new AddRelativeNodeFunction("^","p1","p2",false)));
    annotationPatterns.put("-pleonasticMin",new Pair<>(tregexPatternCompiler.compile("@PP <, (IN < ????) > @S"),new SimpleStringFunction("-pleo")));
    annotationPatterns.put("-v2MarkovPP",new Pair<>(tregexPatternCompiler.compile("@PP > (@__=p1 > @__=p2)"),new AddRelativeNodeFunction("^","p1","p2",false)));
  }
 catch (  TregexParseException e) {
    int nth=annotationPatterns.size() + 1;
    String nthStr=(nth == 1) ? "1st" : ((nth == 2) ? "2nd" : nth + "th");
    System.err.println("Parse exception on " + nthStr + " annotation pattern initialization:"+ e);
    throw e;
  }
}
