{
  featureFactory=MachineReading.makeRelationFeatureFactory(relationFeatureFactoryClass,relationFeatures,false);
  mentionFactory=new RelationMentionFactory();
  ResultsPrinter.align(goldStandard,extractorOutput);
  List<RelationMention> relations=new ArrayList<RelationMention>();
  final Map<RelationMention,String> predictions=new HashMap<RelationMention,String>();
  for (int i=0; i < goldStandard.size(); i++) {
    List<RelationMention> goldRelations=AnnotationUtils.getAllRelations(mentionFactory,goldStandard.get(i),true);
    relations.addAll(goldRelations);
    for (    RelationMention rel : goldRelations) {
      predictions.put(rel,AnnotationUtils.getRelation(mentionFactory,extractorOutput.get(i),rel.getArg(0),rel.getArg(1)).getType());
    }
  }
  final Counter<Pair<Pair<String,String>,String>> pathCounts=new ClassicCounter<Pair<Pair<String,String>,String>>();
  for (  RelationMention rel : relations) {
    pathCounts.incrementCount(new Pair<Pair<String,String>,String>(new Pair<String,String>(rel.getArg(0).getType(),rel.getArg(1).getType()),featureFactory.getFeature(rel,"dependency_path_lowlevel")));
  }
  Counter<String> singletonCorrect=new ClassicCounter<String>();
  Counter<String> singletonPredicted=new ClassicCounter<String>();
  Counter<String> singletonActual=new ClassicCounter<String>();
  for (  RelationMention rel : relations) {
    if (pathCounts.getCount(new Pair<Pair<String,String>,String>(new Pair<String,String>(rel.getArg(0).getType(),rel.getArg(1).getType()),featureFactory.getFeature(rel,"dependency_path_lowlevel"))) == 1.0) {
      String prediction=predictions.get(rel);
      if (prediction.equals(rel.getType())) {
        singletonCorrect.incrementCount(prediction);
      }
      singletonPredicted.incrementCount(prediction);
      singletonActual.incrementCount(rel.getType());
    }
  }
class RelComp implements Comparator<RelationMention> {
    public int compare(    RelationMention rel1,    RelationMention rel2){
      String prediction1=predictions.get(rel1);
      String prediction2=predictions.get(rel2);
      int entComp=(rel1.getArg(0).getType() + rel1.getArg(1).getType()).compareTo(rel2.getArg(0).getType() + rel2.getArg(1).getType());
      int typeComp=rel1.getType().compareTo(rel2.getType());
      int predictionComp=prediction1.compareTo(prediction2);
      double pathCount1=pathCounts.getCount(new Pair<Pair<String,String>,String>(new Pair<String,String>(rel1.getArg(0).getType(),rel1.getArg(1).getType()),featureFactory.getFeature(rel1,"dependency_path_lowlevel")));
      double pathCount2=pathCounts.getCount(new Pair<Pair<String,String>,String>(new Pair<String,String>(rel2.getArg(0).getType(),rel2.getArg(1).getType()),featureFactory.getFeature(rel2,"dependency_path_lowlevel")));
      if (entComp != 0) {
        return entComp;
      }
 else       if (pathCount1 < pathCount2) {
        return -1;
      }
 else       if (pathCount1 > pathCount2) {
        return 1;
      }
 else       if (typeComp != 0) {
        return typeComp;
      }
 else       if (predictionComp != 0) {
        return predictionComp;
      }
 else {
        return rel1.getSentence().get(CoreAnnotations.TextAnnotation.class).compareTo(rel2.getSentence().get(CoreAnnotations.TextAnnotation.class));
      }
    }
  }
  RelComp relComp=new RelComp();
  Collections.sort(relations,relComp);
  for (  RelationMention rel : relations) {
    String prediction=predictions.get(rel);
    String type1=rel.getArg(0).getType();
    String type2=rel.getArg(1).getType();
    String path=featureFactory.getFeature(rel,"dependency_path_lowlevel");
    if (!((type1.equals("Peop") && type2.equals("Peop")) || (type1.equals("Peop") && type2.equals("Loc")) || (type1.equals("Loc") && type2.equals("Loc"))|| (type1.equals("Org") && type2.equals("Loc"))|| (type1.equals("Peop") && type2.equals("Org")))) {
      continue;
    }
    if (path == "") {
      continue;
    }
    pw.println("\nLABEL: " + prediction);
    pw.println(rel);
    pw.println(path);
    pw.println(featureFactory.getFeatures(rel,"dependency_path_words"));
    pw.println(featureFactory.getFeature(rel,"surface_path_POS"));
  }
}
