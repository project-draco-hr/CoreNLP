{
  boolean ret=false;
  Mention mention=mentionCluster.getRepresentativeMention();
  if (flags.DO_PRONOUN && Math.abs(mention2.sentNum - ant.sentNum) > 3 && mention2.person != Person.I && mention2.person != Person.YOU)   return false;
  if (mention2.spanToString().toLowerCase().equals("this") && Math.abs(mention2.sentNum - ant.sentNum) > 3)   return false;
  if (mention2.person == Person.YOU && document.docType == DocType.ARTICLE && mention2.headWord.get(CoreAnnotations.SpeakerAnnotation.class).equals("PER0"))   return false;
  if (document.conllDoc != null) {
    if (ant.generic && ant.person == Person.YOU)     return false;
    if (mention2.generic)     return false;
    if (mention2.insideIn(ant) || ant.insideIn(mention2))     return false;
  }
  if (flags.USE_DISCOURSEMATCH) {
    String mString=mention.spanToString().toLowerCase();
    String antString=ant.spanToString().toLowerCase();
    if (dict.firstPersonPronouns.contains(mString) && mention.number == Number.SINGULAR && dict.firstPersonPronouns.contains(antString) && ant.number == Number.SINGULAR && Rules.entitySameSpeaker(document,mention,ant)) {
      return true;
    }
    if (Rules.entityIsSpeaker(document,mention,ant,dict) && ((dict.firstPersonPronouns.contains(mString) && mention.number == Number.SINGULAR) || (dict.firstPersonPronouns.contains(antString) && ant.number == Number.SINGULAR))) {
      return true;
    }
    if (Rules.entitySameSpeaker(document,mention,ant) && dict.secondPersonPronouns.contains(mString) && dict.secondPersonPronouns.contains(antString)) {
      return true;
    }
    if (((mention.person == Person.I && ant.person == Person.YOU || (mention.person == Person.YOU && ant.person == Person.I)) && (mention.headWord.get(CoreAnnotations.UtteranceAnnotation.class) - ant.headWord.get(CoreAnnotations.UtteranceAnnotation.class) == 1) && document.docType == DocType.CONVERSATION)) {
      SieveCoreferenceSystem.logger.finest("discourse match: between two person");
      return true;
    }
    if (dict.reflexivePronouns.contains(mention.headString) && Rules.entitySubjectObject(mention,ant)) {
      SieveCoreferenceSystem.logger.finest("reflexive pronoun: " + ant.spanToString() + "("+ ant.mentionID+ ") :: "+ mention.spanToString()+ "("+ mention.mentionID+ ") -> "+ (mention.goldCorefClusterID == ant.goldCorefClusterID));
      return true;
    }
  }
  if (Constants.USE_DISCOURSE_CONSTRAINTS && !flags.USE_EXACTSTRINGMATCH && !flags.USE_RELAXED_EXACTSTRINGMATCH&& !flags.USE_APPOSITION&& !flags.USE_WORDS_INCLUSION) {
    for (    Mention m : mentionCluster.getCorefMentions()) {
      for (      Mention a : potentialAntecedent.getCorefMentions()) {
        if (Rules.entityIsSpeaker(document,m,a,dict) && m.person != Person.I && a.person != Person.I) {
          SieveCoreferenceSystem.logger.finest("Incompatibles: not match(speaker): " + ant.spanToString() + "("+ ant.mentionID+ ") :: "+ mention.spanToString()+ "("+ mention.mentionID+ ") -> "+ (mention.goldCorefClusterID != ant.goldCorefClusterID));
          document.incompatibles.add(new Pair<Integer,Integer>(Math.min(m.mentionID,a.mentionID),Math.max(m.mentionID,a.mentionID)));
          return false;
        }
        int dist=Math.abs(m.headWord.get(CoreAnnotations.UtteranceAnnotation.class) - a.headWord.get(CoreAnnotations.UtteranceAnnotation.class));
        if (document.docType != DocType.ARTICLE && dist == 1 && !Rules.entitySameSpeaker(document,m,a)) {
          if (m.person == Person.I && a.person == Person.I) {
            SieveCoreferenceSystem.logger.finest("Incompatibles: neighbor I: " + ant.spanToString() + "("+ ant.mentionID+ ") :: "+ mention.spanToString()+ "("+ mention.mentionID+ ") -> "+ (mention.goldCorefClusterID != ant.goldCorefClusterID));
            document.incompatibles.add(new Pair<Integer,Integer>(Math.min(m.mentionID,a.mentionID),Math.max(m.mentionID,a.mentionID)));
            return false;
          }
          if (m.person == Person.YOU && a.person == Person.YOU) {
            SieveCoreferenceSystem.logger.finest("Incompatibles: neighbor YOU: " + ant.spanToString() + "("+ ant.mentionID+ ") :: "+ mention.spanToString()+ "("+ mention.mentionID+ ") -> "+ (mention.goldCorefClusterID != ant.goldCorefClusterID));
            document.incompatibles.add(new Pair<Integer,Integer>(Math.min(m.mentionID,a.mentionID),Math.max(m.mentionID,a.mentionID)));
            return false;
          }
          if (m.person == Person.WE && a.person == Person.WE) {
            SieveCoreferenceSystem.logger.finest("Incompatibles: neighbor WE: " + ant.spanToString() + "("+ ant.mentionID+ ") :: "+ mention.spanToString()+ "("+ mention.mentionID+ ") -> "+ (mention.goldCorefClusterID != ant.goldCorefClusterID));
            document.incompatibles.add(new Pair<Integer,Integer>(Math.min(m.mentionID,a.mentionID),Math.max(m.mentionID,a.mentionID)));
            return false;
          }
        }
      }
    }
    if (document.docType == DocType.ARTICLE) {
      for (      Mention m : mentionCluster.getCorefMentions()) {
        for (        Mention a : potentialAntecedent.getCorefMentions()) {
          if (Rules.entitySubjectObject(m,a)) {
            SieveCoreferenceSystem.logger.finest("Incompatibles: subject-object: " + ant.spanToString() + "("+ ant.mentionID+ ") :: "+ mention.spanToString()+ "("+ mention.mentionID+ ") -> "+ (mention.goldCorefClusterID != ant.goldCorefClusterID));
            document.incompatibles.add(new Pair<Integer,Integer>(Math.min(m.mentionID,a.mentionID),Math.max(m.mentionID,a.mentionID)));
            return false;
          }
        }
      }
    }
  }
  if (flags.USE_iwithini && Rules.entityIWithinI(mention,ant,dict)) {
    document.incompatibles.add(new Pair<Integer,Integer>(Math.min(mention.mentionID,ant.mentionID),Math.max(mention.mentionID,ant.mentionID)));
    return false;
  }
  if (flags.USE_EXACTSTRINGMATCH && Rules.entityExactStringMatch(mentionCluster,potentialAntecedent,dict,roleSet)) {
    return true;
  }
  if (flags.USE_RELAXED_EXACTSTRINGMATCH && Rules.entityRelaxedExactStringMatch(mentionCluster,potentialAntecedent,mention,ant,dict,roleSet)) {
    return true;
  }
  if (flags.USE_APPOSITION && Rules.entityIsApposition(mentionCluster,potentialAntecedent,mention,ant)) {
    SieveCoreferenceSystem.logger.finest("Apposition: " + mention.spanToString() + "\tvs\t"+ ant.spanToString());
    return true;
  }
  if (flags.USE_PREDICATENOMINATIVES && Rules.entityIsPredicateNominatives(mentionCluster,potentialAntecedent,mention,ant)) {
    SieveCoreferenceSystem.logger.finest("Predicate nominatives: " + mention.spanToString() + "\tvs\t"+ ant.spanToString());
    return true;
  }
  if (flags.USE_ACRONYM && Rules.entityIsAcronym(mentionCluster,potentialAntecedent)) {
    SieveCoreferenceSystem.logger.finest("Acronym: " + mention.spanToString() + "\tvs\t"+ ant.spanToString());
    return true;
  }
  if (flags.USE_RELATIVEPRONOUN && Rules.entityIsRelativePronoun(mention,ant)) {
    SieveCoreferenceSystem.logger.finest("Relative pronoun: " + mention.spanToString() + "\tvs\t"+ ant.spanToString());
    return true;
  }
  if (flags.USE_DEMONYM && mention.isDemonym(ant,dict)) {
    SieveCoreferenceSystem.logger.finest("Demonym: " + mention.spanToString() + "\tvs\t"+ ant.spanToString());
    return true;
  }
  if (flags.USE_ROLEAPPOSITION && Rules.entityIsRoleAppositive(mentionCluster,potentialAntecedent,mention,ant,dict)) {
    return true;
  }
  if (flags.USE_INCLUSION_HEADMATCH && Rules.entityHeadsAgree(mentionCluster,potentialAntecedent,mention,ant,dict)) {
    ret=true;
  }
  if (flags.USE_RELAXED_HEADMATCH && Rules.entityRelaxedHeadsAgreeBetweenMentions(mentionCluster,potentialAntecedent,mention,ant)) {
    ret=true;
  }
  if (flags.USE_WORDS_INCLUSION && ret && !Rules.entityWordsIncluded(mentionCluster,potentialAntecedent,mention,ant)) {
    return false;
  }
  if (flags.USE_INCOMPATIBLE_MODIFIER && ret && Rules.entityHaveIncompatibleModifier(mentionCluster,potentialAntecedent)) {
    return false;
  }
  if (flags.USE_PROPERHEAD_AT_LAST && ret && !Rules.entitySameProperHeadLastWord(mentionCluster,potentialAntecedent,mention,ant)) {
    return false;
  }
  if (flags.USE_ATTRIBUTES_AGREE && !Rules.entityAttributesAgree(mentionCluster,potentialAntecedent)) {
    return false;
  }
  if (flags.USE_DIFFERENT_LOCATION && Rules.entityHaveDifferentLocation(mention,ant,dict)) {
    if (flags.USE_PROPERHEAD_AT_LAST && ret && mention.goldCorefClusterID != ant.goldCorefClusterID) {
      SieveCoreferenceSystem.logger.finest("DIFFERENT LOCATION: " + ant.spanToString() + " :: "+ mention.spanToString());
    }
    return false;
  }
  if (flags.USE_NUMBER_IN_MENTION && Rules.entityNumberInLaterMention(mention,ant)) {
    if (flags.USE_PROPERHEAD_AT_LAST && ret && mention.goldCorefClusterID != ant.goldCorefClusterID) {
      SieveCoreferenceSystem.logger.finest("NEW NUMBER : " + ant.spanToString() + " :: "+ mention.spanToString());
    }
    return false;
  }
  if (flags.USE_WN_HYPERNYM) {
    Method meth=semantics.wordnet.getClass().getMethod("checkHypernym",CorefCluster.class,CorefCluster.class,Mention.class,Mention.class);
    if ((Boolean)meth.invoke(semantics.wordnet,mentionCluster,potentialAntecedent,mention,ant)) {
      ret=true;
    }
 else     if (mention.goldCorefClusterID == ant.goldCorefClusterID && !mention.isPronominal() && !ant.isPronominal()) {
      SieveCoreferenceSystem.logger.finest("not hypernym in WN");
      SieveCoreferenceSystem.logger.finest("False Negatives:: " + ant.spanToString() + " <= "+ mention.spanToString());
    }
  }
  if (flags.USE_WN_SYNONYM) {
    Method meth=semantics.wordnet.getClass().getMethod("checkSynonym",new Class[]{Mention.class,Mention.class});
    if ((Boolean)meth.invoke(semantics.wordnet,mention,ant)) {
      ret=true;
    }
 else     if (mention.goldCorefClusterID == ant.goldCorefClusterID && !mention.isPronominal() && !ant.isPronominal()) {
      SieveCoreferenceSystem.logger.finest("not synonym in WN");
      SieveCoreferenceSystem.logger.finest("False Negatives:: " + ant.spanToString() + " <= "+ mention.spanToString());
    }
  }
  try {
    if (flags.USE_ALIAS && Rules.entityAlias(mentionCluster,potentialAntecedent,semantics,dict)) {
      return true;
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  if (flags.DO_PRONOUN) {
    Mention m;
    if (mention.predicateNominatives != null && mention.predicateNominatives.contains(mention2)) {
      m=mention2;
    }
 else {
      m=mention;
    }
    if ((m.isPronominal() || dict.allPronouns.contains(m.toString())) && Rules.entityAttributesAgree(mentionCluster,potentialAntecedent)) {
      if (dict.demonymSet.contains(ant.spanToString().toLowerCase()) && dict.notOrganizationPRP.contains(m.headString)) {
        document.incompatibles.add(new Pair<Integer,Integer>(Math.min(m.mentionID,ant.mentionID),Math.max(m.mentionID,ant.mentionID)));
        return false;
      }
      if (Constants.USE_DISCOURSE_CONSTRAINTS && Rules.entityPersonDisagree(document,mentionCluster,potentialAntecedent,dict)) {
        SieveCoreferenceSystem.logger.finest("Incompatibles: Person Disagree: " + ant.spanToString() + "("+ ant.mentionID+ ") :: "+ mention.spanToString()+ "("+ mention.mentionID+ ") -> "+ (mention.goldCorefClusterID != ant.goldCorefClusterID));
        document.incompatibles.add(new Pair<Integer,Integer>(Math.min(m.mentionID,ant.mentionID),Math.max(m.mentionID,ant.mentionID)));
        return false;
      }
      return true;
    }
  }
  return ret;
}
