{
  MapList<String,TreeNodeProxy> lexToTreeNode=new MapList<String,TreeNodeProxy>();
  MapList<String,IndexedWordProxy> lexToSemNode=new MapList<String,IndexedWordProxy>();
  for (  Tree child : tree.getLeaves()) {
    List<TreeNodeProxy> leafProxies=TreeNodeProxy.create(child,tree);
    for (    TreeNodeProxy proxy : leafProxies)     lexToTreeNode.add(proxy.lex,proxy);
  }
  Map<IndexedWord,Integer> depthMap=Generics.newHashMap();
  for (  IndexedWord node : sg.vertexSet()) {
    List<IndexedWord> path=sg.getPathToRoot(node);
    if (path != null)     depthMap.put(node,path.size());
 else     depthMap.put(node,99999);
    List<IndexedWordProxy> nodeProxies=IndexedWordProxy.create(node);
    for (    IndexedWordProxy proxy : nodeProxies)     lexToSemNode.add(proxy.lex,proxy);
  }
  Map<PositionedTree,IndexedWord> map=Generics.newHashMap();
  for (  String lex : lexToTreeNode.keySet()) {
    for (int i=0; i < lexToTreeNode.size(lex) && i < lexToSemNode.size(lex); i++) {
      map.put(new PositionedTree(lexToTreeNode.get(lex,i).treeNode,tree),lexToSemNode.get(lex,i).node);
    }
  }
  for (  Tree nonTerm : tree) {
    if (!nonTerm.isLeaf()) {
      IndexedWord bestNode=null;
      int bestScore=99999;
      for (      Tree curr : nonTerm) {
        IndexedWord equivNode=map.get(new PositionedTree(curr,tree));
        if ((equivNode == null) || !depthMap.containsKey(equivNode))         continue;
        int currScore=depthMap.get(equivNode);
        if (currScore < bestScore) {
          bestScore=currScore;
          bestNode=equivNode;
        }
      }
      if (bestNode != null) {
        map.put(new PositionedTree(nonTerm,tree),bestNode);
      }
    }
  }
  return map;
}
