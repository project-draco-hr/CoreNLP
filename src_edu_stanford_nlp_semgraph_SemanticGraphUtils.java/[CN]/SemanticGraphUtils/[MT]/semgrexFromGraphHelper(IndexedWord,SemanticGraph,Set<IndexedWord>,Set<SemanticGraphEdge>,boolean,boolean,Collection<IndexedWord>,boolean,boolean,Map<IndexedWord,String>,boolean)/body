{
  StringWriter buf=new StringWriter();
  if (wildcardNodes != null && wildcardNodes.contains(vertice)) {
    buf.append("{}");
  }
 else {
    buf.append("{");
    if (useTag) {
      buf.append("tag:");
      buf.append(vertice.tag());
      if (useWord)       buf.append(";");
    }
    if (useWord) {
      buf.append("word:");
      buf.append(vertice.word());
    }
    buf.append("}");
  }
  if (nodeNameMap != null) {
    buf.append("=");
    buf.append(nodeNameMap.get(vertice));
    buf.append(" ");
  }
 else   if (useWordAsLabel) {
    buf.append("=");
    buf.append(sanitizeForSemgrexName(vertice.word()));
    buf.append(" ");
  }
  tabu.add(vertice);
  Iterable<SemanticGraphEdge> edgeIter=null;
  if (!orderedNodes) {
    edgeIter=sg.outgoingEdgeIterable(vertice);
  }
 else {
    edgeIter=CollectionUtils.sorted(sg.outgoingEdgeIterable(vertice),new Comparator<SemanticGraphEdge>(){
      @Override public int compare(      SemanticGraphEdge arg0,      SemanticGraphEdge arg1){
        return (arg0.getRelation().toString().compareTo(arg1.getRelation().toString()));
      }
    }
);
  }
  for (  SemanticGraphEdge edge : edgeIter) {
    seenEdges.add(edge);
    IndexedWord tgtVert=edge.getDependent();
    boolean applyParens=sg.outDegree(tgtVert) > 0 && !tabu.contains(tgtVert);
    buf.append(" >");
    buf.append(edge.getRelation().toString());
    if (nameEdges) {
      buf.append("=E");
      buf.write(String.valueOf(seenEdges.size()));
    }
    buf.append(" ");
    if (applyParens)     buf.append("(");
    if (tabu.contains(tgtVert)) {
      buf.append("{tag:");
      buf.append(tgtVert.tag());
      buf.append("}");
      if (useWordAsLabel) {
        buf.append("=");
        buf.append(tgtVert.word());
        buf.append(" ");
      }
    }
 else {
      buf.append(semgrexFromGraphHelper(tgtVert,sg,tabu,seenEdges,useWordAsLabel,nameEdges,wildcardNodes,useTag,useWord,nodeNameMap,orderedNodes));
      if (applyParens)       buf.append(")");
    }
  }
  return buf.toString();
}
