{
  JsonReader jsonReader=Json.createReader(new StringReader(line));
  JsonObject objarr=jsonReader.readObject();
  jsonReader.close();
  Properties props=new Properties();
  for (  String o : objarr.keySet()) {
    if (o.equals("seedWords")) {
      JsonObject obj=objarr.getJsonObject(o);
      for (      String st : obj.keySet()) {
        seedWords.put(st,new HashSet<CandidatePhrase>());
        JsonArray arr=obj.getJsonArray(st);
        for (int i=0; i < arr.size(); i++) {
          String val=arr.getString(i);
          seedWords.get(st).add(CandidatePhrase.createOrGet(val));
          System.out.println("adding " + val + " for label "+ st);
        }
      }
    }
 else     props.setProperty(o,objarr.getString(o));
  }
  System.out.println("seedwords are " + seedWords);
  if (additionalSeedWordsFiles != null && !additionalSeedWordsFiles.isEmpty()) {
    Map<String,Set<CandidatePhrase>> additionalSeedWords=GetPatternsFromDataMultiClass.readSeedWords(additionalSeedWordsFiles);
    logger.info("additional seed words are " + additionalSeedWords);
    for (    String label : seedWords.keySet()) {
      if (additionalSeedWords.containsKey(label))       seedWords.get(label).addAll(additionalSeedWords.get(label));
    }
  }
  outputFile=null;
  if (readFile) {
    System.out.println("input value is " + objarr.getString("input"));
    outputFile=props.getProperty("input") + "_processed";
    props.setProperty("file",objarr.getString("input"));
    if (writeOutputToFile && !props.containsKey("columnOutputFile"))     props.setProperty("columnOutputFile",outputFile);
  }
 else {
    String systemdir=System.getProperty("java.io.tmpdir");
    File tempFile=File.createTempFile("sents",".tmp",new File(systemdir));
    tempFile.deleteOnExit();
    IOUtils.writeStringToFile(props.getProperty("input"),tempFile.getPath(),"utf8");
    props.setProperty("file",tempFile.getAbsolutePath());
  }
  setProperties(props);
  this.props=props;
  int i=1;
  for (  String label : seedWords.keySet()) {
    String ansclstr="edu.stanford.nlp.patterns.PatternsAnnotations$PatternLabel" + i;
    Class<? extends TypesafeMap.Key<String>> mcCl=(Class<? extends TypesafeMap.Key<String>>)Class.forName(ansclstr);
    machineAnswerClasses.put(label,mcCl);
    String humanansclstr="edu.stanford.nlp.patterns.PatternsAnnotations$PatternHumanLabel" + i;
    humanLabelClasses.put(label,(Class<? extends TypesafeMap.Key<String>>)Class.forName(humanansclstr));
    i++;
  }
}
