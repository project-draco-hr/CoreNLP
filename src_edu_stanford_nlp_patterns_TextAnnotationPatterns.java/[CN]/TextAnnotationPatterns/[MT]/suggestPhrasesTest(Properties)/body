{
  logger.info("Suggesting phrases in test");
  logger.info("test properties are " + testProps);
  Properties runProps=new Properties(props);
  runProps.putAll(testProps);
  GetPatternsFromDataMultiClass<SurfacePattern> model=new GetPatternsFromDataMultiClass<SurfacePattern>(runProps,Data.sents,seedWords,true,humanLabelClasses);
  Execution.fillOptions(model,runProps);
  GetPatternsFromDataMultiClass.loadFromSavedPatternsWordsDir(model,runProps);
  Map<String,Integer> alreadyLearnedIters=new HashMap<String,Integer>();
  for (  String label : model.constVars.getLabels())   alreadyLearnedIters.put(label,model.constVars.getLearnedWordsEachIter().get(label).lastEntry().getKey());
  if (model.constVars.learn) {
    model.iterateExtractApply(null,null,null);
  }
  Map<String,Counter<CandidatePhrase>> allExtractions=new HashMap<String,Counter<CandidatePhrase>>();
  for (  String label : model.constVars.getLabels()) {
    logger.info("Matched seed words are " + model.matchedSeedWords.get(label));
    allExtractions.put(label,new ClassicCounter<CandidatePhrase>(model.matchedSeedWords.get(label)));
    Map.Entry<Integer,Counter<CandidatePhrase>> entry=model.constVars.getLearnedWordsEachIter().get(label).lastEntry();
    if (entry.getKey() > alreadyLearnedIters.get(label))     allExtractions.get(label).addAll(entry.getValue());
  }
  return model.constVars.getSetWordsAsJson(allExtractions);
}
