{
  logger.info("Suggesting phrases in test");
  logger.info("test properties are " + testProps);
  Properties runProps=StringUtils.argsToPropertiesWithResolve(new String[]{"-props",modelPropertiesFile});
  String[] removeProperties=new String[]{"allPatternsDir","storePatsForEachToken","invertedIndexClass","savePatternsWordsDir","batchProcessSents","outDir","saveInvertedIndex","removeOverLappingLabels","numThreads"};
  for (  String s : removeProperties)   if (runProps.containsKey(s))   runProps.remove(s);
  runProps.setProperty("stopWordsPatternFiles",stopWordsFile);
  runProps.setProperty("englishWordsFiles",stopWordsFile);
  runProps.setProperty("commonWordsPatternFiles",stopWordsFile);
  runProps.putAll(props);
  runProps.putAll(testProps);
  props.putAll(runProps);
  processText(false);
  GetPatternsFromDataMultiClass<SurfacePattern> model=new GetPatternsFromDataMultiClass<>(runProps,Data.sents,seedWords,true,humanLabelClasses);
  Execution.fillOptions(model,runProps);
  GetPatternsFromDataMultiClass.loadFromSavedPatternsWordsDir(model,runProps);
  Map<String,Integer> alreadyLearnedIters=new HashMap<>();
  for (  String label : model.constVars.getLabels())   alreadyLearnedIters.put(label,model.constVars.getLearnedWordsEachIter().get(label).lastEntry().getKey());
  if (model.constVars.learn) {
    model.iterateExtractApply(null,null,null);
  }
  Map<String,Counter<CandidatePhrase>> allExtractions=new HashMap<>();
  String label=model.constVars.getLabels().iterator().next();
  allExtractions.put(label,new ClassicCounter<>());
  for (  Map.Entry<String,DataInstance> sent : Data.sents.entrySet()) {
    StringBuffer str=new StringBuffer();
    for (    CoreLabel l : sent.getValue().getTokens()) {
      if (l.get(PatternsAnnotations.MatchedPatterns.class) != null && !l.get(PatternsAnnotations.MatchedPatterns.class).isEmpty()) {
        str.append(" " + l.word());
      }
 else {
        allExtractions.get(label).incrementCount(CandidatePhrase.createOrGet(str.toString().trim()));
        str.setLength(0);
      }
    }
  }
  allExtractions.putAll(model.matchedSeedWords);
  return model.constVars.getSetWordsAsJson(allExtractions);
}
