{
  if (pstmt != null) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    ObjectOutputStream oos=new ObjectOutputStream(baos);
    oos.writeObject(patterns);
    byte[] patsAsBytes=baos.toByteArray();
    ByteArrayInputStream bais=new ByteArrayInputStream(patsAsBytes);
    pstmt.setBinaryStream(1,bais,patsAsBytes.length);
    pstmt.setObject(2,sentId);
    pstmt.setInt(3,tokenId);
    pstmt.setString(4,sentId);
    pstmt.setInt(5,tokenId);
    ByteArrayOutputStream baos2=new ByteArrayOutputStream();
    ObjectOutputStream oos2=new ObjectOutputStream(baos2);
    oos2.writeObject(patterns);
    byte[] patsAsBytes2=baos2.toByteArray();
    ByteArrayInputStream bais2=new ByteArrayInputStream(patsAsBytes2);
    pstmt.setBinaryStream(6,bais2,patsAsBytes2.length);
    pstmt.setString(7,sentId);
    pstmt.setInt(8,tokenId);
  }
 else {
    if (!patternsForEachToken.containsKey(sentId))     patternsForEachToken.put(sentId,new ConcurrentHashMap<Integer,Set<Integer>>());
    patternsForEachToken.get(sentId).put(tokenId,patterns);
  }
}
