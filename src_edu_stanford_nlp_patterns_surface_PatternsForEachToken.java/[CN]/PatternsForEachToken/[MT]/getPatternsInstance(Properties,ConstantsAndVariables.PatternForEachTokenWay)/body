{
  storeWay=storePatsForEachToken;
  PatternsForEachToken p=null;
switch (storePatsForEachToken) {
case MEMORY:
{
      p=new PatternsForEachTokenInMemory(props);
      break;
    }
case DB:
{
    p=new PatternsForEachTokenDB(props);
    break;
  }
case LUCENE:
{
  try {
    Class c=Class.forName("edu.stanford.nlp.patterns.surface.PatternsForEachTokenLucene");
    p=(PatternsForEachToken)c.getDeclaredConstructor(Properties.class).newInstance(props);
    break;
  }
 catch (  ClassNotFoundException e) {
    throw new RuntimeException("Lucene option is not distributed (license clash). Email us if you really want it.");
  }
catch (  InvocationTargetException e) {
    throw new RuntimeException(e);
  }
catch (  NoSuchMethodException e) {
    throw new RuntimeException(e);
  }
catch (  InstantiationException e) {
    throw new RuntimeException(e);
  }
catch (  IllegalAccessException e) {
    throw new RuntimeException(e);
  }
}
}
return p;
}
