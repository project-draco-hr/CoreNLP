{
  int j=super.setOptionFlag(args,i);
  if (i != j) {
    return j;
  }
  if (args[i].equalsIgnoreCase("-beamSize")) {
    beamSize=Integer.valueOf(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-compoundUnaries")) {
    compoundUnaries=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-nocompoundUnaries")) {
    compoundUnaries=false;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-featureFactory")) {
    featureFactoryClass=args[i + 1];
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-averagedModels")) {
    averagedModels=Integer.valueOf(args[i + 1]);
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-cvAveragedModels")) {
    cvAveragedModels=true;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-noCVAveragedModels")) {
    cvAveragedModels=false;
    i++;
  }
 else   if (args[i].equalsIgnoreCase("-recordBinarized")) {
    recordBinarized=args[i + 1];
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-recordDebinarized")) {
    recordDebinarized=args[i + 1];
    i+=2;
  }
 else   if (args[i].equalsIgnoreCase("-trainingMethod")) {
    trainingMethod=TrainingMethod.valueOf(args[i + 1].toUpperCase());
    i+=2;
  }
  return i;
}
