{
  for (int i=0; i < depth; ++i) {
    System.out.print(" ");
  }
  if (tree.isLeaf()) {
    System.out.println(tree.label().value());
    return;
  }
  if (tree.children().length == 1) {
    System.out.println(tree.label().value() + " -> " + tree.children()[0].label().value());
    if (!tree.isPreTerminal()) {
      double[][] transitions=unaryTransitions.get(tree);
      for (int i=0; i < transitions.length; ++i) {
        for (int j=0; j < transitions[0].length; ++j) {
          for (int z=0; z < depth; ++z) {
            System.out.print(" ");
          }
          System.out.println("  " + i + ","+ j+ ": "+ transitions[i][j]+ " | "+ Math.exp(transitions[i][j]));
        }
      }
    }
  }
 else {
    System.out.println(tree.label().value() + " -> " + tree.children()[0].label().value()+ " "+ tree.children()[1].label().value());
    double[][][] transitions=binaryTransitions.get(tree);
    for (int i=0; i < transitions.length; ++i) {
      for (int j=0; j < transitions[0].length; ++j) {
        for (int k=0; k < transitions[0][0].length; ++k) {
          for (int z=0; z < depth; ++z) {
            System.out.print(" ");
          }
          System.out.println("  " + i + ","+ j+ ","+ k+ ": "+ transitions[i][j][k]+ " | "+ Math.exp(transitions[i][j][k]));
        }
      }
    }
  }
  if (tree.isPreTerminal()) {
    return;
  }
  for (  Tree child : tree.children()) {
    outputTransitions(child,depth + 1,unaryTransitions,binaryTransitions);
  }
}
