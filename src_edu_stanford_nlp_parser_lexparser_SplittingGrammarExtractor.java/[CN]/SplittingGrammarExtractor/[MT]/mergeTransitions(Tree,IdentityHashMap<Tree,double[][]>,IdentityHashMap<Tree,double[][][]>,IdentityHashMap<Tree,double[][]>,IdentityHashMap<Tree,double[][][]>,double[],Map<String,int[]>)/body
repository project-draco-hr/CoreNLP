{
  if (parent.isPreTerminal() || parent.isLeaf()) {
    return;
  }
  if (parent.children().length == 1) {
    double[][] oldTransitions=oldUnaryTransitions.get(parent);
    String parentLabel=parent.label().value();
    int[] parentCorrespondence=mergeCorrespondence.get(parentLabel);
    int parentStates=parentCorrespondence[parentCorrespondence.length - 1] + 1;
    String childLabel=parent.children()[0].label().value();
    int[] childCorrespondence=mergeCorrespondence.get(childLabel);
    int childStates=childCorrespondence[childCorrespondence.length - 1] + 1;
    double[][] newTransitions=new double[parentStates][childStates];
    for (int i=0; i < parentStates; ++i) {
      for (int j=0; j < childStates; ++j) {
        newTransitions[i][j]=Double.NEGATIVE_INFINITY;
      }
    }
    newUnaryTransitions.put(parent,newTransitions);
    for (int i=0; i < oldTransitions.length; ++i) {
      int ti=parentCorrespondence[i];
      for (int j=0; j < oldTransitions[0].length; ++j) {
        int tj=childCorrespondence[j];
        newTransitions[ti][tj]=SloppyMath.logAdd(newTransitions[ti][tj],oldTransitions[i][j] + stateWeights[i]);
      }
    }
    for (int i=0; i < parentStates; ++i) {
      double total=Double.NEGATIVE_INFINITY;
      for (int j=0; j < childStates; ++j) {
        total=SloppyMath.logAdd(total,newTransitions[i][j]);
      }
      if (Double.isInfinite(total)) {
        for (int j=0; j < childStates; ++j) {
          newTransitions[i][j]=-Math.log(childStates);
        }
      }
 else {
        for (int j=0; j < childStates; ++j) {
          newTransitions[i][j]-=total;
        }
      }
    }
    double[] childWeights=neginfDoubles(oldTransitions[0].length);
    for (int i=0; i < oldTransitions.length; ++i) {
      for (int j=0; j < oldTransitions[0].length; ++j) {
        double weight=oldTransitions[i][j];
        childWeights[j]=SloppyMath.logAdd(childWeights[j],weight + stateWeights[i]);
      }
    }
    mergeTransitions(parent.children()[0],oldUnaryTransitions,oldBinaryTransitions,newUnaryTransitions,newBinaryTransitions,childWeights,mergeCorrespondence);
  }
 else {
    double[][][] oldTransitions=oldBinaryTransitions.get(parent);
    String parentLabel=parent.label().value();
    int[] parentCorrespondence=mergeCorrespondence.get(parentLabel);
    int parentStates=parentCorrespondence[parentCorrespondence.length - 1] + 1;
    String leftLabel=parent.children()[0].label().value();
    int[] leftCorrespondence=mergeCorrespondence.get(leftLabel);
    int leftStates=leftCorrespondence[leftCorrespondence.length - 1] + 1;
    String rightLabel=parent.children()[1].label().value();
    int[] rightCorrespondence=mergeCorrespondence.get(rightLabel);
    int rightStates=rightCorrespondence[rightCorrespondence.length - 1] + 1;
    double[][][] newTransitions=new double[parentStates][leftStates][rightStates];
    for (int i=0; i < parentStates; ++i) {
      for (int j=0; j < leftStates; ++j) {
        for (int k=0; k < rightStates; ++k) {
          newTransitions[i][j][k]=Double.NEGATIVE_INFINITY;
        }
      }
    }
    newBinaryTransitions.put(parent,newTransitions);
    for (int i=0; i < oldTransitions.length; ++i) {
      int ti=parentCorrespondence[i];
      for (int j=0; j < oldTransitions[0].length; ++j) {
        int tj=leftCorrespondence[j];
        for (int k=0; k < oldTransitions[0][0].length; ++k) {
          int tk=rightCorrespondence[k];
          newTransitions[ti][tj][tk]=SloppyMath.logAdd(newTransitions[ti][tj][tk],oldTransitions[i][j][k] + stateWeights[i]);
        }
      }
    }
    for (int i=0; i < parentStates; ++i) {
      double total=Double.NEGATIVE_INFINITY;
      for (int j=0; j < leftStates; ++j) {
        for (int k=0; k < rightStates; ++k) {
          total=SloppyMath.logAdd(total,newTransitions[i][j][k]);
        }
      }
      if (Double.isInfinite(total)) {
        for (int j=0; j < leftStates; ++j) {
          for (int k=0; k < rightStates; ++k) {
            newTransitions[i][j][k]=-Math.log(leftStates * rightStates);
          }
        }
      }
 else {
        for (int j=0; j < leftStates; ++j) {
          for (int k=0; k < rightStates; ++k) {
            newTransitions[i][j][k]-=total;
          }
        }
      }
    }
    double[] leftWeights=neginfDoubles(oldTransitions[0].length);
    double[] rightWeights=neginfDoubles(oldTransitions[0][0].length);
    for (int i=0; i < oldTransitions.length; ++i) {
      for (int j=0; j < oldTransitions[0].length; ++j) {
        for (int k=0; k < oldTransitions[0][0].length; ++k) {
          double weight=oldTransitions[i][j][k];
          leftWeights[j]=SloppyMath.logAdd(leftWeights[j],weight + stateWeights[i]);
          rightWeights[k]=SloppyMath.logAdd(rightWeights[k],weight + stateWeights[i]);
        }
      }
    }
    mergeTransitions(parent.children()[0],oldUnaryTransitions,oldBinaryTransitions,newUnaryTransitions,newBinaryTransitions,leftWeights,mergeCorrespondence);
    mergeTransitions(parent.children()[1],oldUnaryTransitions,oldBinaryTransitions,newUnaryTransitions,newBinaryTransitions,rightWeights,mergeCorrespondence);
  }
}
