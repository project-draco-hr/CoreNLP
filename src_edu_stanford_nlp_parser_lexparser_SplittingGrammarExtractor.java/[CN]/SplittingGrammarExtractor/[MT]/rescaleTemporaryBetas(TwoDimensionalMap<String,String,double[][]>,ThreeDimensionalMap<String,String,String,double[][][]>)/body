{
  for (  String parent : tempUnaryBetas.firstKeySet()) {
    for (    String child : tempUnaryBetas.get(parent).keySet()) {
      double[][] betas=tempUnaryBetas.get(parent).get(child);
      int parentStates=betas.length;
      int childStates=betas[0].length;
      for (int i=0; i < parentStates; ++i) {
        double sum=Double.NEGATIVE_INFINITY;
        for (int j=0; j < childStates; ++j) {
          sum=SloppyMath.logAdd(sum,betas[i][j]);
        }
        if (Double.isInfinite(sum)) {
          for (int j=0; j < childStates; ++j) {
            betas[i][j]=-Math.log(childStates);
          }
        }
 else {
          for (int j=0; j < childStates; ++j) {
            betas[i][j]-=sum;
          }
        }
      }
    }
  }
  for (  String parent : tempBinaryBetas.firstKeySet()) {
    for (    String left : tempBinaryBetas.get(parent).firstKeySet()) {
      for (      String right : tempBinaryBetas.get(parent).get(left).keySet()) {
        double[][][] betas=tempBinaryBetas.get(parent).get(left).get(right);
        int parentStates=betas.length;
        int leftStates=betas[0].length;
        int rightStates=betas[0][0].length;
        for (int i=0; i < parentStates; ++i) {
          double sum=Double.NEGATIVE_INFINITY;
          for (int j=0; j < leftStates; ++j) {
            for (int k=0; k < rightStates; ++k) {
              sum=SloppyMath.logAdd(sum,betas[i][j][k]);
            }
          }
          if (Double.isInfinite(sum)) {
            for (int j=0; j < leftStates; ++j) {
              for (int k=0; k < rightStates; ++k) {
                betas[i][j][k]=-Math.log(leftStates * rightStates);
              }
            }
          }
 else {
            for (int j=0; j < leftStates; ++j) {
              for (int k=0; k < rightStates; ++k) {
                betas[i][j][k]-=sum;
              }
            }
          }
        }
      }
    }
  }
}
