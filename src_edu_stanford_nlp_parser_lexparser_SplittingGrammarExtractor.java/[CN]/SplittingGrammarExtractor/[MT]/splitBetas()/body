{
  TwoDimensionalMap<String,String,double[][]> tempUnaryBetas=new TwoDimensionalMap<>();
  ThreeDimensionalMap<String,String,String,double[][][]> tempBinaryBetas=new ThreeDimensionalMap<>();
  for (  String parent : unaryBetas.firstKeySet()) {
    for (    String child : unaryBetas.get(parent).keySet()) {
      double[][] betas=unaryBetas.get(parent,child);
      int parentStates=betas.length;
      int childStates=betas[0].length;
      double[][] newBetas;
      if (!startSymbols.contains(parent)) {
        newBetas=new double[parentStates * 2][childStates];
        for (int i=0; i < parentStates; ++i) {
          for (int j=0; j < childStates; ++j) {
            newBetas[i * 2][j]=betas[i][j];
            newBetas[i * 2 + 1][j]=betas[i][j];
          }
        }
        parentStates*=2;
        betas=newBetas;
      }
      if (!child.equals(Lexicon.BOUNDARY_TAG)) {
        newBetas=new double[parentStates][childStates * 2];
        for (int i=0; i < parentStates; ++i) {
          for (int j=0; j < childStates; ++j) {
            double childWeight=0.45 + random.nextDouble() * 0.1;
            newBetas[i][j * 2]=betas[i][j] + Math.log(childWeight);
            newBetas[i][j * 2 + 1]=betas[i][j] + Math.log(1.0 - childWeight);
          }
        }
        betas=newBetas;
      }
      tempUnaryBetas.put(parent,child,betas);
    }
  }
  for (  String parent : binaryBetas.firstKeySet()) {
    for (    String left : binaryBetas.get(parent).firstKeySet()) {
      for (      String right : binaryBetas.get(parent).get(left).keySet()) {
        double[][][] betas=binaryBetas.get(parent,left,right);
        int parentStates=betas.length;
        int leftStates=betas[0].length;
        int rightStates=betas[0][0].length;
        double[][][] newBetas;
        if (!startSymbols.contains(parent)) {
          newBetas=new double[parentStates * 2][leftStates][rightStates];
          for (int i=0; i < parentStates; ++i) {
            for (int j=0; j < leftStates; ++j) {
              for (int k=0; k < rightStates; ++k) {
                newBetas[i * 2][j][k]=betas[i][j][k];
                newBetas[i * 2 + 1][j][k]=betas[i][j][k];
              }
            }
          }
          parentStates*=2;
          betas=newBetas;
        }
        newBetas=new double[parentStates][leftStates * 2][rightStates];
        for (int i=0; i < parentStates; ++i) {
          for (int j=0; j < leftStates; ++j) {
            for (int k=0; k < rightStates; ++k) {
              double leftWeight=0.45 + random.nextDouble() * 0.1;
              newBetas[i][j * 2][k]=betas[i][j][k] + Math.log(leftWeight);
              newBetas[i][j * 2 + 1][k]=betas[i][j][k] + Math.log(1 - leftWeight);
            }
          }
        }
        leftStates*=2;
        betas=newBetas;
        if (!right.equals(Lexicon.BOUNDARY_TAG)) {
          newBetas=new double[parentStates][leftStates][rightStates * 2];
          for (int i=0; i < parentStates; ++i) {
            for (int j=0; j < leftStates; ++j) {
              for (int k=0; k < rightStates; ++k) {
                double rightWeight=0.45 + random.nextDouble() * 0.1;
                newBetas[i][j][k * 2]=betas[i][j][k] + Math.log(rightWeight);
                newBetas[i][j][k * 2 + 1]=betas[i][j][k] + Math.log(1 - rightWeight);
              }
            }
          }
        }
        tempBinaryBetas.put(parent,left,right,newBetas);
      }
    }
  }
  unaryBetas=tempUnaryBetas;
  binaryBetas=tempBinaryBetas;
}
