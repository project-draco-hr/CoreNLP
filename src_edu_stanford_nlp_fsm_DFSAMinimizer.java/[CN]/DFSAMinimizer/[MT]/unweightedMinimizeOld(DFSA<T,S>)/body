{
  Set<DFSAState<T,S>> states=dfsa.states();
  Map<UnorderedPair<DFSAState<T,S>,DFSAState<T,S>>,List<UnorderedPair<DFSAState<T,S>,DFSAState<T,S>>>> stateUPairToDependentUPairList=Generics.newHashMap(states.size() * states.size() / 2 + 1);
  Map<UnorderedPair<DFSAState<T,S>,DFSAState<T,S>>,Boolean> stateUPairToDistinguished=Generics.newHashMap(states.size() * states.size() / 2 + 1);
  int[] c=new int[states.size() * states.size() / 2 + 1];
  int streak=0;
  int collisions=0;
  int entries=0;
  long time=System.currentTimeMillis();
  if (debug) {
    time=System.currentTimeMillis();
    log.info("Starting on " + dfsa.dfsaID);
    log.info(" -- " + states.size() + " states.");
  }
  int numDone=0;
  for (  DFSAState<T,S> state1 : states) {
    for (    DFSAState<T,S> state2 : states) {
      UnorderedPair<DFSAState<T,S>,DFSAState<T,S>> up=new UnorderedPair<>(state1,state2);
      if (state1.equals(state2)) {
        continue;
      }
      if (stateUPairToDistinguished.containsKey(up)) {
        continue;
      }
      int bucket=(up.hashCode() & 0x7FFFFFFF) % (states.size() * states.size() / 2 + 1);
      c[bucket]++;
      entries++;
      if (c[bucket] > 1) {
        collisions++;
        streak=0;
      }
 else {
        streak++;
      }
      if (state1.isAccepting() != state2.isAccepting()) {
        stateUPairToDistinguished.put(up,Boolean.TRUE);
      }
 else {
        stateUPairToDistinguished.put(up,Boolean.FALSE);
      }
    }
    numDone++;
    if (numDone % 20 == 0) {
      log.info("\r" + numDone + "  "+ ((double)collisions / (double)entries));
    }
  }
  if (debug) {
    log.info("\nInitialized: " + (System.currentTimeMillis() - time));
    time=System.currentTimeMillis();
  }
  for (  UnorderedPair<DFSAState<T,S>,DFSAState<T,S>> up : stateUPairToDistinguished.keySet()) {
    DFSAState<T,S> state1=up.first;
    DFSAState<T,S> state2=up.second;
    if (stateUPairToDistinguished.get(up).equals(Boolean.TRUE)) {
      continue;
    }
    Set<T> inputs=Generics.newHashSet(state1.continuingInputs());
    inputs.addAll(state2.continuingInputs());
    boolean distinguishable=false;
    Set<UnorderedPair<DFSAState<T,S>,DFSAState<T,S>>> pendingUPairs=Generics.newHashSet();
    Iterator<T> inputI=inputs.iterator();
    while (inputI.hasNext() && !distinguishable) {
      T input=inputI.next();
      DFSATransition<T,S> transition1=state1.transition(input);
      DFSATransition<T,S> transition2=state2.transition(input);
      if ((transition1 == null) != (transition2 == null)) {
        distinguishable=true;
      }
      if (transition1 != null && transition2 != null) {
        DFSAState<T,S> target1=transition1.getTarget();
        DFSAState<T,S> target2=transition2.getTarget();
        UnorderedPair<DFSAState<T,S>,DFSAState<T,S>> targetUPair=new UnorderedPair<>(target1,target2);
        if (!target1.equals(target2)) {
          if (stateUPairToDistinguished.get(targetUPair).equals(Boolean.TRUE)) {
            distinguishable=true;
          }
 else {
            pendingUPairs.add(targetUPair);
          }
        }
      }
    }
    if (distinguishable) {
      List<UnorderedPair<DFSAState<T,S>,DFSAState<T,S>>> markStack=new ArrayList<>();
      markStack.add(up);
      while (!markStack.isEmpty()) {
        UnorderedPair<DFSAState<T,S>,DFSAState<T,S>> upToMark=markStack.get(markStack.size() - 1);
        markStack.remove(markStack.size() - 1);
        stateUPairToDistinguished.put(upToMark,Boolean.TRUE);
        List<UnorderedPair<DFSAState<T,S>,DFSAState<T,S>>> addList=stateUPairToDependentUPairList.get(upToMark);
        if (addList != null) {
          markStack.addAll(addList);
          stateUPairToDependentUPairList.get(upToMark).clear();
        }
      }
    }
 else {
      for (      UnorderedPair<DFSAState<T,S>,DFSAState<T,S>> pendingUPair : pendingUPairs) {
        List<UnorderedPair<DFSAState<T,S>,DFSAState<T,S>>> dependentList=stateUPairToDependentUPairList.get(pendingUPair);
        if (dependentList == null) {
          dependentList=new ArrayList<>();
          stateUPairToDependentUPairList.put(pendingUPair,dependentList);
        }
        dependentList.add(up);
      }
    }
  }
  if (debug) {
    log.info("All pairs marked: " + (System.currentTimeMillis() - time));
    time=System.currentTimeMillis();
  }
  DisjointSet<DFSAState<T,S>> stateClasses=new FastDisjointSet<>(states);
  for (  UnorderedPair<DFSAState<T,S>,DFSAState<T,S>> up : stateUPairToDistinguished.keySet()) {
    if (stateUPairToDistinguished.get(up).equals(Boolean.FALSE)) {
      DFSAState<T,S> state1=up.first;
      DFSAState<T,S> state2=up.second;
      stateClasses.union(state1,state2);
    }
  }
  Map<DFSAState<T,S>,DFSAState<T,S>> stateToRep=Generics.newHashMap();
  for (  DFSAState<T,S> state : states) {
    DFSAState<T,S> rep=stateClasses.find(state);
    stateToRep.put(state,rep);
  }
  if (debug) {
    log.info("Canonical states chosen: " + (System.currentTimeMillis() - time));
    time=System.currentTimeMillis();
  }
  for (  DFSAState<T,S> state : states) {
    if (!state.equals(stateToRep.get(state))) {
      continue;
    }
    for (    DFSATransition<T,S> transition : state.transitions()) {
      transition.target=stateClasses.find(transition.target);
    }
  }
  dfsa.initialState=stateClasses.find(dfsa.initialState);
  if (debug) {
    log.info("Done: " + (System.currentTimeMillis() - time));
  }
}
