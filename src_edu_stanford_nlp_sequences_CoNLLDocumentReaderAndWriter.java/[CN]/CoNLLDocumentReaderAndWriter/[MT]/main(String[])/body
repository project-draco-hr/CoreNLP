{
  CoNLLDocumentReaderAndWriter rw=new CoNLLDocumentReaderAndWriter();
  rw.init(new SeqClassifierFlags());
  int numDocs=0;
  int numTokens=0;
  int numEntities=0;
  String lastAnsBase="";
  Counter<String> miscCounter=new ClassicCounter<>();
  StringBuilder inProgressMisc=new StringBuilder();
  for (Iterator<List<CoreLabel>> it=rw.getIterator(IOUtils.readerFromString(args[0])); it.hasNext(); ) {
    List<CoreLabel> doc=it.next();
    numDocs++;
    for (    CoreLabel fl : doc) {
      String word=fl.word();
      if (word.equals(BOUNDARY)) {
        continue;
      }
      String ans=fl.get(CoreAnnotations.AnswerAnnotation.class);
      String ansBase;
      String ansPrefix;
      String[] bits=ans.split("-");
      if (bits.length == 1) {
        ansBase=bits[0];
        ansPrefix="";
      }
 else {
        ansBase=bits[1];
        ansPrefix=bits[0];
      }
      numTokens++;
      if (!ansBase.equals("O")) {
        if (ansBase.equals(lastAnsBase)) {
          if (ansPrefix.equals("B")) {
            numEntities++;
            inProgressMisc=maybeIncrementCounter(inProgressMisc,miscCounter);
          }
        }
 else {
          numEntities++;
          inProgressMisc=maybeIncrementCounter(inProgressMisc,miscCounter);
        }
        if (ansBase.equals("MISC")) {
          if (inProgressMisc.length() > 0) {
            inProgressMisc.append(' ');
          }
          inProgressMisc.append(word);
        }
      }
 else {
        inProgressMisc=maybeIncrementCounter(inProgressMisc,miscCounter);
      }
      lastAnsBase=ansBase;
    }
  }
  System.out.println("File " + args[0] + " has "+ numDocs+ " documents, "+ numTokens+ " (non-blank line) tokens and "+ numEntities+ " entities.");
  System.out.printf("Here are the %.0f MISC items with counts:%n",miscCounter.totalCount());
  System.out.println(Counters.toVerticalString(miscCounter,"%.0f\t%s"));
}
