{
  int[] countCounts=getCountCounts(counter);
  for (int i=1; i <= 10; i++) {
    if (countCounts[i] < 3) {
      return laplaceWithExplicitUnknown(counter,0.5,UNK);
    }
  }
  double observedMass=counter.totalCount();
  double[] adjustedFreq=new double[10];
  for (int freq=1; freq < 10; freq++) {
    adjustedFreq[freq]=(double)(freq + 1) * (double)countCounts[freq + 1] / countCounts[freq];
    observedMass-=(freq - adjustedFreq[freq]) * countCounts[freq];
  }
  Distribution<E> norm=new Distribution<E>();
  norm.counter=new ClassicCounter<E>();
  for (  E key : counter.keySet()) {
    int origFreq=(int)Math.round(counter.getCount(key));
    if (origFreq < 10) {
      norm.counter.setCount(key,adjustedFreq[origFreq] / observedMass);
    }
 else {
      norm.counter.setCount(key,origFreq / observedMass);
    }
  }
  norm.numberOfKeys=counter.size();
  norm.reservedMass=0.0;
  return norm;
}
