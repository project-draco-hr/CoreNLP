{
  Distribution<E> norm=new Distribution<E>();
  norm.counter=new ClassicCounter<E>();
  double total=counter.totalCount();
  double reservedMass=0.0;
  for (  E key : counter.keySet()) {
    double count=counter.getCount(key);
    if (count > discount) {
      double newCount=(count - discount) / total;
      norm.counter.setCount(key,newCount);
      reservedMass+=discount;
    }
 else {
      reservedMass+=count;
    }
  }
  norm.numberOfKeys=numberOfKeys;
  norm.reservedMass=reservedMass / total;
  if (verbose) {
    System.err.println("unseenKeys=" + (norm.numberOfKeys - norm.counter.size()) + " seenKeys="+ norm.counter.size()+ " reservedMass="+ norm.reservedMass);
    double zeroCountProb=(norm.reservedMass / (numberOfKeys - norm.counter.size()));
    System.err.println("0 count prob: " + zeroCountProb);
    if (discount >= 1.0) {
      System.err.println("1 count prob: " + zeroCountProb);
    }
 else {
      System.err.println("1 count prob: " + (1.0 - discount) / total);
    }
    if (discount >= 2.0) {
      System.err.println("2 count prob: " + zeroCountProb);
    }
 else {
      System.err.println("2 count prob: " + (2.0 - discount) / total);
    }
    if (discount >= 3.0) {
      System.err.println("3 count prob: " + zeroCountProb);
    }
 else {
      System.err.println("3 count prob: " + (3.0 - discount) / total);
    }
  }
  return norm;
}
