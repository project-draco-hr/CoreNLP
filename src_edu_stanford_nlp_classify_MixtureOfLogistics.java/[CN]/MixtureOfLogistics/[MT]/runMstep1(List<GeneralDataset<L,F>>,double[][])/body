{
  QNMinimizer minim;
  for (int j=0; j < numComponents; j++) {
    LogisticObjectiveFunction lof=null;
    if (foldDatasets.get(j) instanceof Dataset<?,?>) {
      Dataset<L,F> dj=(Dataset<L,F>)foldDatasets.get(j);
      lof=new LogisticObjectiveFunction(dj.numFeatureTypes(),dj.getDataArray(),dj.getLabelsArray(),double2float(foldDataWeights[j]));
    }
 else     if (foldDatasets.get(j) instanceof RVFDataset<?,?>) {
      RVFDataset<L,F> dj=(RVFDataset<L,F>)foldDatasets.get(j);
      lof=new LogisticObjectiveFunction(dj.numFeatureTypes(),dj.getDataArray(),dj.getValuesArray(),dj.getLabelsArray(),double2float(foldDataWeights[j]));
    }
    minim=new QNMinimizer(lof);
    logisticWeights[j]=minim.minimize(lof,convergence,new double[foldDatasets.get(j).numFeatureTypes()]);
  }
}
