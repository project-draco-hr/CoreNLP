{
  int cid=proto.getChainID();
  Map<IntPair,Set<CorefChain.CorefMention>> mentions=new HashMap<IntPair,Set<CorefChain.CorefMention>>();
  CorefChain.CorefMention representative=null;
  for (int i=0; i < proto.getMentionCount(); ++i) {
    CoreMapProtos.CorefChain.CorefMention mentionProto=proto.getMention(i);
    StringBuilder mentionSpan=new StringBuilder();
    List<CoreLabel> sentenceTokens=partialDocument.get(SentencesAnnotation.class).get(mentionProto.getSentenceIndex()).get(TokensAnnotation.class);
    for (int k=mentionProto.getStartIndex(); k < mentionProto.getEndIndex(); ++k) {
      mentionSpan.append(" ").append(sentenceTokens.get(k).word());
    }
    CorefChain.CorefMention mention=new CorefChain.CorefMention(Dictionaries.MentionType.valueOf(mentionProto.getMentionType()),Dictionaries.Number.valueOf(mentionProto.getNumber()),Dictionaries.Gender.valueOf(mentionProto.getGender()),Dictionaries.Animacy.valueOf(mentionProto.getAnimacy()),mentionProto.getStartIndex(),mentionProto.getEndIndex(),mentionProto.getHeadIndex(),cid,mentionProto.getMentionID(),mentionProto.getSentenceIndex(),new IntTuple(new int[]{mentionProto.getSentenceIndex(),i}),mentionSpan.substring(1));
    IntPair key=new IntPair(mentionProto.getSentenceIndex(),mentionProto.getHeadIndex());
    if (!mentions.containsKey(key)) {
      mentions.put(key,new HashSet<CorefChain.CorefMention>());
    }
    mentions.get(key).add(mention);
    if (proto.hasRepresentative() && i == proto.getRepresentative()) {
      representative=mention;
    }
  }
  return new CorefChain(cid,mentions,representative);
}
