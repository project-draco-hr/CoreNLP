{
  CoreMap sentence=new ArrayCoreMap();
  sentence.set(TokenBeginAnnotation.class,proto.getTokenOffsetBegin());
  sentence.set(TokenEndAnnotation.class,proto.getTokenOffsetEnd());
  if (proto.hasSentenceIndex()) {
    sentence.set(SentenceIndexAnnotation.class,proto.getSentenceIndex());
  }
  if (proto.hasCharacterOffsetBegin()) {
    sentence.set(CharacterOffsetBeginAnnotation.class,proto.getCharacterOffsetBegin());
  }
  if (proto.hasCharacterOffsetEnd()) {
    sentence.set(CharacterOffsetEndAnnotation.class,proto.getCharacterOffsetEnd());
  }
  if (proto.hasParseTree()) {
    sentence.set(TreeAnnotation.class,fromProto(proto.getParseTree()));
  }
  if (proto.hasBinarizedParseTree()) {
    sentence.set(BinarizedTreeAnnotation.class,fromProto(proto.getBinarizedParseTree()));
  }
  if (proto.getKBestParseTreesCount() > 0) {
    List<Tree> trees=new LinkedList<>();
    for (    CoreNLPProtos.ParseTree protoTree : proto.getKBestParseTreesList()) {
      trees.add(fromProto(protoTree));
    }
    sentence.set(KBestTreesAnnotation.class,trees);
  }
  if (proto.hasAnnotatedParseTree()) {
    sentence.set(SentimentCoreAnnotations.SentimentAnnotatedTree.class,fromProto(proto.getAnnotatedParseTree()));
  }
  if (proto.hasSentiment()) {
    sentence.set(SentimentCoreAnnotations.SentimentClass.class,proto.getSentiment());
  }
  if (proto.hasHasRelationAnnotations() && proto.getHasRelationAnnotations()) {
    List<EntityMention> entities=new ArrayList<EntityMention>();
    for (    CoreNLPProtos.Entity entity : proto.getEntityList()) {
      entities.add(fromProto(entity,sentence));
    }
    sentence.set(EntityMentionsAnnotation.class,entities);
    List<RelationMention> relations=new ArrayList<RelationMention>();
    for (    CoreNLPProtos.Relation relation : proto.getRelationList()) {
      relations.add(fromProto(relation,sentence));
    }
    sentence.set(RelationMentionsAnnotation.class,relations);
  }
  return sentence;
}
