{
  Mention returnMention=new Mention();
  if (protoMention.getMentionType() != null && !protoMention.getMentionType().equals("")) {
    returnMention.mentionType=Dictionaries.MentionType.valueOf(protoMention.getMentionType());
  }
  if (protoMention.getNumber() != null && !protoMention.getNumber().equals("")) {
    returnMention.number=Dictionaries.Number.valueOf(protoMention.getNumber());
  }
  if (protoMention.getGender() != null && !protoMention.getGender().equals("")) {
    returnMention.gender=Dictionaries.Gender.valueOf(protoMention.getGender());
  }
  if (protoMention.getAnimacy() != null && !protoMention.getAnimacy().equals("")) {
    returnMention.animacy=Dictionaries.Animacy.valueOf(protoMention.getAnimacy());
  }
  if (protoMention.getPerson() != null && !protoMention.getPerson().equals("")) {
    returnMention.person=Dictionaries.Person.valueOf(protoMention.getPerson());
  }
  if (!protoMention.getHeadString().equals("")) {
    returnMention.headString=protoMention.getHeadString();
  }
  if (!protoMention.getNerString().equals("")) {
    returnMention.nerString=protoMention.getNerString();
  }
  returnMention.startIndex=protoMention.getStartIndex();
  returnMention.endIndex=protoMention.getEndIndex();
  returnMention.headIndex=protoMention.getHeadIndex();
  returnMention.mentionID=protoMention.getMentionID();
  returnMention.originalRef=protoMention.getOriginalRef();
  returnMention.goldCorefClusterID=protoMention.getGoldCorefClusterID();
  returnMention.corefClusterID=protoMention.getCorefClusterID();
  returnMention.mentionNum=protoMention.getMentionNum();
  returnMention.sentNum=protoMention.getSentNum();
  returnMention.utter=protoMention.getUtter();
  returnMention.paragraph=protoMention.getParagraph();
  returnMention.isSubject=protoMention.getIsSubject();
  returnMention.isDirectObject=protoMention.getIsDirectObject();
  returnMention.isIndirectObject=protoMention.getIsIndirectObject();
  returnMention.isPrepositionObject=protoMention.getIsPrepositionObject();
  returnMention.hasTwin=protoMention.getHasTwin();
  returnMention.generic=protoMention.getGeneric();
  returnMention.isSingleton=protoMention.getIsSingleton();
  if (protoMention.getDependentsCount() != 0) {
    returnMention.dependents=new HashSet<>();
    returnMention.dependents.addAll(protoMention.getDependentsList());
  }
  if (protoMention.getPreprocessedTermsCount() != 0) {
    returnMention.preprocessedTerms=new ArrayList<>();
    returnMention.preprocessedTerms.addAll(protoMention.getPreprocessedTermsList());
  }
  return returnMention;
}
