{
  if (sentence instanceof CoreLabel) {
    throw new IllegalArgumentException("CoreMap is actually a CoreLabel");
  }
  CoreNLPProtos.Sentence.Builder builder=CoreNLPProtos.Sentence.newBuilder();
  keysToSerialize.remove(TextAnnotation.class);
  keysToSerialize.remove(NumerizedTokensAnnotation.class);
  builder.setTokenOffsetBegin(getAndRegister(sentence,keysToSerialize,TokenBeginAnnotation.class));
  builder.setTokenOffsetEnd(getAndRegister(sentence,keysToSerialize,TokenEndAnnotation.class));
  if (sentence.containsKey(TokensAnnotation.class)) {
    for (    CoreLabel tok : sentence.get(TokensAnnotation.class)) {
      builder.addToken(toProto(tok));
    }
    keysToSerialize.remove(TokensAnnotation.class);
  }
  if (sentence.containsKey(SentenceIndexAnnotation.class)) {
    builder.setSentenceIndex(getAndRegister(sentence,keysToSerialize,SentenceIndexAnnotation.class));
  }
  if (sentence.containsKey(CharacterOffsetBeginAnnotation.class)) {
    builder.setCharacterOffsetBegin(getAndRegister(sentence,keysToSerialize,CharacterOffsetBeginAnnotation.class));
  }
  if (sentence.containsKey(CharacterOffsetEndAnnotation.class)) {
    builder.setCharacterOffsetEnd(getAndRegister(sentence,keysToSerialize,CharacterOffsetEndAnnotation.class));
  }
  if (sentence.containsKey(TreeAnnotation.class)) {
    builder.setParseTree(toProto(getAndRegister(sentence,keysToSerialize,TreeAnnotation.class)));
  }
  if (sentence.containsKey(BinarizedTreeAnnotation.class)) {
    builder.setBinarizedParseTree(toProto(getAndRegister(sentence,keysToSerialize,BinarizedTreeAnnotation.class)));
  }
  if (sentence.containsKey(SentimentCoreAnnotations.SentimentAnnotatedTree.class)) {
    builder.setAnnotatedParseTree(toProto(getAndRegister(sentence,keysToSerialize,SentimentCoreAnnotations.SentimentAnnotatedTree.class)));
  }
  if (sentence.containsKey(SentimentCoreAnnotations.SentimentClass.class)) {
    builder.setSentiment(getAndRegister(sentence,keysToSerialize,SentimentCoreAnnotations.SentimentClass.class));
  }
  if (sentence.containsKey(BasicDependenciesAnnotation.class)) {
    builder.setBasicDependencies(toProto(getAndRegister(sentence,keysToSerialize,BasicDependenciesAnnotation.class)));
  }
  if (sentence.containsKey(CollapsedDependenciesAnnotation.class)) {
    builder.setCollapsedDependencies(toProto(getAndRegister(sentence,keysToSerialize,CollapsedDependenciesAnnotation.class)));
  }
  if (sentence.containsKey(CollapsedCCProcessedDependenciesAnnotation.class)) {
    builder.setCollapsedCCProcessedDependencies(toProto(getAndRegister(sentence,keysToSerialize,CollapsedCCProcessedDependenciesAnnotation.class)));
  }
  if (sentence.containsKey(AlternativeDependenciesAnnotation.class)) {
    builder.setAlternativeDependencies(toProto(getAndRegister(sentence,keysToSerialize,AlternativeDependenciesAnnotation.class)));
  }
  if (sentence.containsKey(TokensAnnotation.class) && getAndRegister(sentence,keysToSerialize,TokensAnnotation.class).size() > 0 && getAndRegister(sentence,keysToSerialize,TokensAnnotation.class).get(0).containsKey(ParagraphAnnotation.class)) {
    builder.setParagraph(getAndRegister(sentence,keysToSerialize,TokensAnnotation.class).get(0).get(ParagraphAnnotation.class));
  }
  if (sentence.containsKey(NumerizedTokensAnnotation.class)) {
    builder.setHasNumerizedTokensAnnotation(true);
  }
 else {
    builder.setHasNumerizedTokensAnnotation(false);
  }
  if (sentence.containsKey(EntityMentionsAnnotation.class)) {
    builder.setHasRelationAnnotations(true);
    for (    EntityMention entity : getAndRegister(sentence,keysToSerialize,EntityMentionsAnnotation.class)) {
      builder.addEntity(toProto(entity));
    }
  }
 else {
    builder.setHasRelationAnnotations(false);
  }
  if (sentence.containsKey(RelationMentionsAnnotation.class)) {
    if (!builder.getHasRelationAnnotations()) {
      throw new IllegalStateException("Registered entity mentions without relation mentions");
    }
    for (    RelationMention relation : getAndRegister(sentence,keysToSerialize,RelationMentionsAnnotation.class)) {
      builder.addRelation(toProto(relation));
    }
  }
  return builder;
}
