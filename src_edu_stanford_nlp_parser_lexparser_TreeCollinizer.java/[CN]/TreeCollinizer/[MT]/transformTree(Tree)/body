{
  if (tree == null)   return null;
  TreeFactory tf=tree.treeFactory();
  String s=tree.value();
  if (tlp.isStartSymbol(s))   return transformTree(tree.firstChild());
  if (tree.isLeaf()) {
    return tf.newLeaf(tree.label());
  }
  s=tlp.basicCategory(s);
  if (((whOption & 1) != 0) && s.startsWith("WH")) {
    s=s.substring(2);
  }
  if ((whOption & 2) != 0) {
    s=s.replaceAll("^WP","PRP");
    s=s.replaceAll("^WDT","DT");
    s=s.replaceAll("^WRB","RB");
  }
  if (((whOption & 4) != 0) && s.startsWith("WH")) {
    s=s.substring(2);
  }
  if (deletePunct && tree.isPreTerminal() && (tlp.isEvalBIgnoredPunctuationTag(s) || tlp.isPunctuationWord(tree.firstChild().value()))) {
    return null;
  }
  if (fixCollinsBaseNP && s.equals("NP")) {
    Tree[] kids=tree.children();
    if (kids.length == 1 && tlp.basicCategory(kids[0].value()).equals("NP")) {
      return transformTree(kids[0]);
    }
  }
  if (s.equals("PRT")) {
    s="ADVP";
  }
  List<Tree> children=new ArrayList<Tree>();
  for (int cNum=0, numKids=tree.numChildren(); cNum < numKids; cNum++) {
    Tree child=tree.children()[cNum];
    Tree newChild=transformTree(child);
    if (newChild != null) {
      children.add(newChild);
    }
  }
  if (children.isEmpty()) {
    return null;
  }
  Tree node=tf.newTreeNode(tree.label(),children);
  node.setValue(s);
  return node;
}
