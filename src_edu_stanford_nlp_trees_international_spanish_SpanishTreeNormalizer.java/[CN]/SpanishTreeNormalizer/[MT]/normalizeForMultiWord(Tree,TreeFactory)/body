{
  Tree[] preterminals=t.children();
  for (int i=0; i < preterminals.length; i++) {
    if (!preterminals[i].isPreTerminal())     continue;
    Tree leaf=preterminals[i].firstChild();
    String leafValue=((CoreLabel)leaf.label()).value();
    String[] words=getMultiWords(leafValue);
    if (words.length == 1)     continue;
    List<Tree> newNodes=new ArrayList<>(words.length);
    for (    String word1 : words) {
      String word=normalizeTerminal(word1);
      Tree newLeaf=tf.newLeaf(word);
      if (newLeaf.label() instanceof HasWord)       ((HasWord)newLeaf.label()).setWord(word);
      Tree newNode=tf.newTreeNode(MW_TAG,Arrays.asList(newLeaf));
      if (newNode.label() instanceof HasTag)       ((HasTag)newNode.label()).setTag(MW_TAG);
      newNodes.add(newNode);
    }
    String phraseValue=MW_PHRASE_TAG + "_" + simplifyPOSTag(preterminals[i].value());
    boolean shouldMerge=preterminals.length == 1 && mergeWithConstituentWhenPossible.contains(t.value());
    if (shouldMerge) {
      t.setChildren(newNodes);
      t.setValue(phraseValue);
    }
 else {
      Tree newHead=tf.newTreeNode(phraseValue,newNodes);
      t.setChild(i,newHead);
    }
  }
}
