{
  Treebank tb=new MemoryTreebank();
  Properties props=StringUtils.argsToProperties(args);
  String treeFileName=props.getProperty("treeFile");
  String sentFileName=props.getProperty("sentFile");
  String testGraph=props.getProperty("testGraph");
  if (testGraph == null) {
    testGraph="false";
  }
  String load=props.getProperty("load");
  String save=props.getProperty("save");
  if (load != null) {
    System.err.println("Load not implemented!");
    return;
  }
  if (sentFileName == null && treeFileName == null) {
    System.err.println("Usage: java SemanticGraph [-sentFile file|-treeFile file] [-testGraph]");
    Tree t=Tree.valueOf("(ROOT (S (NP (NP (DT An) (NN attempt)) (PP (IN on) (NP (NP (NNP Andres) (NNP Pastrana) (POS 's)) (NN life)))) (VP (VBD was) (VP (VBN carried) (PP (IN out) (S (VP (VBG using) (NP (DT a) (JJ powerful) (NN bomb))))))) (. .)))");
    tb.add(t);
  }
 else   if (treeFileName != null) {
    tb.loadPath(treeFileName);
  }
 else {
    String[] options={"-retainNPTmpSubcategories"};
    LexicalizedParser lp=LexicalizedParser.loadModel("/u/nlp/data/lexparser/englishPCFG.ser.gz",options);
    BufferedReader reader=null;
    try {
      reader=new BufferedReader(new FileReader(sentFileName));
    }
 catch (    FileNotFoundException e) {
      System.err.println("Cannot find " + sentFileName);
      System.exit(1);
    }
    try {
      System.out.println("Processing sentence file " + sentFileName);
      String line;
      while ((line=reader.readLine()) != null) {
        System.out.println("Processing sentence: " + line);
        PTBTokenizer<Word> ptb=PTBTokenizer.newPTBTokenizer(new StringReader(line));
        List<Word> words=ptb.tokenize();
        Tree parseTree=lp.parseTree(words);
        tb.add(parseTree);
      }
      reader.close();
    }
 catch (    Exception e) {
      throw new RuntimeException("Exception reading key file " + sentFileName,e);
    }
  }
  for (  Tree t : tb) {
    SemanticGraph sg=SemanticGraphFactory.makeFromTree(t,false);
    System.out.println(sg.toString());
    System.out.println(sg.toCompactString());
    if (testGraph.equals("true")) {
      SemanticGraph g1=SemanticGraphFactory.makeFromTree(t);
      System.out.println("TEST SEMANTIC GRAPH - graph ----------------------------");
      System.out.println(g1.toString());
      System.out.println("readable ----------------------------");
      System.out.println(g1.toString("readable"));
      System.out.println("List of dependencies ----------------------------");
      System.out.println(g1.toList());
      System.out.println("xml ----------------------------");
      System.out.println(g1.toString("xml"));
      System.out.println("dot ----------------------------");
      System.out.println(g1.toDotFormat());
      System.out.println("dot (simple) ----------------------------");
      System.out.println(g1.toDotFormat("Simple",IndexedWord.WORD_FORMAT));
    }
  }
  if (save != null) {
  }
}
